/*  TSO  TCPIP server                                            */     00010025
                                                                        00020009
TCPMNGR : procedure expose HEAP.                                        00030035
                                                                        00040023
port=word(arg(1),1)                                                     00050026
                                                                        00060023
backlog = 20                                                            00070009
localIP = '0.0.0.0'                                                     00080009
                                                                        00090009
call TMSG "....REQUEST to start TCP/IP Server on port:" port            00100032
                                                                        00110009
                                                                        00120009
call ServerProcess port                                                 00130013
exit                                                                    00140009
                                                                        00150009
ServerProcess : procedure expose backlog localIP  HEAP.                 00160035
 address tso                                                            00170011
 parse arg port                                                         00180011
 if port  > 65536 | port < 1                                            00190011
  then                                                                  00200011
    call doErrorExit('Incorrect port number ' port)                     00210011
                                                                        00220011
 if initializeSocket() <> 0                                             00230011
   then                                                                 00240011
    return 8                                                            00250011
 /* this will create socketId */                                        00260041
 if createSocket() <> 0                                                 00270011
   then                                                                 00280009
    return 8                                                            00290011
 if bindSocket() <> 0                                                   00300011
   then                                                                 00310011
    return 8                                                            00320011
 if listenSocket() <> 0                                                 00330011
   then                                                                 00340011
    return 8                                                            00350011
                                                                        00360011
 /* Wait for new connections and send replies  */                       00370011
 timeout    = 10                                                        00380013
 wList = ''                                                             00390011
                                                                        00400011
  do forever       /* SELECT  */                                        00410011
   sockMonList = 'Read * Write' wList 'Exception *'                     00420043
   /* it will prepare socket list sellist */                            00430039
   if selectSocket(sockMonList,timeout) <> 0                            00440011
     then                                                               00450011
       return 8                                                         00460011
                                                                        00470011
   call TMSG "----- SELECT SOCKET LIST" sellist                         00480039
   call GET_EVENT_STEM selList                                          00490020
   do i = 1 to stmsel.0           /* loop over event stem */            00500020
   parse var stmsel.i  readSock  writeSock exceptSock                   00510020
   call TMSG "SELECTED R:"readSock "W:"writeSock "E:"exceptSock         00520030
   if readSock <>  -1  | writeSock  <> -1                               00530020
    then                                                                00540011
     do                                                                 00550011
      event = 'SOCKET'                                                  00560011
      if readSock <> -1                                                 00570020
       then                                                             00580011
        do /* READ event */                                             00590019
        if readSock = socketId                                          00600019
         then                                                           00610019
          do /* client attempted to set new connection */               00620019
          if acceptSocket() <> 0                                        00630019
           then                                                         00640019
             return 8                                                   00650019
          end /* client attempted to set new connection */              00660019
         else                                                           00670019
          do /* data or event coming over existing connection */        00680019
          if exceptSock <> readSock                                     00690020
           then                                                         00700019
            do  /* data coming over existing connection */              00710019
            if receiveSocket() <> 0                                     00720019
             then                                                       00730019
              return 8                                                  00740019
            if rcvLen > 0                                               00750019
             then                                                       00760019
              do  /* client sent data */                                00770019
              call ADDSOCK readSock                                     00780019
              call APPL_RECEIVE  /* rcvData,readSock available */       00790037
              end                                                       00800019
             else                                                       00810019
              do  /* client applicaion ended without close connection */00820045
              call APPL_CLOSE /* readSock available */                  00821045
              call DELSOCK readSock                                     00822045
              if closeSocket(readSock) <> 0                             00823045
               then                                                     00824045
                 return 8                                               00825045
              end                                                       00830019
            end /* data coming over existing connection */              00840019
           else                                                         00850019
            do  /* client closed connection */                          00860045
            call APPL_CLOSE /* readSock available */                    00870036
            call DELSOCK readSock                                       00880042
            if closeSocket(readSock) <> 0                               00890019
             then                                                       00900019
               return 8                                                 00910019
            end /* event client closed connection */                    00920019
          end  /* data or event coming over existing connection */      00930019
         end /* READ event */                                           00940019
       else                                                             00950018
        do   /* WRITE event */                                          00960019
        call DELSOCK writeSock          /* avoid repeatable write */    00970042
        call APPL_SEND  /* rcvData,sendData,writeSock available */      00980038
        if sendSocket(sendData) <> 0                                    00990012
         then                                                           01000012
           return 8                                                     01010012
        end  /* WRITE event */                                          01020019
     end /* SOCKET event */                                             01030019
    else                                                                01040020
     event = 'TIME' /* idle */                                          01050020
    end /* loop over event stem */                                      01060020
  end    /* SELECT */                                                   01070011
return                                                                  01080009
                                                                        01090009
/*******************************************************/               01100009
/*    R O U T I N E S                                  */               01110009
/*******************************************************/               01120009
                                                                        01130009
initializeSocket : procedure expose HEAP.                               01140035
 parm.1 = 'INITIALIZE'                                                  01150009
 return proceedSocket()                                                 01160009
                                                                        01170009
createSocket : procedure expose socketId HEAP.                          01180035
 parm.1 = 'CREATESOCKET'                                                01190009
 parm.2 = 'AF_INET'                                                     01200009
 parm.3 = 'SOCK_STREAM'                                                 01210009
 parm.4 = 'IPPROTO_TCP'                                                 01220009
 return   proceedSocket()                                               01230009
                                                                        01240009
                                                                        01250009
bindSocket : procedure expose socketId port localIP HEAP.               01260035
 parm.1 = 'BINDSOCKET'                                                  01270009
 parm.2 = socketId                                                      01280009
 parm.3 = port                                                          01290009
 parm.4 = localIP                                                       01300009
 return proceedSocket()                                                 01310009
                                                                        01320009
                                                                        01330009
listenSocket : procedure expose socketId backlog HEAP.                  01340035
 parm.1 = 'LISTENSOCKET'                                                01350009
 parm.2 = socketId                                                      01360009
 parm.3 = backlog                                                       01370009
 return proceedSocket()                                                 01380009
                                                                        01390009
                                                                        01400009
                                                                        01410009
selectSocket : procedure expose socketId selList HEAP.                  01420035
 parm.1 = 'SELECTSOCKET'                                                01430009
 parm.2 = arg(1)                                                        01440011
 parm.3 = arg(2)                                                        01450013
 return proceedSocket()                                                 01460009
                                                                        01470009
                                                                        01480009
acceptSocket : procedure expose socketId acceptSocketId connstm. HEAP.  01490035
 parm.1 = 'ACCEPTSOCKET'                                                01500009
 parm.2 = socketId                                                      01510009
 return proceedSocket()                                                 01520009
                                                                        01530009
receiveSocket : procedure expose readSock rcvLen rcvData connstm. HEAP. 01540035
 parm.1 = 'RECEIVESOCKET'                                               01550011
 parm.2 = readSock                                                      01560011
 return proceedSocket()                                                 01570009
                                                                        01580009
sendSocket : procedure expose writeSock connstm. HEAP.                  01590035
 parm.1 = 'SENDSOCKET'                                                  01600009
 parm.2 = writeSock                                                     01610012
 parm.3 = arg(1)                                                        01620009
 return proceedSocket()                                                 01630009
                                                                        01640009
closeSocket : procedure expose HEAP.                                    01650035
 parm.1 = 'CLOSESOCKET'                                                 01660009
 parm.2 = arg(1)                                                        01670010
 return proceedSocket()                                                 01680009
                                                                        01690009
setSocketOpt : procedure expose HEAP.                                   01700035
 parm.1 = 'SETSOCKOPT'                                                  01710009
 parm.2 = arg(1)                                                        01720009
 return proceedSocket()                                                 01730009
                                                                        01740009
doErrorExit : procedure expose HEAP.                                    01750035
if arg(2) <> ''                                                         01760014
  then                                                                  01770014
   call TMSG "RC="arg(2) arg(1)                                         01780030
  else                                                                  01790014
   call TMSG arg(1)                                                     01800030
 exit 8                                                                 01810009
                                                                        01820009
proceedSocket : procedure expose socketId port selList              ,   01830013
                acceptSocketId writeSock  readSock  rcvLen rcvData  ,   01840013
                parm. connstm. HEAP.                                    01850035
 call TMSG left(parm.1,14,' ') '.......'                                01860030
 select                                                                 01870009
    when parm.1 = 'INITIALIZE'  then do                                 01880009
         call TMSG "------------- Subtask: Server"                      01890030
         parse value SOCKET('INITIALIZE',"Server")  with rc  info_msg   01900014
         if rc <> 0                                                     01910014
            then                                                        01920014
              doErrorExit(info_msg,rc)                                  01930014
         return 0                                                       01940014
         end                                                            01950009
    when parm.1 = 'CREATESOCKET'  then do                               01960009
         call TMSG "-----------Parameters:" parm.2 parm.3 parm.4        01970030
         parse value SOCKET('SOCKET',parm.2, parm.3, parm.4 )  with rc ,01980009
                                                          info_msg      01990014
         if rc <> 0                                                     02000014
            then                                                        02010014
              doErrorExit(info_msg,rc)                                  02020014
         socketId = word(info_msg,1)                                    02030014
         call TMSG "-------Created Socket:" socketId                    02040030
         return 0                                                       02050014
         end                                                            02060009
    when parm.1 = 'BINDSOCKET'  then do                                 02070009
         call TMSG "---------- Parameters:" parm.2 '2' parm.3  parm.4   02080030
         parse value SOCKET('BIND',parm.2, '2' parm.3 parm.4)  with rc ,02090014
                                                               info_msg 02100014
         if rc <> 0                                                     02110014
            then                                                        02120014
              doErrorExit(info_msg,rc)                                  02130014
         return 0                                                       02140014
         end                                                            02150009
    when parm.1 = 'SELECTSOCKET'  then do                               02160009
         call TMSG "---------- Parameters:" parm.2 "," parm.3           02170030
         parse value SOCKET('SELECT',parm.2,parm.3)  with rc info_msg   02180014
         if rc <> 0                                                     02190014
            then                                                        02200014
              doErrorExit(info_msg,rc)                                  02210014
         selList = info_msg                                             02220014
         return 0                                                       02230014
         end                                                            02240009
    when parm.1 = 'LISTENSOCKET'  then do                               02250009
         call TMSG "------ Socket,Backlog:" parm.2 parm.3               02260030
         parse value SOCKET('LISTEN',parm.2, parm.3 )  with rc info_msg 02270014
         if rc <> 0                                                     02280014
            then                                                        02290014
              doErrorExit(info_msg,rc)                                  02300014
         call TMSG "---IOCTL SET NON-BLOCK Socket:" socketId            02310030
         parse value SOCKET('IOCTL',socketId,'FIONBIO','ON') with rc  , 02320017
                                                             info_msg   02330017
         if rc <> 0                                                     02340017
            then                                                        02350017
              doErrorExit(info_msg,rc)                                  02360017
         return 0                                                       02370014
         end                                                            02380009
    when parm.1 = 'ACCEPTSOCKET'  then do                               02390009
         call TMSG "-------------- Socket:" parm.2                      02400030
         parse value SOCKET('ACCEPT',  parm.2)  with rc info_msg        02410014
         if rc <> 0                                                     02420014
            then                                                        02430014
              doErrorExit(info_msg,rc)                                  02440014
         parse var info_msg acceptSocketId . client_port client_IP      02450014
         call TMSG "-----------Accepted Socket:" acceptSocketId         02460030
         call TMSG "Client:" client_IP":"client_Port                    02470030
         connstm.acceptSocketId=client_IP":"client_Port                 02480022
         return 0                                                       02490014
         end                                                            02500009
    when parm.1 = 'RECEIVESOCKET'  then do                              02510011
         s = parm.2                                                     02520027
         parse value SOCKET('RECV', s)  with rc info_msg                02530027
         if rc <> 0                                                     02540014
            then                                                        02550014
              doErrorExit(info_msg,rc)                                  02560014
         parse var info_msg rcvLen rcvData                              02570014
         if rcvLen = 0 | rcvData = ''                                   02580029
           then                                                         02590029
             do                                                         02600029
             call TMSG "---Socket,Exception:" s ',' "NULL_DATA"         02610030
             return 0                                                   02620029
             end                                                        02630029
         if word(connstm.s,2) = ''                                      02640027
           then                                                         02650027
            do                                                          02660027
            connstm.s = connstm.s CLIENT_ENC(rcvData)                   02670027
            call TMSG "---Socket,Encryption:" s ',' word(connstm.s,2)   02680030
            end                                                         02690027
         connstm.s = connstm.s 'R'                                      02700029
         call TMSG "---Socket" s "state:"connstm.s                      02710030
         if word(connstm.s,2) = 'A'                                     02720027
          then                                                          02730027
           do                                                           02740027
           rcvData = ASCII_to_EBCDIC(rcvData)                           02750027
           call TMSG "---Socket,Operation:" s ',' "A2E"                 02760030
           end                                                          02770027
         call TMSG "---Socket,Length,Data:" s ',' rcvLen ','       ,    02780030
                                          substr(rcvData,1,12)          02790030
         return 0                                                       02800014
         end                                                            02810009
    when parm.1 = 'SENDSOCKET'  then do                                 02820009
         s = parm.2                                                     02830027
         call TMSG "---Socket,Data:" s     ','  right(parm.3,12,' ')    02840030
         connstm.s = connstm.s 'W'                                      02850029
         call TMSG "---Socket" s "state:"connstm.s                      02860030
         if word(connstm.s,2) = 'A'                                     02870027
          then                                                          02880027
           do                                                           02890027
           parm.3 = EBCDIC_to_ASCII(parm.3)                             02900027
           call TMSG "---Socket,Operation:" s ',' "E2A"                 02910030
           end                                                          02920027
                                                                        02930027
         noSentCount = length(parm.3)                                   02940017
         sentCount = 0                                                  02950012
         rc        = 0                                                  02960012
           do while (rc=0 & noSentCount>0)                              02970012
           parm.3 = substr(parm.3,sentCount+1)                          02980012
           parse value SOCKET('SEND',parm.2,parm.3) with rc info_msg    02990014
           if rc <> 0                                                   03000014
              then                                                      03010014
                doErrorExit(info_msg,rc)                                03020014
           sentCount = word(info_msg,1)                                 03030014
           noSentCount = length(parm.3) - sentCount                     03040017
           end                                                          03050012
         return 0                                                       03060014
         end                                                            03070009
    when parm.1 = 'SETSOCKOPT'  then do                                 03080009
         call TMSG "----------Socket, Opt:" parm.2 ',' 'SO_REUSEADDR'   03090030
         parse value SOCKET('SETSOCKOPT',  parm.2, 'SOL_SOCKET' ,      ,03100009
                              'SO_REUSEADDR', 'On')  with rc info_msg   03110014
         if rc <> 0                                                     03120014
            then                                                        03130014
              doErrorExit(info_msg,rc)                                  03140014
         call TMSG "----------Socket, Opt:" parm.2 ','     'SO_EBCDIC'  03150030
         parse value SOCKET('SETSOCKOPT',  parm.2, 'SOL_SOCKET' ,      ,03160009
                              'SO_EBCDIC' , 'On')  with rc  info_msg    03170014
         if rc <> 0                                                     03180014
            then                                                        03190014
              doErrorExit(info_msg,rc)                                  03200014
         return 0                                                       03210014
         end                                                            03220009
    when parm.1 = 'CLOSESOCKET'  then do                                03230009
         call TMSG "-------------- Socket:" parm.2                      03240030
         parse value SOCKET('CLOSE',  parm.2) with rc info_msg          03250014
         s = parm.2                                                     03260022
         connstm.s = ''                                                 03270022
         if rc <> 0                                                     03280014
            then                                                        03290014
              doErrorExit(info_msg,rc)                                  03300014
         return 0                                                       03310014
         end                                                            03320009
                                                                        03330009
    otherwise return -1                                                 03340009
 end                                                                    03350009
 /* Procedure to add a socket to the write socket list */               03360011
ADDSOCK: procedure expose wList HEAP.                                   03370035
 s = arg(1)                                                             03380011
 p = wordpos(s,wList)                                                   03390011
 if p=0                                                                 03400011
  then                                                                  03410011
   wList = wList s                                                      03420011
 return                                                                 03430011
                                                                        03440011
 /* Procedure to del a socket from the write socket list */             03450011
DELSOCK: procedure expose wList HEAP.                                   03460035
 s = arg(1)                                                             03470011
 p = wordpos(s,wList)                                                   03480011
 if p > 0                                                               03490011
  then                                                                  03500011
   do                                                                   03510011
    templist = ''                                                       03520011
    do i=1 to words(wList)                                              03530011
    if i <> p                                                           03540011
     then                                                               03550043
       templist = templist word(wList,i)                                03560043
    end                                                                 03570011
   wList = templist                                                     03580011
   end                                                                  03590011
return                                                                  03600011
                                                                        03610020
/* routine converts selected event list to stem STMSEL.            */   03620033
/* Each stem element will contain event list for a socket in       */   03630033
/* format : Read-socket Write-socket Exception-socket              */   03640033
/* If no specific event selected the socket number will be -1      */   03650033
/* Thus :  2 -1 2  means socket #2 got Read and Exception event    */   03660033
/*         2  3 2  is wrong combination (example)                  */   03670033
GET_EVENT_STEM : procedure expose wList stmsel. HEAP.                   03680043
parse upper arg . 'READ' rList 'WRITE' wList 'EXCEPTION' eList          03690020
k = 0                                                                   03700020
do  forever                                                             03710020
if strip(rlist) <> ''                                                   03720020
  then                                                                  03730020
   do                                                                   03740020
    r = word(rlist,1)                                                   03750020
    parse value CUT_WORD_FROM_STRING(r,rList) with r rList              03760020
    parse value CUT_WORD_FROM_STRING(r,wList) with w wList              03770020
    parse value CUT_WORD_FROM_STRING(r,eList) with e eList              03780020
    k = k+1                                                             03790020
    stmsel.k = r w e                                                    03800020
    end                                                                 03810020
  else                                                                  03820020
   leave                                                                03830020
end                                                                     03840020
do  forever                                                             03850020
if strip(wlist) <> ''                                                   03860020
  then                                                                  03870020
   do                                                                   03880020
    w = word(wlist,1)                                                   03890020
    parse value CUT_WORD_FROM_STRING(w,wList) with w wList              03900020
    parse value CUT_WORD_FROM_STRING(w,eList) with e eList              03910020
    k = k+1                                                             03920020
    stmsel.k = "-1" w e                                                 03930020
    end                                                                 03940020
  else                                                                  03950020
   leave                                                                03960020
end                                                                     03970020
do  forever                                                             03980020
if strip(elist) <> ''                                                   03990020
  then                                                                  04000020
   do                                                                   04010020
    e = word(elist,1)                                                   04020020
    parse value CUT_WORD_FROM_STRING(e,eList) with e eList              04030020
    k = k+1                                                             04040020
    stmsel.k = "-1" "-1" e                                              04050020
    end                                                                 04060020
  else                                                                  04070020
   leave                                                                04080020
end                                                                     04090020
stmsel.0 = k                                                            04100020
return                                                                  04110020
                                                                        04120020
/* routine cuts a word from string with blank delimiter       */        04130033
/* PARM : word                                                */        04140020
/*        string                                              */        04150020
/* RET  : value resulted string                               */        04160020
/* when   value  = word if it was found in string             */        04170020
/*               = -1   if it was not found in string         */        04180020
CUT_WORD_FROM_STRING:  procedure expose HEAP.                           04190035
word   = arg(1)                                                         04200020
string = arg(2)                                                         04210020
 if strip(string) = ''                                                  04220020
   then                                                                 04230020
     return -1                                                          04240020
 string = ' ' || string || ' '                                          04250020
 word_p = wordpos(word,string)                                          04260020
 if word_p > 0                                                          04270020
  then                                                                  04280020
    do                                                                  04290020
    word_idx = wordindex(string,word_p)                                 04300020
    word_len = wordlength(string,word_p)                                04310020
    string =  substr(string,1,word_idx-1)         || ,                  04320020
              substr(string,word_idx + word_len)                        04330020
    end                                                                 04340020
  else                                                                  04350020
    word = -1                                                           04360020
  return word substr(string,2,length(string)-2)                         04370020
                                                                        04380030
/********************************************/                          04390030
/* provides message interface suitable with */                          04400030
/* injector                                 */                          04410030
/********************************************/                          04420030
TMSG : procedure expose HEAP.                                           04430035
 MSG('T',arg(1))                                                        04440032
 return                                                                 04450030
