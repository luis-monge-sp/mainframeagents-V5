/* TODO LIST  :                                     */                  00010099
/*  12.03.2019                                      */                  00020099
/* LOW level :                                      */                  00030099
/* 1.heap self-initialization.                    + */                  00040099
/* 2.allow no-named lists , element and objects   + */                  00050099
/*   use HEAP #||hash as the name in this case      */                  00060099
/* 3.Add LIST functionality - INSERT, DELETE, SORT, */                  00070099
/*            etc.                                  */                  00080099
/* 4.add search by reference                      + */                  00090099
/* 5.add LIST iterator & OPEN, NEXT , PREV          */                  00100099
/* 6.add TRACE item by reference - LIST,          + */                  00110099
/*       ELEMENT, OBJECT                            */                  00120099
/* HIGH level :                                     */                  00130099
/* 1.add providers support                          */                  00140099
/* 2.add temporary LIST support for :               */                  00150099
/*  - keeping results                               */                  00160099
/*  - subsequent processsing                        */                  00170099
/* 3.add temp LIST GC by request and automatic      */                  00180099
/* 4.write provider with DB2                        */                  00190099
/* 5.Provide collecting results from temp LIST :    */                  00200099
/*  - by iteration                                  */                  00210099
/*  - by pipe "stem st.Function(parms)              */                  00220099
/* 6.Provide function of RETRIEVE STMXDATA. to a    */                  00230099
/*           stem                                   */                  00240099
/* INJECTOR :                                       */                  00250099
/*  - inject <List-name>_ methods                   */                  00260099
/*  - Consider HMSG messages of HEAP                */                  00270099
/*  - Consider <LAMBDA> functionality               */                  00280099
/*     1. Tags                                      */                  00290099
/*     2. Internal heap routine - find              */                  00300099
/*        foreach , etc                             */                  00310099
/*     3. Have API to work with hashes as well      */                  00320099
/*  Create PPT of the HEAP logic  & routines        */                  00330099
/*  04.03.2020                                      */                  00340099
/*  External APIs , without MSG requests            */                  00350099
/*  1. Get list element by name                     */                  00360099
/*  2. Query HEAP allocated                         */                  00370099
/*  3. Query HEAP readiness                         */                  00380099
/*  4. External getter/setter                       */                  00390099
/*                                                  */                  00400099
                                                                        00410099
                                                                        00420099
CLSMNGR : procedure expose HEAP. STMXDATA.                              00430099
action   = translate(NORMALIZE_NAME(arg(1)))                            00440099
clsname  = translate(NORMALIZE_NAME(arg(2)))                            00450099
objname  = translate(NORMALIZE_NAME(arg(3)))                            00460099
parm1val = translate(NORMALIZE_NAME(arg(4)))                            00470099
parm2val = translate(NORMALIZE_NAME(arg(5)))                            00480099
                                                                        00490099
/* care of #INTERNAL List - 1st external call HEAP API */               00500099
if GET_HEAP_HASH_FOR_REFERENCE("NAME_LST_#INTERNAL") = '' & ,           00510099
   objname <> "#INTERNAL"                                 & ,           00520099
   objname <> "#SERVICES"                                               00530099
  then                                                                  00540099
    /* self HEAP initializing */                                        00550099
    if HEAPINIT() <> 0                                                  00560099
      then                                                              00570099
       return 8                                                         00580099
                                                                        00590099
/* If HEAP initialization completed and external HEAP API CALL */       00600099
if GET_HEAP_HASH_FOR_REFERENCE("NAME_LST_#INTERNAL") <> '' & ,          00610099
   objname <> "#INTERNAL"                                  & ,          00620099
   objname <> "#SERVICES"                                               00630099
    then                                                                00640099
      do                                                                00650099
       if length(action) > 8                                            00660099
         then                                                           00670099
           do                                                           00680099
           call HMSG ".Length of ACTION may not be greater than 8",     00690099
                action                                                  00700099
           return 8                                                     00710099
           end                                                          00720099
       if length(clsname) > 8                                           00730099
         then                                                           00740099
           do                                                           00750099
           call HMSG ".Length of CLASS NAME may not be greater than 8", 00760099
                clsname                                                 00770099
           return 8                                                     00780099
           end                                                          00790099
       if length(objname) > 8  &  substr(objname,1,1) <> '#'            00800099
         then                                                           00810099
           do                                                           00820099
           call HMSG ".Length of OBJECT NAME may not be greater than 8",00830099
                objname                                                 00840099
           return 8                                                     00850099
           end                                                          00860099
       if  length(objname) > 0  & substr(objname,1,1) = '#'             00870099
         then                                                           00880099
           do                                                           00890099
           call HMSG ".OBJECT NAME may not start with #" ,              00900099
                objname                                                 00910099
           return 8                                                     00920099
           end                                                          00930099
       if  datatype(clsname) = 'NUM' | datatype(objname)= 'NUM'         00940099
         then                                                           00950099
           do                                                           00960099
           call HMSG ".CLASS and OBJECT may not be numeric" ,           00970099
                clsname objname                                         00980099
           return 8                                                     00990099
           end                                                          01000099
      end                                                               01010099
                                                                        01020099
/* take care of no-name objects */                                      01030099
if objname = ''                                                         01040099
  then                                                                  01050099
    objname = '#'                                                       01060099
                                                                        01070099
                                                                        01080099
RTN=GET_ROUTINE_NAME(clsname,action,objname)                            01090099
if RTN = ''                                                             01100099
    then                                                                01110099
      do                                                                01120099
      call HMSG ".Invalid request detected"                             01130099
      return 8                                                          01140099
      end                                                               01150099
                                                                        01160099
/***********************************************************/           01170099
/*    L I S T / E L E M E N T / S E R V I C E  CONTROL     */           01180099
/***********************************************************/           01190099
if clsname = "LIST"                                                     01200099
  then                                                                  01210099
     return HEAP_RTN(RTN,objname,clsname,parm1val,parm2val)             01220099
                                                                        01230099
if clsname = "MAP"                                                      01240099
  then                                                                  01250099
     do                                                                 01260099
     if  datatype(parm1val) = 'NUM'                                     01270099
       then                                                             01280099
         do                                                             01290099
         call HMSG ".KEYNAME for MAP may not be numeric" ,              01300099
              parm1val                                                  01310099
         return 8                                                       01320099
         end                                                            01330099
     return HEAP_RTN(RTN,objname,clsname,parm1val)                      01340099
     end                                                                01350099
                                                                        01360099
if clsname = "SERVICE"                                                  01370099
  then                                                                  01380099
     return HEAP_RTN(RTN,objname)                                       01390099
                                                                        01400099
if clsname = "VARIABLE"                                                 01410099
  then                                                                  01420099
     return HEAP_RTN(RTN,objname,parm1val)                              01430099
                                                                        01440099
/***********************************************************/           01450099
/*    O B J E C T       C O N T R O L S                    */           01460099
/***********************************************************/           01470099
if action = "CREATE"                                                    01480099
  then                                                                  01490099
     do                                                                 01500099
     object_reference = GET_ITEM_REFERENCE(clsname,objname)             01510099
     if objname <> '#' & CHECK_HASH(object_reference) = 1               01520099
       then                                                             01530099
         do                                                             01540099
         call HMSG ".....OBJECT" objname "already exists"               01550099
         return 8                                                       01560099
         end                                                            01570099
                                                                        01580099
                                                                        01590099
     objhash  = GET_HASH()                                              01600099
                                                                        01610099
     /* allow no named object  */                                       01620099
     if objname = '#'                                                   01630099
       then                                                             01640099
         do                                                             01650099
         objname = '#' || objhash                                       01660099
         list_reference = GET_ITEM_REFERENCE(clsname,objname)           01670099
         end                                                            01680099
                                                                        01690099
     HEAP.objhash  = objhash clsname                                    01700099
                                                                        01710099
     path_o   = objhash                                                 01720099
     interpret "HEAP."path_o"_NAME="object_reference                    01730099
     if datatype(STMXDATA.0) = "NUM"                                    01740099
      then                                                              01750099
        do                                                              01760099
         do i = 0 to STMXDATA.0                                         01770099
         interpret "HEAP."path_o"."i"="STMXDATA.I                       01780099
         end                                                            01790099
       end                                                              01800099
                                                                        01810099
                                                                        01820099
     if ADD_HASH(object_reference,objhash) <> 0                         01830099
       then                                                             01840099
          return 8                                                      01850099
                                                                        01860099
     call HMSG "...CLSFW: object hash:"objhash "added"                  01870099
     return  HEAP_RTN(RTN,objname,clsname) object_reference             01880099
     end                                                                01890099
                                                                        01900099
if action = "DESTROY"                                                   01910099
  then                                                                  01920099
     do                                                                 01930099
     object_reference = GET_ITEM_REFERENCE(clsname,objname)             01940099
     objhash = GET_HASH_BY_REFERENCE(object_reference)                  01950099
     parse value GETOBJ(objhash) with rc objname clsname                01960099
     if rc <> 0                                                         01970099
       then                                                             01980099
         do                                                             01990099
         call HMSG ".CLSFW:object hash:"objhash "not found"             02000099
         return 8                                                       02010099
         end                                                            02020099
     rc = HEAP_RTN(RTN,objname,clsname)                                 02030099
     if rc = 0                                                          02040099
       then                                                             02050099
         do                                                             02060099
         /* delete object only if physical deletion was successful */   02070099
         CALL GC objhash                                                02080099
         call HMSG "...CLSFW:object hash:"objhash "deleted"             02090099
         end                                                            02100099
     return rc object_reference                                         02110099
     end                                                                02120099
                                                                        02130099
if action = "QUERY"                                                     02140099
  then                                                                  02150099
     do                                                                 02160099
     object_reference = GET_ITEM_REFERENCE(clsname,objname)             02170099
     objhash = GET_HASH_BY_REFERENCE(object_reference)                  02180099
     parse value GETOBJ(objhash) with rc objname clsname                02190099
     if rc <> 0                                                         02200099
       then                                                             02210099
         do                                                             02220099
         call HMSG ".CLSFW:object hash:"objhash "not found"             02230099
         return 8                                                       02240099
         end                                                            02250099
     call HMSG "...CLSFW:object hash:"objhash "extracted"               02260099
     if datatype(HEAP.objhash.0) = "NUM"                                02270099
      then                                                              02280099
        do                                                              02290099
         do i = 0 to HEAP.objhash.0                                     02300099
         interpret "STMXDATA."i" = HEAP."objhash"."i                    02310099
         end                                                            02320099
       end                                                              02330099
     return  HEAP_RTN(RTN,objname,clsname) object_reference             02340099
     end                                                                02350099
                                                                        02360099
return  rc                                                              02370099
                                                                        02380099
                                                                        02390099
/**********************************************/                        02400099
/* S U B R O U T I N E S                      */                        02410099
/**********************************************/                        02420099
/*  Execute request                          **/                        02430099
/*  PARM : routine name                      **/                        02440099
/*       : objname                           **/                        02450099
/*       : clsname                           **/                        02460099
/*       : parm1val                          **/                        02470099
/*       : parm2val                          **/                        02480099
/*  RET  : 0 or 8                            **/                        02490099
/**********************************************/                        02500099
HEAP_RTN : procedure expose STMXDATA. HEAP.                             02510099
 rtn     = arg(1)                                                       02520099
 obj     = arg(2)                                                       02530099
 clsname = arg(3)                                                       02540099
 v1      = arg(4)                                                       02550099
 v2      = arg(5)                                                       02560099
                                                                        02564099
 interpret "rcode="rtn"("obj","clsname","v1","v2")"                     02570099
 if word(rcode,1) <> 0                                                  02580099
  then                                                                  02590099
    return rcode                                                        02600099
                                                                        02610099
 if obj = "#INTERNAL"  & translate(STMXDATA.NAME)="#LSTANCHOR"          02620099
   then                                                                 02630099
     return rcode                                                       02640099
                                                                        02641099
 parse var rtn cls "_" .                                                02650099
                                                                        02651099
 if cls <> "LIST" & cls <> "MAP" & cls <> "ELEMENT" & cls <> "VARIABLE" 02660099
  then                                                                  02670099
   do                                                                   02680099
   cls = "OBJECT"                                                       02690099
   parse var rtn . "_" action .                                         02700099
   rtn = cls"_"action                                                   02710099
   end                                                                  02720099
                                                                        02730099
 /* filtering those requests that already came from GC with STMXDATA */ 02740099
 if rtn = "LIST_DELETE" | rtn = "MAP_DELETE" | rtn = "OBJECT_DESTROY"   02750099
   then                                                                 02760099
     return rcode                                                       02770099
                                                                        02780099
 rc = COLLECT_STATISTICS(rtn)                                           02790099
 return rcode                                                           02800099
                                                                        02810099
/*********************************************************/             02820099
/*  Collect statistics                                  **/             02830099
/*  PARM : routine name                                 **/             02840099
/*  RET  : 0                                            **/             02850099
/*********************************************************/             02860099
/* It gains control from :                              **/             02870099
/* 1. Command processor after CREATE/ADD request OR     **/             02880099
/* 2. From GC before the HEAP object DESTROY/DELETE     **/             02890099
/*                                                      **/             02900099
/* The command ORDER is built by HPCMD , where :        **/             02910099
/* +/- mean add or free resource (lists,elements,etc.)  **/             02920099
/* L,E,M,V,O - list,element,map,variable,object         **/             02930099
/* It aslo may be 3d symbol in order meaning the super  **/             02940099
/* container of the element                             **/             02950099
/* Examples :                                           **/             02960099
/* Create list: +L                                      **/             02970099
/* Destroy map: -M                                      **/             02980099
/* Delete  map element: -EM                             **/             02990099
/* Create list with elemrnt : +L +EL   Two orders !!!   **/             03000099
/*                                                      **/             03010099
/* HPITM contains size of each type in serialized form, **/             03020099
/* i.e. how many lines needed                           **/             03030099
/*                                                      **/             03040099
/* VARs recalculated each time from scratch while other **/             03050099
/* types use increment/decrement logic.                 **/             03060099
/* VARs number initial value is -1, since when the 1st  **/             03070099
/* VAR is created , the VAR anchor is created too.      **/             03080099
/* For statistics report -1 means 0.                    **/             03090099
/*                                                      **/             03100099
/* Elements and objects are followed by STMXDATA to let **/             03110099
/* calculate the needed memory used                     **/             03120099
/*                                                      **/             03130099
/* Calculations of memory and disk space :              **/             03140099
/* TN - number of metadata lines                        **/             03150099
/* IN - number of user data lines (of STMXDATA entries) **/             03160099
/* DN - use data size                                   **/             03170099
/* TN+IN is the size of serialized HEAP                 **/             03180099
/*                                                      **/             03190099
/*********************************************************/             03200099
COLLECT_STATISTICS : procedure expose STMXDATA. HEAP.                   03210099
 rtn = arg(1)                                                           03220099
 hash_lstanchor = GET_HEAP_HASH_FOR_REFERENCE("NAME_ELM_#LSTANCHOR")    03230099
 interpret "stats = HEAP."hash_lstanchor".2"                            03240099
                                                                        03250099
 if strip(stats) = ''                                                   03260099
   then                                                                 03270099
     do                                                                 03280099
     say "Internal HEAP error 1024 in Get Statistics"                   03290099
     exit 1024                                                          03300099
     end                                                                03310099
                                                                        03320099
 /* stat primary : L 1 M 0 O 0 E 1 V 0 T 9 I 3 D 100 S 1 */             03330099
 parse var stats "L" ln "M" mn "O" on "E" en "V" vn           ,         03340099
                 "T" tn "I" in "D" dn "S" sp .                          03350099
                                                                        03360099
 HPCMD.LIST_CREATE    =  "+L"                                           03370099
 HPCMD.LIST_DESTROY   =  "-L"                                           03380099
 HPCMD.LIST_ADD       =  "+EL"                                          03390099
 HPCMD.LIST_INSERT    =  "+EL"                                          03400099
 HPCMD.LIST_DELETE    =  "-EL"                                          03410099
 HPCMD.MAP_CREATE     =  "+M"                                           03420099
 HPCMD.MAP_DESTROY    =  "-M"                                           03430099
 HPCMD.MAP_ADD        =  "+EM"                                          03440099
 HPCMD.MAP_DELETE     =  "-EM"                                          03450099
 HPCMD.ELEMENT_DELETE =  "-E"                                           03460099
 HPCMD.ELEMENT_ADD    =  "+E"                                           03470099
 HPCMD.VARIABLE_SET   =  "+V"                                           03480099
 HPCMD.VARIABLE_DEL   =  "-V"                                           03490099
 HPCMD.OBJECT_CREATE  =  "+O"                                           03500099
 HPCMD.OBJECT_DESTROY =  "-O"                                           03510099
                                                                        03520099
 /* Each element contains number of lines serializing the heap object.*/03530099
 /* HEAP.index for hash, HEAP.index for reference, HEAP.reference are */03540099
 /* considered as well                                                */03550099
                                                                        03560099
 HPITM.L              =  9                                              03570099
 HPITM.M              =  7                                              03580099
 HPITM.E              =  9                                              03590099
 HPITM.V              =  1                                              03600099
 HPITM.O              =  6                                              03610099
 t_len = 40       /* title lparm len , T and t_len together */          03620099
 d_len = 25       /* data  lparm len , I and D together */              03630099
 /* create order sequence */                                            03640099
 interpret "OS = HPCMD."rtn                                             03650099
 if substr(OS,1,5) = "HPCMD"                                            03660099
  then                                                                  03670099
    return 0                                                            03680099
 if datatype(STMXDATA.0) = "NUM" & STMXDATA.0 > 0   &     ,             03690099
    (OS = "+L" | OS = "+M")                                             03700099
    then                                                                03710099
      OS  = OS "+E"||substr(OS,2,1)                                     03720099
                                                                        03730099
 /* loop over orders */                                                 03740099
 do i = 1 to words(OS)                                                  03750099
 order = word(OS,i)                                                     03760099
 interpret "hi_size = HPITM."substr(order,2,1)   /* heap item lines # */03770099
 stat_field = substr(order,2,1) || "n"                                  03780099
 interpret "stat_sign = "substr(order,1,1) || "1"                       03790099
 /* calculations */                                                     03800099
 interpret  stat_field "=" stat_field "+" stat_sign * 1                 03810099
 if substr(order,2,1) <> "V"                                            03820099
   then                                                                 03830099
     tn = tn + stat_sign * hi_size         /* update title items */     03840099
   else                                                                 03850099
     do /* variables */                                                 03860099
     /* restore "at entrance" value of VN */                            03870099
     interpret  stat_field "=" stat_field "-" stat_sign * 1             03880099
     path = "VAR_GLOBAL"                                                03890099
     /* update VAR size */                                              03900099
     interpret "vn_new = HEAP."path".0"                                 03910099
     if vn = -1                                                         03920099
       then                                                             03930099
         tn = tn + hi_size + 2 * vn_new                                 03940099
       else                                                             03950099
         tn = tn + 2 * (vn_new - vn)                                    03960099
     vn = vn_new                                                        03970099
     end  /* variables */                                               03980099
 if substr(order,2,1) = "E" | substr(order,2,1) = "O"                   03990099
   then                                                                 04000099
     do                                                                 04010099
     parse value ESTIMATE_DATA_AMOUNT() with items data .               04020099
     in = in + stat_sign * items        /* data items */                04030099
     dn = dn + stat_sign * data                                         04040099
     end                                                                04050099
 if substr(order,3,1) = "M"                                             04060099
   then                                                                 04070099
     do                                                                 04080099
     tn = tn + stat_sign * 2                                            04090099
     end                                                                04100099
 end                                                                    04110099
                                                                        04120099
/* calculate number of traks needed to serialize HEAP */                04130099
sp_wrk = (tn * t_len + in * d_len + dn) * 1.15 / 55996 + 1              04140099
parse var sp_wrk sp "." .                                               04150099
sp = sp + 1                                                             04160099
                                                                        04170099
stats  =  "L" strip(ln) "M" strip(mn) "O" strip(on)  "E" strip(en) ,    04180099
          "V" strip(vn) "T" strip(tn) "I" strip(in)  "D" strip(dn) ,    04190099
          "S" strip(sp)                                                 04200099
/* update sttistics */                                                  04210099
interpret "HEAP."hash_lstanchor".2='"stats"'"                           04220099
                                                                        04230099
 return 0                                                               04240099
/**********************************************/                        04250099
/* returns number of data items and data size */                        04260099
/**********************************************/                        04270099
ESTIMATE_DATA_AMOUNT : procedure expose order STMXDATA.                 04280099
 if substr(order,1,1) = '+'                                             04290099
   then                                                                 04300099
    do                                                                  04310099
    data = 0                                                            04320099
    items = 0                                                           04330099
    /* data = length(STMXDATA.NAME) */                                  04340099
    /* items = 1                    */                                  04350099
    end                                                                 04360099
   else                                                                 04370099
    do                                                                  04380099
    data = 0                                                            04390099
    items = 0                                                           04400099
    end                                                                 04410099
                                                                        04420099
 if datatype(STMXDATA.0) <> "NUM"                                       04430099
   then                                                                 04440099
     do                                                                 04450099
     say "SUMRX: INTERNAL ERROR found in ESTIMATE_DATA:"order STMXDATA.004460099
     return 0 0                                                         04470099
     end                                                                04480099
                                                                        04490099
 do i = 0 to STMXDATA.0                                                 04500099
 data = data + length(STMXDATA.i)                                       04510099
 end                                                                    04520099
                                                                        04530099
 items = STMXDATA.0 + 1 + items                                         04540099
 return items data                                                      04550099
                                                                        04560099
/**********************************************/                        04570099
/* returns routine's name for request & class */                        04580099
/**********************************************/                        04590099
GET_ROUTINE_NAME : procedure expose HEAP.                               04600099
 clsname  = arg(1)                                                      04610099
 action   = arg(2)                                                      04620099
 objname  = arg(3)                                                      04630099
                                                                        04640099
 if clsname = "LIST" & (objname = "#INTERNAL" | objname = "#SERVICES")  04650099
    then                                                                04660099
      return "LIST_"action                                              04670099
                                                                        04680099
 if clsname = "LIST"                                                    04690099
    then                                                                04700099
      do                                                                04710099
      if FIND_ACTION_IN_STEM("lstrtnact",action) = 0                    04720099
       then                                                             04730099
        do                                                              04740099
        call HMSG ".LIST action" action "is invalid"                    04750099
        return ''                                                       04760099
        end                                                             04770099
       else                                                             04780099
        return TRANSLATE(clsname"_"action)                              04790099
      end                                                               04800099
                                                                        04810099
 if clsname = "MAP"                                                     04820099
    then                                                                04830099
      do                                                                04840099
      if FIND_ACTION_IN_STEM("maprtnact",action) = 0                    04850099
       then                                                             04860099
        do                                                              04870099
        call HMSG ".MAP action" action "is invalid"                     04880099
        return ''                                                       04890099
        end                                                             04900099
       else                                                             04910099
        return TRANSLATE(clsname"_"action)                              04920099
      end                                                               04930099
                                                                        04940099
 if clsname = "SERVICE"                                                 04950099
    then                                                                04960099
      do                                                                04970099
      if FIND_ACTION_IN_STEM("srvrtnact",action) = 0                    04980099
       then                                                             04990099
         do                                                             05000099
         call HMSG ".SERVICE action" action "is invalid"                05010099
         return ''                                                      05020099
         end                                                            05030099
       else                                                             05040099
         return TRANSLATE(clsname"_"action)                             05050099
      end                                                               05060099
                                                                        05070099
 if clsname = "VARIABLE"                                                05080099
    then                                                                05090099
      do                                                                05100099
      if  FIND_ACTION_IN_STEM("varrtnact",action) = 0                   05110099
       then                                                             05120099
        do                                                              05130099
        call HMSG ".VARIABLE action" action "is invalid"                05140099
        return ''                                                       05150099
        end                                                             05160099
       else                                                             05170099
         return TRANSLATE(clsname"_"action)                             05180099
      end                                                               05190099
                                                                        05200099
 if FIND_ACTION_IN_STEM("objrtnact",action) = 0                         05210099
    then                                                                05220099
      do                                                                05230099
      call HMSG ".OBJECT action" action "is invalid"                    05240099
      return ''                                                         05250099
      end                                                               05260099
     else                                                               05270099
      return TRANSLATE(clsname"_"action)                                05280099
                                                                        05290099
/**********************************************/                        05300099
/* returns index of element in stem           */                        05310099
/**********************************************/                        05320099
FIND_ACTION_IN_STEM : procedure expose HEAP.                            05330099
                                                                        05340099
hash = GET_HEAP_HASH_FOR_REFERENCE("NAME_ELM_#"translate(arg(1)))       05350099
element = arg(2)                                                        05360099
stemname = "HEAP."hash                                                  05370099
interpret "loop_bndry = "stemname".0"                                   05380099
do i = 1 to loop_bndry                                                  05390099
interpret "val = "stemname"."i                                          05400099
if element = val                                                        05410099
  then                                                                  05420099
    return i                                                            05430099
end                                                                     05440099
return 0                                                                05450099
                                                                        05460099
                                                                        05470099
/* ===========================================================  */      05480099
/* ==   V A R I A B L E    METHODS                          ==  */      05490099
/* ===========================================================  */      05500099
                                                                        05510099
/* ===========================================================  */      05520099
/* ==   V A R I A B L E    S E T T E R                      ==  */      05530099
/* ==   PARMS : variable name                               ==  */      05540099
/* ==         : variable value                              ==  */      05551099
/* ==  RETURN : 0 - OK , 8 - NOK                            ==  */      05560099
/* ===========================================================  */      05570099
VARIABLE_SET : procedure expose HEAP.                                   05580099
if HEAP.0 = 0  | symbol('HEAP.0') = "LIT"                               05590099
 then                                                                   05600099
   return 8                                                             05610099
var_name   = arg(1)                                                     05620099
var_value  = arg(2)                                                     05630099
path = "VAR_GLOBAL"                                                     05640099
var_path = path || "_" || var_name                                      05650099
if symbol('HEAP.'var_path) = "LIT"                                      05660099
  then                                                                  05670099
    do         /* the variable is not in use yet */                     05680099
    if symbol('HEAP.'path'.0') = "LIT"                                  05690099
       then                                                             05700099
         do   /* no yet variables */                                    05710099
         interpret "HEAP."path".0 = 0"                                  05720099
         end                                                            05730099
    interpret "ndx = 1 + HEAP."path".0"                                 05740099
    interpret "HEAP."path".0 =" ndx                                     05750099
    interpret "HEAP."path"."ndx "=" var_name                            05760099
    interpret "HEAP."var_path "=" ndx var_value                         05770099
    end                                                                 05780099
  else                                                                  05790099
    do         /* the variable is in use  */                            05800099
    interpret "temp = HEAP."var_path                                    05810099
    parse var temp ndx .                                                05820099
    interpret "HEAP."var_path "=" ndx var_value                         05830099
    end                                                                 05840099
return  0                                                               05850099
                                                                        05860099
/* ===========================================================  */      05870099
/* ==   V A R I A B L E    G E T T E R                      ==  */      05880099
/* ==   PARMS : variable name                               ==  */      05890099
/* ==   RET   : "0 variable_value" or 8 if not found        ==  */      05900099
/* ===========================================================  */      05910099
VARIABLE_GET : procedure expose HEAP.                                   05920099
var_name   = arg(1)                                                     05930099
                                                                        05940099
path = "VAR_GLOBAL"                                                     05950099
var_path = path || "_" || var_name                                      05960099
if HEAP.0 = 0  | symbol('HEAP.'var_path) = "LIT"                        05970099
 then                                                                   05980099
   return 8                                                             05990099
 else                                                                   06000099
   do                                                                   06010099
   interpret "val = HEAP."var_path                                      06020099
   parse var val . var_value                                            06030099
   return '0' var_value                                                 06040099
   end                                                                  06050099
                                                                        06060099
/* ===========================================================  */      06070099
/* ==   V A R I A B L E    D E L E T E                      ==  */      06080099
/* ==   PARMS : variable name                               ==  */      06090099
/* ==   RET   : 0 or 8 (variable not found)                 ==  */      06100099
/* ===========================================================  */      06110099
VARIABLE_DEL : procedure expose HEAP.                                   06120099
var_name   = arg(1)                                                     06130099
                                                                        06140099
path = "VAR_GLOBAL"                                                     06150099
var_path = path || "_" || var_name                                      06160099
if symbol('HEAP.'var_path) = "LIT"                                      06170099
 then                                                                   06180099
   return 8                                                             06190099
 else                                                                   06200099
   do                                                                   06210099
   interpret "deleted_val = HEAP."var_path                              06220099
   /* get back index of deleted value */                                06230099
   parse var deleted_val ndx .                                          06240099
                                                                        06250099
   /* delete variable reference */                                      06260099
   path_v = "HEAP."var_path                                             06270099
   drop (path_v)                                                        06280099
                                                                        06290099
   interpret "array_len = HEAP."path".0"                                06300099
   /* shrink array  */                                                  06310099
   interpret "HEAP."path".0 = " array_len - 1                           06320099
   if array_len <>  ndx                                                 06330099
     then                                                               06340099
       do  /* delete not last in array - replace it with the last */    06350099
       /* change back reference in the replacing element */             06360099
       interpret "last_el = HEAP."path"."array_len                      06370099
       parse var last_el .  last_el_value                               06380099
       interpret "HEAP."path"."ndx "= HEAP."path"."array_len            06390099
       interpret "last_ref = HEAP."path"."ndx                           06400099
       interpret "HEAP."last_ref "=" ndx last_el_value                  06410099
       end                                                              06420099
   /* delete last array element index */                                06430099
   path_l = "HEAP."path"."array_len                                     06440099
   drop (path_l)                                                        06450099
   return 0                                                             06460099
   end                                                                  06470099
                                                                        06480099
/* ===========================================================  */      06490099
/* ==   V A R I A B L E    L I S T                          ==  */      06500099
/* ==   PARMS :                                             ==  */      06510099
/* ==   RET   : STMXDATA.tem with names and values          ==  */      06520099
/* ===========================================================  */      06530099
VARIABLE_LIST : procedure expose HEAP. STMXDATA.                        06540099
 path = "VAR_GLOBAL"                                                    06550099
 interpret "var_count = HEAP."path".0"                                  06560099
 if symbol('HEAP.'path'.0') = "LIT"                                     06570099
   then                                                                 06580099
     stmxdata.0 = 0                                                     06590099
   else                                                                 06600099
     do                                                                 06610099
     interpret "loop_bndry = HEAP."path".0"                             06620099
     if loop_bndry > 0                                                  06630099
       then                                                             06640099
        do                                                              06650099
         stmxdata.0 = loop_bndry                                        06660099
         do i = 1  to loop_bndry                                        06670099
         interpret "var_ref   = HEAP."path"."i                          06680099
         interpret "var_data  = HEAP."path"_"var_ref                    06690099
         parse var var_data . var_value                                 06700099
         stmxdata.i = var_ref var_value                                 06710099
         end                                                            06720099
        end                                                             06730099
     end                                                                06740099
 return 0                                                               06750099
/* ===========================================================  */      06760099
/* ==   L I S T / E L E M E N T       METHODS               ==  */      06770099
/* ===========================================================  */      06780099
/* ===========================================================  */      06790099
/* == CREATE   : can ceate an empty list or list with element   */      06800099
/* == STMXDATA : is a normalized stem containing the element    */      06810099
/* ===========================================================  */      06820099
                                                                        06830099
/* ===========================================================  */      06840099
/* ==   C R E A T E    LIST                                 ==  */      06850099
/* ===========================================================  */      06860099
LIST_CREATE : procedure expose STMXDATA. HEAP.                          06870099
     objname  = arg(1)                                                  06880099
     clsname  = arg(2)                                                  06890099
                                                                        06900099
     list_reference = GET_ITEM_REFERENCE(clsname,objname)               06910099
     if objname <> '#' &  CHECK_HASH(list_reference) = 1                06920099
       then                                                             06930099
         do                                                             06940099
         call HMSG ".L_CREATE: LIST" objname "already exists"           06950099
         return 8                                                       06960099
         end                                                            06970099
                                                                        06980099
     objhash  = GET_HASH()                                              06990099
     /* allow no named list */                                          07000099
     if objname = '#'                                                   07010099
       then                                                             07020099
         do                                                             07030099
         objname = '#' || objhash                                       07040099
         list_reference = GET_ITEM_REFERENCE(clsname,objname)           07050099
         end                                                            07060099
                                                                        07070099
     HEAP.objhash  = objhash "LIST"                                     07080099
                                                                        07090099
     if ADD_HASH(list_reference,objhash) <> 0                           07100099
       then                                                             07110099
          return 8                                                      07120099
                                                                        07130099
     path_l   = objhash                                                 07140099
     interpret "HEAP."path_l"_NAME="list_reference                      07150099
     interpret "HEAP."path_l"_SORTED=NO"                                07160099
     interpret "HEAP."path_l"_FIRST=''"                                 07170099
     interpret "HEAP."path_l"_LAST=''"                                  07180099
     call HMSG ".....LIST" objname "created, hash" objhash              07190099
                                                                        07200099
     if datatype(STMXDATA.0) <> "NUM" | STMXDATA.0 = 0                  07210099
     then                                                               07220099
       return "0" list_reference                                        07230099
                                                                        07240099
     call HMSG ".....L_CREATE: Adding element to LIST" objname          07250099
     STMXDATA.NAME = NORMALIZE_NAME(STMXDATA.NAME)                      07260099
                                                                        07270099
                                                                        07280099
     return "0" list_reference LIST_ADD(objname,clsname)                07290099
                                                                        07300099
/* ===========================================================  */      07310099
/* == ADD,INSERT,DELETE,EXHANGE : operations on LIST        ==  */      07320099
/* == STMXDATA :is a normalized stem containing the element == */       07330099
/* ===========================================================  */      07340099
                                                                        07350099
/* ===========================================================  */      07360099
/* ==   A D D  E L E M E N T  T O   L I S T                 ==  */      07370099
/* ==   PARMS :                                             ==  */      07380099
/* ==         list name                                     ==  */      07390099
/* ==         class name                                    ==  */      07400099
/* ===========================================================  */      07410099
LIST_ADD    : procedure expose HEAP. STMXDATA.                          07420099
                                                                        07430099
 if SET_ELEMENT_TO_LIST("ADD",arg(1),arg(2)) <> 0                       07440099
   then                                                                 07450099
     return 8                                                           07460099
                                                                        07470099
 return "0" element_reference                                           07480099
                                                                        07490099
/* ===========================================================  */      07500099
/* ==  I N S E R T  E L E M E N T  T O   L I S T  A F T E R ==  */      07510099
/* ==   PARMS :                                             ==  */      07520099
/* ==         list name                                     ==  */      07530099
/* ==         class name                                    ==  */      07540099
/* ==         reference of element  "after"                 ==  */      07550099
/* ==              0 - insert before first, 1 - insert last ==  */      07560099
/* ===========================================================  */      07570099
LIST_INSERT : procedure expose HEAP. STMXDATA.                          07580099
/* it tries to replace INSERT by ADD :                  */              07590099
/* 1. when the list is empty                            */              07600099
/* 2. when it's requested to INSERT after LAST ELEMENT  */              07610099
/* 3. when it's requested to INSERT TO THE END          */              07620099
                                                                        07630099
 objname  = arg(1)                                                      07640099
 clsname  = arg(2)                                                      07650099
 eltoref  = arg(3)                                                      07660099
                                                                        07670099
 action = "INSERT"                                                      07680099
                                                                        07690099
 eltohash = GET_HEAP_HASH_FOR_REFERENCE(eltoref)                        07700099
                                                                        07710099
 if eltoref <> 0 & eltoref <> 1                                         07720099
  then                                                                  07730099
   do                                                                   07740099
   if IS_ELEMENT_VALID("INSERT",objname,clsname,eltoref) <> 1           07750099
     then                                                               07760099
       return 8                                                         07770099
                                                                        07780099
    parse value FIND_LIST(objname,clsname) with rc_find objhash    ,    07790099
                                                 list_reference         07800099
    interpret "last_el  = HEAP."objhash"_LAST"                          07810099
    if GET_INSTANCE_BY_HEADER(last_el) = eltohash                       07820099
       then                                                             07830099
        do                                                              07840099
        eltohash = 0                                                    07850099
        action = "ADD"                                                  07860099
        end                                                             07870099
   end                                                                  07880099
  else                                                                  07890099
   do                                                                   07900099
   eltohash = eltoref                                                   07910099
   if IS_LIST_EMPTY(objname,clsname) = 1                                07920099
    then                                                                07930099
      do                                                                07940099
      eltohash = 0                                                      07950099
      action = "ADD"                                                    07960099
      end                                                               07970099
   end                                                                  07980099
                                                                        07990099
                                                                        08000099
 if SET_ELEMENT_TO_LIST(action,objname,clsname,eltohash) <> 0           08010099
   then                                                                 08020099
     return 8                                                           08030099
                                                                        08040099
 return "0" element_reference                                           08050099
                                                                        08060099
/* ===========================================================  */      08070099
/* ==  D E L E T E  E L E M E N T  F R O M   L I S T        ==  */      08080099
/* ==   PARMS :                                             ==  */      08090099
/* ==         list name                                     ==  */      08100099
/* ==         class name                                    ==  */      08110099
/* ==         reference of element to delete                ==  */      08120099
/* ===========================================================  */      08130099
LIST_DELETE : procedure expose HEAP.                                    08140099
                                                                        08150099
 objname  = arg(1)                                                      08160099
 clsname  = arg(2)                                                      08170099
 elref    = arg(3)                                                      08180099
                                                                        08190099
 if IS_ELEMENT_VALID("DELETE",objname,clsname,elref) <> 1               08200099
     then                                                               08210099
       return 8                                                         08220099
                                                                        08230099
 elhash = GET_HEAP_HASH_FOR_REFERENCE(elref)                            08240099
 if REMOVE_ELEMENT_FROM_LIST(objname,clsname,elhash) <> 0               08250099
   then                                                                 08260099
     return 8                                                           08270099
                                                                        08280099
 return  0                                                              08290099
/* ============================================================= */     08300099
/* == E X C H A N G E  T W O  E L E M E N T S  I N  L I S T   == */     08310099
/* == Assumed that element #1 is closer to the head of list   == */     08320099
/* ==   PARMS :                                               == */     08330099
/* ==   when  ARG(5)=''                                       == */     08340099
/* ==         list name                                       == */     08350099
/* ==         class name                                      == */     08360099
/* ==         reference of element #1                         == */     08370099
/* ==         reference of element #2                         == */     08380099
/* ==   when  ARG(5)<>''                                      == */     08390099
/* ==         list hash                                       == */     08400099
/* ==         class name                                      == */     08410099
/* ==         hash of element #1                              == */     08420099
/* ==         hash of element #2                              == */     08430099
/* ============================================================= */     08440099
LIST_EXCHANGE : procedure expose HEAP.                                  08450099
 if arg(5) = ''                                                         08460099
  then                                                                  08470099
   do   /* call from API */                                             08480099
    call HMSG "......LIST_EXCHANGE API requested"                       08490099
    objname   = arg(1)                                                  08500099
    clsname   = arg(2)                                                  08510099
    el1ref    = arg(3)                                                  08520099
    el2ref    = arg(4)                                                  08530099
                                                                        08540099
    if el1ref  =  el2ref                                                08550099
     then                                                               08560099
      do                                                                08570099
      call HMSG "...Attempt to self exchange element ,reference="el1ref 08580099
      return 0                                                          08590099
      end                                                               08600099
                                                                        08610099
    if IS_ELEMENT_VALID("EXCH-1",objname,clsname,el1ref) <> 1           08620099
     then                                                               08630099
       return 8                                                         08640099
                                                                        08650099
    if IS_ELEMENT_VALID("EXCH-2",objname,clsname,el2ref) <> 1           08660099
     then                                                               08670099
      return 8                                                          08680099
                                                                        08690099
    parse value FIND_LIST(objname,clsname) with rc_find objhash    ,    08700099
                                                list_reference          08710099
    if rc_find <> 0                                                     08720099
     then                                                               08730099
      return 8                                                          08740099
    el1hash = GET_HEAP_HASH_FOR_REFERENCE(el1ref)                       08750099
    el2hash = GET_HEAP_HASH_FOR_REFERENCE(el2ref)                       08760099
   end   /* call from API */                                            08770099
  else                                                                  08780099
   do   /* internal call */                                             08790099
    call HMSG "......LIST_EXCHANGE INTERNAL requested for hashes"   ,   08800099
                              arg(3) arg(4)                             08810099
    objhash   = arg(1)                                                  08820099
    clsname   = arg(2)                                                  08830099
    el1hash   = arg(3)                                                  08840099
    el2hash   = arg(4)                                                  08850099
   end  /* internal call */                                             08860099
                                                                        08870099
 path_l  = objhash                                                      08880099
                                                                        08890099
 exch_el_neighbors = EXCHANGED_ELEMENTS_NEIGHBORS(el1hash,el2hash)      08900099
 /* not neighbors or 1st element is closer to head of list */           08910099
 if exch_el_neighbors = 1  | exch_el_neighbors = 0                      08920099
   then                                                                 08930099
     do                                                                 08940099
     left_hash   = el1hash                                              08950099
     right_hash  = el2hash                                              08960099
     end                                                                08970099
   else                                                                 08980099
     do                                                                 08990099
     left_hash   = el2hash                                              09000099
     right_hash  = el1hash                                              09010099
     end                                                                09020099
                                                                        09030099
 interpret "left_prev   = HEAP."left_hash"_PREV"                        09040099
 if left_prev   = ''                                                    09050099
  then                                                                  09060099
    left_prev_next_path   = "HEAP."path_l"_FIRST"                       09070099
  else                                                                  09080099
    do                                                                  09090099
    interpret "left_prev_header = HEAP."left_hash"_PREV"                09100099
    left_prev_hash   = GET_INSTANCE_BY_HEADER(left_prev_header)         09110099
    left_prev_next_path   = "HEAP."left_prev_hash"_NEXT"                09120099
    end                                                                 09130099
 interpret "left_next   = HEAP."left_hash"_NEXT"                        09140099
 if left_next   = ''                                                    09150099
  then                                                                  09160099
    left_next_prev_path   = "HEAP."path_l"_LAST"                        09170099
  else                                                                  09180099
    do                                                                  09190099
    interpret "left_next_header = HEAP."left_hash"_NEXT"                09200099
    left_next_hash   = GET_INSTANCE_BY_HEADER(left_next_header)         09210099
    left_next_prev_path   = "HEAP."left_next_hash"_PREV"                09220099
    end                                                                 09230099
                                                                        09240099
 interpret "right_prev = HEAP."right_hash"_PREV"                        09250099
 if right_prev = ''                                                     09260099
  then                                                                  09270099
    right_prev_next_path = "HEAP."path_l"_FIRST"                        09280099
  else                                                                  09290099
    do                                                                  09300099
    interpret "right_prev_header = HEAP."right_hash"_PREV"              09310099
    right_prev_hash = GET_INSTANCE_BY_HEADER(right_prev_header)         09320099
    right_prev_next_path = "HEAP."right_prev_hash"_NEXT"                09330099
    end                                                                 09340099
 interpret "right_next = HEAP."right_hash"_NEXT"                        09350099
 if right_next = ''                                                     09360099
  then                                                                  09370099
    right_next_prev_path = "HEAP."path_l"_LAST"                         09380099
  else                                                                  09390099
    do                                                                  09400099
    interpret "right_next_header = HEAP."right_hash"_NEXT"              09410099
    right_next_hash = GET_INSTANCE_BY_HEADER(right_next_header)         09420099
    right_next_prev_path = "HEAP."right_next_hash"_PREV"                09430099
    end                                                                 09440099
                                                                        09450099
 interpret "temp_left_prev_path = HEAP."left_hash"_PREV"                09460099
 interpret "temp_left_next_path = HEAP."left_hash"_NEXT"                09470099
 if exch_el_neighbors = 0                                               09480099
  then                                                                  09490099
    do                                                                  09500099
    /*  set links between exchange  elements */                         09510099
    interpret "HEAP."left_hash"_PREV = HEAP."right_hash"_PREV"          09520099
    interpret "HEAP."left_hash"_NEXT = HEAP."right_hash"_NEXT"          09530099
    interpret "HEAP."right_hash"_PREV = temp_left_prev_path"            09540099
    interpret "HEAP."right_hash"_NEXT = temp_left_next_path"            09550099
    /*  set links of exchanges elements to-from the list */             09560099
    interpret  left_prev_next_path    "= HEAP."right_hash               09570099
    interpret  left_next_prev_path    "= HEAP."right_hash               09580099
    interpret  right_prev_next_path   "= HEAP."left_hash                09590099
    interpret  right_next_prev_path   "= HEAP."left_hash                09600099
    end                                                                 09610099
  else                                                                  09620099
    do                                                                  09630099
    /*  set links between exchange  elements */                         09640099
    interpret "HEAP."left_hash"_PREV = HEAP."right_hash                 09650099
    interpret "HEAP."left_hash"_NEXT = HEAP."right_hash"_NEXT"          09660099
    interpret "HEAP."right_hash"_PREV = temp_left_prev_path"            09670099
    interpret "HEAP."right_hash"_NEXT = HEAP."left_hash                 09680099
    /*  set links of exchanges elements to-from the list */             09690099
    interpret  left_prev_next_path    "= HEAP."right_hash               09700099
    interpret  right_next_prev_path   "= HEAP."left_hash                09710099
    end                                                                 09720099
                                                                        09730099
 return  0                                                              09740099
                                                                       c09750099
/* ===========================================================  */      09760099
/* == S O R T  L I S T                                      ==  */      09770099
/* ==   PARMS :                                             ==  */      09780099
/* ==         list name                                     ==  */      09790099
/* ==         class name                                    ==  */      09800099
/* ===========================================================  */      09810099
LIST_SORT  : procedure expose HEAP.                                     09820099
 objname   = arg(1)                                                     09830099
 clsname   = arg(2)                                                     09840099
 parse value FIND_LIST(objname,clsname) with rc_find objhash    ,       09850099
                                             list_reference             09860099
 if rc_find <> 0                                                        09870099
   then                                                                 09880099
     return 8                                                           09890099
                                                                        09900099
 first_el_hash   = LIST_FIRST_ELEMENT(objhash)                          09910099
 last_el_hash    = LIST_LAST_ELEMENT(objhash)                           09920099
 if first_el_hash   = last_el_hash                                      09930099
    then                                                                09940099
      return 0                                                          09950099
                                                                        09960099
 call HMSG "....=== SORT list" objname "started"                        09970099
 main_loop_last_el = LIST_LAST_ELEMENT(objhash)                         09980099
 do forever    /* main */                                               09990099
 sub_loop_curr_el  = LIST_FIRST_ELEMENT(objhash)                        10000099
 sub_loop_next_el  = LIST_NEXT_ELEMENT(sub_loop_curr_el)                10010099
 call HMSG "......:ML_LAST"                                   ,         10020099
              GET_REFERENCE_BY_HEADER(HEAP.main_loop_last_el) ,         10030099
              "hash" main_loop_last_el                                  10040099
  do forever   /* sub */                                                10050099
  call HMSG "......-SL_CURR"                                           ,10060099
              GET_REFERENCE_BY_HEADER(HEAP.sub_loop_curr_el)           ,10070099
              "hash" sub_loop_curr_el                                   10080099
  call HMSG "......-SL_NEXT"                                           ,10090099
              GET_REFERENCE_BY_HEADER(HEAP.sub_loop_next_el)           ,10100099
              "hash" sub_loop_next_el                                   10110099
  compare_result=LIST_COMPARE(objname,sub_loop_curr_el,sub_loop_next_el)10120099
  if compare_result = 1                                                 10130099
    then                                                                10140099
      do                                                                10150099
      /* standard LIST EXCHANGE API with valisity check               */10160099
      /* if LIST_EXCHANGE(objname, clsname  ,                       , */10170099
      /*        GET_REFERENCE_BY_HEADER(HEAP.sub_loop_curr_el),     , */10180099
      /*        GET_REFERENCE_BY_HEADER(HEAP.sub_loop_next_el) ) <> 0 */10190099
                                                                        10200099
      /* fast exchange with no validity check.This is internal call   */10210099
      if LIST_EXCHANGE(objhash,clsname,                                ,10220099
                        sub_loop_curr_el,sub_loop_next_el,'.') <> 0     10230099
        then                                                            10240099
          return 8                                                      10250099
      /* scope shrunk implicitly when exchanging !!!               */   10260099
      if LIST_ELEMENTS_EQUAL(LIST_PREV_ELEMENT(sub_loop_curr_el),   ,   10270099
                         main_loop_last_el) = 1                         10280099
         then                                                           10290099
          leave                                                         10300099
      end                                                               10310099
    else                                                                10320099
     if compare_result = 0                                              10330099
      then                                                              10340099
        do                                                              10350099
        sub_loop_curr_el = sub_loop_next_el                             10360099
        if LIST_ELEMENTS_EQUAL(sub_loop_curr_el,                      , 10370099
                           main_loop_last_el) = 1                       10380099
           then                                                         10390099
            do                                                          10400099
            /* shrink scope explicitly                            */    10410099
            main_loop_last_el = LIST_PREV_ELEMENT(main_loop_last_el)    10420099
            leave                                                       10430099
            end                                                         10440099
        end                                                             10450099
      else                                                              10460099
        return 8                                                        10470099
                                                                        10480099
  sub_loop_next_el= LIST_NEXT_ELEMENT(sub_loop_curr_el)                 10490099
  call HMSG "......+SL_CURR"                                           ,10500099
            GET_REFERENCE_BY_HEADER(HEAP.sub_loop_curr_el)             ,10510099
            "hash" sub_loop_curr_el                                     10520099
  call HMSG "......+SL_NEXT"                                           ,10530099
            GET_REFERENCE_BY_HEADER(HEAP.sub_loop_next_el)             ,10540099
            "hash" sub_loop_next_el                                     10550099
  call HMSG "......+ML_LAST"                                           ,10560099
            GET_REFERENCE_BY_HEADER(HEAP.main_loop_last_el)            ,10570099
            "hash" main_loop_last_el                                    10580099
  end           /* sub */                                               10590099
 if LIST_ELEMENTS_EQUAL(main_loop_last_el,             ,                10600099
                        LIST_FIRST_ELEMENT(objhash)) = 1                10610099
   then                                                                 10620099
     leave                                                              10630099
 end            /* main */                                              10640099
 call HMSG "....=== SORT list" objname "completed"                      10650099
return 0                                                                10660099
                                                                        10670099
/* ===========================================================  */      10680099
/* == E X C H A N G E D  E L E M E N T S  N E I G H B O R S ==  */      10690099
/* ==   PARMS :                                             ==  */      10700099
/* ==         first element hash                            ==  */      10710099
/* ==         second element hash                           ==  */      10720099
/* ==  RETURNc :                                            ==  */      10730099
/* ==         0  -  not neighbors                           ==  */      10740099
/* ==         1  -  1st element is closer to the list head  ==  */      10750099
/* ==        -1  -  2nd element is closer to the list head  ==  */      10760099
/* ===========================================================  */      10770099
EXCHANGED_ELEMENTS_NEIGHBORS : procedure expose HEAP.                   10780099
 el1hash =  arg(1)                                                      10790099
 el2hash =  arg(2)                                                      10800099
 interpret "first_next_header = HEAP."el1hash"_NEXT"                    10810099
 interpret "first_prev_header = HEAP."el1hash"_PREV"                    10820099
 if GET_INSTANCE_BY_HEADER(first_next_header) = el2hash                 10830099
   then                                                                 10840099
     return 1                                                           10850099
 if GET_INSTANCE_BY_HEADER(first_prev_header) = el2hash                 10860099
   then                                                                 10870099
     return -1                                                          10880099
 return 0                                                               10890099
                                                                        10900099
/* ===========================================================  */      10910099
/* ==  S E T  E L E M E N T  T O   L I S T                  ==  */      10920099
/* ===========================================================  */      10930099
SET_ELEMENT_TO_LIST: procedure expose HEAP. STMXDATA. element_reference 10940099
                                                                        10950099
 action    = arg(1)                                                     10960099
 objname   = arg(2)                                                     10970099
 clsname   = arg(3)                                                     10980099
 eltohash  = arg(4)                                                     10990099
                                                                        11000099
                                                                        11010099
 parse value FIND_LIST(objname,clsname) with rc_find objhash    ,       11020099
                                             list_reference             11030099
 parse value PREPARE_ELEMENT() with rc_prep element_reference elhash .  11040099
 if rc_find <> 0 | rc_prep <> 0                                         11050099
   then                                                                 11060099
     return 8                                                           11070099
                                                                        11080099
 path_l    = objhash                                                    11090099
 path_e    = elhash                                                     11100099
 path_elto = eltohash                                                   11110099
                                                                        11120099
 HEAP.elhash = elhash "ELEMENT"                                         11130099
                                                                        11140099
 /* set element reference                       */                      11150099
 interpret "HEAP."path_e"_NAME="element_reference                       11160099
 if ADD_HASH(element_reference,elhash) <> 0                             11170099
   then                                                                 11180099
      return 8                                                          11190099
                                                                        11200099
 /* set linked list name to the element */                              11210099
 interpret "HEAP."path_e"_SUPER="list_reference                         11220099
                                                                        11230099
 if action = "INSERT"                                                   11240099
   then                                                                 11250099
     do                                                                 11260099
     if path_elto = 0                                                   11270099
       then                                                             11280099
         do   /*  will be first in the list */                          11290099
         prev_next_path   = "HEAP."path_l"_FIRST"                       11300099
         interpret "next_header = "prev_next_path                       11310099
         next_hash  = GET_INSTANCE_BY_HEADER(next_header)               11320099
         next_prev_path   = "HEAP."next_hash"_PREV"                     11330099
         prev_hash  = ''                                                11340099
         end                                                            11350099
       else                                                             11360099
         do   /*  will have 2 neighbors     */                          11370099
         prev_next_path   = "HEAP."path_elto"_NEXT"                     11380099
         interpret "next_header = "prev_next_path                       11390099
         next_hash  = GET_INSTANCE_BY_HEADER(next_header)               11400099
         next_prev_path   = "HEAP."next_hash"_PREV"                     11410099
         interpret "prev_hash  = HEAP."path_elto                        11420099
         end                                                            11430099
                                                                        11440099
     interpret prev_next_path "= HEAP."path_e                           11450099
     interpret next_prev_path "= HEAP."path_e                           11460099
     interpret "HEAP."path_e"_NEXT = HEAP."next_hash                    11470099
     interpret "HEAP."path_e"_PREV = "prev_hash                         11480099
     end                                                                11490099
   else                                                                 11500099
     do /* ADD */                                                       11510099
     /* set LIST element NEXT and PREV              */                  11520099
     interpret "HEAP."path_e"_NEXT=''"                                  11530099
     interpret "HEAP."path_e"_PREV=HEAP."path_l"_LAST"                  11540099
     /* set NEXT in PREV                            */                  11550099
     interpret "prev = HEAP."path_e"_PREV"                              11560099
     if prev <> ''                                                      11570099
       then                                                             11580099
         do                                                             11590099
         prev  = "HEAP." || GET_INSTANCE_BY_HEADER(prev)                11600099
         prev_next = prev"_NEXT"                                        11610099
         interpret prev_next"=HEAP."path_e                              11620099
         end                                                            11630099
     /* set LIST FIRST and LAST */                                      11640099
     interpret "first_ptr = HEAP."path_l"_FIRST"                        11650099
     if  first_ptr = ''                                                 11660099
      then                                                              11670099
          interpret "HEAP."path_l"_FIRST=HEAP."path_e                   11680099
     interpret "HEAP."path_l"_LAST=HEAP."path_e                         11690099
     end                                                                11700099
                                                                        11710099
 /* put data in the element */                                          11720099
 do i  = 0 to  STMXDATA.0                                               11730099
 interpret "HEAP."path_e"."i"='"STMXDATA.i"'"                           11740099
 end                                                                    11750099
                                                                        11760099
 call HMSG "....ELEMEMT" element_reference  action"ED to LIST" ,        11770099
                 list_reference "hash" objhash                          11780099
                                                                        11790099
                                                                        11800099
 return 0                                                               11810099
/* ===========================================================  */      11820099
/* ==  R E M O V E  E L E M E N T  F R O M   L I S T        ==  */      11830099
/* ===========================================================  */      11840099
REMOVE_ELEMENT_FROM_LIST: procedure expose HEAP.                        11850099
                                                                        11860099
 objname   = arg(1)                                                     11870099
 clsname   = arg(2)                                                     11880099
 elhash    = arg(3)                                                     11890099
                                                                        11900099
                                                                        11910099
 element_reference = GET_REFERENCE_BY_HEADER(HEAP.elhash)               11920099
 parse value FIND_LIST(objname,clsname) with rc_find objhash    ,       11930099
                                             list_reference             11940099
 if rc_find <> 0                                                        11950099
   then                                                                 11960099
     return 8                                                           11970099
                                                                        11980099
 path_l    = objhash                                                    11990099
 path_e    = elhash                                                     12000099
                                                                        12010099
 interpret "prev_header = HEAP."path_e"_PREV"                           12020099
 prev_hash = GET_INSTANCE_BY_HEADER(prev_header)                        12030099
 if prev_hash = ''                                                      12040099
   then                                                                 12050099
     do                                                                 12060099
     prev_next_path = "HEAP."path_l"_FIRST"                             12070099
     prev_path      = ''                                                12080099
     end                                                                12090099
   else                                                                 12100099
     do                                                                 12110099
     prev_next_path = "HEAP."prev_hash"_NEXT"                           12120099
     prev_path      = "HEAP."prev_hash                                  12130099
     end                                                                12140099
 interpret "next_header = HEAP."path_e"_NEXT"                           12150099
 next_hash = GET_INSTANCE_BY_HEADER(next_header)                        12160099
 if next_hash = ''                                                      12170099
   then                                                                 12180099
     do                                                                 12190099
     next_prev_path = "HEAP."path_l"_LAST"                              12200099
     next_path      = ''                                                12210099
     end                                                                12220099
   else                                                                 12230099
     do                                                                 12240099
     next_prev_path = "HEAP."next_hash"_PREV"                           12250099
     next_path      = "HEAP."next_hash                                  12260099
     end                                                                12270099
                                                                        12280099
                                                                        12290099
 interpret prev_next_path "=" next_path                                 12300099
 interpret next_prev_path "=" prev_path                                 12310099
                                                                        12320099
 call HMSG "....ELEMEMT" element_reference  "removed from LIST" ,       12330099
                 list_reference "hash" objhash                          12340099
    call GC elhash                                                      12350099
                                                                        12360099
 return 0                                                               12370099
/* ===========================================================  */      12380099
/* ==   F I N D    L I S T                                  ==  */      12390099
/* ===========================================================  */      12400099
FIND_LIST : procedure expose HEAP.                                      12410099
  objname  = arg(1)                                                     12420099
  clsname  = arg(2)                                                     12430099
  list_reference = GET_ITEM_REFERENCE(clsname,objname)                  12440099
  objhash = GET_HASH_BY_REFERENCE(list_reference)                       12450099
  if CHECK_HASH(objhash) = 0                                            12460099
  then                                                                  12470099
    do                                                                  12480099
    call HMSG ".L_CHECK: LIST " objname "is not found"                  12490099
    return 8                                                            12500099
    end                                                                 12510099
                                                                        12520099
  if translate(word(HEAP.objhash,2)) <> "LIST"                          12530099
  then                                                                  12540099
    do                                                                  12550099
    call HMSG ".L_CHECK: Hash" objhash "is not of a LIST instance"      12560099
    return 8                                                            12570099
    end                                                                 12580099
 return 0 objhash list_reference                                        12590099
                                                                        12600099
/* ===========================================================  */      12610099
/* ==   O P E N    L I S T                                  ==  */      12620099
/* ==  PARMS : list name                                    ==  */      12630099
/* ==        : class name                                   ==  */      12640099
/* ==        : F(orward) or B(ackward)                      ==  */      12650099
/* ==  RET   : "0 listhash" or 8                            ==  */      12660099
/* ===========================================================  */      12670099
LIST_OPEN : procedure expose HEAP. STMXDATA.                            12680099
 parse value  FIND_LIST(arg(1),"LIST") with  rc objhash .               12690099
 if rc = 0                                                              12700099
   then                                                                 12710099
     do                                                                 12720099
     if substr(arg(3),1,1) = "F"                                        12730099
      then                                                              12740099
       do                                                               12750099
        elhash = LIST_FIRST_ELEMENT(objhash)                            12760099
        call GET_LIST_ELEMENT_DATA(elhash)                              12770099
        return 0 elhash                                                 12780099
       end                                                              12790099
      else                                                              12800099
       do                                                               12810099
        elhash = LIST_LAST_ELEMENT(objhash)                             12820099
        call GET_LIST_ELEMENT_DATA(elhash)                              12830099
        return 0 elhash                                                 12840099
       end                                                              12850099
     end                                                                12860099
   else                                                                 12870099
     return 8                                                           12880099
                                                                        12890099
/* ===========================================================  */      12900099
/* ==   G E T   N E X T   I N   L I S T                     ==  */      12910099
/* ==  PARMS : list name                                    ==  */      12920099
/* ==        : class name                                   ==  */      12930099
/* ==        : hash of current eleemnt of list              ==  */      12940099
/* ==  RET   : "0 element_hash" or 8                        ==  */      12950099
/* ===========================================================  */      12960099
LIST_NEXT : procedure expose HEAP. STMXDATA.                            12970099
 lname  = arg(1)                                                        12980099
 elhash = arg(3)                                                        12990099
 if IS_ELEMENT_VALID("GETNEXT",lname,"LIST",                      ,     13000099
                     GET_REFERENCE_BY_HEADER(HEAP.elhash))  <> 1        13010099
    then                                                                13020099
      return 8                                                          13030099
 elnext  = LIST_NEXT_ELEMENT(elhash)                                    13040099
 call GET_LIST_ELEMENT_DATA(elnext)                                     13050099
 return 0 elnext                                                        13060099
                                                                        13070099
/* ===========================================================  */      13080099
/* ==   G E T   P R E V   I N   L I S T                     ==  */      13090099
/* ==  PARMS : list name                                    ==  */      13100099
/* ==        : class name                                   ==  */      13110099
/* ==        : hash of current eleemnt of list              ==  */      13120099
/* ==  RET   : "0 element_hash" or 8                        ==  */      13130099
/* ===========================================================  */      13140099
LIST_PREV : procedure expose HEAP. STMXDATA.                            13150099
 lname  = arg(1)                                                        13160099
 elhash = arg(3)                                                        13170099
 if IS_ELEMENT_VALID("GETPREV",lname,"LIST",                      ,     13180099
                     GET_REFERENCE_BY_HEADER(HEAP.elhash))  <> 1        13190099
    then                                                                13200099
      return 8                                                          13210099
 elprev  = LIST_PREV_ELEMENT(elhash)                                    13220099
 call GET_LIST_ELEMENT_DATA(elprev)                                     13230099
 return 0 elprev                                                        13240099
                                                                        13250099
/* ===========================================================  */      13260099
/* ==  G E T   L I S T   E L E M E N T  D A T A             ==  */      13270099
/* ==  PARMS : element hash                                 ==  */      13280099
/* ===========================================================  */      13290099
 GET_LIST_ELEMENT_DATA : procedure expose HEAP. STMXDATA.               13300099
 elhash = arg(1)                                                        13310099
 parse value GET_REFERENCE_BY_HEADER(HEAP.elhash)  with  ,              13320099
             "NAME_ELM_" stmxdata.NAME                                  13330099
 stmxdata.0 = 0                                                         13340099
 if datatype(HEAP.elhash.0) = "NUM"                                     13350099
  then                                                                  13360099
    do                                                                  13370099
     do i = 0 to HEAP.elhash.0                                          13380099
     interpret "STMXDATA."i" = HEAP."elhash"."i                         13390099
     end                                                                13400099
   end                                                                  13410099
 return                                                                 13420099
                                                                        13430099
/* ===========================================================  */      13440099
/* ==   C H E C K   L I S T  E M P T Y                      ==  */      13450099
/* ===========================================================  */      13460099
IS_LIST_EMPTY : procedure expose HEAP.                                  13470099
  objname  = arg(1)                                                     13480099
  clsname  = arg(2)                                                     13490099
  list_reference = GET_ITEM_REFERENCE(clsname,objname)                  13500099
  objhash = GET_HASH_BY_REFERENCE(list_reference)                       13510099
  interpret "first = HEAP."objhash"_FIRST"                              13520099
  if first = ''                                                         13530099
    then                                                                13540099
      return 1                                                          13550099
    else                                                                13560099
      return 0                                                          13570099
                                                                        13580099
/* ===========================================================  */      13590099
/* ==  D E S T R O Y  L I S T                               ==  */      13600099
/* ==   PARMS :                                             ==  */      13610099
/* ==         list name                                     ==  */      13620099
/* ==         class name                                    ==  */      13630099
/* ===========================================================  */      13640099
LIST_DESTROY: procedure expose HEAP. STMXDATA.                          13650099
                                                                        13660099
 objname  = arg(1)                                                      13670099
 clsname  = arg(2)                                                      13680099
                                                                        13690099
 parse value FIND_LIST(objname,clsname) with rc_find objhash    ,       13700099
                                             list_reference             13710099
 if rc_find <> 0                                                        13720099
   then                                                                 13730099
     return 8                                                           13740099
                                                                        13750099
 call GC objhash                                                        13760099
 return 0                                                               13770099
                                                                        13780099
/********************************************************/              13790099
/*  L I S T  U T I L I T I E S                          */              13800099
/********************************************************/              13810099
LIST_FIRST_ELEMENT : procedure expose HEAP.                             13820099
 interpret "first_el_header = HEAP."arg(1)"_FIRST"                      13830099
 return GET_INSTANCE_BY_HEADER(first_el_header)                         13840099
                                                                        13850099
LIST_LAST_ELEMENT : procedure expose HEAP.                              13860099
 interpret "last_el_header = HEAP."arg(1)"_LAST"                        13870099
 return GET_INSTANCE_BY_HEADER(last_el_header)                          13880099
                                                                        13890099
LIST_NEXT_ELEMENT: procedure expose HEAP.                               13900099
  elhash  = arg(1)                                                      13910099
  interpret "next_el_header = HEAP."elhash"_NEXT"                       13920099
  return GET_INSTANCE_BY_HEADER(next_el_header)                         13930099
                                                                        13940099
LIST_PREV_ELEMENT : procedure expose HEAP.                              13950099
  elhash  = arg(1)                                                      13960099
  interpret "prev_el_header = HEAP."elhash"_PREV"                       13970099
  return GET_INSTANCE_BY_HEADER(prev_el_header)                         13980099
                                                                        13990099
                                                                        14000099
LIST_ELEMENTS_EQUAL : procedure                                         14010099
  if arg(1) = arg(2)                                                    14020099
   then                                                                 14030099
     return 1                                                           14040099
   else                                                                 14050099
     return 0                                                           14060099
                                                                        14070099
LIST_COMPARE : procedure expose HEAP.                                   14080099
  objname = arg(1)                                                      14090099
  el1hash = arg(2)                                                      14100099
  el2hash = arg(3)                                                      14110099
                                                                        14120099
   /*  return 1 or 0 to test */                                         14130099
                                                                        14140099
  el1name = GET_NAME_BY_HEADER(HEAP.el1hash)                            14150099
  interpret "data1.0 = HEAP."el1hash".0"                                14160099
  do i = 1 to data1.0                                                   14170099
  interpret "data1."i " = HEAP."el1hash"."i                             14180099
  end                                                                   14190099
                                                                        14200099
  el2name = GET_NAME_BY_HEADER(HEAP.el2hash)                            14210099
  interpret "data2.0 = HEAP."el2hash".0"                                14220099
  do i = 1 to data2.0                                                   14230099
  interpret "data2."i " = HEAP."el2hash"."i                             14240099
  end                                                                   14250099
  /* USER_COPMPARE routine should receive :   */                        14260099
  /* PARMS :                                  */                        14270099
  /*   List name                              */                        14280099
  /*   Element #1 name                        */                        14290099
  /*   Element #2 name                        */                        14300099
  /*   Stem DATA1 via procedure expose        */                        14310099
  /*   Stem DATA2 via procedure expose        */                        14320099
  /* RET  : 1-  exchange , 0 - no exchange    */                        14330099
                                                                        14340099
                                                                        14350099
  parse value VARIABLE_GET("#srv_provider") with rc srv_provider .      14360099
  if srv_provider  = ''                                                 14370099
    then                                                                14380099
       do                                                               14390099
       call HMSG ".Error : no value found for var #srv_provider"        14400099
       return 8                                                         14410099
       end                                                              14420099
  comp_rtn = srv_provider || "_COMPARE"                                 14430099
  interpret "rc="comp_rtn"("objname","el1name","el2name")"              14440099
  return rc                                                             14450099
                                                                        14460099
/* ===========================================================  */      14470099
/* ==   M A P                         METHODS               ==  */      14480099
/* ===========================================================  */      14490099
/* ===========================================================  */      14500099
/* == CREATE   : can ceate an empty map or map with element     */      14510099
/* == STMXDATA : is a normalized stem containing the element    */      14520099
/* ===========================================================  */      14530099
                                                                        14540099
/* ===========================================================  */      14550099
/* ==   C R E A T E    M A P                                ==  */      14560099
/* ==   PARMS :  MAP NAME                                   ==  */      14570099
/* ==            CLASS NAME                                 ==  */      14580099
/* ==            KEY NAME  , optional                       ==  */      14590099
/* ===========================================================  */      14600099
MAP_CREATE : procedure expose STMXDATA. HEAP.                           14610099
     objname  = arg(1)                                                  14620099
     clsname  = arg(2)                                                  14630099
     keyname  = arg(3)                                                  14640099
                                                                        14650099
     map_reference = GET_ITEM_REFERENCE(clsname,objname)                14660099
     if objname <> '#' &  CHECK_HASH(map_reference) = 1                 14670099
       then                                                             14680099
         do                                                             14690099
         call HMSG ".M_CREATE: MAP" objname "already exists"            14700099
         return 8                                                       14710099
         end                                                            14720099
                                                                        14730099
     objhash  = GET_HASH()                                              14740099
     /* allow no named map */                                           14750099
     if objname = '#'                                                   14760099
       then                                                             14770099
         do                                                             14780099
         objname = '#' || objhash                                       14790099
         map_reference = GET_ITEM_REFERENCE(clsname,objname)            14800099
         end                                                            14810099
                                                                        14820099
     HEAP.objhash  = objhash "MAP"                                      14830099
                                                                        14840099
     if ADD_HASH(map_reference,objhash) <> 0                            14850099
       then                                                             14860099
          return 8                                                      14870099
                                                                        14880099
     path_m   = objhash                                                 14890099
     interpret "HEAP."path_m"_NAME="map_reference                       14900099
     interpret "HEAP."path_m"_SIZE="0                                   14910099
     call HMSG ".....MAP" objname "created, hash" objhash               14920099
                                                                        14930099
     if datatype(STMXDATA.0) <> "NUM" | STMXDATA.0 = 0                  14940099
     then                                                               14950099
       return "0" map_reference                                         14960099
                                                                        14970099
     call HMSG ".....M_CREATE: Adding element to MAP" objname           14980099
     STMXDATA.NAME = NORMALIZE_NAME(STMXDATA.NAME)                      14990099
                                                                        15000099
                                                                        15010099
     return "0" map_reference MAP_ADD(objname,clsname,keyname)          15020099
                                                                        15030099
/* ===========================================================  */      15040099
/* == ADD,DELETE : operations on MAP                        ==  */      15050099
/* == STMXDATA :is a normalized stem containing the element == */       15060099
/* ===========================================================  */      15070099
                                                                        15080099
/* ===========================================================  */      15090099
/* ==   A D D  E L E M E N T  T O   M A P                   ==  */      15100099
/* ==   PARMS :                                             ==  */      15110099
/* ==         map  name                                     ==  */      15120099
/* ==         class name                                    ==  */      15130099
/* ==         key   name                                    ==  */      15140099
/* ==   RET   : 0 ELREF or 8                                ==  */      15150099
/* ===========================================================  */      15160099
MAP_ADD    : procedure expose HEAP. STMXDATA.                           15170099
                                                                        15180099
 /* if no element requested */                                          15190099
 if STMXDATA.0 = 0                                                      15200099
  then                                                                  15210099
    return 8                                                            15220099
                                                                        15230099
 if ADD_ELEMENT_TO_MAP_BY_KEY(arg(1),arg(2),arg(3)) <> 0                15240099
   then                                                                 15250099
     return 8                                                           15260099
                                                                        15270099
 return "0" element_reference                                           15280099
                                                                        15290099
/* ===========================================================  */      15300099
/* ==  D E L E T E  E L E M E N T  F R O M   M A P          ==  */      15310099
/* ==   PARMS :                                             ==  */      15320099
/* ==         map  name                                     ==  */      15330099
/* ==         class name                                    ==  */      15340099
/* ==         keyname                                       ==  */      15350099
/* ==   RET   :  0 or 8                                     ==  */      15360099
/* ===========================================================  */      15370099
MAP_DELETE : procedure expose HEAP.                                     15380099
                                                                        15390099
 objname  = arg(1)                                                      15400099
 clsname  = arg(2)                                                      15410099
 keyname  = arg(3)                                                      15420099
                                                                        15430099
 if REMOVE_ELEMENT_FROM_MAP_BY_KEY(objname,clsname,keyname) <> 0        15440099
   then                                                                 15450099
     return 8                                                           15460099
                                                                        15470099
 return  0                                                              15480099
                                                                        15490099
/* ===========================================================  */      15500099
/* ==  F I N D  E L E M E N T  I N   M A P                  ==  */      15510099
/* ===========================================================  */      15520099
/* ==  PARM : MAP NAME                                      ==  */      15530099
/* ==       : CLASS NAME                                    ==  */      15540099
/* ==       : KEYNAME                                       ==  */      15550099
/* ==  RET  : 0 FNDHASH FNDNAME or 8                        ==  */      15560099
/* ===========================================================  */      15570099
MAP_FIND: procedure expose HEAP. STMXDATA.                              15580099
 objname = arg(1)                                                       15590099
 clsname = arg(2)                                                       15600099
 keyname = arg(3)                                                       15610099
                                                                        15620099
 /* check map valid */                                                  15630099
 parse value FIND_MAP(objname,clsname) with rc_find path_m     ,        15640099
                                              map_reference             15650099
 if rc_find <> 0                                                        15660099
   then                                                                 15670099
     return 8                                                           15680099
                                                                        15690099
 parse value FIND_ELEMENT_IN_MAP_BY_KEY(objname,keyname)      ,         15700099
                            with rc_find ndx_el path_e elname .         15710099
 if rc_find <> 0                                                        15720099
   then                                                                 15730099
     return 8                                                           15740099
                                                                        15750099
 interpret "el_bndry = HEAP."path_e".0"                                 15760099
 /* get data from element  */                                           15770099
 do i  = 0 to  el_bndry                                                 15780099
 interpret "STMXDATA."i" = HEAP."path_e"."i                             15790099
 end                                                                    15800099
                                                                        15810099
 return 0 path_e elname                                                 15820099
                                                                        15830099
/* ===========================================================  */      15840099
/* ==  A D D  E L E M E N T  T O   M A P                    ==  */      15850099
/* ===========================================================  */      15860099
/* ==  PARM : MAP NAME                                      ==  */      15870099
/* ==       : CLASS NAME                                    ==  */      15880099
/* ==       : KEY   NAME                                    ==  */      15890099
/* ==  RET  : 0 - OK, 8 - FAIL                              ==  */      15900099
/* ===========================================================  */      15910099
ADD_ELEMENT_TO_MAP_BY_KEY: procedure expose HEAP. STMXDATA.      ,      15920099
                                     element_reference                  15930099
                                                                        15940099
 objname   = arg(1)                                                     15950099
 clsname   = arg(2)                                                     15960099
 keyname   = arg(3)                                                     15970099
 elname    = NORMALIZE_NAME(STMXDATA.NAME)                              15980099
                                                                        15990099
 /* check map valid */                                                  16000099
 parse value FIND_MAP(objname,clsname) with rc_find objhash    ,        16010099
                                              map_reference             16020099
 if rc_find <> 0                                                        16030099
   then                                                                 16040099
     return 8                                                           16050099
                                                                        16060099
 /* check element is not in map */                                      16070099
                                                                        16080099
 parse value FIND_ELEMENT_IN_MAP_BY_KEY(objname,keyname)  ,             16090099
                                         with rc_find .                 16100099
 if rc_find = 0                                                         16110099
   then   /* already in map */                                          16120099
     return 8                                                           16130099
                                                                        16140099
 parse value PREPARE_ELEMENT() with rc_prep element_reference elhash .  16150099
 if rc_prep <> 0                                                        16160099
   then                                                                 16170099
     return 8                                                           16180099
                                                                        16190099
 path_m    = objhash                                                    16200099
 path_e    = elhash                                                     16210099
                                                                        16220099
 HEAP.elhash = elhash "ELEMENT"                                         16230099
                                                                        16240099
 /* set element reference                       */                      16250099
 interpret "HEAP."path_e"_NAME="element_reference                       16260099
 if ADD_HASH(element_reference,elhash) <> 0                             16270099
   then                                                                 16280099
      return 8                                                          16290099
                                                                        16300099
 /* set map name to the element */                                      16310099
 interpret "HEAP."path_e"_SUPER="map_reference                          16320099
 /* advance map size        */                                          16330099
 interpret "map_size = HEAP."path_m"_SIZE"                              16340099
 map_size = map_size + 1                                                16350099
 interpret "HEAP."path_m"_SIZE =" map_size                              16360099
                                                                        16370099
 interpret "HEAP."path_m"_"map_size "=" keyname                         16380099
 interpret "HEAP."path_m"_"keyname "=" map_size path_e elname           16390099
 /* put data in the element */                                          16400099
 do i  = 0 to  STMXDATA.0                                               16410099
 interpret "HEAP."path_e"."i"='"STMXDATA.i"'"                           16420099
 end                                                                    16430099
                                                                        16440099
 call HMSG "....ELEMEMT" elname "by KEY" keyname             ,          16450099
               "added to MAP" map_reference "hash" objhash              16460099
 return 0                                                               16470099
                                                                        16480099
/* ===========================================================  */      16490099
/* ==  R E M O V E  E L E M E N T  F R O M   M A P          ==  */      16500099
/* ===========================================================  */      16510099
/* ==  PARM : MAP NAME                                      ==  */      16520099
/* ==       : CLASS   NAME                                  ==  */      16530099
/* ==       : KEYNAME                                       ==  */      16540099
/* ==  RET  : 0 - OK, 8 - FAIL                              ==  */      16550099
/* ===========================================================  */      16560099
REMOVE_ELEMENT_FROM_MAP_BY_KEY : procedure expose HEAP.                 16570099
                                                                        16580099
 objname   = arg(1)                                                     16590099
 clsname   = arg(2)                                                     16600099
 keyname   = arg(3)                                                     16610099
                                                                        16620099
 parse value FIND_MAP(objname,clsname) with rc_find objhash    ,        16630099
                                              map_reference             16640099
 if rc_find <> 0                                                        16650099
   then                                                                 16660099
     return 8                                                           16670099
                                                                        16680099
 path_m    = objhash                                                    16690099
                                                                        16700099
 parse value FIND_ELEMENT_IN_MAP_BY_KEY(objname,keyname) with  ,        16710099
                                                       rc_find ndx_el . 16720099
 if rc_find = 0                                                         16730099
   then                                                                 16740099
     do                                                                 16750099
     interpret "map_size = HEAP."path_m"_SIZE"                          16760099
     interpret "map_index_del = HEAP."path_m"_"ndx_el                   16770099
     interpret "HEAP."path_m"_"ndx_el "= HEAP."path_m"_"map_size        16780099
                                                                        16790099
     /* set proper back index to data of moved element */               16800099
     interpret "map_index_max = HEAP."path_m"_"map_size                 16810099
     interpret "map_data_max = HEAP."path_m"_"map_index_max             16820099
     map_data_max = ndx_el word(map_data_max,2) word(map_data_max,3)    16830099
     interpret "HEAP."path_m"_"map_index_max "=" map_data_max           16840099
                                                                        16850099
     interpret "map_data_del = HEAP."path_m"_"map_index_del             16860099
     elhash = word(map_data_del,2)                                      16870099
     elname = word(map_data_del,3)                                      16880099
     call GC elhash                                                     16890099
                                                                        16900099
     path_o = "HEAP."path_m"_"map_size                                  16910099
     drop (path_o)                                                      16920099
     path_o = "HEAP."path_m"_"map_index_del                             16930099
     drop (path_o)                                                      16940099
                                                                        16950099
     map_size = map_size - 1                                            16960099
     interpret "HEAP."path_m"_SIZE =" map_size                          16970099
     call HMSG "....ELEMEMT" elname "by KEY" keyname             ,      16980099
               "removed from MAP" map_reference "hash" objhash          16990099
     return 0                                                           17000099
     end                                                                17010099
 return 8                                                               17020099
/* ===========================================================  */      17030099
/* ==  F I N D  E L E M E N T  B Y  K E Y                   ==  */      17040099
/* ===========================================================  */      17050099
/* ==  PARM : MAP NAME                                      ==  */      17060099
/* ==       : KEYNAME                                       ==  */      17070099
/* ==  RET  : 0 INDEX ELHASH ELNAME , 8 - FAIL              ==  */      17080099
/* ===========================================================  */      17090099
FIND_ELEMENT_IN_MAP_BY_KEY :  procedure expose HEAP. STMXDATA.          17100099
                                                                        17110099
 objname   = arg(1)                                                     17120099
 keyname   = arg(2)                                                     17130099
                                                                        17140099
 parse value FIND_MAP(objname,"MAP") with rc_find path_m .              17150099
 if rc_find <> 0                                                        17160099
   then                                                                 17170099
     return 8                                                           17180099
                                                                        17190099
 interpret "map_size = HEAP."path_m"_SIZE"                              17200099
                                                                        17210099
 elpath     = "HEAP."path_m"_"keyname                                   17220099
 if symbol(elpath) = "LIT"                                              17230099
  then                                                                  17240099
   do                                                                   17250099
   call HMSG ".......No ELEMEMT found by key" keyname "in MAP" objname  17260099
   return 8                                                             17270099
   end                                                                  17280099
 interpret "map_data = HEAP."path_m"_"keyname                           17290099
 path_e = word(map_data,2)                                              17300099
 elname = word(map_data,3)                                              17310099
 interpret "loop_bndry = HEAP."path_e".0"                               17320099
 /* fill STMXDATA from element */                                       17330099
 STMXDATA.NAME = elname                                                 17340099
 do i  = 0 to  loop_bndry                                               17350099
 interpret "STMXDATA."i" = HEAP."path_e"."i                             17360099
 end                                                                    17370099
                                                                        17380099
 call HMSG ".......ELEMEMT" elname "found by key" keyname       ,       17390099
           "in MAP" objname                                             17400099
 return 0 map_data                                                      17410099
/* ===========================================================  */      17420099
/* ==  D E S T R O Y  M A P                                 ==  */      17430099
/* ==   PARMS :                                             ==  */      17440099
/* ==         list name                                     ==  */      17450099
/* ==         class name                                    ==  */      17460099
/* ===========================================================  */      17470099
MAP_DESTROY: procedure expose HEAP. STMXDATA.                           17480099
                                                                        17490099
 objname  = arg(1)                                                      17500099
 clsname  = arg(2)                                                      17510099
                                                                        17520099
 parse value FIND_MAP(objname,clsname) with rc_find objhash    ,        17530099
                                             list_reference             17540099
 if rc_find <> 0                                                        17550099
   then                                                                 17560099
     return 8                                                           17570099
                                                                        17580099
 call GC objhash                                                        17590099
 return 0                                                               17600099
                                                                        17610099
/* ===========================================================  */      17620099
/* ==   F I N D    M A P                                    ==  */      17630099
/* ===========================================================  */      17640099
/* ==   PARM : MAP NAME                                     ==  */      17650099
/* ==          CLASS NAME                                   ==  */      17660099
/* ==   RET  : 0 MAPHASH MAPREF, 8 - FAIL                   ==  */      17670099
/* ===========================================================  */      17680099
/* ===========================================================  */      17690099
FIND_MAP : procedure expose HEAP.                                       17700099
  objname  = arg(1)                                                     17710099
  clsname  = arg(2)                                                     17720099
  map_reference = GET_ITEM_REFERENCE(clsname,objname)                   17730099
  objhash = GET_HASH_BY_REFERENCE(map_reference)                        17740099
  if CHECK_HASH(objhash) = 0                                            17750099
  then                                                                  17760099
    do                                                                  17770099
    call HMSG ".M_CHECK: MAP " objname "is not found"                   17780099
    return 8                                                            17790099
    end                                                                 17800099
                                                                        17810099
  if translate(word(HEAP.objhash,2)) <> "MAP"                           17820099
  then                                                                  17830099
    do                                                                  17840099
    call HMSG ".M_CHECK: Hash" objhash "is not of a MAP instance"       17850099
    return 8                                                            17860099
    end                                                                 17870099
 return 0 objhash map_reference                                         17880099
                                                                        17890099
/* ===========================================================  */      17900099
/* ==  I S  E L E M E N T  V A L I D                        ==  */      17910099
/* ==   PARMS :                                             ==  */      17920099
/* ==         action of the caller                          ==  */      17930099
/* ==         list name                                     ==  */      17940099
/* ==         class name                                    ==  */      17950099
/* ==         reference of element                          ==  */      17960099
/* ===========================================================  */      17970099
IS_ELEMENT_VALID : procedure expose HEAP.                               17980099
 action   = arg(1)                                                      17990099
 objname  = arg(2)                                                      18000099
 clsname  = arg(3)                                                      18010099
 elref    = arg(4)                                                      18020099
                                                                        18030099
 elhash = GET_HEAP_HASH_FOR_REFERENCE(elref)                            18040099
 if elhash   = ''                                                       18050099
   then                                                                 18060099
     do                                                                 18070099
     call HMSG "....Error at "action": reference"  elref            ,   18080099
                               "does not point to an element"           18090099
     return 0                                                           18100099
     end                                                                18110099
 interpret "list_ref = HEAP."elhash"_SUPER"                             18120099
 if list_ref <> GET_ITEM_REFERENCE(clsname,objname)                     18130099
   then                                                                 18140099
     do                                                                 18150099
     call HMSG "....Error at "action": element" elref               ,   18160099
                                "does not belong to" objname            18170099
     return 0                                                           18180099
     end                                                                18190099
                                                                        18200099
 return 1                                                               18210099
/* ===========================================================  */      18220099
/* ==   C H E C K  U S E R  D A T A   V A L I D I T Y       ==  */      18230099
/* ===========================================================  */      18240099
PREPARE_ELEMENT : procedure expose HEAP. STMXDATA.                      18250099
  if datatype(STMXDATA.0) <> "NUM" | STMXDATA.0 = 0                     18260099
   then                                                                 18270099
    do                                                                  18280099
    call HMSG ".STMXDATA is not normalized for adding to LIST" objhash  18290099
    return 8                                                            18300099
    end                                                                 18310099
  STMXDATA.NAME = NORMALIZE_NAME(STMXDATA.NAME)                         18320099
  element_reference = GET_ITEM_REFERENCE("ELEMENT",STMXDATA.NAME)       18330099
  if  STMXDATA.NAME <> '' &   CHECK_HASH(element_reference) = 1         18340099
   then                                                                 18350099
    do                                                                  18360099
    call HMSG ".....C_USER_DATA: ELEMENT" STMXDATA.NAME "already exists"18370099
    return 8                                                            18380099
    end                                                                 18390099
  elhash   = GET_HASH()                                                 18400099
  /* allow no named elements */                                         18410099
  if STMXDATA.NAME = ''                                                 18420099
    then                                                                18430099
     do                                                                 18440099
     STMXDATA.NAME = '#' || elhash                                      18450099
     element_reference = GET_ITEM_REFERENCE("ELEMENT",STMXDATA.NAME)    18460099
     end                                                                18470099
 return 0 element_reference elhash                                      18480099
/* ===========================================================  */      18490099
/* == Garbage collector - Main                              ==  */      18500099
/* ===========================================================  */      18510099
GC :  procedure expose HEAP.                                            18520099
MODE = "GC"                                                             18530099
HLEN=24                                                                 18540099
call HEAP_DETAIL arg(1)                                                 18550099
return                                                                  18560099
                                                                        18570099
/* ===========================================================  */      18580099
/* == Serialization - Main                                  ==  */      18590099
/* == PARM : HEAP sharing : SHR or CPY                      ==  */      18600099
/* ==      : FILENAME of DD to persist or ''                ==  */      18610099
/* ===========================================================  */      18620099
HEAP_SRLZ :  procedure expose SRLZ_REC HEAP.                            18630099
HEAP_SHR        = arg(1)                                                18640099
FILE_TO_PERSIST = arg(2)                                                18650099
                                                                        18660099
if HEAP_SHR = "DRP"                                                     18670099
  then                                                                  18680099
   drop HEAP.                                                           18690099
  else                                                                  18700099
   if HEAP_SHR = "SHR"                                                  18710099
     then                                                               18720099
       do                                                               18730099
       call HEAP_SRLZ_TO_FILE FILE_TO_PERSIST                           18740099
       drop HEAP.                                                       18750099
       end                                                              18760099
     else                                                               18770099
      if HEAP_SHR = "CPY"                                               18780099
        then                                                            18790099
          do                                                            18800099
          call HEAP_SRLZ_TO_FILE FILE_TO_PERSIST                        18810099
          end                                                           18820099
return 0                                                                18830099
                                                                        18840099
/* ===========================================================  */      18850099
/* == Serialization                                         ==  */      18860099
/* == PARM : FILENAME of DD to persist or ''                ==  */      18870099
/* ===========================================================  */      18880099
HEAP_SRLZ_TO_FILE : procedure expose SRLZ_REC HEAP.                     18890099
FILE_TO_PERSIST = arg(1)                                                18900099
HLEN=24                                                                 18910099
MODE = "SRLZ"                                                           18920099
SRLZ_REC = 0 /* serialized records number */                            18930099
                                                                        18940099
/* serialize lists, maps, elements ,objects */                          18950099
do i = 0 to HEAP.0                                                      18960099
/* SRLZ_FLAG is dropped in HEAP_DETAIL,it should be restored here */    18970099
SRLZ_FLAG = 1                                                           18980099
call PATH_DETAIL "HEAP."i , HEAP.i                                      18990099
objhash = HEAP.i                                                        19000099
if i > 0                                                                19010099
  then                                                                  19020099
    do                                                                  19030099
    call HEAP_DETAIL objhash                                            19040099
    end                                                                 19050099
end                                                                     19060099
                                                                        19070099
/* serialize variables */                                               19080099
vpath = "VAR_GLOBAL"                                                    19090099
if symbol('HEAP.'vpath'.0') = "LIT"                                     19100099
   then                                                                 19110099
     return                                                             19120099
interpret "loop_bndry = HEAP."vpath".0"                                 19130099
do i = 0 to loop_bndry                                                  19140099
path = "HEAP."vpath"."i                                                 19150099
interpret "val = HEAP."vpath"."i                                        19160099
call PATH_DETAIL path,val                                               19170099
if i > 0                                                                19180099
  then                                                                  19190099
    do                                                                  19200099
    path_curr = "HEAP."vpath || "_" || val                              19210099
    interpret "val_curr = "path_curr                                    19220099
    call PATH_DETAIL path_curr,val_curr                                 19230099
    end                                                                 19240099
end                                                                     19250099
                                                                        19260099
return                                                                  19270099
                                                                        19280099
/* ===========================================================  */      19290099
/* == Garbage collector - Routines                          ==  */      19300099
/* ===========================================================  */      19310099
/**************************************************/                    19320099
/* GC : remove hash from index                    */                    19330099
/**************************************************/                    19340099
REMOVE_HASH_FROM_HEAP_INDEX : procedure expose HEAP.                    19350099
 parse arg objhash index .                                              19360099
 call SHRINK_HEAP_INDEX index                                           19370099
 var = "HEAP."objhash  ;  drop (var)                                    19380099
                                                                        19390099
 if index > HEAP.0                                                      19400099
   then                                                                 19410099
     return                                                             19420099
                                                                        19430099
 /* update back index in anchor pointed by the moved index */           19440099
 hash   =  HEAP.index                                                   19450099
                                                                        19460099
 if length(hash) > 8                                                    19470099
   then   /* REFERENCE */                                               19480099
     do                                                                 19490099
     interpret "ref_val = HEAP."hash                                    19500099
     HEAP.hash= word(ref_val,1) index                                   19510099
     end                                                                19520099
   else   /* HASH */                                                    19530099
     interpret "HEAP."hash"_HEAPIX="index                               19540099
                                                                        19550099
 return                                                                 19560099
                                                                        19570099
/**************************************************/                    19580099
/* GC : shrink heap index                         */                    19590099
/**************************************************/                    19600099
SHRINK_HEAP_INDEX : procedure expose HEAP.                              19610099
 index = arg(1)                                                         19620099
 max_index  = HEAP.0                                                    19630099
 HEAP.index = HEAP.max_index                                            19640099
 var = "HEAP."max_index ; drop (var)                                    19650099
 HEAP.0 = max_index - 1                                                 19660099
 return                                                                 19670099
                                                                        19680099
/* ===========================================================  */      19690099
/* == HEAP routines                                         ==  */      19700099
/* ===========================================================  */      19710099
                                                                        19720099
/*********************************************/                         19730099
/* HEAP initiating routine                   */                         19740099
/* ADD #INTERNAL or #SERVICES lists elements */                         19750099
/* to be used in GC, TRACE and dynamic calls */                         19760099
/*********************************************/                         19770099
HEAPINIT: procedure expose HEAP.                                        19780099
 HEAP.0 = 0                                                             19790099
 call HMSG "..=== HEAP initialization started"                          19800099
 /*******************************************/                          19810099
 /* USED FOR DEBUG AND GC                   */                          19820099
 /* LSTFIELDS , ELMFIELDS and OBJFIELDS     */                          19830099
 /* define the fields of LIST , ELEMENT     */                          19840099
 /* OBBJECT , MAP  be                       */                          19850099
 /* traced and GC-ed.                       */                          19860099
 /* Special cases <HEAD> and <TYPE>         */                          19870099
 /* These vars do not exist,only traced :   */                          19880099
 /*  <HEAD> means to trace HEAP.path        */                          19890099
 /*  <TYPE> <clslist - class name type      */                          19900099
 /*  <TYPE> <clsel - class name from header */                          19910099
 /*  <TYPE> <clsobj- class name from header */                          19920099
 /*                  not in use - bug !!!   */                          19930099
 /*  <TYPE> <clsmap- class name from header */                          19940099
 /*                                         */                          19950099
 /*******************************************/                          19960099
                                                                        19970099
 stmxdata.NAME="#lstanchor"                                             19980099
 stmxdata.0 = 2                                                         19990099
 stmxdata.1 = "SUMRX V2.01,2018-07,gennady.lapidus@sailpoint.com"       20000099
 stmxdata.2 = "L 1 M 0 O 0 E 1 V -1 T 19 I 3 D 100 S 1"                 20010099
 if word(CREATE_UTILITY_LIST("#INTERNAL"),1) <> 0                       20020099
   then                                                                 20030099
     return 8                                                           20040099
                                                                        20050099
 stmxdata.NAME="#lstfields"                                             20060099
 stmxdata.0 = 7                                                         20070099
 stmxdata.1 = "<HEAD>  ...."                                            20080099
 stmxdata.2 = "NAME    NAME"                                            20090099
 stmxdata.3 = "<TYPE>  <clslist"                                        20100099
 stmxdata.4 = "HEAPIX  HEAPIX"                                          20110099
 stmxdata.5 = "SORTED  SORTED"                                          20120099
 stmxdata.6 = "FIRST   FIRST"                                           20130099
 stmxdata.7 = "LAST    LAST"                                            20140099
 if word(ADD_TO_UTILITY_LIST("#INTERNAL"),1) <> 0                       20150099
   then                                                                 20160099
     return 8                                                           20170099
                                                                        20180099
 stmxdata.NAME="#elmfields"                                             20190099
 stmxdata.0 = 7                                                         20200099
 stmxdata.1 = "<HEAD>  ...."                                            20210099
 stmxdata.2 = "NAME    NAME"                                            20220099
 stmxdata.3 = "SUPER   SUPER"                                           20230099
 stmxdata.4 = "<TYPE>  <clsel"                                          20240099
 stmxdata.5 = "HEAPIX  HEAPIX"                                          20250099
 stmxdata.6 = "NEXT    NEXT"                                            20260099
 stmxdata.7 = "PREV    PREV"                                            20270099
 if word(ADD_TO_UTILITY_LIST("#INTERNAL"),1) <> 0                       20280099
   then                                                                 20290099
     return 8                                                           20300099
                                                                        20310099
 stmxdata.NAME="#objfields"                                             20320099
 stmxdata.0 = 4                                                         20330099
 stmxdata.1 = "<HEAD>  ...."                                            20340099
 stmxdata.2 = "NAME    NAME"                                            20350099
 stmxdata.3 = "<TYPE>  <clsobj"                                         20360099
 stmxdata.4 = "HEAPIX  HEAPIX"                                          20370099
 if word(ADD_TO_UTILITY_LIST("#INTERNAL"),1) <> 0                       20380099
   then                                                                 20390099
     return 8                                                           20400099
                                                                        20410099
 stmxdata.NAME="#mapfields"                                             20420099
 stmxdata.0 = 5                                                         20430099
 stmxdata.1 = "<HEAD>  ...."                                            20440099
 stmxdata.2 = "NAME    NAME"                                            20450099
 stmxdata.3 = "<TYPE>  <clsmap"                                         20460099
 stmxdata.4 = "HEAPIX  HEAPIX"                                          20470099
 stmxdata.5 = "SIZE    SIZE"                                            20480099
 if word(ADD_TO_UTILITY_LIST("#INTERNAL"),1) <> 0                       20490099
   then                                                                 20500099
     return 8                                                           20510099
 /***************************************/                              20520099
 /* USED FOR dynamic routine call       */                              20530099
 /* LSTRTNACT OBJRTNACT SRVRTNACT and   */                              20540099
 /* VARRTNACT are                       */                              20550099
 /* actions to proceed on LIST ,        */                              20560099
 /* OBJECT ,SERVICE VARIABLE and MAP    */                              20570099
 /* respectively.                       */                              20580099
 /***************************************/                              20590099
                                                                        20600099
 stmxdata.NAME="#lstrtnact"                                             20610099
 stmxdata.0  = 11                                                       20620099
 stmxdata.1  = "CREATE"                                                 20630099
 stmxdata.2  = "ADD"                                                    20640099
 stmxdata.3  = "INSERT"                                                 20650099
 stmxdata.4  = "DELETE"                                                 20660099
 stmxdata.5  = "EXCHANGE"                                               20670099
 stmxdata.6  = "OPEN"                                                   20680099
 stmxdata.7  = "NEXT"                                                   20690099
 stmxdata.8  = "PREV"                                                   20700099
 stmxdata.9  = "CLOSE"                                                  20710099
 stmxdata.10 = "SORT"                                                   20720099
 stmxdata.11 = "DESTROY"                                                20730099
 if word(ADD_TO_UTILITY_LIST("#INTERNAL"),1) <> 0                       20740099
   then                                                                 20750099
     return 8                                                           20760099
                                                                        20770099
                                                                        20780099
 stmxdata.NAME="#objrtnact"                                             20790099
 stmxdata.0 = 3                                                         20800099
 stmxdata.1 = "CREATE"                                                  20810099
 stmxdata.2 = "QUERY"                                                   20820099
 stmxdata.3 = "DESTROY"                                                 20830099
 if word(ADD_TO_UTILITY_LIST("#INTERNAL"),1) <> 0                       20840099
   then                                                                 20850099
     return 8                                                           20860099
                                                                        20870099
 stmxdata.NAME="#srvrtnact"                                             20880099
 stmxdata.0 = 2                                                         20890099
 stmxdata.1 = "START"                                                   20900099
 stmxdata.2 = "STOP"                                                    20910099
 if word(ADD_TO_UTILITY_LIST("#INTERNAL"),1) <> 0                       20920099
   then                                                                 20930099
     return 8                                                           20940099
                                                                        20950099
 stmxdata.NAME="#varrtnact"                                             20960099
 stmxdata.0 = 4                                                         20970099
 stmxdata.1 = "SET"                                                     20980099
 stmxdata.2 = "GET"                                                     20990099
 stmxdata.3 = "DEL"                                                     21000099
 stmxdata.4 = "LIST"                                                    21010099
 if word(ADD_TO_UTILITY_LIST("#INTERNAL"),1) <> 0                       21020099
   then                                                                 21030099
     return 8                                                           21040099
                                                                        21050099
 stmxdata.NAME="#maprtnact"                                             21060099
 stmxdata.0 = 5                                                         21070099
 stmxdata.1 = "CREATE"                                                  21080099
 stmxdata.2 = "DESTROY"                                                 21090099
 stmxdata.3 = "ADD"                                                     21100099
 stmxdata.4 = "DELETE"                                                  21110099
 stmxdata.5 = "FIND"                                                    21120099
 if word(ADD_TO_UTILITY_LIST("#INTERNAL"),1) <> 0                       21130099
   then                                                                 21140099
     return 8                                                           21150099
                                                                        21160099
++INC &SERVICE                                                          21170099
 stmxdata.0 = 0                                                         21180099
                                                                        21190099
 if datatype(usr_services.0) = "NUM" & usr_services.0  > 0              21200099
   then                                                                 21210099
    do                                                                  21220099
    if word(CREATE_UTILITY_LIST("#SERVICES"),1) <> 0                    21230099
     then                                                               21240099
       return 8                                                         21250099
                                                                        21260099
     do i = 1 to usr_services.0                                         21270099
     parse var usr_services.i srv_name srv_provider srv_objtype   ,     21280099
                              srv_objname srv_sort                      21290099
     stmxdata.NAME="#" || srv_name                                      21300099
     stmxdata.0 = 4                                                     21310099
     stmxdata.1 = srv_provider                                          21320099
     stmxdata.2 = srv_objtype                                           21330099
     stmxdata.3 = srv_objname                                           21340099
     stmxdata.4 = srv_sort       /* YES/NO */                           21350099
     if word(ADD_TO_UTILITY_LIST("#SERVICES"),1) <> 0                   21360099
       then                                                             21370099
         return 8                                                       21380099
     end                                                                21390099
    end                                                                 21400099
                                                                        21410099
 if VARIABLE_SET("HEAP_READY","YES") <> 0                               21420099
   then                                                                 21430099
    call HMSG "=== HEAP initialization failed"                          21440099
 call HMSG "..=== HEAP initialization completed"                        21450099
 return 0                                                               21460099
                                                                        21470099
/*********************************************/                         21480099
/* Create internal list with an element      */                         21490099
/* PARMS  : list name                        */                         21500099
/*********************************************/                         21510099
CREATE_UTILITY_LIST : procedure expose HEAP. STMXDATA.                  21520099
return  CLSMNGR_ACTION(arg(1),"CREATE")                                 21530099
                                                                        21540099
/*********************************************/                         21550099
/* Add element to utility list               */                         21560099
/* PARMS  : list name                        */                         21570099
/*********************************************/                         21580099
ADD_TO_UTILITY_LIST : procedure expose HEAP. STMXDATA.                  21590099
   return  CLSMNGR_ACTION(arg(1),"INSERT")                              21600099
/* return  CLSMNGR_ACTION(arg(1),"ADD") */                              21610099
                                                                        21620099
                                                                        21630099
/*********************************************/                         21640099
/* Executing Create/Add on a list            */                         21650099
/* PARMS  : list name                        */                         21660099
/*        : action                           */                         21670099
/*********************************************/                         21680099
CLSMNGR_ACTION : procedure expose HEAP. STMXDATA.                       21690099
list   = arg(1)                                                         21700099
action = arg(2)                                                         21710099
return CLSMNGR(action,"LIST",list,0)                                    21720099
                                                                        21730099
/*********************************************/                         21740099
/* START service                             */                         21750099
/* PARMS  : service name                     */                         21760099
/*   RET  : 0 objtype objname  or 8          */                         21770099
/*********************************************/                         21780099
SERVICE_START : procedure expose HEAP. STMXDATA.                        21790099
 objhash = GET_HEAP_HASH_FOR_REFERENCE("NAME_ELM_#"translate(arg(1)))   21800099
 if objhash = ''                                                        21810099
   then                                                                 21820099
    do                                                                  21830099
    call HMSG ".....Service not found:"arg(1)                           21840099
    return 8                                                            21850099
    end                                                                 21860099
                                                                        21870099
 if datatype(HEAP.objhash.0) = "NUM"                                    21880099
  then                                                                  21890099
    do              /* correct service definition */                    21900099
    interpret "srv_provider = HEAP."objhash".1"                         21910099
    interpret "srv_objtype  = HEAP."objhash".2"                         21920099
    interpret "srv_objname  = HEAP."objhash".3"                         21930099
    interpret "srv_sort     = HEAP."objhash".4"                         21940099
    if srv_objtype = "LIST"                                             21950099
      then                                                              21960099
       do   /* LIST class */                                            21970099
        parse value FIND_LIST(srv_objname,"LIST") with rc .             21980099
        if rc <> 0                                                      21990099
         then                                                           22000099
          start_provider_needed = 1                                     22010099
         else                                                           22020099
          start_provider_needed = 0                                     22030099
       end /* LIST class */                                             22040099
    if start_provider_needed = 1                                        22050099
     then                                                               22060099
      do /* service provider has to run */                              22070099
      call HMSG "...."srv_objtype srv_objname "does not exist"          22080099
      call HMSG "....Starting provider" srv_provider                    22090099
      if VARIABLE_SET("#srv_provider",srv_provider) <> 0                22100099
        then                                                            22110099
          do /* set current service */                                  22120099
          call HMSG ".Error at setting #srv_provider to" srv_provider   22130099
          return 8                                                      22140099
          end /* set current service */                                 22150099
      interpret "rc="srv_provider"("srv_objname")"                      22160099
      if rc <> 0                                                        22170099
        then                                                            22180099
          do   /* service provider failed */                            22190099
          call HMSG ".Error found when running  provider" srv_provider  22200099
          return 8                                                      22210099
          end  /* service provider failed */                            22220099
        else                                                            22230099
          do   /* service provider succeeded */                         22240099
          if translate(srv_sort) = "YES"                                22250099
           then                                                         22260099
            do /* sort requested */                                     22270099
            if LIST_SORT(srv_objname,"LIST") <> 0                       22280099
             then                                                       22290099
              do   /* sort failed */                                    22300099
              call HMSG ".Error ecountered at sorting list"        ,    22310099
                        srv_objname "provider" srv_provider             22320099
              return 8                                                  22330099
              end  /* sort failed */                                    22340099
            end /* sort requested */                                    22350099
          if translate(srv_sort) = "YES"                                22360099
           then                                                         22370099
             call HMSG "....List" srv_objname "sorted  successfully"    22380099
          call HMSG "....Provider" srv_provider "completed successfully"22390099
          end   /* service provider succeeded */                        22400099
      end /* service provider has to run */                             22410099
     else                                                               22420099
      do  /* service provider does not have to run */                   22430099
      call HMSG "...."srv_objtype srv_objname "found exists"            22440099
      call HMSG "....Provider" srv_provider "was not started"           22450099
      end /* service provider does not have to run */                   22460099
    end                                                                 22470099
  else                                                                  22480099
    do   /* not correct service definition */                           22490099
    call HMSG ".Service definition error:"arg(1)                        22500099
    return 8                                                            22510099
    end /* not correct service definition */                            22520099
                                                                        22530099
  return 0 srv_objtype srv_objname                                      22540099
                                                                        22550099
/*********************************************/                         22560099
/* STOP service                              */                         22570099
/* PARMS  : service name                     */                         22580099
/*   RET  : 0 or 8                           */                         22590099
/*********************************************/                         22600099
SERVICE_STOP : procedure expose HEAP. STMXDATA.                         22610099
 objhash = GET_HEAP_HASH_FOR_REFERENCE("NAME_ELM_#"translate(arg(1)))   22620099
 parse value VARIABLE_DEL("#srv_provider") with rc .                    22630099
 if rc <> 0                                                             22640099
   then                                                                 22650099
     call HMSG "...Warning : variable #srv_provider not found"          22660099
 if datatype(HEAP.objhash.0) = "NUM"                                    22670099
  then                                                                  22680099
    do                                                                  22690099
    interpret "srv_provider = HEAP."objhash".1"                         22700099
    interpret "srv_objtype  = HEAP."objhash".2"                         22710099
    interpret "srv_objname  = HEAP."objhash".3"                         22720099
    interpret "srv_sort     = HEAP."objhash".4"                         22730099
    if srv_objtype = "LIST"                                             22740099
      then                                                              22750099
       do                                                               22760099
        parse value FIND_LIST(srv_objname,"LIST") with rc .             22770099
        if rc <> 0                                                      22780099
         then                                                           22790099
          object_not_found = 1                                          22800099
         else                                                           22810099
          object_not_found = 0                                          22820099
       end                                                              22830099
    if object_not_found = 0                                             22840099
      then                                                              22850099
        do                                                              22860099
        call HMSG "....Destroying" srv_objtype srv_objname              22870099
        if LIST_DESTROY(srv_objname,srv_objtype) <> 0                   22880099
          then                                                          22890099
           do                                                           22900099
           call HMSG ".Error at destroying list" srv_objname            22910099
           return 8                                                     22920099
           end                                                          22930099
        return 0                                                        22940099
        end                                                             22950099
      else                                                              22960099
        do                                                              22970099
        call HMSG ".Error:"srv_objtype srv_objname "not found"          22980099
        return 8                                                        22990099
        end                                                             23000099
                                                                        23010099
/********************************************/                          23020099
/* header is <objhash    classname>         */                          23030099
/********************************************/                          23040099
GET_HEAP_INDEX_BY_HEADER : procedure expose HEAP.                       23050099
parse arg hash  .                                                       23060099
interpret "index=HEAP."hash"_HEAPIX"                                    23070099
return index                                                            23080099
                                                                        23090099
/*************************************************/                     23100099
/* this searches index which is the path to      */                     23110099
/* header (reference) - used to remove reference */                     23120099
/*************************************************/                     23130099
GET_HEAP_INDEX_FOR_REFERENCE : procedure expose HEAP.                   23140099
object_reference = arg(1)                                               23150099
if symbol('HEAP.'object_reference) = "LIT"                              23160099
  then                                                                  23170099
    return ''                                                           23180099
header_path      = HEAP.object_reference                                23190099
return word(header_path,2)                                              23200099
                                                                        23210099
/***********************************************/                       23220099
/* this searches index which is the path to    */                       23230099
/* header (reference) - used for quick search  */                       23240099
/***********************************************/                       23250099
GET_HEAP_HASH_FOR_REFERENCE : procedure expose HEAP.                    23260099
object_reference = arg(1)                                               23270099
if symbol('HEAP.'object_reference) = "LIT"                              23280099
  then                                                                  23290099
    return ''                                                           23300099
header_path      = HEAP.object_reference                                23310099
return word(header_path,1)                                              23320099
                                                                        23330099
/***********************************************/                       23340099
/* returns hash of the HEAP item from header   */                       23350099
/***********************************************/                       23360099
GET_INSTANCE_BY_HEADER : procedure expose HEAP.                         23370099
 parse arg hash .                                                       23380099
 return hash                                                            23390099
                                                                        23400099
/***********************************************/                       23410099
/* returns classname from header               */                       23420099
/***********************************************/                       23430099
GET_CLSNAME_BY_HEADER : procedure expose HEAP.                          23440099
 parse arg . clsname .                                                  23450099
 return clsname                                                         23460099
                                                                        23470099
/***********************************************/                       23480099
/* returns reference from header path          */                       23490099
/***********************************************/                       23500099
GET_REFERENCE_BY_HEADER : procedure expose HEAP.                        23510099
 parse arg hash .                                                       23520099
 interpret "name=HEAP."hash"_NAME"                                      23530099
 return name                                                            23540099
                                                                        23550099
/***********************************************/                       23560099
/* returns item name from its reference        */                       23570099
/***********************************************/                       23580099
GET_NAME_BY_REFERENCE : procedure expose HEAP.                          23590099
 hash = GET_HEAP_HASH_FOR_REFERENCE(arg(1))                             23600099
 return  GET_NAME_BY_HEADER(HEAP.hash)                                  23610099
                                                                        23620099
/***********************************************/                       23630099
/* returns item name from header path          */                       23640099
/***********************************************/                       23650099
GET_NAME_BY_HEADER : procedure expose HEAP.                             23660099
 parse arg hash .                                                       23670099
 reference_reversed = REVERSE(GET_REFERENCE_BY_HEADER(hash))            23680099
 parse var reference_reversed name '_' .                                23690099
 return REVERSE(name)                                                   23700099
                                                                        23710099
/**********************************************/                        23720099
/* creates reference for the HEAP item        */                        23730099
/**********************************************/                        23740099
GET_ITEM_REFERENCE : procedure expose HEAP.                             23750099
NAMEELM = "NAME_ELM_"                                                   23760099
NAMELST = "NAME_LST_"                                                   23770099
NAMEOBJ = "NAME_OBJ_"                                                   23780099
NAMEMAP = "NAME_MAP_"                                                   23790099
clsname  = translate(arg(1))                                            23800099
elname   = translate(arg(2))                                            23810099
                                                                        23820099
if strip(elname) = ''                                                   23830099
  then                                                                  23840099
    return ''                                                           23850099
                                                                        23860099
if clsname = "LIST"                                                     23870099
  then                                                                  23880099
    pfx = NAMELST                                                       23890099
  else                                                                  23900099
    if clsname = "ELEMENT"                                              23910099
      then                                                              23920099
        pfx = NAMEELM                                                   23930099
      else                                                              23940099
        if clsname = "MAP"                                              23950099
          then                                                          23960099
            pfx = NAMEMAP                                               23970099
          else                                                          23980099
            pfx = NAMEOBJ || clsname || "_"                             23990099
return pfx || elname                                                    24000099
                                                                        24010099
/**********************************************/                        24020099
/*                                            */                        24030099
/*   E X T E R N A L  R O U T I N E S         */                        24040099
/*                                            */                        24050099
/**********************************************/                        24060099
/**********************************************/                        24070099
/*  GET HEAP Statistics                       */                        24080099
/*  RET  : statistics data                    */                        24090099
/**********************************************/                        24100099
GET_HEAP_STATISTICS_EXT:  procedure expose st. HEAP.                    24110099
  stats =  GET_HEAP_ANCHOR_EXT(2)                                       24120099
 /* L 5 M 2 O 0 E 97 V 3 T 972 I 244 D 3699 S 2 */                      24130099
 parse var stats 'L' st.l ,                                             24140099
                 'M' st.m ,                                             24150099
                 'O' st.o ,                                             24160099
                 'E' st.e ,                                             24170099
                 'V' st.v ,                                             24180099
                 'T' st.t ,                                             24190099
                 'I' st.i ,                                             24200099
                 'D' st.d ,                                             24210099
                 'S' st.s                                               24220099
 st.l = strip(st.l)                                                     24230099
 st.m = strip(st.m)                                                     24240099
 st.o = strip(st.o)                                                     24250099
 st.e = strip(st.e)                                                     24260099
 st.v = strip(st.v) ; if st.v = -1 then st.v = 0 ;                      24270099
 st.t = strip(st.t)                                                     24280099
 st.i = strip(st.i)                                                     24290099
 st.d = strip(st.d)                                                     24300099
 st.s = strip(st.s)                                                     24310099
 return stats                                                           24320099
/**********************************************/                        24330099
/*  PUT HEAP Statistics                       */                        24340099
/*  PARM : statistics data                    */                        24350099
/*  RET  : 0 or 8                             */                        24360099
/**********************************************/                        24370099
PUT_HEAP_STATISTICS_EXT:  procedure expose HEAP.                        24380099
  return PUT_HEAP_ANCHOR_EXT(2,arg(1))                                  24390099
/**********************************************/                        24400099
/*  GET HEAP ANCHOR  ITEM                     */                        24410099
/**********************************************/                        24420099
/*  PARM : index of array of #LSTANCHOR       */                        24430099
/*  RET  : ANCHOR item or ''                  */                        24440099
/**********************************************/                        24450099
GET_HEAP_ANCHOR_EXT:  procedure expose HEAP.                            24460099
 if GET_VARIABLE_VALUE_EXT("HEAP_READY") = "YES"                        24470099
   then                                                                 24480099
    do                                                                  24490099
    hash_lstanchor = GET_HEAP_HASH_FOR_REFERENCE("NAME_ELM_#LSTANCHOR") 24500099
    interpret "anchor = HEAP."hash_lstanchor"."arg(1)                   24510099
    return anchor                                                       24520099
    end                                                                 24530099
 return ''                                                              24540099
/**********************************************/                        24550099
/*  PUT HEAP ANCHOR  ITEM                     */                        24560099
/**********************************************/                        24570099
/*  PARM : index of array of #LSTANCHOR       */                        24580099
/*       : ANCHOR item data                   */                        24590099
/*  RET  : 0 or 8                             */                        24600099
/*       : this is a dummy routine right now  */                        24610099
/**********************************************/                        24620099
PUT_HEAP_ANCHOR_EXT:  procedure expose HEAP.                            24630099
 return 0                                                               24640099
                                                                        24650099
 if GET_VARIABLE_VALUE_EXT("HEAP_READY") = "YES"                        24660099
   then                                                                 24670099
    do                                                                  24680099
    hash_lstanchor = GET_HEAP_HASH_FOR_REFERENCE("NAME_ELM_#LSTANCHOR") 24690099
    interpret "HEAP."hash_lstanchor"."arg(1) "=" arg(2)                 24700099
    return 0                                                            24710099
    end                                                                 24720099
 return 8                                                               24730099
/**********************************************/                        24740099
/* HEAP serialization                         */                        24750099
/**********************************************/                        24760099
/*  PARM : HEAP sharing : SHR , CPY , DRP     */                        24770099
/*       : FILENAME of DD to persist or ''    */                        24780099
/*  RET  : 0 or 8                             */                        24790099
/**********************************************/                        24800099
HEAP_SERIALIZE_EXT:  procedure expose SRLZ_REC HEAP.                    24810099
 if GET_VARIABLE_VALUE_EXT("HEAP_READY") = "YES"                        24820099
   then                                                                 24830099
    return HEAP_SRLZ(arg(1),arg(2))                                     24840099
 return 8                                                               24850099
/**********************************************/                        24860099
/* Query HEAP allocated                       */                        24870099
/**********************************************/                        24880099
/*  RET  : 0 - OK, 8 - NOK                    */                        24890099
IS_HEAP_ALLOC_EXT:  procedure expose HEAP.                              24900099
 if symbol('HEAP.0') <> "LIT"                                           24910099
   then                                                                 24920099
    return 0                                                            24930099
   else                                                                 24940099
    return 8                                                            24950099
/**********************************************/                        24960099
/* Query HEAP initialized                     */                        24970099
/**********************************************/                        24980099
/*  RET  : 0 - OK, 8 - NOK                    */                        24990099
/**********************************************/                        25000099
IS_HEAP_READY_EXT:  procedure expose HEAP.                              25010099
 if GET_VARIABLE_VALUE_EXT("HEAP_READY") = "YES"                        25020099
   then                                                                 25030099
    return 0                                                            25040099
   else                                                                 25050099
    return 8                                                            25060099
                                                                        25070099
/**********************************************/                        25080099
/* Query LIST exists                          */                        25090099
/**********************************************/                        25100099
/*  PARM : LIST NAME                          */                        25110099
/*  RET  : 0 - OK, 8 - NOK                    */                        25120099
/**********************************************/                        25130099
IS_LIST_READY_EXT:  procedure expose HEAP.                              25140099
objname = arg(1)                                                        25150099
if IS_HEAP_READY_EXT() <> 0                                             25160099
  then                                                                  25170099
    return 8                                                            25180099
list_reference = GET_ITEM_REFERENCE("LIST",objname)                     25190099
if  CHECK_HASH(list_reference) = 1                                      25200099
  then                                                                  25210099
    return 0                                                            25220099
  else                                                                  25230099
    return 8                                                            25240099
/**********************************************/                        25250099
/* Query MAP exists                           */                        25260099
/**********************************************/                        25270099
/*  PARM : MAP NAME                           */                        25280099
/*  RET  : 0 - OK, 8 - NOK                    */                        25290099
/**********************************************/                        25300099
IS_MAP_READY_EXT:  procedure expose HEAP.                               25310099
objname = arg(1)                                                        25320099
if IS_HEAP_READY_EXT() <> 0                                             25330099
  then                                                                  25340099
    return 8                                                            25350099
map_reference = GET_ITEM_REFERENCE("MAP",objname)                       25360099
if  CHECK_HASH(map_reference) = 1                                       25370099
  then                                                                  25380099
    return 0                                                            25390099
  else                                                                  25400099
    return 8                                                            25410099
/**********************************************/                        25420099
/* Set HEAP lock                              */                        25430099
/* PARM : LOCK NAME                           */                        25440099
/**********************************************/                        25450099
/* PARM  : LOCK NAME                          */                        25460099
SET_HEAP_LOCK_EXT:  procedure expose HEAP.                              25470099
 interpret "HEAP."arg(1)"=0"                                            25480099
 return                                                                 25490099
                                                                        25500099
/**********************************************/                        25510099
/* Is lock set                                */                        25520099
/* PARM  : LOCK NAME                          */                        25530099
/*  RET  : 1 - LOCKED, 0 - UNLOCKED           */                        25540099
/**********************************************/                        25550099
IS_HEAP_LOCK_SET_EXT:  procedure expose HEAP.                           25560099
 path  = "HEAP."arg(1)                                                  25570099
 interpret "sym = symbol('"path"')"                                     25580099
 if sym = "LIT"                                                         25590099
   then                                                                 25600099
     return 0                                                           25610099
   else                                                                 25620099
     return 1                                                           25630099
/**********************************************/                        25640099
/* Set HEAP unlock                            */                        25650099
/* PARM  : LOCK NAME                          */                        25660099
/**********************************************/                        25670099
UNSET_HEAP_LOCK_EXT:  procedure expose HEAP.                            25680099
 path  = "HEAP."arg(1)                                                  25690099
 drop (path)                                                            25700099
 return                                                                 25710099
                                                                        25720099
/**********************************************/                        25730099
/* SET variable value - EXTERNAL              */                        25740099
/**********************************************/                        25750099
/*  ARGS : variable name                      */                        25760099
/*       : variable value                     */                        25770099
/*  RET  : 0 - OK, 8 - NOK                    */                        25780099
SET_VARIABLE_VALUE_EXT:  procedure expose HEAP.                         25790099
rc = VARIABLE_SET(arg(1),arg(2))                                        25800099
return COLLECT_STATISTICS("VARIABLE_SET")                               25801099
                                                                        25810099
/**********************************************/                        25820099
/* GET variable value - EXTERNAL              */                        25830099
/**********************************************/                        25840099
/*  ARGS : variable name                      */                        25850099
/*  returns : value                           */                        25860099
/*                                            */                        25870099
GET_VARIABLE_VALUE_EXT:  procedure expose HEAP.                         25880099
 parse value VARIABLE_GET(arg(1)) with rc var_val                       25890099
 return strip(var_val)                                                  25900099
                                                                        25910099
/**********************************************/                        25920099
/* returns element data by name - EXTERNAL    */                        25930099
/**********************************************/                        25940099
/*  ARGS : element reference name             */                        25950099
/*  returns : STMXDATA. sructure              */                        25960099
/*                                            */                        25970099
GET_DATA_BY_ELEMENT_NAME_EXT:  procedure expose HEAP. STMXDATA.         25980099
STMXDATA.0 = 0                                                          25990099
if HEAP.0 = 0   | symbol('HEAP.0') =  "LIT"                             26000099
  then                                                                  26010099
    return                                                              26020099
elref = GET_ITEM_REFERENCE("ELEMENT",arg(1))                            26030099
elhash  = GET_HASH_BY_REFERENCE(elref)                                  26040099
if datatype(HEAP.elhash.0) = "NUM"                                      26050099
 then                                                                   26060099
   do                                                                   26070099
    do i = 0 to HEAP.elhash.0                                           26080099
    interpret "STMXDATA."i" = HEAP."elhash"."i                          26090099
    end                                                                 26100099
   end                                                                  26110099
return                                                                  26120099
                                                                        26130099
/**********************************************/                        26140099
/*                                            */                        26150099
/*   I N T E R N A L  R O U T I N E S         */                        26160099
/*                                            */                        26170099
/**********************************************/                        26180099
/* returns normalized name                    */                        26190099
/**********************************************/                        26200099
NORMALIZE_NAME : procedure                                              26210099
 return strip(arg(1))                                                   26220099
                                                                        26230099
/**********************************************/                        26240099
/* returns hash of HEAP item by its reference */                        26250099
/* PARM : OBJ REFERENCE                       */                        26260099
/*  RET : HASH                                */                        26270099
/**********************************************/                        26280099
GET_HASH_BY_REFERENCE : procedure expose HEAP.                          26290099
header = GET_HEADER_BY_REFERENCE(arg(1))                                26300099
return GET_INSTANCE_BY_HEADER(header)                                   26310099
                                                                        26320099
/************************************************/                      26330099
/* returns header of HEAP item by its reference */                      26340099
/* PARM : OBJ REFERENCE                         */                      26350099
/*  RET : HEADER  (HASH CLASS)                  */                      26360099
/************************************************/                      26370099
GET_HEADER_BY_REFERENCE : procedure expose HEAP.                        26380099
object_reference = arg(1)                                               26390099
hash = word(HEAP.object_reference,1)                                    26400099
return HEAP.hash                                                        26410099
                                                                        26420099
/************************************************/                      26430099
/* extract object from HEAP                     */                      26440099
/* PARM : OBJ HASH                              */                      26450099
/*  RET : 0 OBJNAME CLSNAME or 8                */                      26460099
/************************************************/                      26470099
GETOBJ : procedure expose HEAP. STMXDATA.                               26480099
 objhash  = arg(1)                                                      26490099
 if CHECK_HASH(objhash) = 0                                             26500099
   then                                                                 26510099
     return 8                                                           26520099
                                                                        26530099
 header  = HEAP.objhash                                                 26540099
 objname = GET_REFERENCE_BY_HEADER(header)                              26550099
 clsname = GET_CLSNAME_BY_HEADER(header)                                26560099
                                                                        26570099
 return '0' objname clsname                                             26580099
                                                                        26590099
/********************************************/                          26600099
/* H A S H      R O U T I N E S             */                          26610099
/********************************************/                          26620099
                                                                        26630099
/********************************************/                          26640099
/* checks whether the hash is used (1)      */                          26650099
/********************************************/                          26660099
CHECK_HASH : procedure expose HEAP.                                     26670099
 hash   = arg(1)                                                        26680099
 if symbol('HEAP.'hash) = "LIT"                                         26690099
   then                                                                 26700099
     return 0                                                           26710099
   else                                                                 26720099
     return 1                                                           26730099
                                                                        26740099
/********************************************/                          26750099
/* add pre-generated pseudo hash to HEAP    */                          26760099
/* Used for references                      */                          26770099
/********************************************/                          26780099
ADD_HASH : procedure expose HEAP.                                       26790099
 hash     = arg(1)                                                      26800099
 hdr_path =  arg(2)                                                     26810099
 if symbol('HEAP.'hash) = "LIT"                                         26820099
   then                                                                 26830099
     do                                                                 26840099
     call SET_NEW_HASH hash , hdr_path                                  26850099
     return 0                                                           26860099
     end                                                                26870099
   else                                                                 26880099
     do                                                                 26890099
     call HMSG ".The identical item was found in heap, hash" hash       26900099
     return 8                                                           26910099
     end                                                                26920099
/********************************************/                          26930099
/* provides message interface suitable with */                          26940099
/* injector                                 */                          26950099
/********************************************/                          26960099
HMSG : procedure expose HEAP.                                           26970099
 MSG('H',arg(1))                                                        26980099
 return                                                                 26990099
                                                                        27000099
/********************************************/                          27010099
/* generates new hash which is not in use   */                          27020099
/* yet                                      */                          27030099
/********************************************/                          27040099
GET_HASH : procedure expose HEAP.                                       27050099
 in = '000102030405060708090A0B0C0D0E0F'x  ||,                          27060099
      '101112131415161718191A1B1C1D1E1F'x  ||,                          27070099
      '202122232425262728292A2B2C2D2E2F'x  ||,                          27080099
      '303132333435363738393A3B3C3D3E3F'x  ||,                          27090099
      '404142434445464748494A4B4C4D4E4F'x  ||,                          27100099
      '505152535455565758595A5B5C5D5E5F'x  ||,                          27110099
      '606162636465666768696A6B6C6D6E6F'x  ||,                          27120099
      '707172737475767778797A7B7C7D7E7F'x  ||,                          27130099
      '808182838485868788898A8B8C8D8E8F'x  ||,                          27140099
      '909192939495969798999A9B9C9D9E9F'x  ||,                          27150099
      'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'x  ||,                          27160099
      'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'x  ||,                          27170099
      'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'x  ||,                          27180099
      'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'x  ||,                          27190099
      'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'x  ||,                          27200099
      'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'x                               27210099
 out ='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef'   ||,                          27220099
      'ghijklmnopqrstuvwxyz0123456789@#'   ||,                          27230099
      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef'   ||,                          27240099
      'ghijklmnopqrstuvwxyz0123456789@#'   ||,                          27250099
      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef'   ||,                          27260099
      'ghijklmnopqrstuvwxyz0123456789@#'   ||,                          27270099
      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef'   ||,                          27280099
      'ghijklmnopqrstuvwxyz0123456789@#'                                27290099
                                                                        27300099
 /* initialize stem for first time */                                   27310099
 if symbol('HEAP.0')      = "LIT"                                       27320099
   then                                                                 27330099
      HEAP.0 = 0                                                        27340099
                                                                        27350099
 loop = 1                                                               27360099
 do while loop=1                                                        27370099
   a = random(32768,99999) * random(1024,9999)                          27380099
   b = d2c(a)                                                           27390099
   c = random(32768,99999) * random(1024,9999)                          27400099
   d = d2c(c)                                                           27410099
   hash = translate(b||d,out,in)                                        27420099
   /* convert hash to uppercase. REXX is not case sensitive */          27430099
   hash = translate(hash)                                               27440099
   /* check that hash is not in use and then add it to stem */          27450099
   if symbol('HEAP.'hash)  = "LIT" |  hash <> "INTERNAL"                27460099
     then                                                               27470099
       do                                                               27480099
       call SET_NEW_HASH hash                                           27490099
       loop = 0                                                         27500099
       end                                                              27510099
 end                                                                    27520099
 return hash                                                            27530099
                                                                        27540099
/*********************************************/                         27550099
/* add hash to the HEAP index and initialize */                         27560099
/* the item header for either :              */                         27570099
/* 1. Regular hashes                         */                         27580099
/* 2. Pseudo hashes (refereces)              */                         27590099
/* For both they set index back to itself    */                         27600099
/* in the element HEAPIX or in the path to   */                         27610099
/* header                                    */                         27620099
/*********************************************/                         27630099
SET_NEW_HASH : procedure expose HEAP.                                   27640099
 hash = arg(1)                                                          27650099
 j = HEAP.0 + 1                                                         27660099
 HEAP.0 = j                                                             27670099
 HEAP.j = hash                                                          27680099
 if ARG() = 1   /* regular hash */                                      27690099
    then                                                                27700099
      do  /* create link to the new added header */                     27710099
      HEAP.hash = hash                   /* set anchor */               27720099
      interpret "HEAP."hash"_HEAPIX="j   /* set heap index */           27730099
      end                                                               27740099
 if ARG() = 2 /* pseudo, reference */                                   27750099
    then                                                                27760099
      HEAP.hash = arg(2) j       /* set path to header & index back */  27770099
 return                                                                 27780099
