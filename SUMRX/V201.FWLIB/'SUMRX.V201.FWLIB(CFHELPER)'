/*  TSO Common functions collection                          */         00010070
                                                                        00020070
/********************************************************/              00030070
/* trace stem content                                   */              00040070
/********************************************************/              00050070
TRACE_STEM : procedure  expose HEAP.                                 ,  00060070
++INC &TRCHLPR                                                          00070097
                                                                        00080070
MODE = "TRACE"                                                          00090070
ILEN=14                                                                 00100070
HLEN=ILEN+10                                                            00110070
stem = arg(1)                                                           00120070
obj_ref = arg(2)                                                        00130070
interpret "loop_bndry="stem".0"                                         00140070
if translate(stem)  = "HEAP"                                            00150070
  then                                                                  00160070
    do    /* HEAP object */                                             00170070
    VLEN = HLEN                                                         00180070
    lena = 0                                                            00190070
    if symbol('HEAP.0') <> "LIT"                                        00200070
     then                                                               00210070
       do                                                               00220070
       if obj_ref <> ''                                                 00230070
         then                                                           00240070
           do                                                           00250070
           /* trace of HEAP item by reference */                        00260070
           call CMSG 2,arg(2)                                           00270070
           objhash = GET_HASH_BY_REFERENCE(obj_ref)                     00280070
           call HEAP_DETAIL objhash                                     00290070
           return                                                       00300070
           end                                                          00310070
         else                                                           00320070
           do                                                           00330070
           /* Trace of whole HEAP */                                    00340070
           call CMSG 3                                                  00350070
           end                                                          00360070
       end                                                              00370070
    end   /* HEAP object */                                             00380070
  else                                                                  00390070
    do   /* just stem */                                                00400070
    VLEN = ILEN                                                         00410070
    lena = length(arg(1))+1                                             00420070
    end  /* just stem */                                                00430070
                                                                        00440070
if datatype(loop_bndry)="NUM"                                           00450070
  then                                                                  00460070
   do                             /* normalized stem */                 00470070
    interpret "cnt="stem".0"                                            00480070
    call PATH_DETAIL left(stem'.0',VLEN+lena,' '),strip(cnt,'trailing') 00490070
    do j = 1 to  loop_bndry       /* loop over stem structure */        00500070
    interpret "el="stem"."j                                             00510070
    call PATH_DETAIL left(stem'.'j,VLEN+lena,' '),strip(el,'trailing')  00520070
    el_ndx=stem"."el".0"                                                00531099
    if datatype(el,'S') = 1                                             00532099
     then                                                               00533099
      do                                                                00534099
      interpret "el_ndx="el_ndx                                         00535099
      if symbol(stem'.'el) = "LIT" & datatype(el_ndx,'S') <> 1          00536099
        then                                                            00537099
          iterate                                                       00538099
        else                                                            00539099
          if datatype(el_ndx) <> "NUM"                                  00540099
           then                                                         00550099
             iterate                                                    00560099
      end                                                               00570099
     else                                                               00570199
      iterate                                                           00570299
                                                                        00571099
    if translate(stem)  = "HEAP"                                        00580070
      then                                                              00590070
        do                                                              00600070
        if length(el) > 8                                               00610070
          then                                                          00620070
            do   /* reference */                                        00630070
            path = el                                                   00640070
            path_o = "HEAP." || path                                    00650070
            interpret "val = " path_o                                   00660070
            call PATH_DETAIL path_o,val                                 00670070
            iterate                                                     00680070
            end  /* reference */                                        00690070
          else                                                          00700070
            do                                                          00710070
            clsname = word(HEAP.el,2)                                   00720070
            el      = clsname"_"el                                      00730070
            end                                                         00740070
        end                                                             00750070
                                                                        00760070
    interpret  "sst_len="stem"."el".0"                                  00770070
    if datatype(sst_len)="NUM"    /* normalized 2nd level */            00780070
      then                                                              00790070
         do                                                             00800070
           call PATH_DETAIL stem"."left(el'.0',VLEN,' '),sst_len        00810070
           do k = 1 to sst_len                                          00820070
           interpret "sst_el="stem"."el"."k                             00830070
           call PATH_DETAIL stem"."left(el'.'k,VLEN,' '),sst_el         00840070
           end                                                          00850070
         end                                                            00860070
      else                                                              00870070
         do                     /* not normalized 2nd level */          00880070
          if translate(stem) <> "HEAP"                                  00890070
            then                                                        00900070
              do                                                        00910070
               interpret  "stm_val="stem"."el                           00920070
               call PATH_DETAIL stem"."left(el,VLEN,' '),stm_val        00930070
               iterate                                                  00940070
              end                                                       00950070
                                                                        00960070
         parse upper var el clsname "_"  objhash  .                     00970070
         call HEAP_DETAIL objhash                                       00980070
         end                    /* not normalized 2nd level */          00990070
    end /* loop over stem structure */                                  01000070
   end /* normalized stem */                                            01010070
return                                                                  01020070
                                                                        01030070
                                                                        01040070
/********************************************************/              01050070
/* TRACE/GC/SRLZ HEAP item content                      */              01060070
/********************************************************/              01070070
HEAP_DETAIL: procedure expose HLEN MODE FILE_TO_PERSIST                ,01080084
                       SRLZ_REC SRLZ_FLAG HEAP.                        ,01090084
                       hash_lstfields stm_lstfields                    ,01100084
                       hash_objfields stm_objfields                    ,01110081
                       hash_elmfields stm_elmfields                    ,01120081
                       hash_mapfields stm_mapfields                    ,01130081
++INC &TRCHLPR                                                          01140097
                                                                        01150070
/* For HEAP trace only               */                                 01160070
if symbol('HEAP.0') = "LIT"                                             01170070
  then                                                                  01180070
    return                                                              01190070
                                                                        01200077
/* do not allow detail entrance for serialization  */                   01210072
if MODE = "SRLZ" & symbol('SRLZ_FLAG') = "LIT"                          01220096
  then                                                                  01230072
    return                                                              01240072
drop SRLZ_FLAG                                                          01250079
                                                                        01260072
if symbol('hash_lstfields') = "LIT"                                     01270070
  then      /* set control variables from HEAP */                       01280070
   do                                                                   01290070
   hash_lstfields = GET_HEAP_HASH_FOR_REFERENCE("NAME_ELM_#LSTFIELDS")  01300070
   stm_lstfields  = "HEAP."hash_lstfields                               01310070
   hash_objfields = GET_HEAP_HASH_FOR_REFERENCE("NAME_ELM_#OBJFIELDS")  01320070
   stm_objfields  = "HEAP."hash_objfields                               01330070
   hash_elmfields = GET_HEAP_HASH_FOR_REFERENCE("NAME_ELM_#ELMFIELDS")  01340070
   stm_elmfields  = "HEAP."hash_elmfields                               01350070
   hash_mapfields = GET_HEAP_HASH_FOR_REFERENCE("NAME_ELM_#MAPFIELDS")  01360070
   stm_mapfields  = "HEAP."hash_mapfields                               01370070
   end                                                                  01380070
                                                                        01390070
  objhash          = arg(1)                                             01400070
                                                                        01410080
  if MODE = "SRLZ"                                                      01420096
   then                                                                 01430080
     do                                                                 01440080
     /* put header for hash or anchor for reference */                  01450080
     call PATH_DETAIL "HEAP."objhash , HEAP.objhash                     01460095
     if length(objhash) > 8  /* REFERENCE ? */                          01470080
       then                                                             01480080
        return                                                          01490080
     end                                                                01500080
                                                                        01510080
  clsname          = GET_CLSNAME_BY_HEADER(HEAP.objhash)                01520070
  object_reference = GET_REFERENCE_BY_HEADER(HEAP.objhash)              01530070
  objname          = GET_NAME_BY_HEADER(HEAP.objhash)                   01540070
  if objhash <> '' & object_referennce = ''                             01550070
    then                                                                01560070
      do                                                                01570070
      /* Heap reference not found */                                    01580070
      call CMSG 1,arg(2)                                                01590070
      return                                                            01600070
      end                                                               01610070
                                                                        01620070
  if clsname  = "LIST"                                                  01630070
    then                                                                01640070
     do /* LIST */                                                      01650070
     /* loop through the list fields and trace them */                  01660070
     interpret "first  = HEAP." || objhash || "_FIRST"                  01670070
                                                                        01680070
     /* detail all elements of list */                                  01690070
     next =  first                                                      01700070
      do while next <> ''         /* loop over linked list */           01710070
       /* Heap ELEMENT */                                               01720099
       call CMSG 4,"LIST ELEMENT"                                       01730099
       /* loop through the list elements */                             01740070
       elhash = GET_INSTANCE_BY_HEADER(next)                            01750070
       interpret "next = HEAP." || elhash || "_NEXT"                    01760070
       call HEAP_DETAIL elhash                                          01770070
      end                         /* loop over linked list */           01780070
                                                                        01790070
     /* remove list hash from index  */                                 01800070
     call HEAP_UPDATE_INDEX_AND_STATS objhash                           01810085
                                                                        01820070
     /* loop through the list fields */                                 01830070
     /* Heap LIST */                                                    01831099
     call CMSG 4,"LIST"                                                 01832099
     path = objhash                                                     01840070
     interpret "loop_bndry_lst = "stm_lstfields".0"                     01850070
       do l = 1 to loop_bndry_lst                                       01860070
       interpret "tmp_lstfields = "stm_lstfields"."l                    01870070
       parse var tmp_lstfields trailer value .                          01880070
       path_o = "HEAP." || path  || "_" || trailer                      01890070
       if trailer = "<HEAD>"                                            01900070
         then                                                           01910070
           do                                                           01920070
           interpret "val = HEAP."path                                  01930070
           path_o = "<"path_o                                           01940070
           end                                                          01950070
          else                                                          01960070
            do                                                          01970070
            if value = "<clslist"                                       01980070
              then                                                      01990070
                do                                                      02000070
                val = clsname                                           02010070
                path_o = "<"path_o                                      02020070
                end                                                     02030070
              else                                                      02040070
                interpret "val = " path_o                               02050070
           end                                                          02060070
       call PATH_DETAIL path_o,val                                      02070070
       end                                                              02080070
     end /* LIST */                                                     02090070
    else                                                                02100070
     if clsname  = "MAP"                                                02110070
      then                                                              02120070
        do /* MAP */                                                    02130070
        /* Heap MAP */                                                  02140099
        call CMSG 4,"MAP"                                               02150099
                                                                        02160088
        /* loop through the MAP fields and trace them */                02170070
        path_m = objhash                                                02180070
        interpret "size_arr = HEAP."path_m"_SIZE"                       02190070
        do  i = 1 to size_arr  /* loop over map internal stem */        02200070
        interpret "map_index = HEAP."path_m"_"i                         02210070
        path_o = "HEAP."path_m"_"i                                      02220070
        call PATH_DETAIL path_o,map_index                               02230070
        path_o = "HEAP."path_m"_"map_index                              02240070
        interpret "map_data = HEAP."path_m"_"map_index                  02250070
        call PATH_DETAIL path_o,map_data                                02260070
        elhash = word(map_data,2)                                       02270070
        /* Heap ELEMENT */                                              02271099
        call CMSG 4,"MAP ELEMENT"                                       02272099
        call HEAP_DETAIL elhash                                         02280070
        end                    /* loop over map internal stem */        02290070
                                                                        02300088
        /* remove map hash from index  */                               02310088
        call HEAP_UPDATE_INDEX_AND_STATS objhash                        02320088
                                                                        02330070
        interpret "loop_bndry_map = "stm_mapfields".0"                  02340070
          do l = 1 to loop_bndry_map                                    02350070
          interpret "tmp_mapfields = "stm_mapfields"."l                 02360070
          parse var tmp_mapfields trailer value .                       02370070
          path_o = "HEAP." || path_m || "_" || trailer                  02380070
          if trailer = "<HEAD>"                                         02390070
            then                                                        02400070
              do                                                        02410070
              interpret "val = HEAP."path_m                             02420070
              path_o = "<"path_o                                        02430070
              end                                                       02440070
             else                                                       02450070
               do                                                       02460070
               if value = "<clsmap"                                     02470070
                 then                                                   02480070
                   do                                                   02490070
                   val = clsname                                        02500070
                   path_o = "<"path_o                                   02510070
                   end                                                  02520070
                 else                                                   02530070
                   interpret "val = " path_o                            02540070
              end                                                       02550070
          call PATH_DETAIL path_o,val                                   02560070
          end                                                           02570070
        end /* MAP */                                                   02580070
      else                                                              02590070
       if clsname  = "ELEMENT"                                          02600070
        then                                                            02610070
          do  /* ELEMENT */                                             02620070
          /* remove element hash from index  */                         02630070
          call HEAP_UPDATE_INDEX_AND_STATS objhash                      02640085
          path   = objhash                                              02650070
                                                                        02660070
          interpret "loop_bndry = HEAP."path".0"                        02670070
          call PATH_DETAIL "HEAP."path".0",loop_bndry                   02680070
           do k = 1 to loop_bndry                                       02690070
           interpret "#value=HEAP."path".k"                             02700070
           call PATH_DETAIL "HEAP."path"."k,#value                      02710070
           end                                                          02720070
                                                                        02730087
          /* get type of SUPER Container */                             02740070
          interpret "ref_super = HEAP."path"_SUPER"                     02750070
          hdr  = GET_HEADER_BY_REFERENCE(ref_super)                     02760070
          clsn = GET_CLSNAME_BY_HEADER(hdr)                             02770070
          interpret "loop_bndry_elm = "stm_elmfields".0"                02780070
            do l = 1 to loop_bndry_elm                                  02790070
            interpret "tmp_elmfields = "stm_elmfields"."l               02800070
            parse var tmp_elmfields trailer value .                     02810070
            path_o = "HEAP." || path  || "_" || trailer                 02820070
            if trailer = "<HEAD>"                                       02830070
              then                                                      02840070
                do                                                      02850070
                interpret "val = HEAP."path                             02860070
                path_o = "<"path_o                                      02870070
                end                                                     02880070
               else                                                     02890070
                do                                                      02900070
                if value = "<clsel"                                     02910070
                 then                                                   02920070
                   do                                                   02930070
                   interpret "hdr = HEAP."path                          02940070
                   val = GET_CLSNAME_BY_HEADER(hdr)                     02950070
                   path_o = "<"path_o                                   02960070
                   end                                                  02970070
                 else                                                   02980070
                  if (clsn = "LIST" & (trailer = "NEXT" |    ,          02990070
                      trailer = "PREV"))                    |,          03000070
                     (trailer <> "NEXT" & trailer <> "PREV")            03010070
                     then                                               03020070
                       interpret "val = " path_o                        03030070
                     else                                               03040070
                       val = ''                                         03050070
                end                                                     03060070
            call PATH_DETAIL path_o,val                                 03070070
            end                                                         03080070
          end /* ELEMENT */                                             03090070
        else                                                            03100070
         do   /* OBJECT */                                              03110070
         /* remove object hash from index  */                           03120070
         call HEAP_UPDATE_INDEX_AND_STATS objhash                       03130085
         path   = objhash                                               03140070
         /* Heap Object */                                              03150070
         call CMSG 4,"OBJECT"                                           03160099
         interpret "loop_bndry = HEAP."path".0"                         03170070
         call PATH_DETAIL "HEAP."path".0",loop_bndry                    03180070
         do k = 1 to loop_bndry                                         03190070
         interpret "#value=HEAP."path".k"                               03200070
         call PATH_DETAIL "HEAP."path"."k,#value                        03210070
         end                                                            03220070
                                                                        03230070
         interpret "loop_bndry_obj = "stm_objfields".0"                 03240070
         do l = 1 to loop_bndry_obj                                     03250070
         interpret "tmp_objfields = "stm_objfields"."l                  03260070
         parse var tmp_objfields trailer value .                        03270070
         path_o = "HEAP." || path  || "_" || trailer                    03280070
         if trailer = "<HEAD> "                                         03290070
           then                                                         03300070
             do                                                         03310070
             interpret "val = HEAP."path                                03320070
             path_o = "<"path_o                                         03330070
             end                                                        03340070
            else                                                        03350070
              do                                                        03360070
              if substr(value,1,1) = "<"                                03370070
                then                                                    03380070
                  do                                                    03390070
                  interpret "val = " clsname                            03400070
                  path_o = "<"path_o                                    03410070
                  end                                                   03420070
                else                                                    03430070
                  interpret "val = " path_o                             03440070
             end                                                        03450070
         call PATH_DETAIL path_o,val                                    03460070
         end                                                            03470070
        end /* OBJECT */                                                03480070
 return                                                                 03490070
                                                                        03500070
/**********************************************************************/03510070
/*     TRACE/GC/SRLZ PATH with VALUE                                  */03520070
/**********************************************************************/03530070
HEAP_UPDATE_INDEX_AND_STATS: procedure expose MODE HEAP.                03540085
objhash = arg(1)                                                        03550070
objname = GET_REFERENCE_BY_HEADER(HEAP.objhash)                         03560071
clsname = GET_CLSNAME_BY_HEADER(HEAP.objhash)                           03570071
 if MODE = "GC"                                                         03580090
   then                                                                 03590070
      do                                                                03600070
      if clsname = "ELEMENT"                                            03610085
        then                                                            03620085
          do                                                            03630085
          interpret "ref_super = HEAP."objhash"_SUPER"                  03640085
          super_hash = GET_HEAP_HASH_FOR_REFERENCE(ref_super)           03650085
          super_clsname = GET_CLSNAME_BY_HEADER(HEAP.super_hash)        03660085
          pseudo_rtn = super_clsname || "_DELETE"                       03670085
          call EXTRACT_DATA_TO_STEM objhash                             03680085
          rc = COLLECT_STATISTICS(pseudo_rtn)                           03690085
          end                                                           03700085
      if clsname <> "LIST" & clsname <> "MAP" & clsname <> "ELEMENT"    03710085
        then                                                            03720085
          do /* OBJECT */                                               03730085
          pseudo_rtn = "OBJECT_DESTROY"                                 03740085
          call EXTRACT_DATA_TO_STEM objhash                             03750085
          rc = COLLECT_STATISTICS(pseudo_rtn)                           03760085
          end                                                           03770085
      /* remove object hash and object reference from HEAP index */     03780070
      index_hash     = GET_HEAP_INDEX_BY_HEADER(HEAP.objhash)           03790070
      object_reference = GET_REFERENCE_BY_HEADER(HEAP.objhash)          03800070
      call REMOVE_HASH_FROM_HEAP_INDEX  objhash   index_hash            03810070
      index_ref        = GET_HEAP_INDEX_FOR_REFERENCE(object_reference) 03820070
      call REMOVE_HASH_FROM_HEAP_INDEX  object_reference index_ref      03830070
      call HMSG "....GC freed object" objhash "name" objname          , 03840070
                "class" clsname                                         03850070
      end                                                               03860070
 return                                                                 03870070
                                                                        03880070
/**********************************************************************/03890085
/*     Extract data from Element or Object to STMXDATA                */03900085
/*     PARM : hash                                                    */03910085
/**********************************************************************/03920085
EXTRACT_DATA_TO_STEM : procedure expose STMXDATA. HEAP.                 03930085
path = arg(1)                                                           03940085
interpret "loop_bndry = HEAP."path".0"                                  03950085
 do k = 0 to loop_bndry                                                 03960085
 interpret "STMXDATA."k "= HEAP."path"."k                               03970085
 end                                                                    03980085
return                                                                  03990085
/**********************************************************************/04000070
/*     TRACE/GC/SRLZ PATH with VALUE                                  */04010070
/**********************************************************************/04020070
PATH_DETAIL : procedure expose MODE HLEN FILE_TO_PERSIST SRLZ_REC HEAP. 04030084
 path = arg(1)                                                          04040070
 val  = arg(2)                                                          04050070
 if MODE = "TRACE"                                                      04060070
   then                                                                 04070070
     do                                                                 04080070
     if substr(path,1,1) = "<"                                          04090070
      then                                                              04100070
       path  =  substr(path,2)                                          04110070
     /* < > virtual field */                                            04120070
     /* real field, but not for print */                                04130070
     if val = ''                                                        04140070
       then                                                             04150070
         return                                                         04160070
     if substr(path,1,5) = "HEAP."                                      04170070
       then                                                             04180070
         MSG("....."left(path,HLEN,' ')":"val)                          04190070
       else                                                             04200070
         MSG("....."path":"val)                                         04210070
     end                                                                04220070
   else                                                                 04230096
    if MODE = "SRLZ"                                                    04240096
     then                                                               04250096
       do                                                               04260096
       if substr(path,1,1) = "<"                                        04270096
        then                                                            04280096
         return                                                         04290096
       SRLZ_REC = SRLZ_REC + 1                                          04300096
       record.0 = 1                                                     04310096
       record.1 = path||'="'||val||'"'                                  04320096
       if symbol('FILE_TO_PERSIST') = "LIT" | FILE_TO_PERSIST = ''      04330096
         then                                                           04340096
          say record.1                                                  04350096
         else                                                           04360096
          do                                                            04370096
          "EXECIO 1 DISKW" FILE_TO_PERSIST "(STEM record."              04380096
          end                                                           04390096
       end                                                              04400096
     else                                                               04410096
      if MODE = "GC"                                                    04420096
       then                                                             04430096
         do                                                             04440096
         if substr(path,1,1) = "<"                                      04450096
          then                                                          04460096
           return                                                       04470096
         drop (path)                                                    04480096
         end                                                            04490096
 return                                                                 04500070
                                                                        04510070
/**********************************************************************/04520070
/*     evaluate existence of a library member : 0-true , <>0 - false  */04530070
/**********************************************************************/04540070
EXISTM : procedure expose fspc fdir vspc vdir uspc udir HEAP.           04550070
  retcode  = FSMNGR("qfileste","'"arg(1)"("arg(2)")'")                  04560070
  /* Check lib member existence  */                                     04570070
  call CMSG 5,arg(1),arg(2),retcode                                     04580070
  return retcode                                                        04590070
                                                                        04600070
/**********************************************************************/04610070
/*     State file existence                                           */04620070
/**********************************************************************/04630070
DOSTATE : procedure expose HEAP.                                        04640070
  retcode = FSMNGR('qfileste',"'"arg(1)"'")                             04650070
  /* Check file existence */                                            04660070
  call CMSG 6,arg(1),retcode                                            04670070
  return retcode                                                        04680070
                                                                        04690070
/**********************************************************************/04700070
/*     Allocate file by name                                          */04710070
/**********************************************************************/04720070
DOALLOC : procedure expose  parm_ccid pfx_dev pfx_wrk pfx_pkg HEAP.     04730070
  alc_parm = 'parm_ccid pfx_dev pfx_wrk pfx_pkg'                        04740070
  retcode =  FSMNGR('alcnfile',"'"arg(1)"'")                            04750070
  /* Allocate file */                                                   04760070
  call CMSG 7,arg(1),retcode                                            04770070
  return retcode                                                        04780070
                                                                        04790070
/**********************************************************************/04800070
/*     Delete file by name                                            */04810070
/**********************************************************************/04820070
DODEL   : procedure expose HEAP.                                        04830070
  retcode =  FSMNGR('delfile',"'"arg(1)"'")                             04840070
  /* Delete existing file */                                            04850070
  call CMSG 8,arg(1),retcode                                            04860070
  return retcode                                                        04870070
                                                                        04880070
/**********************************************************************/04890070
/*     Query specific file attribute                                  */04900070
/* arg1=file arg2=attribute name                                      */04910070
/**********************************************************************/04920070
QSATTR  : procedure expose HEAP.                                        04930070
  retcode = FSMNGR('qfilesattr',arg(1),arg(2))                          04940070
  /* query file attribute */                                            04950070
  call CMSG 9,arg(1),arg(2),retcode                                     04960070
  return retcode                                                        04970070
                                                                        04980070
/**********************************************************************/04990070
/*     Get library member list                                        */05000070
/* arg1=lib                                                           */05010070
/**********************************************************************/05020070
LIBMLIST  : procedure expose  memstat. HEAP.                            05030070
  retcode = LMMNGR('memlist',arg(1))                                    05040070
  /* Get library member */                                              05050070
  call CMSG 10,arg(1),retcode                                           05060070
  return retcode                                                        05070070
                                                                        05080070
/**********************************************************************/05090070
/*     READ a member from library                                     */05100070
/*  arg1=lib  arg2=member                                             */05110070
/**********************************************************************/05120070
LIBMREAD : procedure expose  member. HEAP.                              05130070
  retcode = LMMNGR('memread',arg(1),0,arg(2))                           05140070
  /* Read member from library */                                        05150070
  call CMSG 11,arg(1),arg(2),retcode                                    05160070
  return retcode                                                        05170070
                                                                        05180070
/**********************************************************************/05190070
/*     Move a library member to another library                       */05200070
/*  arg1=from , arg2=to, arg3=member                                  */05210070
/**********************************************************************/05220070
LIBMMEM: procedure expose HEAP.                                         05230070
  retcode =  LMMNGR('movemem',arg(1),arg(2),arg(3))                     05240070
  /* Move member to other lib */                                        05250070
  call CMSG 12,arg(1),arg(2),arg(3),retcode                             05260070
  return retcode                                                        05270070
                                                                        05280070
/**********************************************************************/05290070
/*     Copy a library member to another library with REPLACE          */05300070
/*  arg1=from , arg2=to, arg3=member                                  */05310070
/**********************************************************************/05320070
LIBCMEM: procedure expose HEAP.                                         05330070
  retcode = LMMNGR('copymem',arg(1),arg(2),arg(3))                      05340070
  /* CopyRepl member */                                                 05350070
  call CMSG 13,arg(1),arg(2),arg(3),retcode                             05360070
  return retcode                                                        05370070
                                                                        05380070
/**********************************************************************/05390070
/*     Copy a library member to another library no REPLACE            */05400070
/*  arg1=from , arg2=to, arg3=member                                  */05410070
/**********************************************************************/05420070
LIBCMEMNR: procedure expose HEAP.                                       05430070
  retcode =  LMMNGR('copymemnr',arg(1),arg(2),arg(3))                   05440070
  /* CopyNoRepl member */                                               05450070
  call CMSG 14,arg(1),arg(2),arg(3),retcode                             05460070
  return retcode                                                        05470070
                                                                        05480070
/**********************************************************************/05490070
/*     Delete a library member                                        */05500070
/*  arg1=lib  , arg2=member                                           */05510070
/**********************************************************************/05520070
LIBDMEM: procedure expose HEAP.                                         05530070
  retcode = LMMNGR('delonem',arg(1),0,arg(2))                           05540070
  /* Delete library member */                                           05550070
  call CMSG 15,arg(1),arg(2),retcode                                    05560070
  return retcode                                                        05570070
                                                                        05580070
/**********************************************************************/05590070
/*     Erase  a library                                               */05600070
/*  arg1=lib                                                          */05610070
/**********************************************************************/05620070
LIBERASE: procedure expose HEAP.                                        05630070
  retcode = LMMNGR('eraselib',arg(1))                                   05640070
  /* Erase library */                                                   05650070
  call CMSG 16,arg(1),retcode                                           05660070
  return retcode                                                        05670070
                                                                        05680070
/**********************************************************************/05690070
/*     ADD a member to library                                        */05700070
/*  arg1=lib  arg2=member                                             */05710070
/**********************************************************************/05720070
LIBAMEM: procedure expose  member. HEAP.                                05730070
  retcode = LMMNGR('memadd',arg(1),0,arg(2))                            05740070
  /* Add member to lib */                                               05750070
  call CMSG 17,arg(1),arg(2),retcode                                    05760070
  return retcode                                                        05770070
                                                                        05780070
/**********************************************************************/05790070
/*     Update a library member                                        */05800070
/*  arg1=lib  arg2=member                                             */05810070
/**********************************************************************/05820070
LIBUMEM: procedure expose  member. HEAP.                                05830070
  retcode =  LMMNGR('memupd',arg(1),' ',arg(2))                         05840070
  /* Update library member */                                           05850070
  call CMSG 18,arg(1),arg(2),retcode                                    05860070
  return retcode                                                        05870070
                                                                        05880070
/**********************************************************************/05890070
/*     Delete all library members                                     */05900070
/*  arg1=lib                                                          */05910070
/**********************************************************************/05920070
LIBDALL: procedure expose HEAP.                                         05930070
  retcode =  LMMNGR('delallm',arg(1))                                   05940070
  /* Delete all library members */                                      05950070
  call CMSG 19,arg(1),retcode                                           05960070
  return retcode                                                        05970070
                                                                        05980070
/**********************************************************************/05990070
/*     Compress library                                               */06000070
/*  arg1=lib                                                          */06010070
/**********************************************************************/06020070
LIBCOMPR: procedure expose HEAP.                                        06030070
  retcode = LMMNGR('compress',arg(1))                                   06040070
  /* Compress library */                                                06050070
  call CMSG 20,arg(1),retcode                                           06060070
  return retcode                                                        06070070
                                                                        06080070
                                                                        06090070
/**********************************************************************/06100070
/*     Floor                                                          */06110070
/**********************************************************************/06120070
FLOOR: procedure expose HEAP.                                           06130070
parse arg F                                                             06140070
return TRUNC(F) - (F < 0) * (F <> TRUNC(F))                             06150070
                                                                        06160070
/**********************************************************************/06170070
/*     Ceiling                                                        */06180070
/**********************************************************************/06190070
CEILING: procedure expose HEAP.                                         06200070
parse arg C                                                             06210070
return TRUNC(C) + (C > 0) * (C <> TRUNC(C))                             06220070
                                                                        06230070
/**********************************************************************/06240070
/*  this routine converts numeric values to boolean values            */06250070
/**********************************************************************/06260070
g2b   : procedure                                                       06270070
if arg(1) = 0                                                           06280070
   then return (1<0)                                                    06290070
   else return (0<1)                                                    06300070
                                                                        06310070
/****************************************************/                  06320070
/*  Routine compares reply with a string            */                  06330070
/*  Capital letter means mandatory character        */                  06340070
/*  Letter  means not mandatory but right character */                  06350070
/*  Returns 0 if compared, 1 if not compared        */                  06360070
/****************************************************/                  06370070
COMPARE_REPLY : procedure expose HEAP.                                  06380070
rpl = arg(1)                                                            06390070
str = arg(2)                                                            06400070
upper_number = 0                                                        06410070
if length(rpl) > 0                                                      06420070
  then                                                                  06430070
   do                                                                   06440070
    do i = 1 to length(str)                                             06450070
    if datatype(substr(str,i,1),'U') = 1                                06460070
     then                                                               06470070
       do                                                               06480070
       upper_number = upper_number + 1                                  06490070
       if translate(substr(rpl,i,1)) = substr(str,i,1)                  06500070
        then                                                            06510070
          iterate /* compared, check next char of rpl */                06520070
        else                                                            06530070
          return 1 /* appropriate rpl and str chars not compared */     06540070
       end                                                              06550070
     else                                                               06560070
       leave                                                            06570070
    end                                                                 06580070
    if upper_number > 0                                                 06590070
     then                                                               06600070
       return 0   /* str has U chars compared */                        06610070
     else                                                               06620070
       return 1   /* no U chars in str */                               06630070
  end                                                                   06640070
 else                                                                   06650070
  return 1   /* rpl is empty */                                         06660070
return 0                                                                06670070
                                                                        06680070
/***********************************************/                       06690070
/* provides message interface with a variable  */                       06700070
/* number of arguments. Suitable with injector */                       06710070
/***********************************************/                       06720070
CMSG : procedure expose MODE HEAP.                                      06730074
/* allow MSG for COMMON routines and TRACE mode of HEAP */              06740075
if symbol('MODE') <> "LIT" & MODE <> "TRACE"                            06750075
  then                                                                  06760074
    return                                                              06770074
                                                                        06780074
fw_pfx = 'C'                                                            06790070
l = arg()                                                               06800070
parms  = '("'fw_pfx'",'                                                 06810070
do i = 1 to l                                                           06820070
if i = l                                                                06830070
  then finc = ")"                                                       06840070
  else finc = ","                                                       06850070
p = '"'strip(arg(i))'"'                                                 06860099
parms = parms || p || finc                                              06900070
end                                                                     06910070
function="MSG"                                                          06920070
interpret "rc="function||parms                                          06931099
return                                                                  06940070
