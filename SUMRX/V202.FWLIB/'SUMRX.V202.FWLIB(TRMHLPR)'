/************************************************/                      00010000
/*  Prepare and send image                      */                      00020000
/************************************************/                      00030000
SEND_IMAGE : procedure expose DATALIST. SCRSTAT. HW. VARS.        ,     00040000
                       AIDS. BG_BUFF  FLDS. HEAP.                       00050011
                                                                        00060000
 ATTR.BG     = '1DE8'X /* protected for BG  */                          00070000
 ATTR.IMG    = '1D20'X /* protected for IMG */                          00080000
 ATTR.UNPROT = '1D41'X /* unprotected */                                00090000
                                                                        00100000
 call DMSG "...Send_Image,Level:"SCRSTAT.LVL                            00110000
 call DMSG "...Obtaining Window at Level:"SCRSTAT.LVL                   00120003
 if OBTAIN_WINDOW(SCRSTAT.LVL) <> 0                                     00130000
   then                                                                 00140000
     return 8                                                           00150000
                                                                        00160000
 if symbol("DATALIST.0") = "LIT" |  DATALIST.CHANGED = 1                00170000
   then                                                                 00180000
     do                                                                 00190000
     call DMSG "...Obtaining Data at Level:"SCRSTAT.LVL                 00200003
     if OBTAIN_AND_TRANSLATE_DATA(SCRSTAT.LVL) <> 0                     00210007
      then                                                              00220000
         return 8                                                       00230000
     end                                                                00240000
                                                                        00250000
  SCRSTAT.WIDTH=length(IMGSRC.1)                                        00260000
  SCRSTAT.HEIGHT=IMGSRC.0                                               00270000
  SCRSTAT.DL_MAX=DATALIST.0                                             00280000
  rc = SET_AND_CHECK_WINDOW()                                           00290000
  if rc <> "0"                                                          00300000
    then                                                                00310000
      return  rc                                                        00320000
                                                                        00330000
 if SCRSTAT.DL_OFFSET > SCRSTAT.DL_MAX                                  00340000
    then                                                                00350000
      SCRSTAT.DL_OFFSET  = SCRSTAT.DL_OFFSET - SCRSTAT.R_NUM            00360000
 if SCRSTAT.DL_OFFSET < 0                                               00370000
    then                                                                00380000
      SCRSTAT.DL_OFFSET  = 1                                            00390000
                                                                        00400000
  if SCRSTAT.INFO_MSG   <> ''                                           00410008
    then                                                                00420000
     SCRSTAT.INFO_MSG = '***' SCRSTAT.INFO_MSG                          00430008
                                                                        00440000
  LPIPE() "  (endchar ? stagesep %)                       " ||,         00450000
          "% stem IMGSRC.                                 " ||,         00460000
          "% r:totarget locate /++R/                      " ||,         00470000
          "% f:fanin 0 3 1 4 2                            " ||,         00480000
          "% stem scr3270.                                " ||,         00490000
          "?"                                               ||,         00500000
          "r:"                                              ||,         00510000
          "% drop first 1                                 " ||,         00520000
          "% e:totarget locate /++I/                      " ||,         00530009
          "% buffer                                       " ||,         00540000
          "% f:                                           " ||,         00550000
          "?"                                               ||,         00560000
          "e:"                                              ||,         00570000
          "% drop first 1                                 " ||,         00580000
          "% buffer                                       " ||,         00590000
          "% f:                                           " ||,         00600000
          "?"                                               ||,         00610000
          "  stem DATALIST. from" SCRSTAT.DL_OFFSET         ||,         00620000
          "% take first" SCRSTAT.R_NUM                      ||,         00630000
          "% specs /|/ 1  w1-* nw /|/ "SCRSTAT.WIDTH        ||,         00640000
          "% f:                                           " ||,         00650000
          "?"                                               ||,         00660000
          "  var SCRSTAT.INFO_MSG                         " ||,         00670008
          "% strip                                        " ||,         00680000
          "% specs /|/ 1  w1-* nw /|/ "  SCRSTAT.WIDTH      ||,         00690000
          "% f:                                           "             00700000
                                                                        00710000
  LPIPE() "  (endchar ?)                    " ||,                       00720000
          "| stem scr3270.                  " ||,                       00730000
          "| stem IMGSRC.                   "                           00740000
                                                                        00750000
 SCRSTAT.INFO_MSG = ''                                                  00760008
                                                                        00770000
 if SEND_WINDOW_IMAGE() <> 0                                            00780000
   then                                                                 00790000
     return 8                                                           00800000
                                                                        00810000
 return 0                                                               00820000
                                                                        00830000
/*************************************************/                     00830107
/*  this reads user DATALIST stem and translates */                     00830207
/*  meta characters to periods                   */                     00830307
/*************************************************/                     00830407
OBTAIN_AND_TRANSLATE_DATA : procedure expose SCRSTAT. DATALIST. HEAP.   00831011
RC = OBTAIN_DATA(SCRSTAT.LVL)                                           00832007
if RC <> 0                                                              00833007
   then                                                                 00834007
     return RC                                                          00835007
all_marks  = ALLMARKS()                                                 00835107
len_marks  = length(all_marks)                                          00835207
periods    = left(".",len_marks,".")                                    00835307
do i = 1 to DATALIST.0                                                  00836007
DATALIST.i  = translate(DATALIST.i,periods,all_marks)                   00837007
end                                                                     00838007
return 0                                                                00839007
                                                                        00839107
/************************************************/                      00840000
/*  Set the window size and the anchor point    */                      00850000
/************************************************/                      00860000
SET_AND_CHECK_WINDOW : procedure expose SCRSTAT. HW. BG_BUFF        ,   00870000
                                 ATTR. HEAP.                            00880011
 /* get the window parameters  */                                       00890000
 parse value  SET_WINDOW(SCRSTAT.WIDTH,    ,                            00900000
                         SCRSTAT.HEIGHT,   ,                            00910000
                         SCRSTAT.LVL,      ,                            00920000
                         SCRSTAT.DL_MAX)   ,                            00930000
               with rc SCRSTAT.COL SCRSTAT.ROW SCRSTAT.R_NUM .          00940000
 if rc=4                                                                00950000
   then                                                                 00960000
     do                                                                 00970000
     call DMSG ".SET_WINDOW error on COL calc. , Level" SRCSTAT.LVL     00980000
     return 4                                                           00990000
     end                                                                01000000
 if rc=8                                                                01010000
   then                                                                 01020000
     do                                                                 01030000
     call DMSG ".SET_WINDOW error on ROW calc., Level" SRCSTAT.LVL      01040000
     return 8                                                           01050000
     end                                                                01060000
                                                                        01070000
 return 0                                                               01080000
                                                                        01090000
/************************************************/                      01100000
/*  Set the window size and the anchor point    */                      01110000
/************************************************/                      01120000
SET_WINDOW : procedure expose HW.  SCRSTAT. ATTR. BG_BUFF HEAP.         01130011
                                                                        01140000
w      = arg(1)    /* width of the template */                          01150000
h      = arg(2)    /* height of the template */                         01160000
w_st   = arg(3)    /* window stack number */                            01170000
r_line = arg(4)    /* data lines number */                              01180000
                                                                        01190000
if symbol("HW.COLS") = "LIT"                                            01200000
   then                                                                 01210000
     parse value DEV_GEOMETRY() with HW.COLS HW.ROWS .                  01220000
                                                                        01230000
spare            =  3                                                   01240000
diaplay_area_len =  4                                                   01250000
v_offset         =  4 * w_st                                            01260000
h_offset         =  CEILING(HW.COLS/8) * w_st                           01270000
                                                                        01280000
remained_rows = HW.ROWS - (v_offset + h) - spare                        01290000
if w + h_offset + spare >= HW.COLS                                      01300000
   then                                                                 01310000
     return "4"                                                         01320000
                                                                        01330000
if remained_rows < display_are_len                                      01340000
   then                                                                 01350000
     return "8"                                                         01360000
                                                                        01370000
if r_line < remained_rows                                               01380000
   then                                                                 01390000
     remained_rows = r_line                                             01400000
                                                                        01410000
return "0"  h_offset v_offset remained_rows                             01420000
                                                                        01430000
                                                                        01440000
/************************************************/                      01450000
/*  Send window image                           */                      01460000
/************************************************/                      01470000
SEND_WINDOW_IMAGE : procedure expose IMGSRC. SCRSTAT. HW.          ,    01480000
                                     VARS. BG_BUFF ATTR. FLDS. HEAP.    01490011
  SBA     = '11'X                                                       01500000
                                                                        01510000
  h_line_char = '08A2'x                                                 01520000
  rcode = BUILD_HW_BUFFER()                                             01530000
  if rcode <> 0                                                         01540000
    then                                                                01550000
      do                                                                01560000
      call  DMSG ".BUILD_HW_BUFFER() failed rc="rcode                   01570000
      return 8                                                          01580000
      end                                                               01590000
                                                                        01600000
  call DMSG "...FLDS stem allocated ,#:"FLDS.0                          01610000
  call TRACE_STEM "FLDS"                                                01620000
                                                                        01630000
  LPIPE() "(endchar ?)                                           " ||,  01640000
          "  stem IMGSRC.                                        " ||,  01650000
          "| change /-/"h_line_char"/                            " ||,  01660000
          "| specs /"SBA"/ 1                                     " ||,  01670000
          "        recno from "B_O(SCRSTAT.ROW,SCRSTAT.COL)        ||,  01680000
          "                    by 80 D2C 2.2 right               " ||,  01690000
          "        X"C2X(ATTR.IMG)" n                            " ||,  01700000
          "        1-* n                                         " ||,  01710000
          "        X"C2X(ATTR.BG)" n                             " ||,  01720000
          "| 3270BFRA 2                                          " ||,  01730000
          "| join *                                              " ||,  01740000
          "| var IMG3270                                         "      01750000
 if SEND_WINDOW_IMAGE_3270() <> 0                                       01760000
  then                                                                  01770000
    return 8                                                            01780000
                                                                        01790000
  call DMSG "....VARS stem filled ,#:"VARS.0                            01800000
  call TRACE_STEM "VARS"                                                01810000
  return 0                                                              01820000
                                                                        01830000
/************************************************/                      01840000
/*  prepare all stuff and send 3270 over        */                      01850000
/************************************************/                      01860000
SEND_WINDOW_IMAGE_3270 : procedure expose IMG3270 BG_BUFF         ,     01870000
                                   SCRSTAT. VARS.  FLDS. reply  HEAP.   01880011
                                                                        01890000
 if READ_BG_BUFFER() <> 0                                               01900000
   then                                                                 01910000
     return 8                                                           01920000
                                                                        01930000
   if SEND_WINDOW_IMAGE_3270_WITH_BG() <> 0                             01940000
     then                                                               01950000
       return 8                                                         01960000
                                                                        01970000
   rcode =  ASSIGN_REXX_VARS()                                          01980000
   if rcode <> 0                                                        01990000
     then                                                               02000000
       do                                                               02010000
       call DMSG ".ASSIGN_REXX_VARS:"rcode                              02020000
       return 8                                                         02030000
       end                                                              02040000
 return 0                                                               02050000
                                                                        02060000
/**********************************************************/            02070000
/*  Create WSF BG+IMG and send it with REPLY              */            02080000
/*  We also keep BG buffer , since REPLY                  */            02090001
/*  may detsroy it (FULLSCREEN issue ?!)                  */            02100000
/**********************************************************/            02110000
SEND_WINDOW_IMAGE_3270_WITH_BG : procedure expose SCRSTAT.         ,    02120000
                                           BG_BUFF IMG3270 reply HEAP.  02130011
                                                                        02140000
 WSF = 'F3'X                                                            02150000
 WCC_BG  = 'C1'X     /* for BG screen */                                02160000
 WCC_IMG = 'C3'X     /* for IMAGE     */                                02170000
                                                                        02180000
 call DMSG "...Prepare to display BG_BUFF and IMG3270"                  02190000
                                                                        02200000
 /* Structured field for BG Buffer , Write Erase */                     02210000
 OB_w_tmpl_BG    = '4000'X || 'F5'X || WCC_BG    /* 5.16 OB 3270DS */   02220000
 len_wsf_hex_BG  = x2c(d2x(6 + length(BG_BUFF)+0))                      02230000
 len_wsf_BG      = right(len_wsf_hex_BG,2,'00'X)                        02240000
 OB_write_BG     = len_wsf_BG || OB_w_tmpl_BG || BG_BUFF                02250000
                                                                        02260000
 /* Structured field for IMG 3270 , Write Not Erase */                  02270000
 OB_w_tmpl_IMG   = '4000'X || 'F1'X  || WCC_IMG /* 5.16 OB 3270DS */    02280000
 len_wsf_hex_IMG = x2c(d2x(6 + length(IMG3270)+0))                      02290000
 len_wsf_IMG     = right(len_wsf_hex_IMG,2,'00'x)                       02300000
 OB_write_IMG    = len_wsf_IMG || OB_w_tmpl_IMG || IMG3270              02310000
                                                                        02320000
                                                                        02330000
 wsf_write       = WSF || OB_write_BG || OB_write_IMG                   02340000
 call TRACE_BUFFER "WSF", substr(wsf_write,1,32)                        02350000
                                                                        02360000
 call DMSG "....Send WSF(BG+IMG) with RELPY"                            02370000
                                                                        02380000
 LPIPE() "(endchar ?)         " ||,                                     02390000
         "  var wsf_write     " ||,                                     02400000
         "| fullscreen        " ||,                                     02410000
         "| var reply         "                                         02420000
 call DMSG "....REPLY:"substr(reply,1,32)                               02430000
                                                                        02440000
 /* keep BG buffer due to FULLSCREEN REPLY bug */                       02450001
 call DMSG "....Send WSF(BG+IMG) NO RELPY"                              02460000
                                                                        02470001
 /* put REPLY fields into the buffer */                                 02480001
 sba_pos = pos('11'x,reply)                                             02481010
 if sba_pos > 0                                                         02482010
   then                                                                 02483010
     do                                                                 02484010
     REP = substr(reply,sba_pos)     /* drop all before first SBA */    02490010
     OB_REP          = '4000'X || 'F1'X  || WCC_IMG /* 5.16 OB 3270DS */02500010
     len_wsf_hex_REP = x2c(d2x(6 + length(REP)+0))                      02510010
     len_wsf_REP     = right(len_wsf_hex_REP,2,'00'x)                   02520010
     OB_write_REP    = len_wsf_REP || OB_REP || REP                     02530010
     wsf_write       = wsf_write || OB_write_REP                        02540010
     end                                                                02550010
 LPIPE() "(endchar ?)         " ||,                                     02560000
         "  var wsf_write     " ||,                                     02570000
         "| fullscreen noread "                                         02580000
                                                                        02590000
 return 0                                                               02600000
                                                                        02610000
/************************************************/                      02620000
/*  read terminal buffer , it will be BG        */                      02630000
/************************************************/                      02640000
READ_BG_BUFFER : procedure expose SCRSTAT. ATTR. BG_BUFF HEAP.          02650011
                                                                        02660000
 if symbol("BG_BUFF") = "LIT"                                           02670000
   then                                                                 02680000
    do                                                                  02690000
     call DMSG"....SEND_WINDOW_IMAGE_3270: Read BG Buffer"              02700000
     LPIPE() "(endchar ?)           " ||,                               02710000
              "  strliteral x02      " ||,                              02720000
              "| fullscreen condread " ||,                              02730000
              "| var BG_BUFF         "                                  02740000
                                                                        02750000
     /* See  FULLSCR: 3.41.4 | Output Record Format     */              02760000
     /* Currently read buffer which was sent earlier    */              02770000
     /* by FULLSCR stage, has a header of 3 bytes :     */              02780000
     /* - x'60'   -  solicited RB                       */              02790000
     /* - 2 bytes of the cursor position                */              02800000
     /* This does not occur for TSO/ISPF screens        */              02810000
     /* since they were not sent via FULLSCR stage.     */              02820000
                                                                        02830000
     if SCRSTAT.LVL > 1                                                 02840000
       then                                                             02850000
         BG_BUFF = substr(BG_BUFF,4)                                    02860000
                                                                        02870000
     /* drop 3270 orders from the buffer  */                            02880000
     if MAKE_BUFFER_TEXT() <> 0                                         02890000
      then                                                              02900000
          return 8                                                      02910000
                                                                        02920000
     call TRACE_BUFFER "BG_TOTEXT"                                      02930000
                                                                        02940000
     l_cb     = length(BG_BUFF)-0    /* cut last to avoid wrap around */02950000
     s_cb     = 1                    /* 1D60 occupies 1 byte */         02960000
     BG_BUFF  = substr(BG_BUFF,s_cb,l_cb)                               02970000
     LPIPE() "(endchar ?)                              " ||,            02980000
             "  var BG_BUFF                            " ||,            02990000
             "| specs           1-* n                  " ||,            03000000
             "| specs X"C2X(ATTR.BG)" 1 1-* n          " ||,            03010000
             "| var BG_UBFF                            "                03020000
     call TRACE_BUFFER "BG_BUFF"                                        03030000
                                                                        03040000
     end                                                                03050000
 return 0                                                               03060000
                                                                        03070000
/***********************************************************/           03080000
/*  Build array of input fields and map them on REXX vars  */           03090000
/*  Replace META field definition by its 3270 image.       */           03100000
/*  Each input field in symbolic map is presented as       */           03110000
/*  #ClF#  , where                                         */           03120000
/*   C - cursor to be set on this field                    */           03130000
/*   l - field length , possible value is in 1-9           */           03140000
/*   F - 1-byte prefix of the REXX var mapped on the field */           03150000
/***********************************************************/           03160000
BUILD_HW_BUFFER : procedure expose FLDS. SCRSTAT. IMGSRC.          ,    03170004
                               ATTR. HEAP.                              03180011
row     = SCRSTAT.ROW                                                   03190000
col     = SCRSTAT.COL                                                   03200000
                                                                        03210000
IC = '13'X                                                              03220000
                                                                        03230000
FLDS.0 = 0                                                              03240000
                                                                        03250000
tags = ALLMARKS()                                                       03260006
do i = 1 to IMGSRC.0          /* loop over all lines of screen map */   03270000
line = IMGSRC.i                                                         03280000
  do j = 1 to length(tags)   /* loop over all tags  */                  03290000
  tag = substr(tags,j,1)                                                03300000
  end_pos = 0                                                           03310000
  start_pos =  -1                                                       03320000
  offset_of_prev_fields = 0                                             03330000
   do while start_pos <> 0 /* go thru the line with certain tag */      03340000
   start_pos =  pos(tag,line,end_pos+1)                                 03350000
   if start_pos  > 0                                                    03360000
     then                                                               03370000
       do              /* check specific tag */                         03380000
       end_pos  =  pos(tag,line,start_pos+1)                            03390000
       if end_pos = 0                                                   03400000
        then                                                            03410000
         return "08 EP=0,SP="start_pos",TAG="tag",L#="i  ,              03420000
                || ",LINE="line                                         03430000
       start_pos = start_pos + 1                                        03440000
       end_pos   = end_pos   - 1                                        03450000
       if end_pos - start_pos <= 0                                      03460000
        then                                                            03470000
         return "08 NULL SP="start_pos",EP="end_pos",TAG="tag",L#="i ,  03480000
                || ",LINE="line                                         03490000
       elm = substr(line,start_pos,end_pos-start_pos+1)                 03500000
       if length(elm) < 2                                               03510000
        then                                                            03520000
         return "08 SP="start_pos",EP="end_pos",TAG="tag",L#="i   ,     03530000
                || ",LINE="line                                         03540000
       pos1 = translate(substr(elm,1,1))                                03550000
       pos2 = translate(substr(elm,2,1))                                03560000
       if pos1 = "C" & length(elm) < 3                                  03570000
        then                                                            03580000
         return "08 CURS SP="start_pos",EP="end_pos",TAG="tag",L#="i ,  03590000
                || ",LINE="line                                         03600000
       if pos1 = "C"                                                    03610000
         then                                                           03620000
          do   /* cursor */                                             03630000
          if datatype(pos2) <> "NUM" | pos2 = 0                         03640000
           then                                                         03650000
           return "08 NUM SP="start_pos",EP="end_pos",TAG="tag",L#="i  ,03660000
                || ",LINE="line                                         03670000
          f_len  = translate(substr(elm,2,1))                           03680000
          f_pfx  = translate(substr(elm,3,1))                           03690000
          c_mark = 1                                                    03700000
          end  /* cursor */                                             03710000
         else                                                           03720000
          do   /* no cursor */                                          03730000
          if datatype(pos1) <> "NUM" | pos1 = 0                         03740000
           then                                                         03750000
            return "08 NUM SP="start_pos",EP="end_pos",TAG="tag",L#="i ,03760000
                || ",LINE="line                                         03770000
          f_len  = translate(substr(elm,1,1))                           03780000
          f_pfx  = translate(substr(elm,2,1))                           03790000
          c_mark = 0                                                    03800000
          end  /* no cursor */                                          03810000
                                                                        03820000
       /* calculate 3270 buffer address of the field*/                  03830000
       row_fld = row + i - 1                                            03840000
       col_fld = col + 1 + start_pos - 1 - offset_of_prev_fields        03850000
                                                                        03860000
       field_design = EXTRACT_DESIGN_FIELD_VALUE(f_pfx,row_fld,col_fld) 03870000
                                                                        03880000
       /* put unprotected field into buffer according to its length */  03890000
       field = left(field_design,f_len,'_')                             03900000
       /* On screen : SUF , field, SPF */                               03910000
       len_on_screen = length(field)+2                                  03920000
       if c_mark = 1                                                    03930000
         then                                                           03940000
           field = IC || field                                          03950000
       field = ATTR.UNPROT || field || ATTR.IMG                         03960000
       len_on_map = end_pos - start_pos + 1 + 2  /* 2 tags !!! */       03970000
       delta = len_on_screen - len_on_map                               03980000
       line = substr(line,1,start_pos-2) || ,                           03990000
              field                      || ,                           04000000
              substr(line,end_pos+2)                                    04010000
       if delta < 0                                                     04020000
         then                                                           04030000
           IMGSRC.i =    substr(line,1,length(line)-1)       ||,        04040000
                         left(' ',ABS(delta),' ')            ||,        04050000
                         substr(line,length(line),1)                    04060000
          else                                                          04070000
           IMGSRC.i =    substr(line,1,length(line)-1-delta) || ,       04080000
                         substr(line,length(line),1)                    04090000
       line = IMGSRC.i                                                  04100000
       end_pos = end_pos + 1 + delta  /* let next loop go properly */   04110000
                                                                        04120000
       /* PREV offset is set with considering SPF,SUF and c_mark */     04130000
       offset_of_prev_fields = offset_of_prev_fields + 2 + c_mark       04140000
       end             /* check specific tag */                         04150000
   end                  /* go thru the line with certain tag */         04160000
  end                        /* loop over all tags  */                  04170000
end                           /* loop over all lines of screen map */   04180000
return  0                                                               04190000
/**********************************************************/            04200000
/* This puts unprotected fileds values to 3270 buffer     */            04210000
/**********************************************************/            04220000
EXTRACT_DESIGN_FIELD_VALUE: procedure expose FLDS. HEAP.                04230011
 f_pfx   = arg(1)                                                       04240000
 row_fld = arg(2)                                                       04250000
 col_fld = arg(3)                                                       04260000
 addr3270_hex = BUFFER_ADDRESS_ENC(row_fld,col_fld)                     04270000
 addr3270 = c2x(addr3270_hex)                                           04280000
 /* get data of current unprotected field from 3270 buffef */           04290000
 if symbol('FLDS.'addr3270'.'value) = "LIT"                             04300000
   then                                                                 04310000
      field_design = "_"                                                04320000
   else                                                                 04330000
      field_design = FLDS.addr3270.value                                04340000
                                                                        04350000
 /* add the element to input fields array */                            04360000
 ix                  = FLDS.0 + 1                                       04370000
 FLDS.0              = ix                                               04380000
 FLDS.ix             = addr3270                                         04390000
 FLDS.addr3270       = f_pfx                                            04400000
 FLDS.addr3270.value = ' '                                              04410000
                                                                        04420000
return field_design                                                     04430000
/**********************************************************/            04440000
/* extract values from 3270 buffer and set them to the    */            04450000
/* appropriate REXX vars                                  */            04460000
/**********************************************************/            04470000
ASSIGN_REXX_VARS : procedure expose reply FLDS. VARS. SCRSTAT. HEAP.    04480011
/*                                       */                             04490000
/*  AID Characters                       */                             04500000
/*                                       */                             04510000
/*  60              No AID               */                             04520000
/*  7D Enter                             */                             04530000
/*  F1-F9 PF1 - PF9                      */                             04540000
/*  7A-7C PF10 - PF12                    */                             04550000
/*  C1-C9 PF13 - PF21                    */                             04560000
/*  4A-4C PF22 - PF24                    */                             04570000
/*  6C PA1                               */                             04580000
/*  6E PA2                               */                             04590000
/*  6B PA3                               */                             04600000
/*  6D Clear                             */                             04610000
/*                                       */                             04620000
                                                                        04630000
 /* Fill AID table                        */                            04640000
 AID.60 = "NO AID"                                                      04650000
 AID.7D = "ENTER"                                                       04660000
 do i = 1 to 9                                                          04670000
 interpret "AID.F"i"='PF"i"'"                                           04680000
 interpret "AID.C"i"='PF"i+12"'"                                        04690000
 if i < 4                                                               04700000
     then                                                               04710000
       do                                                               04720000
       j = d2x(112 + i + 9)                                             04730000
       interpret "AID."j"='PF"i+9"'"                                    04740000
       end                                                              04750000
 if i < 5                                                               04760000
     then                                                               04770000
       do                                                               04780000
       j = d2x(64 + i + 9)                                              04790000
       interpret "AID."j"='PF"i+21"'"                                   04800000
       end                                                              04810000
 end                                                                    04820000
 AID.6C = "PA1"                                                         04830000
 AID.6E = "PA2"                                                         04840000
 AID.6B = "PA3"                                                         04850000
 AID.6D = "CLEAR"                                                       04860000
                                                                        04870000
 SBA = '11'X                                                            04880000
                                                                        04890000
 aid_char    = c2x(substr(reply,1,1))                                   04900000
 cursor_char = c2x(substr(reply,2,2))                                   04910000
 VARS.0      = 2                                                        04920000
 VARS.1      = "AID"                                                    04930000
 VARS.2      = "CURSOR"                                                 04940000
 VARS.AID    = AID.aid_char                                             04950000
 VARS.CURSOR = cursor_char                                              04960000
                                                                        04970000
 len = length(reply)                                                    04980000
 do i = 1 to len                                                        04990000
 if substr(reply,i,1) = SBA                                             05000000
   then                                                                 05010000
     do /* SBA care */                                                  05020000
     addr3270 = c2x(substr(reply,i+1,2))                                05030000
     if symbol("FLDS.addr3270") = "LIT"                                 05040000
       then                                                             05050000
         return "08 3270 BA" addr3270 "does not have match in FLDS"     05060000
     FIELD_SHORT_NAME = FLDS.addr3270                                   05070000
     FIELD_LONG_NAME = GET_FIELD_LONG_NAME(FIELD_SHORT_NAME)            05080000
     i = i + 3                                                          05090000
     ix  = VARS.0 + 1                                                   05100000
     VARS.0     = ix                                                    05110000
     VARS.ix = FIELD_LONG_NAME                                          05120000
     tmp = substr(reply,i)                                              05130000
     sba_pos =  pos(SBA,tmp)                                            05140000
     if sba_pos = 0                                                     05150000
       then                                                             05160000
         do                                                             05170000
         VARS.FIELD_LONG_NAME = strip(translate(tmp,'','_'))            05180002
         FLDS.addr3270.value  = strip(VARS.FIELD_LONG_NAME)             05190000
         i = i + length(tmp)                                            05200000
         end                                                            05210000
       else                                                             05220000
         do                                                             05230000
         val = substr(reply,i,sba_pos-1)                                05240000
         VARS.FIELD_LONG_NAME = strip(translate(val,'','_'))            05250002
         FLDS.addr3270.value  = strip(VARS.FIELD_LONG_NAME)             05260000
         i = i-1  + sba_pos-1                                           05270000
         end                                                            05280000
     end /* SBA care */                                                 05290000
 end                                                                    05300000
 return 0                                                               05310000
                                                                        05320000
/********************************************************/              05330000
/*  return FIELD long name defined by SCRSTAT.NAME_     */              05340000
/*  PARM : 1-BYTE short name from symbplic map          */              05350000
/********************************************************/              05360000
GET_FIELD_LONG_NAME : procedure expose SCRSTAT. HEAP.                   05370011
if symbol("SCRSTAT.NAME_"arg(1)) = "LIT"                                05380000
  then                                                                  05390000
    return arg(1)                                                       05400000
  else                                                                  05410000
    do                                                                  05420000
    interpret "long_name=SCRSTAT.NAME_"arg(1)                           05430000
    return long_name                                                    05440000
    end                                                                 05450000
                                                                        05460000
/************************************************/                      05470000
/*  drop 3270 orders from the current buffer    */                      05480000
/************************************************/                      05490000
MAKE_BUFFER_TEXT  : procedure expose BG_BUFF HEAP.                      05500011
  tb = translate(BG_BUFF," ",'00'x)                                     05510000
  BG_BUFF = ''                                                          05520000
  /* 1st SF order wll not hold byte - any 3270 buffer starts so */      05530000
  head_buf = 1                                                          05540000
  do i = 1 to length(tb)                                                05550000
  if i > 1                                                              05560000
    then                                                                05570000
     head_buf = 0                                                       05580000
  if substr(tb,i,1) = '1D'X                                             05590000
      then                                                              05600000
        do                                                              05610000
        i = i + 1                                                       05620000
        BG_BUFF = BG_BUFF || ' '                                        05630000
        iterate                                                         05640000
        end                                                             05650000
  if substr(tb,i,1) = '7D'X   /* Enter */                               05660000
      then                                                              05670000
        do                                                              05680000
        if head_buf = 1                                                 05690000
          then                                                          05700000
            do                                                          05710000
            head_buf = 0                                                05720000
            i = i + 2                                                   05730000
            iterate                                                     05740000
            end                                                         05750000
        end                                                             05760000
  if substr(tb,i,1) = '11'X                                             05770000
      then                                                              05780000
        do                                                              05790000
        i = i + 2                                                       05800000
        iterate                                                         05810000
        end                                                             05820000
  if substr(tb,i,1) = '13'X                                             05830000
      then                                                              05840000
        do                                                              05850000
        i = i + 0                                                       05860000
        iterate                                                         05870000
        end                                                             05880000
  if substr(tb,i,1) = '29'X                                             05890000
      then                                                              05900000
        do                                                              05910000
        i = i + 0                                                       05920000
        iterate                                                         05930000
        end                                                             05940000
  if substr(tb,i,1) = '3C'X   /* repeat to address */                   05950000
      then                                                              05960000
        do                                                              05970000
        i = i + 0                                                       05980000
        iterate                                                         05990000
        end                                                             06000000
  if substr(tb,i,1) = '08'X                                             06010000
      then                                                              06020000
        do                                                              06030000
                                                                        06040000
        end                                                             06050000
  BG_BUFF = BG_BUFF || substr(tb,i,1)                                   06060000
  end                                                                   06070000
  return 0                                                              06080000
                                                                        06090000
/************************************************/                      06100000
/*  <row,col> => 3270 BA                        */                      06110000
/************************************************/                      06120000
DISPLAY_RESPONSE : procedure expose HEAP.                               06130011
prmname  = arg(1)                                                       06140000
response = arg(2)                                                       06150000
call DMSG "..."prmname"-length:" ||  length(response)                   06160000
lr = length(response)                                                   06170000
if lr > 120                                                             06180000
  then lr=120                                                           06190000
call DMSG ".."prmname":" ||  substr(response,1,lr)                      06200000
if lr > 40                                                              06210000
  then lr=40                                                            06220000
call DMSG "..."prmname || "-hexa:"||c2x(substr(response,1,lr))          06230000
return                                                                  06240000
/************************************************/                      06250000
/*  <row,col> => 3270 BA                        */                      06260000
/************************************************/                      06270000
BUFFER_ADDRESS_ENC : procedure                                          06280000
row = arg(1)                                                            06290000
col = arg(2)                                                            06300000
offset   = B_O(row,col)                                                 06310000
x_offset = d2x(offset)                                                  06320000
b_offset = right(x2b(x_offset),12,'0')                                  06330000
fg = TRANSLATE_BA(substr(b_offset,1,6))                                 06340000
sg = TRANSLATE_BA(substr(b_offset,7,6))                                 06350000
return fg||sg                                                           06360000
                                                                        06370000
                                                                        06380000
/************************************************/                      06390000
/*  <6-BIT>  => 3270 BA part                    */                      06400000
/************************************************/                      06410000
TRANSLATE_BA : procedure                                                06420000
b_index = arg(1)                                                        06430000
TT = '40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'X  ||,                           06440000
     '50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'X  ||,                           06450000
     '6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'X  ||,                           06460000
     'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'X                                06470000
                                                                        06480000
x_index = b2x(b_index)                                                  06490000
d_index = x2d(x_index)                                                  06500000
return substr(TT,d_index+1,1)                                           06510000
/************************************************/                      06520000
/*  <row,col>  =>  Buffer Offset                */                      06530000
/************************************************/                      06540000
B_O                : procedure                                          06550000
row = arg(1)                                                            06560000
col = arg(2)                                                            06570000
return (row-1)*80 + col - 1                                             06580000
/************************************************/                      06590000
/*  returns cols and rows number of the device  */                      06600000
/************************************************/                      06610000
DEV_GEOMETRY : procedure expose SCRSTAT. ATTR. BG_BUFF HEAP.            06620011
 /* NOTE !!!   Read Buffer is destroyed by READ PARTITION */            06630000
 /* So, it should precede it                              */            06640000
 if READ_BG_BUFFER() <> 0                                               06650000
   then                                                                 06660000
     return 8                                                           06670000
                                                                        06680000
  LPIPE()  " (endchar ?)                " ||,                           06690000
           "  fullscrq                  " ||,                           06700000
           "| spec 19.2 c2d 1 21.2 c2d n" ||,                           06710000
           "| var out                   "                               06720000
  return out                                                            06730000
                                                                        06740000
/***********************************************************/           06750000
/*  trace 3270 buffers routine                             */           06760000
/***********************************************************/           06770000
TRACE_BUFFER : procedure expose BG_BUFF IMG3270 HEAP.                   06780011
 scr    = arg(1)                                                        06790000
 wsf_op = arg(2)                                                        06800000
 if substr(scr,1,3) = "BG_"                                             06810000
   then                                                                 06820000
     title = scr || " BUFFER_LENGTH=" || length(BG_BUFF)                06830000
   else                                                                 06840000
    if scr = "IMG3270"                                                  06850000
     then                                                               06860000
       title = scr || " BUFFER_LENGTH=" || length(IMG3270)              06870000
                                                                        06880000
  if wsf_op <> ''                                                       06890000
    then                                                                06900000
      title  = title || " WSF_HEAD=" || wsf_op                          06910000
                                                                        06920000
 call DMSG "..."title                                                   06930000
 h_line_char = '08A2'x                                                  06940000
 if scr = "BG_TOTEXT"                                                   06950000
   then                                                                 06960000
      do                                                                06970000
      stmtrcm.0 = 0                                                     06980000
      bg_buff_x  = ' ' ||  BG_BUFF    /* due to 1 byte of '1D60'X */    06990000
      LPIPE() "(endchar ?)                             " ||,            07000000
              "  var bg_buff_x                         " ||,            07010000
              "| change 1-* /"h_line_char"/-/          " ||,            07020000
              "| deblock fixed 80                      " ||,            07030000
              "| pad 80                                " ||,            07040000
              "| stem stmtrcm.                         "                07050000
       do i = 1 to stmtrcm.0                                            07060000
       call DMSG "..."stmtrcm.i                                         07070000
       end                                                              07080000
      end                                                               07090000
   else                                                                 07100000
    if substr(scr,1,3)  = "BG_"                                         07110000
      then                                                              07120000
       call DMSG "..."substr(BG_BUFF,1,120)                             07130000
      else                                                              07140000
       call DMSG "..."substr(IMG3270,1,120)                             07150000
  return                                                                07160000
                                                                        07170000
/********************************************/                          07171006
/* returns possible marks of unprotected    */                          07172006
/* fields. In meantime a simultaneous usage */                          07173006
/* of several marks is not checked yet.     */                          07173106
/********************************************/                          07174006
ALLMARKS : procedure                                                    07175006
 return "#"                                                             07176006
                                                                        07177006
/********************************************/                          07180000
/* provides message interface suitable with */                          07190000
/* injector                                 */                          07200000
/********************************************/                          07210000
DMSG : procedure expose HEAP.                                           07220011
 MSG('D',arg(1))                                                        07230000
 return                                                                 07240000
                                                                        07250000
/********************************************/                          07260000
/*  NOT USED ROUTINES                       */                          07270000
/********************************************/                          07280000
/**********************************************************/            07290000
/* this puts current values of unprotected                */            07300000
/* fields into HW buffer. It's needed for the second time */            07310000
/* the buffer displayed by PF3 or navigation down.        */            07320000
/**********************************************************/            07330000
PUT_UNPROT_FIELD_VALUES_TO_BUFFER : procedure expose FLDS. HEAP.        07340011
buffer = arg(1)                                                         07350000
                                                                        07360000
if FLDS.0 > 0                                                           07370000
  then                                                                  07380000
    do i = 1 to FLDS.0                                                  07390000
    interpret "addr3270 = FLDS."i                                       07400000
    interpret "addr3270_hex = FLDS."addr3270".hex"                      07410000
    buffer_offset = pos(addr3270_hex,buffer)                            07420000
    if buffer_offset = 0                                                07430000
      then                                                              07440000
        iterate                                                         07450000
      else                                                              07460000
        if substr(buffer,buffer_offset+2,1) = '11'x                     07470000
          then                                                          07480000
            buffer_offset = buffer_offset + 3                           07490000
          else                                                          07500000
            buffer_offset = buffer_offset + 2                           07510000
    field_len     = FLDS.addr3270.length                                07520000
    field_value   = FLDS.addr3270.value                                 07530000
    buffer        = substr(buffer,1,buffer_offset-1)        || ,        07540000
                    left(field_value,field_len,' ')         || ,        07550000
                    substr(buffer,buffer_offset+field_len-1)            07560000
    end                                                                 07570000
return buffer                                                           07580000
                                                                        07590000
/************************************************/                      07600000
/*  3270 BA  => position in buffer              */                      07610000
/************************************************/                      07620000
BUFFER_ADDRESS_DEC : procedure                                          07630000
 addr3270 = arg(1)                                                      07640000
 LPIPE()  "  var addr3270      " ||,                                    07650000
          "| 3270bfra 1 to16bit" ||,                                    07660000
          "| specs 1.2 c2x 1   " ||,                                    07670000
          "| var offset        "                                        07680000
 return x2d(offset)                                                     07690000
                                                                        07700000
