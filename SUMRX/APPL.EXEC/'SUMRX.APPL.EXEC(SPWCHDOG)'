/* REXX */                                                              00010000
interpret "retcode = INJ"||"STUB('"arg(1)"')" /*invisible to INJECTOR*/ 00020000
if rexxname <> '?'                                                      00030000
   then                                                                 00040000
     do   /* submitted by TSO */                                        00050000
     ZISPFRC = retcode                                                  00060000
     "ISPEXEC VPUT (ZISPFRC)"                                           00070000
     exit retcode                                                       00080000
     end                                                                00090000
   else                                                                 00100000
     do   /* submitted by injector */                                   00110000
     return retcode                                                     00120000
     end                                                                00130000
                                                                        00140000
/* ================================================================ */  00150000
/*          INJECTOR STUB                                           */  00160000
/* ================================================================ */  00170000
INJSTUB : procedure                                                     00180000
parse source . . rexxname  . rexxlib  .                                 00190000
rcode = PARM_VALIDATION(arg(1))                                         00200000
if word(rcode,1) <> 0                                                   00210000
  then                                                                  00220000
    return 8                                                            00230000
  else                                                                  00240000
    do                                                                  00250000
    msg_level = word(rcode,2)                                           00260000
    return INJREXX(rexxname rexxlib msg_level arg(1))                   00270000
    end                                                                 00280000
/* ================================================================ */  00290000
/*          PARAMETER VALIDATION                                    */  00300000
/* ================================================================ */  00310000
/* == User may change parsing of parameter of his application.   == */  00320000
/* == But MSG_LEVEL at return should be in interval <1,10>       == */  00330000
/* ================================================================ */  00340000
PARM_VALIDATION : procedure                                             00350000
parse arg timeout percent system_response msg_level .                   00360000
upper msg_level                                                         00370000
if datatype(msg_level) <> "NUM" & msg_level <> "ALL" & msg_level <> ''  00380000
  then                                                                  00390000
    do                                                                  00400000
    say "MESSAGE LEVEL should be NULL, ALL or in interval 1-10"         00410000
    say "please correct the parameter and resubmit"                     00420000
    return 8                                                            00430000
    end                                                                 00440000
if msg_level = ''                                                       00450000
  then                                                                  00460000
    msg_level=1                                                         00470000
if msg_level = "ALL"                                                    00480000
  then                                                                  00490000
    msg_level=10                                                        00500000
return 0 msg_level                                                      00510000
                                                                        00520000
/* ================================================================ */  00530000
/*          MAIN PROCEDURE                                          */  00540000
/* ================================================================ */  00550000
SUMRX_MAIN : procedure expose msg_level HEAP.                           00560000
++INC SETWCHVV,ENV                                                      00570000
                                                                        00580000
parse arg timeout percent system_response .                             00590000
token_num = 0                                                           00600000
MSG(1) /* SPOOL WATCHDOG started */                                     00610000
MSG(2,"         TIMEOUT (sec):",timeout)                                00620000
MSG(2,"   SPOOL THRESHOLD (%):",percent)                                00630000
MSG(2,"SYSTEM REPONSED (sec%):",system_response)                        00640000
MSG(2,"         MESSAGE LEVEL:",msg_level)                              00650000
                                                                        00660000
                                                                        00670000
Address TSO                                                             00680000
"CONSPROF SOLDISPLAY(NO) SOLNUM(400)"                                   00690000
"CONSOLE ACTIVATE NAME(CONS0001)"                                       00700000
                                                                        00710000
do forever     /* loop to control sppol percentage */                   00720000
token_num = token_num + 1                                               00730000
if token_num > 9999                                                     00740000
  then                                                                  00750000
   token_num = 1                                                        00760000
                                                                        00770000
token = "SPMF" || right(token_num,4,'0')                                00780000
                                                                        00790000
cmd = "$DS(*ACS,*ACD,*AONI),SPL=(%>"percent")"                          00800000
MSG(3,cmd) /* Command  will be issued via CONSOLE */                    00810000
Address TSO                                                             00820000
"CONSOLE SYSCMD("cmd") CART("token")"                                   00830000
MSG(4)  /* Call GETALLMSGS() to merge all GETMSG chunks */              00840000
retcode = GETALLMSGS()                                                  00850000
                                                                        00860000
MSG(5)    /* Create <JOBS,%> candidate list  */                         00870000
call CREATE_CANDIDATES_ARRAY                                            00880000
                                                                        00890000
                                                                        00900000
if stmjob.0 > 0                                                         00910000
  then                                                                  00920000
    do                                                                  00930000
      do i = 1 to stmjob.0   /* loop over candidates */                 00940000
      parse var stmjob.i jobname job_percent  .                         00950000
      suffix = POSTFIX(jobname)                                         00960000
      if suffix = "ACS"  | ,                                            00970000
         suffix = "ACD"  | ,                                            00980000
         suffix = "AONI"                                                00990000
       then                                                             01000000
        do                                                              01010000
         parse var jobname prefix (suffix) .                            01020000
         jesname = prefix || "GATE"                                     01030000
         if suffix = "AONI"                                             01040000
           then                                                         01050000
             jesname = prefix || "AONI"                                 01060000
         cmd = "P" jesname                                              01070000
         MSG(3,cmd)  /* Command  will be issued via CONSOLE */          01080000
         Address TSO                                                    01090000
         "CONSOLE SYSCMD("cmd")"                                        01100000
        end                                                             01110000
       /* let system stop the candidate */                              01120000
       call SLEEP(system_response)                                      01130000
       cmd = "$P O J'" || jesname || "'"                                01140000
       MSG(3,cmd)  /* Command  will be issued via CONSOLE */            01150000
       "CONSOLE SYSCMD("cmd")"                                          01160000
       cmd = "$C O J'" || jesname || "'"                                01170000
       MSG(3,cmd)  /* Command  will be issued via CONSOLE */            01180000
       "CONSOLE SYSCMD("cmd")"                                          01190000
      end                    /* loop over candidates */                 01200000
    end                                                                 01210000
                                                                        01220000
call SLEEP(timeout)                                                     01230000
end     /* loop to control sppol percentage */                          01240000
return 0                                                                01250000
                                                                        01260000
/***********************************************************/           01270000
/* this crestes array of jobs candidates to be stopped.    */           01280000
/* JESOUT. contains the quesy jes2 output                  */           01290000
/* STMJOB. is created stem to have <jobname-percent> pairs */           01300000
/***********************************************************/           01310000
CREATE_CANDIDATES_ARRAY : procedure expose jesout. stmjob. HEAP.        01320000
                                                                        01330000
 MSG(6,"JESOUT",jesout.0) /* STEM created with ... lines */             01340000
 call TRACE_STEM  "jesout"                                              01350000
                                                                        01360000
 j = 0                                                                  01370000
 stmjob.0 = 0                                                           01380000
 if jesout.0  > 0                                                       01390000
  then                                                                  01400000
    do  /* Create STMJOB */                                             01410000
     do i = 1 to jesout.0   /* loop over jes output */                  01420000
     k = i + 1                                                          01430000
     if wordindex(jesout.i,2) = 11          &  ,                        01440000
        word(jesout.k,1) = word(jesout.i,1) &  ,                        01450000
        word(jesout.k,2) = word(jesout.i,2)                             01460000
         then                                                           01470000
           do   /* new item */                                          01480000
            job = ''                                                    01490000
            k = i                                                       01500000
            i = i + 1                                                   01510000
            temp =  word(jesout.i,2)                                    01520000
            parse var temp "JOB(" job ")" .                             01530000
            if job = ''                                                 01540000
             then                                                       01550000
               iterate                                                  01560000
             do i = k+1 to jesout.0 /* loop within item related lines */01570000
             l = i + 1                                                  01580000
             if wordindex(jesout.l,2) = 11          &  ,                01590000
                word(jesout.l,2) <> job                                 01600000
                 then /* unexpectedly found new item before PERCENT= */ 01610000
                   do                                                   01620000
                   MSG(8,job) /* Can't collect data for job */          01630000
                   job = ''                                             01640000
                   i = l -1                                             01650000
                   leave                                                01660000
                   end                                                  01670000
             if pos("PERCENT=",jesout.l) > 0                            01680000
              then                                                      01690000
                do /* found PERCENT= */                                 01700000
                parse var jesout.l "PERCENT=" job_percent ")" .         01710000
                j = j + 1                                               01720000
                stmjob.j = job job_percent                              01730000
                stmjob.0 = j                                            01740000
                leave                                                   01750000
                end                                                     01760000
             end         /* loop within item related lines */           01770000
           end /* new item */                                           01780000
     end   /* loop over jes output */                                   01790000
    MSG(6,"STMJOB",stmjob.0) /* STEM created with ... lines */          01800000
    call TRACE_STEM  "stmjob"                                           01810000
    end   /* Create STMJOB */                                           01820000
  else                                                                  01830000
    do                                                                  01840000
    MSG(7,"STMJOB")   /* STEM ... will not be created */                01850000
    end                                                                 01860000
 return                                                                 01870000
                                                                        01880000
/*********************************************************/             01890000
/* this call GETMSG service recursively and builds       */             01900000
/* JESOUT. stem.  Such tecnique is used due to a bug     */             01910000
/* of JES2 when workin with the CONSOLE interface        */             01920000
/*********************************************************/             01930000
GETALLMSGS : procedure expose token jesout. HEAP.                       01940000
retcode = getmsg('TEMP.','sol',token,,3)                                01950000
if retcode <> 0                                                         01960000
  then                                                                  01970000
    return 0                                                            01980000
                                                                        01990000
/* 1st time , when not recursive call,  arg(1) = '' */                  02000000
if arg(1) = ''                                                          02010000
 then                                                                   02020000
   jesout.0 = 0                                                         02030000
                                                                        02040000
do i = 1 to temp.0                                                      02050000
k = jesout.0 + i                                                        02060000
jesout.k = temp.i                                                       02070000
end                                                                     02080000
jesout.0 = k                                                            02090000
return GETALLMSGS("N")                                                  02100000
                                                                        02110000
                                                                        02120000
/*********************************************************/             02130000
/* this returns postfix of a jobname                     */             02140000
/*********************************************************/             02150000
POSTFIX : procedure                                                     02160000
jobname = arg(1)                                                        02170000
                                                                        02180000
l = length(jobname)                                                     02190000
if l > 3                                                                02200000
  then                                                                  02210000
    do                                                                  02220000
     postfix = substr(jobname,l-2,3)                                    02230000
     if postfix = "ACS" | ,                                             02240000
        postfix = "ACD"                                                 02250000
      then                                                              02260000
        return postfix                                                  02270000
    end                                                                 02280000
  else                                                                  02290000
   if l > 4                                                             02300000
     then                                                               02310000
       do                                                               02320000
        postfix = substr(jobname,l-3,4)                                 02330000
        if postfix = "AONI"                                             02340000
         then                                                           02350000
           return postfix                                               02360000
       end                                                              02370000
return ""                                                               02380000
                                                                        02390000
                                                                        02400000
++INC HELPERS                                                           02410000
