/******************************************************************/
/*                                                                */
/*             Read the input parameters and return the           */
/*             appropriate return code.                           */
/*                                                                */
/* Written By: Selig Tessler                                      */
/* Date:       6/5/15                                             */
/*                                                                */
/* Input parameters:                                              */
/* =================                                              */
/* PRAM='SEVERITY SEV1=RC1 SEV2=RC2 SEV3=RC3 DEFRC'               */
/*                                                                */
/* The first name is the name of the required return code.        */
/* The other parameters except the last define a list of names    */
/* and their corresponding return code.                           */
/* The last parameter defines a default return code. If not       */
/* specified, the default is 4095.                                */
/*                                                                */
/*                                                                */
/* The parameters should be separated by a blank for C argv       */
/* parsing (each string between blanks is received as an element  */
/* in the argv[] array).                                          */
/*                                                                */
/*                                                                */
/* Description:                                                   */
/* ============                                                   */
/* The program compares the first name to the names in the        */
/* list, and returns the appropriate return code. If the name     */
/* is not found in the list, it returns the default return        */
/* code.                                                          */
/*                                                                */
/* Example 1: 'warning warning=4 error=8 severe=12 99'            */
/* Output:    The program will set a return code of 4.            */
/*                                                                */
/* Example 2: 'error warning=4 error=8 severe=12,99'              */
/* Output:    The program will set a return code of 8.            */
/*                                                                */
/* Example 3: 'severe warning=4 error=8 severe=12 99'             */
/* Output:    The program will set a return code of 12.           */
/*                                                                */
/* Example 4: 'none warning=4 error=8 severe=12 99'               */
/* Output:    The program will set a return code of 99.           */
/*                                                                */
/******************************************************************/

#include <stdio.h>
#include <string.h>

int main(int argc, char *argv[])
{
  int i, before_len = 0;
  char sev_string[50];
  char work_area[50];
  char before_eq[50];
  char *after_eq;
  char retcode[50] = { "4095" };
  const char eq_sign = '=';

/*printf("echo of all argv elements\n");                           */
/*for (i = 0; (i <= argc) && (argv[i] != NULL); ++i)
      printf("%s\n", argv[i]);                                     */

  strcpy (sev_string, argv[1]);
  /* printf("sev string %s\n", sev_string);                        */

/* loop from argv[2] until argv[n] until we are all done           */
/*   if argv[n] is NULL, leave loop                                */
/*   look for an '='                                               */
/*   if no '=', set return code and leave the loop                 */
/*   else, create before_eq and after_eq and compare severities    */
/*         if severities are equal, set return code and leave loop */
/*         if severities are not equal, go up to next argv[n]      */
  for (i = 2; i <= argc; ++i)
      {
        /* printf("argv[%i] %s\n", i, argv[i]);                    */
        if (argv[i] == NULL)
          break;

        strcpy (work_area, argv[i]);         /* copy entire argv   */
        /* printf("work_area = %s\n", work_area);                  */

        after_eq = strchr(work_area, eq_sign);
        if (after_eq == NULL)
           {
             strcpy (retcode, work_area);
             break;
           }
        ++after_eq;                          /* go to after '='    */

        before_len = after_eq - work_area;
        --before_len;                        /* calc len of before */
        /* printf("before_len = %i\n", before_len);                */

        memset(before_eq, '\0', sizeof(before_eq));
        strncpy (before_eq, work_area, before_len);
        /* printf("before = %s\n", before_eq);                     */
        /* printf("after = %s\n", after_eq);                       */
        /* printf(" \n");                                          */

        if (strcmp (sev_string, before_eq) == 0)
           {
             strcpy (retcode, after_eq);
             break;
           }
      }
      /* printf("retcode (string) = %s\n", retcode);               */
      i = atoi(retcode);
/*    printf("retcode (integer) = %d\n", i);                       */

      return (i);

}
