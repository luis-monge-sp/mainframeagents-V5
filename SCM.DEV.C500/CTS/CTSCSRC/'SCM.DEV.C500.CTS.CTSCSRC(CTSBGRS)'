 /**************************************************************
 *                                                             *
 * Title            : Get resource information (ACF2)          *
 *                                                             *
 * File Name        : ctsbgrs.c                                *
 *                                                             *
 * Author           : Guy Shavitt                              *
 *                                                             *
 * Creation Date    : 13/01/1998                               *
 *                                                             *
 * Description      :                                          *
 *                                                             *
 * Assumptions and                                             *
 *   Considerations :                                          *
 *                                                             *
 **************************************************************/

 /**************************************************************
 * Mod.Id   Who    When       Description                      *
 * -------- ------ ---------- -------------------------------- *
 * WS2333   Guy    30/07/1998 NEXTKEYs loading support         *
 * PS0298   Guy    18/08/1998 Don't stop reading NEXTKEYs if   *
 *                            one of NEXTKEYs is not found     *
 * WS2358   Guy    12/10/1999 Support for the virtual resource *
 * BS2415   Guy    28/12/1999 CS abends if ESS comm. breaks    *
 * BS2502   Yoni   09/12/2001 show/update resource fails becaus*
 *                            of leading blnks (ESS oracle)    *
 * IS10004  EliM   25/03/2007 Add message for load resource    *
 *                            count                            *
 * IS10122  NuritY 16/06/2014 Ignore ROLESET rules.            *
 * IS10122A NuritY 16/06/2014 Correct load counter and issue a *
 *                            message when resource not found. *
 * WS10082  MauriC   07/11/22 Recompile for new ADDINFO macros *
 **************************************************************/

 #include   <globs.h>

 /*
  *   Standard include files
  */

 #include   STDIO
 #include   STDLIB
 #include   STRING

 /*
  *   ESA include files
  */

 #include   ESA_API
 #include   ESA_DIAG
 #include   ESA_CTSAMSG
 #include   ESA_API_CODES

 #include   MVS_COMP

 #include   API_ADDINFO
 #include   API_AUTH

 #include   ACF2_CODES
 #include   ACF2

 /* IS10122 - start */
 #define GET_NEXT_NEXTKEY(g_pos, g_name, g_chain)                 \
   (g_pos) = (g_chain);                                           \
   (g_name)[0] = ' ';                                             \
   while ( (g_pos) NE NULL  AND   (g_name)[0] EQ ' ' )            \
   {                                                              \
     (g_pos) = strchr ((g_chain), ADDINFO_LIST_ENTRY);            \
     if (g_pos NE NULL)                                           \
       *(g_pos) = NULL_CHAR;                                      \
     strcpy ((g_name), (g_chain));                                \
     (g_chain) = (g_pos) + 1;                                     \
   }
 /* IS10122 - end */
 /*
  *   Perform Cleanup up of handle information and other dynamically
  *   allocated areas.
  */
 static void Cleanup(ACF2_Get_Res_Handle *h,
                     void **handle,
                     ADMIN_PARAMS_rec_typ * admin_params,
                     ERR_STRUCT_rec_typ   * err);

 static  char   component[] = "GETRES";
/****************************************************
 * Procedure Name: CTSGetRes
 * Description   : Get one, two, or many resources
 * Input         : mode         - GET_FREE_HANDLE_RESOURCES only
 *                 max_ress     - # of elements in res_params
 *                                and addinfo arrays
 *                 res_params_in- resource requested
 *                 admin_params
 * Output        : actual_num   - # of resources returned
 *                 have_more    - HAVE_MORE if more res, else NO_MORE
 *                 err          - error indication, message, etc.
 *                 res_params   - array of max_ress:
 *                                callee fills with resources returned
 *  Input/Output : addinfo      - array of max_ress pointers:
 *                                add.info per resource, Caller puts
 *                                requested keywords, callee returns
 *                                actual add.info.
 *                 handle       - NULL on first call, filled by callee,
 *                                used by callee to keep track.
 *                                Freed by caller.
 * Return Value  : ESA_RC
 * Side Effects  : Function may allocate memory, return pointer in
 *                 *handle; Caller MUST free when done.
 * Comments      : Caller must reset I/O params to their initial values
 *                 when using subsequent calls (if HAVE_MORE).
 ****************************************************/

 ESA_RC CTSGetRes (GET_RESOURCE_MODE      mode,
                   OE_typ                 oe,
                   short                  max_ress,
                   short                * actual_num,
                   HAVE_MORE_typ        * have_more,
                   void                ** handle,
                   RES_PARAMS_rec_typ   * res_params_in,
                   ADDINFO_rec_typ      * addinfo_in,
                   RES_PARAMS_rec_typ     res_params[1],
                   ADDINFO_rec_ptr        addinfo_out[1],
                   ADMIN_PARAMS_rec_typ * admin_params,
                   ERR_STRUCT_rec_typ   * err)
  {

   static char                 func[]="CTSGetRes";

  /*
   *   Variables
   */

   ESA_RC                      rc = ESA_OK;
   CTSAMSG_HANDLE_rec_ptr      msgs;
   CTSAMSG_DEST_TABLE_rec_ptr  dest;
   ONE_FIELD_rec_ptr           pair = NULL;               /* WS2333 */
   RESOURCE_typ                res_to_load;               /* WS2333 */
   ACF2_Get_Res_Handle       * h = NULL;
   ACF2_Object_Mask            resname_masked;
   char                        ACF2_RES_key[ACF2_RESRULE_KEY_SIZE];
   char                        ACF2_DSN_key[ACF2_ACCRULE_KEY_SIZE];
   char                      * pos = NULL;                /* WS2333 */
   char                        msg[256] = "";
   char                        errmsg[256] = "";
   int                         iterate;
   int                         nextkeys_mode;             /* ps0298 */
   static int                  num_of_res = 0;            /* IS10004 */
   int                         is_roleset;                /* IS10122 */
   RESOURCE_typ                res_for_msg;               /* IS10122 */
   int                         is_nextkeys = FALSE;       /* IS10122A */

  /*
   *  Initialize
   */

   ESA_DIAG_enter(ESA_COMP_GETRES,1,func);

   msgs = admin_params->ctsamsg_handle;
   dest = admin_params->ctsamsg_dest;

   nextkeys_mode = FALSE;                                 /* ps0298 */

 if (strchr (res_params_in->restype, '*') NE NULL)
 {
   CTSAMSG_print(ACF2_NO_RESTYPE_PREFIX, msgs, NULL, dest);
   rc = ESA_FATAL;
   *have_more = NO_MORE;
   *actual_num = 0;
   goto exit;
 };

 /*----------------------------------------------------------------*/
 /* Initialization Logic                                           */
 /*----------------------------------------------------------------*/
 /* - Set returned variables to default: return 1 object, more     */
 /* - Initialize Handle (if not initialized and not "free handle"  */
 /*   call.                                                        */
 /*----------------------------------------------------------------*/

 *actual_num = 1;
 *have_more  = HAVE_MORE;

 strcpy (res_to_load, res_params_in->resource);

 ESA_DIAG_printf(ESA_COMP_GETRES, DEBUG_SHOW_IMPORTANT,
                 "Res = (%s)  Type = (%s)",
                 res_to_load,
                 res_params_in->restype);

 /* WS2358 */
 /*----------------------------------------------------------------*/
 /* Did the LOAD RESOURCE request specify the virtual resource ?   */
 /*----------------------------------------------------------------*/
 if (ACF2_Is_Virtual_Resource (res_to_load) )
 {
   ESA_DIAG_printf(ESA_COMP_GETRES, DEBUG_SHOW_IMPORTANT,
                   "VIRTUAL RESOURCE hotpath detected");
   *have_more  = NO_MORE;
   strcpy (res_params[0].resource, res_to_load);
   strcpy (res_params[0].restype, res_params_in->restype);
   res_params[0].parent_oe[0] = NULL_CHAR;

   ACF2_Set_Keyword_Value ("NOSORT",
                           "N",
                           addinfo_out[0],
                           msgs,
                           dest);

   ACF2_Set_Keyword_Value ("COPYRES",
                           "N",
                           addinfo_out[0],
                           msgs,
                           dest);

   ACF2_Set_Keyword_Value ("RESMODEL",
                           "",
                           addinfo_out[0],
                           msgs,
                           dest);

   ACF2_Set_Keyword_Value ("USERDATA",
                           "Virtual resource for ARI process",
                           addinfo_out[0],
                           msgs,
                           dest);

   goto exit;
 };
 /* End of WS2358 */

 /*----------------------------------------------------------------*/
 /* Allocate Handle (One time processing for every API cycle of    */
 /*                  resource(s) information retrieval)            */
 /*----------------------------------------------------------------*/
 /* - Allocate handle                                              */
 /*----------------------------------------------------------------*/
 if ( (*handle EQ NULL) AND (mode NE GET_FREE_HANDLE_RESOURCES) )
  {
   *handle = (void *) calloc (sizeof(ACF2_Get_Res_Handle), 1);
   h = (ACF2_Get_Res_Handle *) *handle;
   h->First_Call = TRUE;                                  /* WS2333 */
   h->Current_Key[0] = NULL_CHAR;                         /* WS2333 */
   h->Nextkeys_Chain = NULL;                              /* WS2333 */
   h->Nextkeys_List_Ptr = NULL;                           /* WS2333 */
   h->Load_Nextkeys = FALSE;                              /* WS2333 */
   h->Num_Loaded_Nextkeys = 0;                            /* WS2333 */
   num_of_res = 0;                                        /* IS10122A */
  };

 h = (ACF2_Get_Res_Handle *) *handle;

 if (mode NE GET_FREE_HANDLE_RESOURCES)
 {
   /* WS2333 - deleted
   if (h->First_Call)
   {
     h->Current_Key[0] = NULL_CHAR;
     h->First_Call = FALSE;
   }                               WS2333 */

 /* WS2333 */
 /*----------------------------------------------------------------*/
 /* Search for type of get (exact, prefix, nextkeys)               */
 /*----------------------------------------------------------------*/
  pair = ADDINFO_search("GET.TYPE", ACF_ADDINFO_KWD_LEN,
                        addinfo_in->pair,
                        addinfo_in->num_pairs);

 /*----------------------------------------------------------------*/
 /* No get type. Get specific resource (usually in hotpath)        */
 /*----------------------------------------------------------------*/
  if (pair EQ NULL)
  {
    ESA_DIAG_printf(ESA_COMP_GETRES, DEBUG_SHOW_IMPORTANT,
                    "Get specific resource");
    resname_masked = ACF2_Object_is_Not_Masked;
    *have_more  = NO_MORE;
  }

  else if (strcmp (pair->value, "PREFIX") EQ 0)
  {
    ESA_DIAG_printf(ESA_COMP_GETRES, DEBUG_SHOW_IMPORTANT,
                    "Get prefixed resources");
    if (strcmp (res_params_in->restype, "DSN") EQ 0)
    {
      Reset_Field(ACF2_DSN_key,sizeof(ACF2_DSN_key),'*',res_to_load);
      if (strchr (ACF2_DSN_key, '*') EQ NULL)
      {
        resname_masked =  ACF2_Object_is_Not_Masked;
        *have_more = NO_MORE;
      }
      else
        resname_masked = ACF2_Object_is_Masked;
    }
    else
    {
      Reset_Field(ACF2_RES_key,sizeof(ACF2_RES_key),'*',res_to_load);
      if (strchr (ACF2_RES_key, '*') EQ NULL)
      {
        resname_masked =  ACF2_Object_is_Not_Masked;
        *have_more = NO_MORE;
      }
      else
        resname_masked = ACF2_Object_is_Masked;
    };
  }

  else if (strcmp (pair->value, "NEXTKEYS") EQ 0)
  {
    ESA_DIAG_printf(ESA_COMP_GETRES, DEBUG_SHOW_IMPORTANT,
                    "Get specific+NEXTKEYS");
    resname_masked = ACF2_Object_is_Not_Masked;
    is_nextkeys = TRUE;                                  /* IS10122A */

    if (h->First_Call)
    {
      h->Load_Nextkeys = TRUE;
      pair = ADDINFO_search("GET.DEPTH", ACF_ADDINFO_KWD_LEN,
                            addinfo_in->pair,
                            addinfo_in->num_pairs);
      if (pair NE NULL)
      {
        if (pair->value[0] NE NULL_CHAR)
          h->Nextkeys_Depth = atoi(pair->value);
        else
          h->Nextkeys_Depth = 9999;
      }
      else
        h->Nextkeys_Depth = 9999;
    }
    else
    {
      h->Load_Nextkeys = FALSE;

      /* IS10122 - start */
      /* pos = strchr (h->Nextkeys_Chain, ADDINFO_LIST_ENTRY); */
      GET_NEXT_NEXTKEY (pos, res_to_load, h->Nextkeys_Chain)
      /* IS10122 - end */

      if (pos EQ NULL)
      {
        *have_more = NO_MORE;
        /* IS10122 strcpy (res_to_load, h->Nextkeys_Chain); */

        ESA_DIAG_printf(ESA_COMP_GETRES, DEBUG_SHOW_IMPORTANT,
                        "Free NEXTKEYs list addr(%X)",
                        h->Nextkeys_List_Ptr);

        free(h->Nextkeys_List_Ptr);

        ESA_DIAG_printf(ESA_COMP_GETRES, DEBUG_SHOW_IMPORTANT,
                        "Last NEXTKEY to load(%s)",
                        res_to_load);
      }
      else
      {
        nextkeys_mode = TRUE;                             /* ps0298 */
        /* IS10122
         * The code below isremoved because it is now done by
         * GET_NEXT_NEXTKEY
        *pos = NULL_CHAR;
        strcpy (res_to_load, h->Nextkeys_Chain);
        h->Nextkeys_Chain = pos + 1;
           IS10122 - end */
        ESA_DIAG_printf(ESA_COMP_GETRES, DEBUG_SHOW_IMPORTANT,
                        "Current NEXTKEY to load(%s)",
                        res_to_load);
      };
    };
  }

  else
  {
    resname_masked = ACF2_Object_is_Not_Masked;
    *have_more  = NO_MORE;
  };

  /* WS2333 - deleted
   if (strchr (res_params_in->resource, '*') NE NULL)
     resname_masked = ACF2_Object_is_Masked;
   else
   {
     resname_masked = ACF2_Object_is_Not_Masked;
     *have_more  = NO_MORE;
   }                               WS2333 */

   iterate = TRUE;

   h->First_Call = FALSE;

   while (iterate)
   {
     iterate = FALSE;

     rc = ACF2_Get_Resource(res_to_load,                  /* WS2333 */
                            resname_masked,
                            res_params_in->restype,
                            ACF2_Return_Ruleset,
                            NULL,
                            h,                            /* WS2333 */
                            h->Current_Key,
                            NULL,
                            addinfo_out[0],
                            errmsg,
                            admin_params);

     switch(rc)
     {
        case ACF2_OK:
          *actual_num = 1;                            /* IS10122A */
          num_of_res++;                               /* IS10122A */

          /* WS2333 - Don't run again if no nextkeys found */
          if ( (h->Load_Nextkeys) AND (h->Num_Loaded_Nextkeys EQ 0) )
          {
            /* IS10122A *actual_num = 1; */
            *have_more = NO_MORE;

            ESA_DIAG_printf(ESA_COMP_GETRES, DEBUG_SHOW_IMPORTANT,
                            "Free NEXTKEYs list addr(%X)",
                            h->Nextkeys_List_Ptr);

            free(h->Nextkeys_List_Ptr);

          };

          rc = ESA_OK;                    /* IS10122A */

          break;

        case ACF2_Not_Found:
          /* IS10122 - start */
          *actual_num = 0;

          /*
           *   Issue a message when rule is ignored or not found
           */
          if ( strcmp(errmsg, ACF2_ROLESET_IGNORED_MSG) EQ 0 )
            is_roleset = TRUE;
          else
            is_roleset = FALSE;

          /*
           *  Prepare the resource name fo the message.
           *
           *  Not_found condition is OK for a masked resource
           *  because it indicates that there are no more resources
           *  for the mask, so no message is needed.
           *
           *  If PREFIX or NEXTKEYS, issue the message.  Otherwise,
           *  return the message to the caller.  The caller will
           *  issue the message, if required.  For exmaple, when
           *  called by hotpath after delete resource request, a
           *  NOT_FOUND condition is fine.

           *
           */
          if ( resname_masked EQ ACF2_Object_is_Masked )
          {
            if (is_roleset)
              strcpy(res_for_msg, h->Current_Key);
            else
              res_for_msg[0] = NULL_CHAR;
          }
          else
            strcpy(res_for_msg, res_to_load);

          Trim(res_for_msg);

          if (res_for_msg[0] NE NULL_CHAR)
          {
            if (is_roleset)
              CTSAMSG_print(ACF2_RES_ROLESET_IGNORED, msgs, NULL,
                            dest, res_for_msg, res_params_in->restype);
            else
              CTSAMSG_print(ERR_RES_NOT_EXIST, msgs, NULL, dest,
                            res_for_msg);
          }
          /* IS10122 - end */

          /* ps0298 */
          /*-------------------------------------------------------*/
          /* For NEXTKEYs mode:                                    */
          /* ------------------                                    */
          /* Don't stop reading NEXTKEYed rulesets if a specific   */
          /* NEXTKEY is not found, unless it's the parent ruleset  */
          /* or the last NEXTKEYed ruleset.                        */
          /* (if 'nextkeys_mode' is ON, then we are in the middle  */
          /* of the NEXTKEYs list. It can't be a parent, and it    */
          /* can't be the last NEXTKEY...)                         */
          /*-------------------------------------------------------*/
          if (nextkeys_mode)
          {
            /* IS10122 - start */
            GET_NEXT_NEXTKEY (pos, res_to_load, h->Nextkeys_Chain)
            /* IS10122 - end */

            /* IS10122
            pos = strchr (h->Nextkeys_Chain, ADDINFO_LIST_ENTRY); */

            if (pos EQ NULL)
            {
              nextkeys_mode = FALSE;
              *have_more = NO_MORE;
              /* IS10122 strcpy (res_to_load, h->Nextkeys_Chain); */

              ESA_DIAG_printf(ESA_COMP_GETRES, DEBUG_SHOW_IMPORTANT,
                              "Free NEXTKEYs list addr(%X)",
                              h->Nextkeys_List_Ptr);

              free(h->Nextkeys_List_Ptr);

              ESA_DIAG_printf(ESA_COMP_GETRES, DEBUG_SHOW_IMPORTANT,
                              "Prev not fnd. Last NEXTKEY to load(%s)",
                              res_to_load);
            }
            else
            {
              /* IS10122
              /* The code below is removed becasue it is done now
               * by GET_NEXT_NEXTKEY
              *pos = NULL_CHAR;
              strcpy (res_to_load, h->Nextkeys_Chain);
              h->Nextkeys_Chain = pos + 1;                       */
              ESA_DIAG_printf(ESA_COMP_GETRES, DEBUG_SHOW_IMPORTANT,
                              "Prev not fnd. Curr NEXTKEY to load(%s)",
                              res_to_load);
            };

            iterate = TRUE;
          }
          else
            /* IS10122 - start */
            if ( (resname_masked EQ ACF2_Object_is_Masked)  AND
                 is_roleset )
              iterate = TRUE;
            else
            /* IS10122 - end */
            /* IS10122A - start */
            {
              /* goto No_More_Resources;              */
              *have_more = NO_MORE;
              rc = ESA_OK;
              continue;
            }
            /* IS10122A - end */
          break;

        /*-----------------------------*/
        /* Bad RC - Error              */
        /*-----------------------------*/
        default:
          sprintf(msg,"Get Res fail res=%s rc=%d msg=%s",
                    h->Current_Key, rc, errmsg);
          CTSAMSG_print(ERR_INTERNAL2,msgs, NULL, dest, component,
                 func, msg, 16,__LINE__);

          if (resname_masked EQ ACF2_Object_is_Masked)
          {
            iterate = TRUE;
            continue;
          }
          else
          {
            rc = ESA_FATAL;
            goto exit;
          };
     }

     /* IS10004 start here */
     ESA_DIAG_printf(ESA_COMP_GETRES, DEBUG_SHOW_REGULAR,
               "Resource %s (type %s) loaded.",
               h->Current_Key, res_params_in->restype );
     /* IS10004 end here */

     strcpy (res_params[0].resource, h->Current_Key);
     strcpy (res_params[0].restype, res_params_in->restype);
     res_params[0].parent_oe[0] = NULL_CHAR;
     /* IS10122A *actual_num = 1;                                    */
     /* IS10122A num_of_res++;                            /* IS10004 */
   };
 }

 /*----------------------------------------------------------------*/
 /* Free handle and local addinfo                                  */
 /*----------------------------------------------------------------*/
 else
 {
   Cleanup(h,handle,admin_params,err);
   rc = ESA_OK;                                           /* BS2415 */
   goto exit;                                             /* BS2415 */
 }

/*
 *  Finish
 */

 if (*actual_num EQ 1)                                     /* IS10122A */
 {                                                         /* IS10122A */
   /* BS2502 - trim the resource name */
   Trim(res_params[0].resource);
   ESA_DIAG_printf(ESA_COMP_GETRES, DEBUG_SHOW_IMPORTANT,
                   "Res trimmed : (%s)", res_params[0].resource);
 }                                                       /* IS10122A */

   /* IS10122A goto exit;                                    */
 if (*have_more EQ NO_MORE)                               /* IS10122A */
 {                                                        /* IS10122A */
   /* IS10122A No_More_Resources:                             */
   /* IS10122A *actual_num = 0;     */
   /* IS10122A *have_more = NO_MORE; */
   /* IS10122A rc = ESA_OK;         */

   /* IS10004 */

   /* Do not issue the message when get is done for one      IS10122A */
   /* resource ony because this get might be from 'hotpath'. IS10122A */
   if ( resname_masked EQ ACF2_Object_is_Masked   OR      /* IS10122A */
        is_nextkeys)                                      /* IS10122A */
     CTSAMSG_print(ACF2_COUNT_RESOURCE, msgs, NULL, dest,
                   num_of_res);

   ESA_DIAG_printf(ESA_COMP_GETRES, DEBUG_SHOW_REGULAR,
                 "Count of total resoures loaded: %d.", num_of_res);

   num_of_res = 0;
   /* IS10004 */
 }

 exit :;

 if ( (rc NE ESA_OK) OR (*have_more EQ NO_MORE) )
  Cleanup(h,handle,admin_params,err);

    ESA_DIAG_exit(ESA_COMP_GETRES,1, func, rc );

    return rc ;

  }

/******************************************************************
 * Procedure Name: Cleanup
 ******************************************************************
 * Description   : Perform API Handle cleanup
 *
 * Input         : h            - handle structure pointer
 *                 handle       - API handle paramter
 *
 * Return Value  : None.
 ******************************************************************/
static void Cleanup(ACF2_Get_Res_Handle *h,
                    void **handle,
                    ADMIN_PARAMS_rec_typ * admin_params,
                    ERR_STRUCT_rec_typ   * err)
{
  /* Set API Handle paramter to NULL */

  *handle = NULL;

  /* Free Handle Structure  */
  if (h NE NULL)
    free(h);
}
