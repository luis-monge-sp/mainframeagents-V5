 /**************************************************************
 *                                                             *
 * Title            : Get resource ACL inforamtion (ACF2)      *
 *                                                             *
 * File Name        : ctsbgac.c                                *
 *                                                             *
 * Author           : Guy Shavitt                              *
 *                                                             *
 * Creation Date    : 20/01/1998                               *
 *                                                             *
 * Description      :                                          *
 *                                                             *
 * Assumptions and                                             *
 *   Considerations :                                          *
 *                                                             *
 **************************************************************/

 /**************************************************************
 * Mod.Id   Who    When       Description                      *
 * -------- ------ ---------- -------------------------------- *
 * PS0252   Guy    13/04/1998 Common code changes              *
 * WS2333   Guy    02/08/1998 No more Get_Dsn_Resource         *
 * WS2358   Guy    12/10/1999 Support for the virtual resource *
 * BS2415   Guy    28/12/1999 CS abends if ESS comm. breaks    *
 * BS2479   Shmuel 21/08/2001 Function  CTSGetResACL defined   *
 *                            inconsistently with prototype    *
 * IS10122  NuritY 16/06/2014 Ignore ROLESET rules.            *
 * BS10097  SeligT 19/11/2018 ACF2 Group Aggregation Endless   *
 *                            Loop.                            *
 * IS10178  SeligT 18/12/2018 Supporting LID Anywhere in UID   *
 * IS10178B SeligT 20/01/2019 Permission Which Ends With a     *
 *                            LID Which Ends With a Blank Will *
 *                            Be Replaced With This Character: *
 *                            rssparm_REPL_END_BLNK            *
 * BS10121  AvnerL 20/03/2023 restore ACE_TYPE_MASK - IS10178  *
 * WS10082  MauriC 07/11/2022 Recompile for new ADDINFO macros *
 **************************************************************/

 #include   <globs.h>

 /*
  *   Standard include files
  */

 #include   STDIO
 #include   STDLIB
 #include   STRING
 #include   CTYPE

 /*
  *   ESA include files
  */

 #include   ESA_API
 #include   ESA_DIAG
 #include   ESA_CTSAMSG
 #include   ESA_API_CODES

 #include   MVS_COMP

 #include   API_ADDINFO
 #include   API_AUTH

 #include   ACF2_CODES
 #include   ACF2

 /*
  *   Perform Cleanup up of handle information and other dynamically
  *   allocated areas.
  */
 static void Cleanup(ACF2_Get_ResACL_Handle *h,
                     void **handle,
                     ADMIN_PARAMS_rec_typ * admin_params,
                     ERR_STRUCT_rec_typ   * err);

 static  char   component[] = "GTRSACL";

/****************************************************
 * Procedure Name: CTSGetResACL
 * Description   : Get one, two, or many resource ace's
 * Input         : mode         - GET_FREE_HANDLE_ACL only
 *                 max_aces     - # of elements in ace
 *                                and addinfo arrays
 *                 res_params   - resource params
 *                 res_addinfo  - resource addinfo
 *                 admin_params
 * Output        : actual_num   - # of ace's returned
 *                 have_more    - HAVE_MORE if more aces else NO_MORE
 *                 err          - error indication, message, etc.
 *                 ace          - array of max_aces:
 *                                callee fills with ace's returned
 *  Input/Output : addinfo      - array of max_aces pointers:
 *                                add.info per ace, Caller puts
 *                                requested keywords, callee returns
 *                                actual add.info.
 *                 handle       - NULL on first call, filled by callee,
 *                                used by callee to keep track.
 *                                Freed by caller.
 * Return Value  : ESA_RC
 * Side Effects  : Function may allocate memory, return pointer in
 *                 *handle; Caller MUST free when done.
 * Comments      : Caller must reset I/O params to their initial values
 *                 when using subsequent calls (if HAVE_MORE).
 ****************************************************/
 /* bs2479
 ESA_RC CTSGetResACL (GET_CONN_MODE           mode, */
 ESA_RC CTSGetResACL (GET_ACL_MODE            mode,
                      short                   max_aces,
                      short                 * actual_num,
                      HAVE_MORE_typ         * have_more,
                      void                 ** handle,
                      RES_PARAMS_rec_ptr      res_params,
              /*      ADDINFO_rec_typ      *  res_addinfo, PS0252 */
                      ACE_rec_typ             ace[1],
                      ADDINFO_rec_ptr         addinfo[1],
                      ADMIN_PARAMS_rec_typ  * admin_params,
                      ERR_STRUCT_rec_typ    * err)

{

   static                      char func[]="CTSGetResACL";

  /*
   *   Variables
   */

   ESA_RC                      rc = ESA_OK;
   CTSAMSG_HANDLE_rec_ptr      msgs;
   CTSAMSG_DEST_TABLE_rec_ptr  dest;
   ACF2_Get_ResACL_Handle    * h = NULL;
   RESOURCE_typ                Returned_Key = "";
   char                        msg[256] = "";
   char                        errmsg[256] = "";
   int                         iterate, retry_issued;
   int                         LID_In_UID, LID_Offset;    /* BS10097 */
   int                         LID_Length;                /* IS10178 */
   ACF2_PARAMS_rec_typ       * params_ptr = NULL;         /* BS10097 */
   ONE_FIELD_rec_ptr           pair = NULL;               /* BS10097 */

  /*
   *  Initialize
   */

   ESA_DIAG_enter(ESA_COMP_GTRSACL,1,func);

   msgs = admin_params->ctsamsg_handle;
   dest = admin_params->ctsamsg_dest;

 /*----------------------------------------------------------------*/
 /* Initialization Logic                                           */
 /*----------------------------------------------------------------*/
 /* - Set returned variables to default: return 1 object, more     */
 /* - Initialize Handle (if not initialized and not "free handle"  */
 /*   call.                                                        */
 /*----------------------------------------------------------------*/

 *actual_num = 1;
 *have_more  = HAVE_MORE;

 ESA_DIAG_printf(ESA_COMP_GTRSACL, DEBUG_SHOW_IMPORTANT,
                 "Res = (%s)  Type = (%s)",
                 res_params->resource,
                 res_params->restype);

 /* WS2358 */
 /*----------------------------------------------------------------*/
 /* Did the LOAD RESOURCE request specify the virtual resource ?   */
 /*----------------------------------------------------------------*/
 if (ACF2_Is_Virtual_Resource (res_params->resource) )
 {
   ESA_DIAG_printf(ESA_COMP_GTRSACL, DEBUG_SHOW_IMPORTANT,
                   "VIRTUAL RESOURCE hotpath detected");
   goto No_More_Aces;
 };
 /* End of WS2358 */

 /*----------------------------------------------------------------*/
 /* Allocate Handle (One time processing for every API cycle of    */
 /*                  ace(s) information retrieval)                 */
 /*----------------------------------------------------------------*/
 /* - Allocate handle                                              */
 /*----------------------------------------------------------------*/
 if ( (*handle EQ NULL) AND (mode NE GET_FREE_HANDLE_ACL) )
 {
   rc = Init_ACE_Handle (&h,
                         msgs,
                         dest);

   if (rc NE ESA_OK)
     goto exit;

   *handle = h;
 };

 h = (ACF2_Get_ResACL_Handle *) *handle;

 if (mode NE GET_FREE_HANDLE_ACL)
 {
   iterate = TRUE;
   retry_issued = FALSE;

   /*--------------------------------------------------------------*/
   /* This loop is actual only if a retry is issued for the buffer */
   /*--------------------------------------------------------------*/
   while (iterate)
   {
     rc = ACF2_Get_Resource(res_params->resource,
                            ACF2_Object_is_Not_Masked,
                            res_params->restype,
                            ACF2_Return_Rule_Entries,
                            h,
                            NULL,                         /* WS2333 */
                            Returned_Key,
                            &ace[0],
                            addinfo[0],
                            errmsg,
                            admin_params);


     /*------------------------------------------------------------*/
     /* Check return code                                          */
     /*------------------------------------------------------------*/
     switch(rc)
     {
       case ACF2_OK:
         iterate = FALSE;
         if (strcmp (errmsg, "NO MORE ACES") EQ 0)
           goto No_More_Aces;
         break;

       case ACF2_Not_Found:
        /* IS10122 - start */
        if ( strcmp(errmsg, ACF2_ROLESET_IGNORED_MSG) EQ 0 )
          CTSAMSG_print(ACF2_RES_ROLESET_IGNORED, msgs, NULL, dest,
                        res_params->resource, res_params->restype);
        else
        /* IS10122 - end */
         CTSAMSG_print(ERR_RES_NOT_EXIST, msgs, NULL, dest,
                       res_params->resource);
         rc = ESA_FATAL;
         goto exit;

       /*-----------------------------*/
       /* Bad RC - Error              */
       /*-----------------------------*/
       default:
         if ((strcmp (errmsg, "ACF2 Output buffer too small") EQ 0) AND
             (NOT retry_issued))
         {
           /*-----------------------------*/
           /* Expand source buffer, retry */
           /*-----------------------------*/
           retry_issued = TRUE;
           free (h->Rule_Buffer);
           h->Rule_Buffer = NULL;
           h->Rule_Buffer = (char *) malloc (ACF2_RULE_SOURCE_INC);

           if (h->Rule_Buffer EQ NULL)
           {
             CTSAMSG_print(ERR_MALLOC, msgs, NULL, dest,
                          "RULE SOURCE BUFFER",
                          ACF2_RULE_SOURCE_INC);
             rc = ESA_FATAL;
             goto exit;
           };

           h->Rule_Buffer_Len = ACF2_RULE_SOURCE_INC;
         }
         else
         {
           sprintf(msg,"Get ResACL fail res=%s rc=%d msg=%s",
                     res_params->resource, rc, errmsg);
           CTSAMSG_print(ERR_INTERNAL2,msgs, NULL, dest, component,
                  func, msg, 16,__LINE__);
           rc = ESA_FATAL;
           goto exit;
         };
     }
     *actual_num = 1;
   };
 }
 else
 {
   /*--------------------------------------------------------------*/
   /* Free handle and local addinfo                                */
   /*--------------------------------------------------------------*/
   Cleanup(h,handle,admin_params,err);
   rc = ESA_OK;                                           /* BS2415 */
   goto exit;                                             /* BS2415 */
 }

/*
 *  Finish
 */

 /*BS10121 if (ace[0].ace_type EQ ACE_TYPE_GROUP)          * IS10178 */
 ESA_DIAG_printf(ESA_COMP_GTRSACL, 6,                     /*BS10121*/
   "ace_mask=<%x> user_name=<%s> ug_name=<%s>",
   ace[0].ace_type,ace[0].user_name,ace[0].ug_name);
 if (ace[0].ace_type EQ ACE_TYPE_MASK)                    /* BS10121*/
   {
    /* IS10178 change this because when ACE_TYPE_GROUP, the
               ug_name field will have the name of the group         *
    REPLACE_ENDING_BLANK(ace[0].user_name,ESA_COMP_GTRSACL);         */
    /****** BS10121 start *********/
    if((ace[0].user_name[0] NE ' ') AND
       (ace[0].user_name[0] NE NULL_CHAR)) {
     REPLACE_ENDING_BLANK(ace[0].user_name,ESA_COMP_GTRSACL);
     }
    else if((ace[0].ug_name[0] NE ' ') AND
            (ace[0].ug_name[0] NE NULL_CHAR)) {
     REPLACE_ENDING_BLANK(ace[0].ug_name,ESA_COMP_GTRSACL);
     }
   }
    /****** BS10121 end ***********/

 pair = ADDINFO_search ("UID",                            /* BS10097 */
                        ACF_ADDINFO_KWD_LEN,              /* BS10097 */
                        addinfo[0]->pair,                 /* BS10097 */
                        addinfo[0]->num_pairs);           /* BS10097 */

 if (pair EQ NULL)                goto skip_UID;          /* BS10097 */
 if (pair->value[0] EQ NULL_CHAR) goto skip_UID;          /* BS10097 */

 REPLACE_ENDING_BLANK(pair->value,
                      ESA_COMP_GTRSACL);                  /* BS10097 */
 REPLACE_PRMSN_LID_EB(pair->value,                        /* IS10178B*/
                      ESA_COMP_GTRSACL);                  /* IS10178B*/

 ESA_DIAG_printf(ESA_COMP_GTRSACL, DEBUG_SHOW_IMPORTANT,  /* BS10097 */
                 "ACE UIDMASK: (%s)", pair->value);       /* BS10097 */

 skip_UID:
 /* IS10178 adding ug_name to this diagnostic message                */
 ESA_DIAG_printf(ESA_COMP_GTRSACL, DEBUG_SHOW_IMPORTANT,
                 "Returned ACE: user_name=(%s) ug_name=(%s)",
                 ace[0].user_name, ace[0].ug_name);

 rc = ESA_OK;
 goto exit;

 No_More_Aces:
   *actual_num = 0;
   *have_more  = NO_MORE;
   rc = ESA_OK;

  exit:;

 if ( (rc NE ESA_OK) OR (*have_more EQ NO_MORE) )
 {
  Cleanup(h,handle,admin_params,err);
  *have_more = NO_MORE;
  *actual_num = 0;
 };

   ESA_DIAG_exit(ESA_COMP_GTRSACL,3, func, rc);

   return rc;

 }

/******************************************************************
 * Procedure Name: Cleanup
 ******************************************************************
 * Description   : Perform API Handle cleanup
 *
 * Input         : h            - handle structure pointer
 *                 handle       - API handle paramter
 *
 * Return Value  : None.
 ******************************************************************/
static void Cleanup(ACF2_Get_ResACL_Handle *h,
                    void **handle,
                    ADMIN_PARAMS_rec_typ * admin_params,
                    ERR_STRUCT_rec_typ   * err)
{
  /* Set API Handle paramter to NULL */

  *handle = NULL;

  /* Free Handle Structure  */
  if (h NE NULL)
  {
    if (h->Rule_Buffer NE NULL)
      free(h->Rule_Buffer);
    free(h);
  };
}
