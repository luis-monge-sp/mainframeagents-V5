 /**************************************************************
 *                                                             *
 * Title            : Add a user (RACF)                        *
 *                                                             *
 * File Name        : ctsrius.c                                *
 *                                                             *
 * Author           : Doron Cohen                              *
 *                                                             *
 * Creation Date    : 14/03/94                                 *
 *                                                             *
 * Description      :                                          *
 *                                                             *
 * Assumptions and                                             *
 *   Considerations :                                          *
 *                                                             *
 **************************************************************/

 /**************************************************************
 * Mod.Id   Who      When     Description                      *
 * -------- -------- -------  -------------------------------- *
 * dc2806   Doron    28/06/94 Support keywords that can only be*
 *                            specified in ALTUSER             *
 * as3001   Alex     30/01/95 Remove special treatment of field*
 *                            TSO.ACCTNUM                      *
 * dc0706   Doron    07/06/95 support OMVS segment (RACF 2.1)  *
 * dc0806   Doron    08/06/95 support interval specification   *
 *                            (RACF 2.1)                       *
 * as1506   A.Shv    15/06/95 call to new racf check program   *
 * as0701   A.Sh     07/01/96 Cleanup of add process           *
 * BSAR1004 A.Shv    24/03/96 Correct change password interval *
 *                            processing for racf1.9           *
 * ISAR0001 Alex     31/03/96 RACF 2.2 support                 *
 * BSAR1008 Alex     14/04/96 Add special processing of field  *
 *                            TSO.ACCTNUM                      *
 * as0906   A.Shv    09/06/96 Change kdt-table, call to racfcmd*
 *                            send command without ADDINFO     *
 * BSAR2029 Alex     04/06/97 Add user name checking           *
 * ps0156   Alex     22/07/97 DCE segment support              *
 * ps0163   Alex     29/07/97 RACF security server support     *
 * bs2034   Alex     26/10/97 Care of password_life parameter  *
 * ps0292   AS       30/07/98 Digital certificate support      *
 * ps0391   AlexS    08/11/99 RACF 2.8 Support                 *
 * ws2377   ShmuelK  27/03/01 RESTRICTED/NORESTRICTED attribute*
 * ps0460   ShmuelK  15/04/01 NOPASSWORD (PROTECTED user) supp *
 *                            also remove NORESTRICTED from kdt*
 * ws2394   ShmuelK  06/06/01 AUTHORITY KEYWORD for default grp*
 * bs2517   ShmuelK  24/03/02 ADDUSER OK - EVEN THAT UPDUSER   *
 *                            fails in password spec           *
 * BS10006  MeirS    28/08/07 REVOKE/RESUME for z/os 1.7       *
 * WS10024  AvnerL   28/07/09 Support SHARED UID for OMVS.     *
 * WS10025  BarakH   04/10/09 Support AUTOUID    for OMVS.     *
 * IS10076  NuritY   31/01/13 Support Custom Fields.           *
 * IS10100A NuritY   14/10/13 Support RACF command limitations.*
 * IS10132  AvnerL   10/06/15 Support z/OS 2.2 - protected     *
 * IS10147B AvnerL   13/06/17 Empty pswd 4 protected user only.*
 * WS10070  KailasP  17/03/18 Support SYSTEM_ACCESS            *
 * IS10174  NuritY   31/12/17 Dynamic EXECOUT support.         *
 * BS10102  AvnerL   31/07/19 Drop obsolete RACF_pro_user call.*
 * WS10081  ThomaS   19/07/21 Support MFA                      *
 * IS10185  AvnerL   22/08/22 Recomp with CTSRRCF              *
 * WS10082  MauriC   07/11/22 Recompile for new ADDINFO macros *
 **************************************************************/

 #include   <globs.h>

 /*
  *   Standard include files
  */

 #include   STDLIB
 #include   STDIO
 #include   STRING

 /*
  *   ESA include files
  */

 #include ESA_DIAG
 #include ESA_API
 #include ESA_API_CODES

 #include MVS_CODES                                 /* BSAR2029 */
 #include MVS_OS_CLI

 #include API_ADDINFO
 #include RACF_CODES                                /*ps0460*/
 #include RACF

 /*
  *     MKT for ADDUSER
  *         (Mandatory Keywords Table)
  */

 static ADDINFO_MKTE_rec_typ mkt[] = {
    "" };      /* a null string indicate end-of-rkt */

 /*
  *     RKT for ADDUSER
  *         (Reserved Keywords Table)
  */

 static ADDINFO_RKTE_rec_typ rkt[] = {
    "ADDCATEGORY", "DFLTGRP", "PASSWORD", "AUDITOR", "SPECIAL",
    "ID", "ADD", "TRUST","ROAUDIT",    /* ps0292 WS10070 */
    "" };      /* a null string indicate end-of-rkt */


 /*
  *     KDT for ADDUSER COMMAND
  *         (Keyword Decscription Table)
  */

 /*  IS10076 - the static KDT is not used any more.
  *            A dynamic KDT created at API INIT time is used instead
 static ADDINFO_KDTE_rec_typ kdt[] =      {

   *                                                            *
   * keyword             type   negative       value delimiters *
   *                             value                          *
   * =================== ====== ============== ================ *

   {"RESUME_DATE"        ,KDT_IGN ,""             ,"",   ""    },
   {"REVOKE_DATE"        ,KDT_IGN ,""             ,"",   ""    },
   {"UAUDIT"             ,KDT_IGN ,""             ,"",   ""    },
   {"NOCICS"             ,KDT_IGN ,""             ,"",   ""    },
   {"NODFP"              ,KDT_IGN ,""             ,"",   ""    },
   {"NOLANGUAGE"         ,KDT_IGN ,""             ,"",   ""    },
   {"NOOPERPARM"         ,KDT_IGN ,""             ,"",   ""    },
   {"NOTSO"              ,KDT_IGN ,""             ,"",   ""    },
   {"NOWORKATTR"         ,KDT_IGN ,""             ,"",   ""    },
   {"NOOMVS"             ,KDT_IGN ,""             ,"",   ""    },

    * ISAR0001 *
   {"NONETVIEW"          ,KDT_IGN ,""             ,"",   ""    },

    * ps0156 *
   {"NODCE"              ,KDT_IGN ,""             ,"",   ""    },

    * ps0163 *
   {"NOOVM"              ,KDT_IGN ,""             ,"",   ""    },

    * ps0391 *
   {"NOLNOTES"           ,KDT_IGN ,""             ,"",   ""    },
   {"NONDS"              ,KDT_IGN ,""             ,"",   ""    },

   {"CATEGORY"           ,KDT_IGN ,""             ,"",   ""    },
   {"INTERVAL"           ,KDT_IGN ,""             ,"",   ""    },

   {"ADDCATEGORY"        ,KDT_KEY ,""             ,"(",  ")"   },
   {"AUDITOR"            ,KDT_FLG ,"NOAUDITOR"    ,"",   ""    },
   {"CLAUTH"             ,KDT_KEY ,""             ,"(",  ")"   },
   {"DATA"               ,KDT_KEY ,""             ,"('",  "')" },
   {"DFLTGRP"            ,KDT_KEY ,""             ,"(",  ")"   },
    *WS2394 following authority keyword *
   {"AUTHORITY"          ,KDT_KEY ,""             ,"(",  ")"   },
   {"NAME"               ,KDT_KEY ,""             ,"('", "')"  },
   {"OPERATIONS"         ,KDT_FLG ,"NOOPERATIONS" ,"",   ""    },
   {"OWNER"              ,KDT_KEY ,""             ,"(",  ")"   },
   {"PASSWORD"           ,KDT_KEY ,""             ,"(",  ")"   },
    *next line added by   ps0460*
   {"NOPASSWORD"         ,KDT_FLG ,""             ,"",   ""    },
   {"SECLABEL"           ,KDT_KEY ,""             ,"(",  ")"   },
   {"SECLEVEL"           ,KDT_KEY ,""             ,"(",  ")"   },
   {"SPECIAL"            ,KDT_FLG ,"NOSPECIAL"    ,"",   ""    },
   {"ADSP"               ,KDT_FLG ,"NOADSP"       ,"",   ""    },
   {"GRPACC"             ,KDT_FLG ,"NOGRPACC"     ,"",   ""    },
   {"MODEL"              ,KDT_KEY ,""             ,"(",  ")"   },
   {"OIDCARD"            ,KDT_FLG ,"NOOIDCARD"    ,"",   ""    },
   {"WHEN.TIME"          ,KDT_KEY ,""             ,"(",  ")"   },
   {"WHEN.DAYS"          ,KDT_KEY ,""             ,"(",  ")"   },
   {"CICS.OPCLASS"       ,KDT_KEY ,""             ,"(",  ")"   },
   {"CICS.OPIDENT"       ,KDT_KEY ,""             ,"('", "')"  },
   {"CICS.OPPRTY"        ,KDT_KEY ,""             ,"(",  ")"   },
   {"CICS.TIMEOUT"       ,KDT_KEY ,""             ,"(",  ")"   },
   {"CICS.XRFSOFF"       ,KDT_KEY ,""             ,"(",  ")"   },
   {"DFP.DATAAPPL"       ,KDT_KEY ,""             ,"(",  ")"   },
   {"DFP.DATACLAS"       ,KDT_KEY ,""             ,"(",  ")"   },
   {"DFP.MGMTCLAS"       ,KDT_KEY ,""             ,"(",  ")"   },
   {"DFP.STORCLAS"       ,KDT_KEY ,""             ,"(",  ")"   },
   {"LANGUAGE.PRIMARY"   ,KDT_KEY ,""             ,"(",  ")"   },
   {"LANGUAGE.SECONDARY" ,KDT_KEY ,""             ,"(",  ")"   },
   {"OPERPARM.ALTGRP"    ,KDT_KEY ,""             ,"(",  ")"   },
   {"OPERPARM.AUTH"      ,KDT_KEY ,""             ,"(",  ")"   },
   {"OPERPARM.AUTO"      ,KDT_KEY ,""             ,"(",  ")"   },
   {"OPERPARM.CMDSYS"    ,KDT_KEY ,""             ,"(",  ")"   },
   {"OPERPARM.DOM"       ,KDT_KEY ,""             ,"(",  ")"   },
   {"OPERPARM.KEY"       ,KDT_KEY ,""             ,"(",  ")"   },
   {"OPERPARM.LEVEL"     ,KDT_KEY ,""             ,"(",  ")"   },
   {"OPERPARM.LOGCMDRESP",KDT_KEY ,""             ,"(",  ")"   },
   {"OPERPARM.MFORM"     ,KDT_KEY ,""             ,"(",  ")"   },
   {"OPERPARM.MIGID"     ,KDT_KEY ,""             ,"(",  ")"   },
   {"OPERPARM.MONITOR"   ,KDT_KEY ,""             ,"(",  ")"   },
   {"OPERPARM.MSCOPE"    ,KDT_KEY ,""             ,"(",  ")"   },
   {"OPERPARM.ROUTCODE"  ,KDT_KEY ,""             ,"(",  ")"   },
   {"OPERPARM.STORAGE"   ,KDT_KEY ,""             ,"(",  ")"   },
   {"OPERPARM.UD"        ,KDT_KEY ,""             ,"(",  ")"   },
   {"TSO.ACCTNUM"        ,KDT_KEY ,""             ,"('", "')"  },

    * ps0163 *
   {"TSO.COMMAND"        ,KDT_KEY ,""             ,"('", "')"  },

   {"TSO.DEST"           ,KDT_KEY ,""             ,"(",  ")"   },
   {"TSO.HOLDCLASS"      ,KDT_KEY ,""             ,"(",  ")"   },
   {"TSO.JOBCLASS"       ,KDT_KEY ,""             ,"(",  ")"   },
   {"TSO.MAXSIZE"        ,KDT_KEY ,""             ,"(",  ")"   },
   {"TSO.MSGCLASS"       ,KDT_KEY ,""             ,"(",  ")"   },
   {"TSO.PROC"           ,KDT_KEY ,""             ,"(",  ")"   },
   {"TSO.SECLABEL"       ,KDT_KEY ,""             ,"(",  ")"   },
   {"TSO.SIZE"           ,KDT_KEY ,""             ,"(",  ")"   },
   {"TSO.SYSOUTCLASS"    ,KDT_KEY ,""             ,"(" , ")"   },
   {"TSO.UNIT"           ,KDT_KEY ,""             ,"(",  ")"   },
   {"TSO.USERDATA"       ,KDT_KEY ,""             ,"(",  ")"   },
   {"WORKATTR.WAACCNT"   ,KDT_KEY ,""             ,"('",  "')" },
   {"WORKATTR.WAADDR1"   ,KDT_KEY ,""             ,"('",  "')" },
   {"WORKATTR.WAADDR2"   ,KDT_KEY ,""             ,"('",  "')" },
   {"WORKATTR.WAADDR3"   ,KDT_KEY ,""             ,"('",  "')" },
   {"WORKATTR.WAADDR4"   ,KDT_KEY ,""             ,"('",  "')" },
   {"WORKATTR.WABLDG"    ,KDT_KEY ,""             ,"('",  "')" },
   {"WORKATTR.WADEPT"    ,KDT_KEY ,""             ,"('",  "')" },
   {"WORKATTR.WANAME"    ,KDT_KEY ,""             ,"('",  "')" },
   {"WORKATTR.WAROOM"    ,KDT_KEY ,""             ,"('",  "')" },
   {"OMVS.UID"           ,KDT_KEY ,""             ,"(",   ")"  },
   {"OMVS.AUTOUID"       ,KDT_FLG ,""  *WS10025*  ,"(",   ")"  },
   {"OMVS.SHARED"        ,KDT_FLG ,""  *WS10024*  ,"(",   ")"  },
   {"OMVS.HOME"          ,KDT_KEY ,""             ,"('",  "')" },
   {"OMVS.PROGRAM"       ,KDT_KEY ,""             ,"('",  "')" },
    * PS0391 *
   {"OMVS.ASSIZEMAX"     ,KDT_KEY ,""             ,"(",    ")" },
   {"OMVS.CPUTIMEMAX"    ,KDT_KEY ,""             ,"(",    ")" },
   {"OMVS.FILEPROCMAX"   ,KDT_KEY ,""             ,"(",    ")" },
   {"OMVS.MMAPAREAMAX"   ,KDT_KEY ,""             ,"(",    ")" },
   {"OMVS.PROCUSERMAX"   ,KDT_KEY ,""             ,"(",    ")" },
   {"OMVS.THREADSMAX"    ,KDT_KEY ,""             ,"(",    ")" },

    * ISAR0001 *
   {"NETVIEW.CONSNAME"   ,KDT_KEY ,""             ,"(",   ")"  },
   {"NETVIEW.CTL"        ,KDT_KEY ,""             ,"(",    ")" },
   {"NETVIEW.DOMAINS"    ,KDT_KEY ,""             ,"(",    ")" },
   {"NETVIEW.IC"         ,KDT_KEY ,""             ,"('",  "')" },
   {"NETVIEW.MSGRECVR"   ,KDT_KEY ,""             ,"(",    ")" },
   {"NETVIEW.NGMFADMN"   ,KDT_KEY ,""             ,"(",    ")" },
   {"NETVIEW.OPCLASS"    ,KDT_KEY ,""             ,"(",    ")" },

    * ps0163 *
   {"NETVIEW.NGMFVSPN"   ,KDT_KEY ,""             ,"(",    ")" },

    * ps0156 *
   {"DCE.UUID"           ,KDT_KEY ,""             ,"(",   ")"  },
   {"DCE.DCENAME"        ,KDT_KEY ,""             ,"('",  "')" },
   {"DCE.HOMECELL"       ,KDT_KEY ,""             ,"('",  "')" },
   {"DCE.HOMEUUID"       ,KDT_KEY ,""             ,"(",   ")"  },
   {"DCE.AUTOLOGIN"      ,KDT_KEY ,""             ,"(",   ")"  },

    * ps0156 *
   {"OVM.UID"            ,KDT_KEY ,""             ,"(",   ")"  },
   {"OVM.FSROOT"         ,KDT_KEY ,""             ,"('", "')"  },
   {"OVM.HOME"           ,KDT_KEY ,""             ,"('",  "')" },
   {"OVM.PROGRAM"        ,KDT_KEY ,""             ,"('",  "')" },

    * ps0292 *
   {"NODCERT"            ,KDT_IGN ,""             ,"",   ""    },
   {"DCERT.*"            ,KDT_IGN ,""             ,"",   ""    },

    * ps0391 *
   {"LNOTES.SNAME"       ,KDT_KEY ,""             ,"(",    ")" },
   {"NDS.UNAME"          ,KDT_KEY ,""             ,"(",    ")" },

    * ws2377
   {"RESTRICTED"         ,KDT_FLG ,"NORESTRICTED" ,"",   ""    },*
    * ps0460 *
   {"RESTRICTED"         ,KDT_FLG ,""             ,"",   ""    },

   {""                   ,KDT_FLG ,""             ,"" ,  ""    } };
 */

 static ADDINFO_KDTE_rec_ptr    kdt;               /* IS10076  */

 static char component[] = "CTSRIUS";

 /**************************************************************
 *                                                             *
 * PROCEDURE NAME : CTSAddUser                                 *
 *                                                             *
 * DESCRIPTION    : Create a RACF user                         *
 *                                                             *
 * INPUT          : User, addinfo, admin                       *
 *                                                             *
 * OUTPUT         : err                                        *
 *                                                             *
 * RETURN VALUE   : ESA_RC                                     *
 *                                                             *
 **************************************************************/

 ESA_RC CTSAddUser (USER_PARAMS_rec_typ  * user_params,
                    ADDINFO_rec_typ      * addinfo,
                    ADMIN_PARAMS_rec_typ * admin_params,
                    ERR_STRUCT_rec_typ   * err)
 {

   static char                func[]="CTSAddUser";

  /*
   *   Variables
   */

   ESA_RC                     rc,chk_rc;
   ESA_RC                        pro_rc;         /*ps0460*/
   /*BS10102 MS_FLAG_typ               protected;/*ps0460*/
   /* IS10147B RACF_FLAG_typ  protected;         /*ps0460*/
   char                       cmd[MAX_API_ST];
   ADDINFO_rec_ptr            laddinfo = NULL;
   /* IS10100A ADDINFO_rec_ptr  addinfo_vec[2] = { NULL, NULL }; */
   ONE_FIELD_rec_ptr          cpair,cpair1;       /* IS10132  */
   /*WS10070 start*/
   ONE_FIELD_rec_ptr          spair, opair;
   ONE_FIELD_rec_ptr          pair = NULL;        /* WS10MFA */
   char kwd_flag[2] = NULL_STRING;
   char attr[13] =  NULL_STRING;
   char *sPtr, *attrPtr;
   /* WS10070 end*/
   USER_PARAMS_rec_typ        user;
   int                        user_added = 0;     /* as0701   */
   int                        pswd_supplied = 0;  /* bs2034   */
   /* int     found_interval = 0; /BSAR1004/  */  /* bs2034   */
   static char tso_acctnum_spec_symb[]=" ,();'";  /* BSAR1008 */
   char                      *spcsmb;             /* BSAR1008 */
   ADDINFO_KDTE_rec_ptr       tso_acctnum;        /* BSAR1008 */
   static char acct_num_spc_l[] = "('";           /* BSAR1008 */
   static char acct_num_spc_r[] = "')";           /* BSAR1008 */
   static char acct_num_smp_l[] = "(";            /* BSAR1008 */
   static char acct_num_smp_r[] = ")";            /* BSAR1008 */
   CTSAMSG_HANDLE_rec_ptr     msgs;
   CTSAMSG_DEST_TABLE_rec_ptr dest;
   RACF_PARAMS_rec_typ      * params_ptr = NULL;   /* IS10076  */

  /*
   *   Initialize
   */

   ESA_DIAG_enter(ESA_COMP_ADDUSER, 1, func);

   msgs = admin_params->ctsamsg_handle;
   dest = admin_params->ctsamsg_dest;
   params_ptr = admin_params->apiinit_handle;             /* IS10076 */

   if ( ESA_DIAG_get_debug_level(ESA_COMP_ADDUSER) GE 1 ) /* PS0460 */
     ADDINFO_dump(addinfo,1);                             /* ps0460 */

  /* IS10076 - start  */
  /*
   *   Check that the dynamic KDT exists
   */
   if (params_ptr->iu_kdt.p_kdt NE NULL)
   {
     kdt = params_ptr->iu_kdt.p_kdt;
     ESA_DIAG_printf(ESA_COMP_UPDUSER, 1,
                  "kdt = %.8X", kdt);
   }
   else
   {
     CTSAMSG_print(WARN_INT1, msgs, NULL, dest, component, func,
                   "Insert User: Dynamic KDT was not found",
                   ESA_FATAL,__LINE__);
     rc = ESA_FATAL;
     goto exit;
   }
  /* IS10076 - end    */

  /*
   *   Check that Reserved Keywords were not used
   */

   if (ADDINFO_rkt_check(func,1,&addinfo,rkt, dest,
                         msgs) NE ESA_OK) {
      rc = ESA_FATAL;
      goto exit;
   }


  /*                                                       BSAR2029
   *   Verify user name                                    BSAR2029
   */

   spcsmb = strpbrk( user_params->user,                 /* BSAR2029 */
                     tso_acctnum_spec_symb);            /* BSAR2029 */
   if ( spcsmb NE NULL ) {                              /* BSAR2029 */
     CTSAMSG_print(ERR_INVALID_NAME, msgs, NULL, dest,  /* BSAR2029 */
                   "USER", user_params->user);          /* BSAR2029 */
     rc = ESA_FATAL;                                    /* BSAR2029 */
     goto exit;                                         /* BSAR2029 */
   }                                                    /* BSAR2029 */

  /*
   *   Verify that user does not exist
   */

   ESA_DIAG_printf(ESA_COMP_ADDUSER, 1,
                   "Checking user %s existance", user_params->user);
   chk_rc = RACF_chk_user(user_params->user, OBJ_NOT_EXIST,
                          TRUE, dest, msgs) ;
   if ( chk_rc NE ESA_OK ) {
      rc = ESA_FATAL;
      goto exit;
   }

   /*  IS10076 - start   */
   /****************************************************************
   *                                                               *
   *   If CSDATA/NOCSDATA are provided but CUSRTOM_FIELDS_SUPPORT  *
   *   is N, issue a message.                                      *
   *                                                               *
   ****************************************************************/
   if (params_ptr->rssparm_CUSTOM_FIELDS_SUPPORT[0] EQ 'N')
   {
     cpair = ADDINFO_prefix_search("CSDATA.",
                           RCF_ADDINFO_KWD_LEN,
                           TRUE,
                           addinfo->pair,
                           addinfo->num_pairs );

     if (cpair EQ NULL)
       cpair = ADDINFO_search("NOCSDATA",
                             RCF_ADDINFO_KWD_LEN,
                             addinfo->pair,
                             addinfo->num_pairs );

     if (cpair NE NULL)
       CTSAMSG_print(ERR_NOT_SUPP_DUE_RSSP_NO, msgs, NULL,
                     dest, "CSDATA. and NOCSDATA keywords",
                     "CUSTOM_FIELDS_SUPPORT", "N");
   }
   /*  IS10076 - end     */

  /*
   *   Obtain a local addinfo buffer
   */

   if (ADDINFO_alloc(func, 10,&laddinfo, dest, msgs) NE ESA_OK) {
      rc = ESA_FATAL;
      goto exit;
   }

   /* IS10100A
   addinfo_vec[0] = laddinfo;
   addinfo_vec[1] = addinfo;         */

  /*
   *   Add Dfltgrp and Password to local addinfo
   */

   ESA_DIAG_printf(ESA_COMP_ADDUSER, 1,
                   "Inserting paramters to local addinfo");

   /* Removed by bs2034
    * ADDINFO_insert(TYPE_1A, "PASSWORD", user_params->passwd,
    *              laddinfo, RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
    *              UNIQUE);
    */

   if (strlen(user_params->passwd) GT 0 )   /* bs2034 */
     pswd_supplied = 1;                     /* bs2034 */

   ADDINFO_insert(TYPE_1A, "DFLTGRP", user_params->def_group,
                  laddinfo, RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                  UNIQUE);
   /* WS10070 - start */
   spair = ADDINFO_search("SYSTEM_ACCESS", RCF_ADDINFO_KWD_LEN,
                        addinfo->pair, addinfo->num_pairs);

   if (spair NE NULL)
   {
      ESA_DIAG_printf(ESA_COMP_ADDUSER, 2,
                      "SYSTEM_ACCESS keyword located - %s",
                      spair->value);

      /* If SYSTEM_ACCESS is populated then we dont want to give    *
       * other ways to define SPECIAL,OPERATIONS,AUDITOR attributes *
       * Since OPERATIONS is defined in separate attribute and not  *
       * in User_Admin, we want to remove OPERATIONS from addinfo   */

      opair= ADDINFO_search("OPERATIONS", RCF_ADDINFO_KWD_LEN,
                            addinfo->pair, addinfo->num_pairs);
      if ( opair NE NULL )
      {
          ADDINFO_delete( addinfo, "OPERATIONS" );
          ESA_DIAG_printf(ESA_COMP_ADDUSER, 1,
                          "OPERATIONS attribute ignored.");
      }

      sPtr = NULL;
      do
      {

          chk_rc = ADDINFO_list_getnextvalue(spair, ADDINFO_LIST_ENTRY,
                                             attr, &sPtr);

          if( *attr EQ NULL_CHAR )
              continue;
          else
          {
            if ( (strlen(attr) GT 2) AND (strncmp(attr,"NO",2) EQ 0) )
            {
               strcpy(kwd_flag , KWD_FLAG_OFF);
               attrPtr =attr+2; /*Ignore two characters to get kwd name*/
            }
            else
            {
               strcpy(kwd_flag , KWD_FLAG_ON);
               attrPtr = attr;
            }
          }

          ESA_DIAG_printf(ESA_COMP_ADDUSER, 9,
                          "kwd_flag - %s, attr - %s",
                          kwd_flag, attrPtr);


          ADDINFO_insert(TYPE_1A, attrPtr , kwd_flag, laddinfo,
                         RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                         UNIQUE);

      } while( chk_rc EQ ESA_OK );
   }
   else
   { /* WS10070 - end */

     /*
      *   Add Administration flags to local addinfo (AUDITOR/SPECIAL)
      */
      ESA_DIAG_printf(ESA_COMP_ADDUSER, 2,
                      "user_params->user_admin= %d",
                       user_params->user_admin );

      switch ( user_params->user_admin ) {

        case USER_ADM_ALL :
             ADDINFO_insert(TYPE_1A, "SPECIAL", KWD_FLAG_ON, laddinfo,
                            RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                            UNIQUE);
             ADDINFO_insert(TYPE_1A, "AUDITOR", KWD_FLAG_ON, laddinfo,
                            RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                            UNIQUE);
             break ;

        case USER_ADM_ADMIN:
             ADDINFO_insert(TYPE_1A, "SPECIAL", KWD_FLAG_ON, laddinfo,
                            RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                            UNIQUE);
             break ;

        case USER_ADM_AUDIT:
             ADDINFO_insert(TYPE_1A, "AUDITOR", KWD_FLAG_ON, laddinfo,
                            RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                            UNIQUE);
             break ;
        default :
             break ;
      }
   }

  /*
   *   Add ADDCATEGORY to local addinfo
   */

   cpair=ADDINFO_search("CATEGORY", RCF_ADDINFO_KWD_LEN,
                        addinfo->pair, addinfo->num_pairs);
   if (cpair NE NULL) {
      ESA_DIAG_printf(ESA_COMP_ADDUSER, 1,
                      "CATEGORY keyword located %s=%s",
                      cpair->keyword, cpair->value);
      if (cpair->vallen GT 0)
         ADDINFO_insert(cpair->add_typ, "ADDCATEGORY", cpair->value,
                        laddinfo, RCF_ADDINFO_KWD_LEN,
                        RCF_ADDINFO_VAL_LEN, UNIQUE);
   }

   /*
    *  TSO.ACCTNUM parameter            (BSAR1008)
    */

   cpair = ADDINFO_search("TSO.ACCTNUM", RCF_ADDINFO_KWD_LEN,
                          addinfo->pair,
                          addinfo->num_pairs);
   if (cpair NE NULL) {
      ESA_DIAG_printf(ESA_COMP_ADDUSER, 1,
                      "TSO.ACCTNUM keyword located %s=%s",
                      cpair->keyword, cpair->value);
     /*
      *   Locate "TSO.ACCTNUM" in KDTE table
      */

      tso_acctnum =  ADDINFO_kdt_search("TSO.ACCTNUM", kdt);
      if ( tso_acctnum NE NULL ) {

         spcsmb = strpbrk( cpair->value, tso_acctnum_spec_symb);

         /***  Account number without special symbols ***/

         if ( spcsmb EQ NULL ) {
            tso_acctnum->txtl =  acct_num_smp_l;
            tso_acctnum->txtr =  acct_num_smp_r;
         }

         /***  Account number with special symbols ***/

         else {
            tso_acctnum->txtl =  acct_num_spc_l;
            tso_acctnum->txtr =  acct_num_spc_r;
         }
      }
      else {
        CTSAMSG_print(ERR_INTERNAL2,msgs, NULL, dest,
                 component,func,
                 "KDTE table corrupted. TSO.ACCTNUM field not found",
                 16,__LINE__);
        rc = ESA_FATAL;
        goto exit;
      }
   }

  /*
   *   Build and issue ADDUSER command
   */

   /* IS10100A - start */
   /*
   sprintf(cmd,"ADDUSER %s ",user_params->user);
   ESA_DIAG_printf(ESA_COMP_ADDUSER, 1,
                   "Command header prepared (%s)", cmd);
   rc = racfcmd(func, EXECOUT_DDNAME, admin_params->admin_uname,
                cmd, MAX_OK_RC_0,
                2, addinfo_vec, mkt, kdt, dest, msgs,
                CMDOUT_YES, RACF_NO);                    */

   rc = RACF_do_AddAlt_cmd(ESA_COMP_ADDUSER, 'U',
                          user_params->user, "ADD",
                          addinfo, laddinfo, mkt, kdt,
                          CMDOUT_YES, RACF_NO, MAX_OK_RC_0,
                          admin_params);
   /* IS10100A - end  */

  /*
   *   Verify that user exists
   */

   ESA_DIAG_printf(ESA_COMP_ADDUSER, 1,
                   "Checking user %s existance", user_params->user);
   chk_rc = RACF_chk_user(user_params->user, OBJ_EXIST,
                          FALSE, dest, msgs) ;
   if ( chk_rc EQ ESA_OK )
      user_added = 1; /* as0701 */

   if ( rc NE ESA_OK) {
      rc = ESA_FATAL;
      goto exit;
   }

  /*
   *   Handle keywords that can not be specified in ADDUSER and must be
   *   issued as ALTUSER
   */

   ESA_DIAG_printf(ESA_COMP_ADDUSER, 1, "Preparing  for ALTUSER");

   ADDINFO_empty(laddinfo);

    /* BS10102 Drop this obsolete call to RACF_pro_user in CTSRPRO *
     *ps0460 from here*
    ESA_DIAG_printf(ESA_COMP_ADDUSER, 1,
            "Extracting user %s PROTECTED attribute", user_params->user);
   * change parameters                                        IS10147B*
   *pro_rc=RACF_pro_user(user_params->user,&protected,TRUE,dest,msgs);*
    pro_rc = RACF_pro_user(user_params->user,&protected,admin_params);
    if (pro_rc NE ESA_OK) {;
       rc = ESA_FATAL;
       goto exit;
    }
     *ps0460*                  BS10102 **********/

   /* UAUDIT parameter */

   cpair = ADDINFO_search("UAUDIT", RCF_ADDINFO_KWD_LEN,
                          addinfo->pair, addinfo->num_pairs);
   if (cpair NE NULL) {
      ESA_DIAG_printf(ESA_COMP_ADDUSER, 1,
                      "UAUDIT keyword located %s=%s",
                      cpair->keyword, cpair->value);
      if (strcmp(cpair->value, KWD_FLAG_ON) EQ 0)
         ADDINFO_insert(cpair->add_typ, cpair->keyword, cpair->value,
                        laddinfo, RCF_ADDINFO_KWD_LEN,
                        RCF_ADDINFO_VAL_LEN, UNIQUE);
   }

   /* INTERVAL parameter */

   cpair = ADDINFO_search("INTERVAL", RCF_ADDINFO_KWD_LEN,
                          addinfo->pair, addinfo->num_pairs);
   if (cpair NE NULL) {
      /* found_interval = 1; /BSAR1004/   */   /* bs2034 */
      ESA_DIAG_printf(ESA_COMP_ADDUSER, 1,
                      "INTERVAL keyword located %s=%s",
                      cpair->keyword, cpair->value);
   /*PS0460 start*/
   /*IS10132 if (protected EQ RACF_YES) { */
   /*** IS10132 --- see detailed note later ***/
   /*** Prevent only NOPASSWORD & INTERVAL  ***/
   cpair1 = ADDINFO_search("NOPASSWORD", RCF_ADDINFO_KWD_LEN,
                          addinfo->pair,
                          addinfo->num_pairs);
   ESA_DIAG_printf(ESA_COMP_ADDUSER, 1,
         "NOPASSWORD keyword located %s=%s with INTERVAL",
                      cpair1->keyword, cpair1->value);
   if (cpair1 NE NULL) {
     if (strcmp(cpair->value, KWD_FLAG_ON) EQ 0) {
   /* end of IS10132 part #1 */
     ESA_DIAG_printf(ESA_COMP_ADDUSER, 1,
             "INTERVAL keyword for PROTECTED user ignored");

     CTSAMSG_print(RACF_PROTECTED_IGNORE_KWD,
                   msgs, NULL, dest, "INTERVAL", user_params->user);
     } /* end of KWD_FLAG_ON    IS10132 */
     ADDINFO_insert (cpair->add_typ, cpair->keyword, cpair->value,
                      laddinfo, RCF_ADDINFO_KWD_LEN,  /* IS10132 */
                      RCF_ADDINFO_VAL_LEN, UNIQUE);
     } /* end of NOPASSWORD */
     else /*PS0460*/
     ADDINFO_insert (cpair->add_typ, cpair->keyword, cpair->value,
                      laddinfo, RCF_ADDINFO_KWD_LEN,
                      RCF_ADDINFO_VAL_LEN, UNIQUE);
   }


   /* REVOKE_DATE parameter */

   cpair = ADDINFO_search("REVOKE_DATE", RCF_ADDINFO_KWD_LEN,
                          addinfo->pair,
                          addinfo->num_pairs);
   if (cpair NE NULL) {
      ESA_DIAG_printf(ESA_COMP_ADDUSER, 1,
                      "REVOKE_DATE keyword located %s=%s",
                      cpair->keyword, cpair->value);
      ADDINFO_insert(cpair->add_typ, cpair->keyword, cpair->value,
                     laddinfo, RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                     UNIQUE);
   }

   /* RESUME_DATE parameter */

   cpair = ADDINFO_search("RESUME_DATE", RCF_ADDINFO_KWD_LEN,
                          addinfo->pair,
                          addinfo->num_pairs);
   if (cpair NE NULL) {
      ESA_DIAG_printf(ESA_COMP_ADDUSER, 1,
                      "RESUME_DATE keyword located %s=%s",
                      cpair->keyword, cpair->value);
      ADDINFO_insert(cpair->add_typ, cpair->keyword, cpair->value,
                     laddinfo, RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                     UNIQUE);
   }

   /* Call upduser/revuser */

   /* if (laddinfo->num_pairs GT 0) {       Removed by bs2034 */

   /* BS10006 - remove condition. It is always performed
                due to fix bs2034
      BS10006 - the following <if> is always true because
                password must be supplied

   if ((laddinfo->num_pairs GT 0) OR pswd_supplied ) { /* bs2034 */

   strcpy(user.user,user_params->user);
   strcpy(user.def_group, BACKSLASH_STR);
   user.passwd_life = user_params->passwd_life;   /* bs2034 */

   /* Start BSAR1004 */
     /* Removed by bs2034
      * if ( found_interval AND
      *     (strcmp(admin_params->rss_type, RACF19_RSS_TYPE) EQ 0) )
      *  strcpy(user.passwd, user_params->passwd );
      * else
      *  strcpy(user.passwd, BACKSLASH_STR);
      */
   /* End   BSAR1004 */

   if (pswd_supplied ) {                          /* bs2034 */
   /*PS0460 start*/
   /*********************** IS10132 start ****************************
   /* With z/OS 2.2 when password is not set in adduser, the password
      is assumed to be missing and no default-group value is set as
      a temp value for the password. (as it used so far by RACF)
      As a result, the user is defined as a PROTECTED user.
      The fix differentiates such a case from a case the NOPASSWORD
      is set by the transaction from IIQ / ESS.
      So password can't be set together with NOPASSWORD.             */
   strcpy(user.passwd,user_params->passwd); /*set as default IS10132*/
   cpair = ADDINFO_search("NOPASSWORD", RCF_ADDINFO_KWD_LEN,
                          addinfo->pair,
                          addinfo->num_pairs);
   if (cpair NE NULL) {
      ESA_DIAG_printf(ESA_COMP_ADDUSER, 1,
                      "NOPASSWORD keyword located %s=%s",
                      cpair->keyword, cpair->value);
   /* IS10132 if (protected EQ RACF_YES) { */
     if (strcmp(cpair->value, KWD_FLAG_ON) EQ 0) {
     ESA_DIAG_printf(ESA_COMP_ADDUSER, 1,
             "PASSWORD keyword for PROTECTED user ignored");
     CTSAMSG_print(RACF_PROTECTED_IGNORE_KWD,
                   msgs, NULL, dest, "PASSWORD", user_params->user);
     strcpy(user.passwd, BACKSLASH_STR);
     }
     } /* end of NOPASSWORD . end of IS10132 */
     /* IS10132 else *PS0460 end*
        IS10132 strcpy(user.passwd, user_params->passwd ); * bs2034 */
   }    /*PS0460*/
    else                                           /* bs2034 */
       strcpy(user.passwd, BACKSLASH_STR);         /* bs2034 */

    user.user_admin = USER_ADM_IGNORED ;
    if (user_params->rev_status EQ USER_STAT_REVOKED)
       user.rev_status = user_params->rev_status;
    else user.rev_status = USER_STAT_IGNORED;
    ESA_DIAG_printf(ESA_COMP_ADDUSER, 1,
                    "Calling upduser for %s", user.user);
    rc = CTSUpdUser( &user, laddinfo, admin_params, err );
      /*
   }  BS10006 - remove calling to CTSRevokeUser because it is never
                performed due to fix bs2034
      */
      /*   BS10006 the following <else> is never performed
   else if (user_params->rev_status EQ USER_STAT_REVOKED) {

      ESA_DIAG_printf(ESA_COMP_ADDUSER, 1,
                      "Calling revuser for %s", user_params->user);
      rc = CTSRevokeUser( user_params, laddinfo, admin_params, err );

   }  */

   if (rc NE ESA_OK) goto exit;  /*bs2517*/

  /*  ps0292
   *  Digital certificate processing  (RACDCERT ADD)
   */

   rc = RACF_Dig_cert_add(ESA_COMP_ADDUSER,               /* ps0292 */
                          user_params, addinfo, laddinfo, /* ps0292 */
                          admin_params, dest, msgs);      /* ps0292 */

   /* WS10081 - start */
   if (rc NE ESA_OK) goto exit;

   /* check if any MFA. attribute requested. */
   pair = ADDINFO_prefix_search("MFA.", RCF_ADDINFO_KWD_LEN,
                                 TRUE,    /* include NULL value */
                                 addinfo->pair, addinfo->num_pairs);
   if ( pair EQ NULL)
      goto skip_mfa;
   else
   {
    ESA_DIAG_printf(ESA_COMP_ADDUSER, 4,
                    "MFA. entries found in addinfo\n");
    rc = RACF_MFA_cmd(ESA_COMP_ADDUSER,
                     user_params->user,
                     "AddUsr",
                     addinfo,
                     NULL,
                     admin_params);
   }
   skip_mfa:
   /* WS10081 - end   */
  /*
   *   Finish
   */

   exit:;

  /*
   *   Add process failed, after some of alu opereations
   *   Here we perform cleanup, and delete this poor user
   */

   if ( ( rc NE ESA_OK ) AND user_added ) {      /* as0701 */

     /*
      *   Build and issue DELUSER command
      */

      sprintf(cmd,"DELUSER %s ",user_params->user);
      ESA_DIAG_printf(ESA_COMP_ADDUSER, 1,
                      "Command header prepared (%s)", cmd);

      racfcmd(func, EXECOUT_DDNAME, admin_params->admin_uname,
              cmd, MAX_OK_RC_0,
              0, NULL, mkt, kdt, admin_params,           /* IS10174 */
              CMDOUT_YES, RACF_YES);
   /* IS10174 0, NULL, mkt, kdt, dest, msgs,                        */
   }

   ADDINFO_free(&laddinfo);

   ESA_DIAG_exit(ESA_COMP_ADDUSER, 1, func, rc);

   return rc;

 }
