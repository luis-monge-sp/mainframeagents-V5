 /**************************************************************
 *                                                             *
 * Title            : API termination routine (TSS)            *
 *                                                             *
 * File Name        : ctstterm.c                               *
 *                                                             *
 * Author           : Alexander Shvartsman                     *
 *                                                             *
 * Creation Date    : 15/01/97                                 *
 *                                                             *
 * Description      :                                          *
 *                                                             *
 * Assumptions and                                             *
 *   Considerations :                                          *
 *                                                             *
 **************************************************************/

 /**************************************************************
 * Mod.Id   Who      When     Description                      *
 * -------- -------- -------  -------------------------------- *
 * IS10091  NuritY   05/06/13 Support dynamic tsscfile record  *
 *                            description table. (WS10034)     *
 * WS10054  SeligT   26/07/16 Add ENQ/DEQ SYSTEMS RNL Parameter*
 * IS10139  SeligT   28/08/16 Update OS Functions for Agents   *
 * IS10174  NuritY   31/12/17 Dynamic EXECOUT support.         *
 * IS10182  AvnerL   17/07/19  S0C4/S0C1 due to DIAG vsprintf  *
 * IS10184  NuritY   31/08/21 Improve scripts performance      *
 * WS10083  MauriC   26/06/22 Free dynamic RTT if needed       *
 **************************************************************/

 #include <globs.h>

 /* IS10091 - start */
 /*
  *   Standard include files
  */

 #include STDIO
 #include STDLIB
 #include STRING

 #include ESA_DIAG
 #include ESA_API
 #include ESA_CTSAMSG
 #include ESA_API_CODES
 #include API_AUTH                                         /* IS10174 */

 /*
  *   TSS include files
  */

 /* IS10139 #include <CTSCSRV.h>                             WS10054 */
 #include TSS
 #include TSS_CODES

/* IS10091 - end */

/****************************************************
 * Procedure Name : apiterm
 * Description    : API termination & cleanup
 * Input          :
 * Output         :
 * Input/Output   : admin, err
 * Return Value   : ESA_RC
 * Side Effects   :
 * Comments       : Platform-dependent operations to be performed
 *                  when API is no longer needed.
 ***************************************************/

 ESA_RC CTSAPITerm (ADMIN_PARAMS_rec_typ * admin_params,
                    ERR_STRUCT_rec_typ   * err)


 {

   /*  IS10091 - start */

   /*
    * free area allocated by CTSAPIInit.
    */
   char          func[] = "CTSAPITerm";
   TSS_PARAMS_rec_typ * params_ptr = NULL;

   ESA_RC        rc = ESA_OK;                            /* IS10174 */
   COMMON_PARAMS_rec_typ      * comm_parms = NULL;       /* IS10174 */

   admin_params->cs_func.DIAG_enter_ptr(ESA_COMP_APITERM, 1, func );

   params_ptr = admin_params->apiinit_handle;
   if ( params_ptr EQ NULL )
   {
    /*IS10182admin_params->cs_func.DIAG_printf_ptr(ESA_COMP_APITERM,3,*/
     ESA_DIAG_printf(ESA_COMP_APITERM, 3,                /*IS10182*/
                   "apiinit_handle is NULL");
   }
   else
   {
     /*
      *  Free TSSCFILE records block.
      */
    /*IS10182admin_params->cs_func.DIAG_printf_ptr(ESA_COMP_APITERM,3,*/
     ESA_DIAG_printf(ESA_COMP_APITERM, 3,                 /*IS10182*/
               "Free tsscf block at %8X",
               params_ptr->tsscf_rec_general);

     TSS_Free_tsscf_general(params_ptr->tsscf_rec_general,
                            admin_params);

     /* IS10174 - start */
     /*
      *  Terminate all administrators and free the Administrators
      *  list
      */
     if (params_ptr->common_params NE NULL)
     {
       rc = ESA_OK;                                       /* IS10184 */
       comm_parms = params_ptr->common_params;

       /* IS10184 - the code bellow was moved to Common_params_handle
                    to be executed each time comon_params is freed
                    either by CC or by SPI.
       /@IS10182 admin_params->cs_func.DIAG_printf_ptr( @/
       ESA_DIAG_printf(                              /@IS10182@/
                    ESA_COMP_APITERM, 3,
                    "AdminsLIst_Handle(TERMF): area = %8X -> %8X",
                    &comm_parms->RSS_Admins_list,
                    comm_parms->RSS_Admins_list);

       if (comm_parms->RSS_Admins_list NE NULL)
       {
         rc = CTSCRSS_AdminsList_Handle ("TERMF",
             (RSS_ADMINS_LIST_rec_typ **)&comm_parms->RSS_Admins_list,
             ESA_COMP_APITERM, admin_params);

         /@IS10182 admin_params->cs_func.DIAG_printf_ptr( @/
         ESA_DIAG_printf(                           /@IS10182@/
                      ESA_COMP_APITERM, 3,
                      "AdminsLIst_Handle(TERMF): rc = %d", rc);
       }
          end of moved code - IS10184 */


       /*
        *  Free the Common_params block.
        */
       /* free common usaapi parameters area                   WS10054 */
       /*  See comments related to this fix in CTSCSRV.
       free_common_parms_area(admin_params,
                             (DUMMY_PARAMS_rec_typ *) params_ptr); */
       /*IS10182 admin_params->cs_func.DIAG_printf_ptr( */
       ESA_DIAG_printf(                                 /*IS10182*/
                      ESA_COMP_APITERM,3,
                     "Common_params address=<%x> - free area.",
                     params_ptr->common_params);
       /* IS10184
       rc = Common_params_Handle ("TERM", &params_ptr->common_params,
                                 admin_params); */
       rc = Common_params_Handle ("TERM",
                                  COMMON_PARAMS_OWNER_SPI, /* IS10184 */
                                  &params_ptr->common_params,
                                  admin_params);
       /*IS10182 admin_params->cs_func.DIAG_printf_ptr( */
       ESA_DIAG_printf(                               /*IS10182*/
                      ESA_COMP_APITERM,3,
                     "Common_params_Handle(TERM) - rc = %d", rc);
     }
     /* IS10174 - end   */
     /*
      *  Free apiinit handle block (TSS_params)
      */
    /*IS10182admin_params->cs_func.DIAG_printf_ptr(ESA_COMP_APITERM,3,*/
     /* If the rc from  Common_params_Handle is ESA_NOT_SUPP IS10184 */
     /* it means that common_params is not ours and we did   IS10184 */
     /* free it, so we willnot free the params block.        IS10184 */
     /* The comon_params and the params block will be freed  IS10184 */
     /* by the owner of the common_params.                   IS10184 */
     if (rc NE ESA_NOT_SUPP)                              /* IS10184 */
     {                                                    /* IS10184 */
       ESA_DIAG_printf(ESA_COMP_APITERM,3,             /*IS10182*/
                     "apiinit_handle address=<%x>, free area.",
                     params_ptr);
       free(params_ptr);
       admin_params->apiinit_handle = NULL;
     };                                                   /* IS10184 */
   }

   admin_params->cs_func.DIAG_exit_ptr(
      ESA_COMP_APITERM, 1, func,ESA_OK);

   /* IS10091 - end */

   /* WS10083 - start
      If we have allocated a new dynamic RTT table
      we should free the memory. */
   TSS_global_term (ESA_COMP_APITERM,
                    admin_params,
                    err);

   /* WS10083 - end   */

  return ESA_OK;

 }
