 /**************************************************************
 *                                                             *
 * Title            : API termination routine (RACF)           *
 *                                                             *
 * File Name        : ctsrterm.c                               *
 *                                                             *
 * Author           : A.Shv                                    *
 *                                                             *
 * Creation Date    : 31/07/94                                 *
 *                                                             *
 * Description      :                                          *
 *                                                             *
 * Assumptions and                                             *
 *   Considerations :                                          *
 *                                                             *
 **************************************************************/

 /**************************************************************
 * Mod.Id   Who      When     Description                      *
 * -------- -------- -------  -------------------------------- *
 * IS10002  AvnerL   31/01/07 Drop CTS3121E. WS2549 improvement*
 * IS10076  NuritY   07/05/12 Support Custom Fields.           *
 * IS10100  NuritY   29/07/13  Support CTSA internal custom    *
 *                             fields (CTSACFs)                *
 * WS10054  SeligT   26/07/16 Add ENQ/DEQ SYSTEMS RNL Parameter*
 * IS10139  SeligT   28/08/16 Update OS Functions for Agents   *
 * IS10174  NuritY   31/12/17 Dynamic EXECOUT support.         *
 * IS10182  AvnerL   17/07/19  S0C4/S0C1 due to DIAG vsprintf  *
 * IS10184  NuritY   31/08/21 Improve scripts performance      *
 **************************************************************/

 #include <globs.h>
 #include ESA_API
 /* IS10139 #include <CTSCSRV.h>                              WS10054 */
 #include RACF                                             /* IS10002 */
 #include STDLIB                                           /* IS10002 */
 #include API_AUTH                                         /* IS10174 */

/****************************************************
 * Procedure Name : apiterm
 * Description    : API termination & cleanup
 * Input          :
 * Output         :
 * Input/Output   : admin, err
 * Return Value   : ESA_RC
 * Side Effects   :
 * Comments       : Platform-dependent operations to be performed
 *                  when API is no longer needed.
 ***************************************************/

 ESA_RC CTSAPITerm (ADMIN_PARAMS_rec_typ * admin_params,
                    ERR_STRUCT_rec_typ   * err)
{
   /******************** IS10002 starts **************************/
   /* free area allocated by CTSAPIInit.                        */
   /******************** IS10002 starts **************************/
   /* char          component[] = "CTSRTRM"; */
   char          func[] = "CTSAPITerm";
   RACF_PARAMS_rec_typ * params_ptr = NULL;
   /*IS10002 char log[]    = NULL_STRING; */
   /*IS10002 char shadow[] = NULL_STRING; */
   /* ESA_DIAG_initialize (log, shadow, func,
                        &admin_params->esadiag_handle) ; */
   ESA_RC        rc = ESA_OK;                            /* IS10174 */
   COMMON_PARAMS_rec_typ      * comm_parms = NULL;       /* IS10174 */

   admin_params->cs_func.DIAG_enter_ptr(
     ESA_COMP_APITERM, 1, func );

   params_ptr = admin_params->apiinit_handle;
   if ( params_ptr EQ NULL )
   {
     /*IS10182 admin_params->cs_func.DIAG_printf_ptr(*/
     ESA_DIAG_printf(                               /*IS10182*/
       ESA_COMP_APITERM,3,"apiinit_handle is NULL");
   }
   else
   {
     /******************** IS10076 start  **********************/
     /*
      *  Free CFields blocks
      */
    /*IS10182admin_params->cs_func.DIAG_printf_ptr(ESA_COMP_APITERM,3,*/
     ESA_DIAG_printf(ESA_COMP_APITERM,3,                   /*IS10182*/
               "Free CField blocks:  User=%8X  Group=%8X",
               params_ptr->p_user_CFields,params_ptr->p_group_CFields);

     RACF_Free_CField_Blocks(ESA_COMP_APITERM,
                             params_ptr->p_user_CFields, admin_params);
     RACF_Free_CField_Blocks(ESA_COMP_APITERM,
                             params_ptr->p_group_CFields, admin_params);

     /*
      *  Free Dynamic KDTs.
      */
     /*admin_params->cs_func.DIAG_printf_ptr(ESA_COMP_APITERM,3,*/
     ESA_DIAG_printf(ESA_COMP_APITERM,3,          /*IS10182*/
               "Free Dynamic KDTs:  iu=%8X / %d   uu=%8X / %d",
               params_ptr->iu_kdt.p_kdt, params_ptr->iu_kdt.dynalloc,
               params_ptr->uu_kdt.p_kdt, params_ptr->uu_kdt.dynalloc);

     RACF_Free_Dynamic_KDT(ESA_COMP_APITERM,
                           &params_ptr->iu_kdt, admin_params);
     RACF_Free_Dynamic_KDT(ESA_COMP_APITERM,
                           &params_ptr->uu_kdt, admin_params);

     /*admin_params->cs_func.DIAG_printf_ptr(ESA_COMP_APITERM,3,*/
     ESA_DIAG_printf(ESA_COMP_APITERM,3,          /*IS10182*/
               "Free Dynamic KDTs:  ig=%8X / %d   ug=%8X / %d",
               params_ptr->ig_kdt.p_kdt, params_ptr->ig_kdt.dynalloc,
               params_ptr->ug_kdt.p_kdt, params_ptr->ug_kdt.dynalloc);

     RACF_Free_Dynamic_KDT(ESA_COMP_APITERM,
                           &params_ptr->ig_kdt, admin_params);
     RACF_Free_Dynamic_KDT(ESA_COMP_APITERM,
                           &params_ptr->ug_kdt, admin_params);

     /******************** IS10076 end    **********************/

     /******************** IS10100 start  **********************/

     /*
      *  Free CTSACF blocks
      */
     RACF_Free_CTSACF_Block(ESA_COMP_APITERM,
                            params_ptr->p_u_ctsacfs, admin_params);
     RACF_Free_CTSACF_Block(ESA_COMP_APITERM,
                            params_ptr->p_g_ctsacfs, admin_params);

     /******************** IS10100 end    **********************/

     /* IS10174 - start */
     /*
      *  Terminate all administrators and free the Administrators
      *  list
      */
     if (params_ptr->common_params NE NULL)
     {
       comm_parms = params_ptr->common_params;
       /* IS10184 - the code bellow was moved to Common_params_handle
                    to be executed each time comon_params is freed
                    either by CC or by SPI.
       /@IS10182 admin_params->cs_func.DIAG_printf_ptr(@/
       ESA_DIAG_printf(                          /@IS10182@/
                    ESA_COMP_APITERM, 3,
                    "AdminsLIst_Handle(TERMF): area = %8X -> %8X",
                    &comm_parms->RSS_Admins_list,
                    comm_parms->RSS_Admins_list);

       if (comm_parms->RSS_Admins_list NE NULL)
       {
         rc = CTSCRSS_AdminsList_Handle ("TERMF",
             (RSS_ADMINS_LIST_rec_typ **)&comm_parms->RSS_Admins_list,
             ESA_COMP_APITERM, admin_params);

         /@IS10182 admin_params->cs_func.DIAG_printf_ptr(@/
         ESA_DIAG_printf(                            /@IS10182@/
                      ESA_COMP_APITERM, 3,
                      "AdminsLIst_Handle(TERMF): rc = %d", rc);
       }
          end of moved code - IS10184 */

       /*
        *  Free the Common_params block.
        */
       /* free common usaapi parameters area                   WS10054 */
       /*  See comments related to this fix in CTSCSRV.
       free_common_parms_area(admin_params,
                             (DUMMY_PARAMS_rec_typ *) params_ptr); */
       /*IS10182 admin_params->cs_func.DIAG_printf_ptr(*/
       ESA_DIAG_printf(                             /*IS10182*/
                      ESA_COMP_APITERM,3,
                     "Common_params address=<%x> - free area.",
                     params_ptr->common_params);
       /* IS10184
       rc = Common_params_Handle ("TERM", &params_ptr->common_params,
                                 admin_params); */
       rc = Common_params_Handle ("TERM",
                                  COMMON_PARAMS_OWNER_SPI, /* IS10184 */
                                  &params_ptr->common_params,
                                  admin_params);
       /*IS10182admin_params->cs_func.DIAG_printf_ptr(*/
       ESA_DIAG_printf(                          /*IS10182*/
                      ESA_COMP_APITERM,3,
                     "Common_params_Handle(TERM) - rc = %d", rc);
     }
     /* IS10174 - end   */


     /* If the rc from  Common_params_Handle is ESA_NOT_SUPP IS10184 */
     /* it means that common_params is not ours and we did   IS10184 */
     /* free it, so we willnot free the params block.        IS10184 */
     /* The comon_params and the params block will be freed  IS10184 */
     /* by the owner of the common_params.                   IS10184 */
     if (rc NE ESA_NOT_SUPP)                              /* IS10184 */
     {                                                    /* IS10184 */
       /*IS10182 admin_params->cs_func.DIAG_printf_ptr(*/
       ESA_DIAG_printf(                              /*IS10182*/
                ESA_COMP_APITERM,3,
                "apiinit_handle address=<%x>, free area.",params_ptr);
       free(params_ptr);
       admin_params->apiinit_handle = NULL;
     };                                                   /* IS10184 */

   }

   admin_params->cs_func.DIAG_exit_ptr(
      ESA_COMP_APITERM, 1, func,ESA_OK);
   /******************** IS10002  ends **************************/

  return ESA_OK;

 }
