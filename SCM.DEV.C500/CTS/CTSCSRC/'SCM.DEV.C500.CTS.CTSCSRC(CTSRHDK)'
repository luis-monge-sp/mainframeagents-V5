/**************************************************************
*                                                             *
* Title            : RACF Handle Dynamic KDTs.                *
*                                                             *
* File Name        : ctsrhdk.c                                *
*                                                             *
* Author           : Nurit Yahalom                            *
*                                                             *
* Creation Date    : 10/01/13                                 *
*                                                             *
* Description      : Handle dynamic KDTs.                     *
*                                                             *
* Assumptions and                                             *
*   Considerations :                                          *
*                                                             *
**************************************************************/

/**************************************************************
* Mod.Id   Who      When     Description                      *
* -------- -------- -------  -------------------------------- *
* IS10076  NuritY   10/01/13 Initial verison.                 *
* IS10100  NuritY   28/10/13 Compile because of changes in    *
*                            CTSRKDT include member.          *
* IS10116  NuritY   10/03/04 Compile because of changes in    *
*                            CTSRKDT include member.          *
* SAS2IBMN NuritY   05/02/17 SAS/C to IBM C Conversion Project*
* BS10071  NuritY   16/10/17 Set kdt_type=KDT_KEYG to all     *
*                            custom fields to prevent quotes  *
*                            from being duplicated.           *
*                            Same as BS10069 for v3.3         *
* WS10068  NuritY   07/01/18 Change DFLTGRP in the same ALU   *
*                            command with OWNER parameter and *
*                            handle connection owner - KDT is *
*                            changed - compile only.          *
* WS10070  KailasP  16/04/18 Compile only due to change in    *
*                            CTSRKDT header file              *
* IS10182  AvnerL   17/07/19  S0C4/S0C1 due 2 DIAG vsprintf   *
* WS10087  AvnerL   15/01/24 Recompile with ctsrkdt.h         *
**************************************************************/
#include   <globs.h>

/*
 *   Standard include files
 */

#include   STDIO
#include   STDLIB
#include   STRING

/*
 *   CONTROL-SA include files
 */

#include ESA_DIAG
#include ESA_CTSAMSG
#include ESA_API_CODES

#include MVS_COMP

#include RACF
#include RACF_RES
#include RACF_CODES
#include <ctsrkdt.h>


static ESA_RC Create_KDT_with_CFields(ESA_DIAG_COMP_typ    comp,
                           RACF_DYNKDT_REQ_typ          *dynkdt_req,
                           RACF_CUSTOM_FIELDS_block_ptr   cf,
                           RACF_DYNAMIC_KDT_info_typ     *kdt_info,
                           ADMIN_PARAMS_rec_typ          *admin_params);

/***************************************************************
*                                                              *
* PROCEDURE NAME : RACF_Init_Dynamic_KDTs                      *
*                                                              *
* DESCRIPTION    : Init dynamic KDTs for the requested types.  *
*                                                              *
* INPUT            types        - array containing required    *
*                                 types.                       *
*                : num_types    - number of type entries.      *
*                  params_ptr   - -> apiinit handle.           *
*                  admin_params                                *
*                                                              *
* OUTPUT         : kdts        - array where pointers to the   *
*                                created KDTs are returned.    *
*                                the order of the pointers is  *
*                                the order of the types.       *
*                                                              *
* RETURN VALUE   : ESA_OK    - ok.                             *
*                : ESA_FATAL - Fatal error.                    *
*                                                              *
***************************************************************/

ESA_RC RACF_Init_Dynamic_KDTs(ESA_DIAG_COMP_typ           comp,
                              RACF_DYNKDT_typ             types[1],
                              int                         num_types,
                              RACF_PARAMS_rec_typ        *params_ptr,
                              RACF_DYNAMIC_KDT_info_typ   kdts_info[1],
                              ADMIN_PARAMS_rec_typ       *admin_params)
{

  char          func[] = "RACF_Init_Dynamic_KDTs";
  ESA_RC        rc = ESA_OK ;

  CTSAMSG_HANDLE_rec_typ     * msgs;
  CTSAMSG_DEST_TABLE_rec_typ * dest;

  int        i;
  RACF_CUSTOM_FIELDS_block_ptr    cf_blk;
  RACF_DYNAMIC_KDT_info_typ       kdt_info = { NULL, FALSE };

  /*
   *  Initialization
   */
  admin_params->cs_func.DIAG_enter_ptr(comp, 1, func);

  msgs = admin_params->ctsamsg_handle;
  dest = admin_params->ctsamsg_dest;

  if (num_types LT 1)
    goto exit;

  /*
   *  Initialize KDT info area
   */
  for (i=0; i LT num_types; i++)
  {
    kdts_info[i]  = kdt_info;
  }

  /*
   *  Create KDTs for all types
   */
  for (i=0; i LT num_types; i++)
  {

    /*IS10182 admin_params->cs_func.DIAG_printf_ptr(comp, 5,*/
    ESA_DIAG_printf(comp, 5,                     /*IS10182*/
                     "(%d) type = %d",
                     i, (int)types[i], RACF_dynkdt_req_num);

    cf_blk = NULL;

    switch (types[i])
    {
      case RACF_INSERT_USER:
        /*IS10182 admin_params->cs_func.DIAG_printf_ptr(comp, 5,*/
        ESA_DIAG_printf(comp, 5,                     /*IS10182*/
                              "(%d) - type: Insert User", i);
        cf_blk = params_ptr->p_user_CFields;
        break;
      case RACF_UPDATE_USER:
        /*IS10182 admin_params->cs_func.DIAG_printf_ptr(comp, 5,*/
        ESA_DIAG_printf(comp, 5,                     /*IS10182*/
                              "(%d) - type: Update User", i);
        cf_blk = params_ptr->p_user_CFields;
        break;
      case RACF_INSERT_GROUP:
        /*IS10182 admin_params->cs_func.DIAG_printf_ptr(comp, 5,*/
        ESA_DIAG_printf(comp, 5,                        /*IS10182*/
                              "(%d) - type: Insert Group", i);
        cf_blk = params_ptr->p_group_CFields;
        break;
      case RACF_UPDATE_GROUP:
        /*IS10182 admin_params->cs_func.DIAG_printf_ptr(comp, 5,*/
        ESA_DIAG_printf(comp, 5,                   /*IS10182*/
                              "(%d) - type: Update Group", i);
        cf_blk = params_ptr->p_group_CFields;
        break;
      default:
        /*IS10182 admin_params->cs_func.DIAG_printf_ptr(comp, 5,*/
        ESA_DIAG_printf(comp, 5,                    /*IS10182*/
                     "(%d) - type %d incorrect (max = %d)",
                     i, (int)types[i], RACF_dynkdt_req_num);
        rc = ESA_FATAL;
        break;
    }

    if (rc NE ESA_OK)
      break;

    rc = Create_KDT_with_CFields(comp, &RACF_dynkdt_req[types[i]-1],
                                 cf_blk, &kdt_info, admin_params);
    if (rc NE ESA_OK)
      break;

    /*IS10182 admin_params->cs_func.DIAG_printf_ptr(comp, 5,*/
    ESA_DIAG_printf(comp, 5,                      /*IS10182*/
                       "(%d) - KDT = %8X, %s",
                       i, kdt_info.p_kdt,
                       kdt_info.dynalloc ? "TRUE" : "FALSE" );

    kdts_info[i] = kdt_info;           /* return kdt info to caller   */

  }

  /*
   *  Cleanup after failure
   */
  if (rc NE ESA_OK)
  {
    for (i=0; i LT num_types; i++)
    {
      RACF_Free_Dynamic_KDT(ESA_COMP_APIINIT, &kdts_info[i],
                            admin_params);

      kdts_info->p_kdt = NULL;
      kdts_info->dynalloc = FALSE;
    }
  }

  /*
   *  Go out
   */
 exit:

  admin_params->cs_func.DIAG_exit_ptr(comp, 1, func, rc);

  return rc;
}

/***************************************************************
*                                                              *
* PROCEDURE NAME : Create_KDT_with_CFeilds                     *
*                                                              *
* DESCRIPTION    : Create a dynamic KDT using the static KDT   *
*                  and Custom Fields, if exist.                *
*                                                              *
* INPUT          : type        - KDT type.                     *
*                  cf          - -> Custom Fields block / NULL *
*                  admin_params                                *
*                                                              *
* OUTPUT         : kdt_info    - KDT address and dynalloc      *
*                                indication.                   *
*                                                              *
* RETURN VALUE   : ESA_OK    - ok.                             *
*                : ESA_FATAL - Fatal error.                    *
*                                                              *
***************************************************************/

static ESA_RC Create_KDT_with_CFields(ESA_DIAG_COMP_typ    comp,
                           RACF_DYNKDT_REQ_typ           *dynkdt_req,
                           RACF_CUSTOM_FIELDS_block_ptr   cf,
                           RACF_DYNAMIC_KDT_info_typ     *kdt_info,
                           ADMIN_PARAMS_rec_typ          *admin_params)
{

  static char    NULL_txt[] = "";
  static char    Lparenthesis_txt[] = "(";
  static char    Rparenthesis_txt[] = ")";

  char          func[] = "RACF_Create_KDT_with_CFields";
  ESA_RC        rc = ESA_OK ;

  CTSAMSG_HANDLE_rec_typ     * msgs;
  CTSAMSG_DEST_TABLE_rec_typ * dest;

  RACF_CUSTOM_FIELDS_block_ptr  curr_cf;
  RACF_CUSTOM_FIELD_rec_typ    *cf_entry;

  int                      ent_num;
  int                      i;
  char                    *fldname;
  ADDINFO_KDTE_rec_typ     last_ent = {"", KDT_FLG, "", "", "" } ;
  ADDINFO_KDTE_rec_typ    *dyn_kdt;
  ADDINFO_KDTE_rec_typ    *kdt_entry;

  /*
   *  Initialization
   */
  admin_params->cs_func.DIAG_enter_ptr(comp, 1, func);

  msgs = admin_params->ctsamsg_handle;
  dest = admin_params->ctsamsg_dest;

  /*
   *  When no Custom Fields - use static KDT.
   */
  if ( cf EQ NULL  OR
      (cf NE NULL  AND  cf->used_fields_count EQ 0) )
  {
    /*IS10182 admin_params->cs_func.DIAG_printf_ptr(comp, 5,*/
    ESA_DIAG_printf(comp, 5,                            /*IS10182*/
                     "Static KDT is used.   kdt = %8X",
                     dynkdt_req->stat_kdt);

    kdt_info->p_kdt = dynkdt_req->stat_kdt;
    kdt_info->dynalloc = FALSE;
    goto exit;
  }

  /*
   *  When Custom Fields block received - create a dynamic KDT
   */

  /*  Calculate the number of entries by adding the number of      */
  /*  entries in the static KDT and te nmmber of used entries      */
  /*  in the chained Custom Field blocks.                          */
  /*IS10182 admin_params->cs_func.DIAG_printf_ptr(comp, 5,*/
  ESA_DIAG_printf(comp, 5,                         /*IS10182*/
                     "Static KDT entry count = %d",
                     dynkdt_req->stat_kdt_entnum);

  ent_num = dynkdt_req->stat_kdt_entnum;
  curr_cf = cf;

  do
  {
    ent_num += curr_cf->used_fields_count;
    curr_cf = curr_cf->next_block ;
  } while (curr_cf NE NULL);

  ent_num++;                /* Add 1 for last entry.  */
  if (dynkdt_req->negative)
    ent_num++;              /* Add 1 for NO_PKB.      */

  /*  Allocate the dynamic KDT                                     */
  dyn_kdt = (ADDINFO_KDTE_rec_typ *)malloc(ent_num *
                                     sizeof(ADDINFO_KDTE_rec_typ) );
  /*IS10182 admin_params->cs_func.DIAG_printf_ptr(ESA_COMP_APIINIT, 3,*/
  ESA_DIAG_printf(ESA_COMP_APIINIT, 3,                    /*IS10182*/
                      "Dynamic KDT: address = %8X   ent_num = %d",
                      dyn_kdt, ent_num);

  if (dyn_kdt EQ NULL)
  {
    /* SAS2IBMN admin_params->cs_func.MSG_printf_ptr(ERR_MALLOC, */
    CTSAMSG_print(ERR_MALLOC, msgs, NULL, dest,         /* SAS2IBMN */
                 "DYNAMIC KDT",
                 RACF_CFIELD_OUTPUT_BUF_LEN );
    rc = ESA_FATAL;
    goto exit ;
  }

  /*  Copy the static KDT to the dynamic.                          */
  /*IS10182 admin_params->cs_func.DIAG_printf_ptr(comp, 5,*/
  ESA_DIAG_printf(comp, 5,                              /*IS10182*/
           "memcpy len = %d",
           dynkdt_req->stat_kdt_entnum * sizeof(ADDINFO_KDTE_rec_typ));

  memcpy( dyn_kdt, dynkdt_req->stat_kdt,
          dynkdt_req->stat_kdt_entnum * sizeof(ADDINFO_KDTE_rec_typ) );

  kdt_entry = dyn_kdt + dynkdt_req->stat_kdt_entnum; /* -> free entry */
  /*IS10182 admin_params->cs_func.DIAG_printf_ptr(comp, 5,*/
  ESA_DIAG_printf(comp, 5,                          /*IS10182*/
                     "kdt_entry = %8X", kdt_entry);

  /*  Create KDT entries for Custom Fields.                        */
  /*  We assume the field names contain CSDATA.name.               */
  curr_cf = cf;

  do
  {
    cf_entry = curr_cf->fields;

    for (i=0; i LT curr_cf->used_fields_count; i++)
    {
      strcpy(kdt_entry->kwd, cf_entry->name);

      if (strcmp(cf_entry->name, "NOCSDATA") EQ 0)
      {
        if (dynkdt_req->negative)
          kdt_entry->type = KDT_FLG;
        else
          kdt_entry->type = KDT_IGN;

        strcpy(kdt_entry->neg_kwd, "");
        kdt_entry->txtl = NULL_txt;
        kdt_entry->txtr = NULL_txt;

        if (dynkdt_req->negative)
        {
          /*IS10182 admin_params->cs_func.DIAG_printf_ptr(comp, 5,*/
          ESA_DIAG_printf(comp, 5,                        /*IS10182*/
                    "entry = (%8X) %s, %s, %d, %s, %s",
                    kdt_entry, kdt_entry->kwd, kdt_entry->neg_kwd,
                    kdt_entry->type, kdt_entry->txtl, kdt_entry->txtr);

          kdt_entry++;

          strcpy(kdt_entry->kwd, "CSDATA.NO_PKB");
          kdt_entry->type = KDT_FLG;
          strcpy(kdt_entry->neg_kwd, "");
          kdt_entry->txtl = NULL_txt;
          kdt_entry->txtr = NULL_txt;
        }
      }
      else
      {
        if (dynkdt_req->negative)
        {
          fldname = strchr(cf_entry->name, '.');
          if (fldname NE NULL)
          {
            fldname++;
            strncpy( kdt_entry->neg_kwd, cf_entry->name,
                    (fldname - cf_entry->name) );
            kdt_entry->neg_kwd[fldname - cf_entry->name] = NULL_CHAR;
          }
          else
            fldname = cf_entry->name;

          strcat(kdt_entry->neg_kwd, "NO");
          strcat(kdt_entry->neg_kwd, fldname);
        }
        else
          strcpy(kdt_entry->neg_kwd, "");

        /* BS10071 kdt_entry->type = KDT_KEY;                       */
        kdt_entry->type = KDT_KEYG;                      /* BS10071 */
        kdt_entry->txtl = Lparenthesis_txt;
        kdt_entry->txtr = Rparenthesis_txt;
      }

      /*IS10182 admin_params->cs_func.DIAG_printf_ptr(comp, 5,*/
      ESA_DIAG_printf(comp, 5,                       /*IS10182*/
                    "entry = (%8X) %s, %s, %d, %s, %s",
                    kdt_entry, kdt_entry->kwd, kdt_entry->neg_kwd,
                    kdt_entry->type, kdt_entry->txtl, kdt_entry->txtr);

      cf_entry++;
      kdt_entry++;
    }

    curr_cf = curr_cf->next_block;

  } while (curr_cf NE NULL);

  /*  Create last entry                                            */
  memcpy(kdt_entry, &last_ent, sizeof(ADDINFO_KDTE_rec_typ));

  /*  Return KDT information to the caller.                        */
  kdt_info->p_kdt = dyn_kdt;
  kdt_info->dynalloc = TRUE;

  /*
   *  Go out
   */
 exit:
  admin_params->cs_func.DIAG_exit_ptr(comp, 1, func, rc);

  return rc;
}

/***************************************************************
*                                                              *
* PROCEDURE NAME : RACF_Free_Dynamic_KDT                       *
*                                                              *
* DESCRIPTION    : Free a dynamic KDT.                         *
*                                                              *
* INPUT          : kdt_info    - KDT address and dynalloc      *
*                                indication.                   *
*                  admin_params                                *
*                                                              *
* OUTPUT         : kdt_info    - KDT address and dynalloc      *
*                                indication.                   *
*                                                              *
* RETURN VALUE   : ESA_OK    - ok.                             *
*                : ESA_FATAL - Fatal error.                    *
*                                                              *
***************************************************************/

void   RACF_Free_Dynamic_KDT(ESA_DIAG_COMP_typ    comp,
                           RACF_DYNAMIC_KDT_info_typ     *kdt_info,
                           ADMIN_PARAMS_rec_typ          *admin_params)
{

  char          func[] = "RACF_Free_Dynamic_KDT";

  CTSAMSG_HANDLE_rec_typ     * msgs;
  CTSAMSG_DEST_TABLE_rec_typ * dest;

  /*
   *  Initialization
   */
  admin_params->cs_func.DIAG_enter_ptr(comp, 1, func);

  msgs = admin_params->ctsamsg_handle;
  dest = admin_params->ctsamsg_dest;

  /*
   *  Free the KDT, if not static
   */

  if (kdt_info->p_kdt NE NULL  AND
      kdt_info->dynalloc)
  {
   /*IS10182 admin_params->cs_func.DIAG_printf_ptr(ESA_COMP_APITERM,5,*/
    ESA_DIAG_printf(ESA_COMP_APITERM,5,                    /*IS10182*/
               "Free Dynamic KDT at %8X", kdt_info->p_kdt);
    free(kdt_info->p_kdt);
  }

  /*
   *  Go out
   */
  admin_params->cs_func.DIAG_exit_ptr(comp, 1, func, ESA_RC_VOID);

}
