 /**************************************************************
 *                                                             *
 * Title            : Set RSS parameters (ACF2)                *
 *                                                             *
 * File Name        : ctsbupr.c                                *
 *                                                             *
 * Author           : Yishay Yovel                             *
 *                                                             *
 * Creation Date    : 20/07/97                                 *
 *                                                             *
 * Description      :                                          *
 *                                                             *
 * Assumptions and                                             *
 *   Considerations :                                          *
 *                                                             *
 * - ACF2 RSS parameters are mapped to several GSO records of  *
 *   various types. Each type may have more then one GSO record*
 *   distinguished by ACF2-SYSID mask/value.                   *
 *                                                             *
 *   When Get RSS Parameter is activated, it determines the    *
 *   Current GSO record and returns its SYSID. An update       *
 *   requires that the retrieved record's SYSID will be passed *
 *   for update.                                               *
 **************************************************************/

 /**************************************************************
 * Mod.Id   Who      When     Description                      *
 * -------- -------- -------  -------------------------------- *
 * WS2565   Eli M.Y. 5/12/06  Mixedcase password and new       *
 *                            keywords for ACF2 V3202. Only for*
 *                            Compilation with CTS.CMAC CTSBACF*
 * WS10006  AvnerL 06/08/2007 Recompile for PSWXHST@ support.  *
 * IS10174  NuritY 15/01/2018 Dynamic EXECOUT support.         *
 * WS10082  MauriC   07/11/22 Recompile for new ADDINFO macros *
 **************************************************************/

 #include   <globs.h>

/*
 *   Standard include files
 */

 #include   STDLIB
 #include   STDIO
 #include   STRING

/*
 *   ESA include files
 */

 #include ESA_DIAG
 #include ESA_API
 #include ESA_CTSAMSG
 #include ESA_API_CODES

/*
 *   ESA include files
 */

 #include API_ADDINFO
 #include API_AUTH

 #include MVS_COMP
 #include ACF2_CODES

/*
 *   Generate RSS parameters processing-oriented definitions
 */
 #define ACF2_GLOBAL_PARAMETERS_DEFINITIONS

 #include ACF2

 static char  component[] = "CTSBUPR";

/******************************************************************
 * Procedure Name : CTSSetRSSParameters
 ******************************************************************
 * Description    : Set ACF2 RSS parameters
 * Input          : rss_params, addinfo, admin, err
 * Return Value   : ESA_RC
 * Side Effects   :
 *                :
 * Comments       : We hold several ACF2 GSO records in the rss
 *                : parametrs entity. Each RSS field is prefixed
 *                : with the record name it belongs to.
 *                :
 *                : Processing is done looping thru all supported
 *                : GSO records and extracting its fields.
 ******************************************************************/


 ESA_RC CTSSetRSSParams (RSS_PARAMS_rec_typ   * rss_params,
                         ADDINFO_rec_typ      * addinfo,
                         ADMIN_PARAMS_rec_typ * admin_params,
                         ERR_STRUCT_rec_typ   * err)
 {

  /*
   *   Variables
   */

   ESA_RC                       rc = ESA_OK;
   CTSAMSG_HANDLE_rec_typ     * msgs;
   CTSAMSG_DEST_TABLE_rec_typ * dest;
   ADDINFO_rec_ptr              laddinfo = NULL;
   ADDINFO_rec_ptr              laddinfo1= NULL;
   char                         cmd[MAX_API_ST];
   char                         temp[256] = "";
   char                         prefix[256] = "";
   ONE_FIELD_rec_ptr            pair;
   char                         sysid[ACF2_SYSID_SIZE]="";
   int                          i;

   static char func[]="CTSSetRSSParams";

   ESA_DIAG_enter(ESA_COMP_STRSPRM, DEBUG_SHOW_IMPORTANT, func);

   msgs = admin_params->ctsamsg_handle;
   dest = admin_params->ctsamsg_dest;

  /*
   *   Check that Reserved Keywords were not used
   */

   if (ADDINFO_rkt_check(func, 1, &addinfo, rkt,
                         dest, msgs ) NE ESA_OK)
     {
      rc = ESA_FATAL;
      goto exit;
     };

  /*
   *   Obtain a local addinfo buffer
   */

  if (ADDINFO_alloc(func, ACF2_ADDINFO,&laddinfo, dest, msgs) NE ESA_OK)
   {
     rc = ESA_FATAL;
     goto exit;
   };

  if (ADDINFO_alloc(func, ACF2_ADDINFO,&laddinfo1,dest, msgs) NE ESA_OK)
   {
     rc = ESA_FATAL;
     goto exit;
   };

   ADDINFO_copy(laddinfo1, addinfo);

  /*
   *  Structure fields handling
   */

     /*
      *  Max Expire Not Supported
      */
   if ( rss_params->max_expire NE IGNORE_NUMBER )
    {
      CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest,
                    component,func,"max_expire not supported",
                    16, __LINE__);
      rc = ESA_FATAL;
      goto exit;
    };

     /*
      *  Minimum Password Length
      */
   if ( rss_params->min_pass_len NE IGNORE_NUMBER )
    {
       if (rss_params->min_pass_len NE EMPTY_NUMBER)
          sprintf(temp, "%d", rss_params->min_pass_len);
       else
          strcpy(temp, "0");
       ADDINFO_insert(TYPE_1A, "PSWD.MINPSWD",
                      temp, laddinfo1,
                      ACF_ADDINFO_KWD_LEN, ACF_ADDINFO_VAL_LEN,
                      UNIQUE);
    };

     /*
      *  Maximum Login Attempts
      */
   if ( rss_params->max_logins NE IGNORE_NUMBER )
    {
       if (rss_params->max_logins NE EMPTY_NUMBER)
          sprintf(temp, "%d", rss_params->max_logins);
       else
          strcpy(temp, "0");
       ADDINFO_insert(TYPE_1A, "PSWD.PASSLMT",
                      temp, laddinfo1,
                      ACF_ADDINFO_KWD_LEN, ACF_ADDINFO_VAL_LEN,
                      UNIQUE);
    };

   /*
    *  Combine all changes to each GSO Record and generate
    *  CHANGE Commands
    */

   for(i=0; gso_kdts[i].gso_name[0] NE NULL_CHAR;i++)
    {
     strcpy(prefix,gso_kdts[i].gso_name);
     strcat(prefix,".");

     ADDINFO_delete(laddinfo1,
                    gso_kdts[i].gso_name);

    /*
     *  Copy all fields relevant to the current GSO record checked,
     *  to secondary addinfo
     */
     ADDINFO_empty(laddinfo);
     ADDINFO_copy_by_prefix(prefix,
             ACF_ADDINFO_KWD_LEN,
             ACF_ADDINFO_VAL_LEN,
             TRUE,
             laddinfo1,
             laddinfo);

    /*
     *  If no field was changed for current GSO record checked,
     *  skip to next GSO record
     */
     if (laddinfo->num_pairs EQ 0)
       continue;

    /*
     *  Check that SYSID was passed for the current GSO reccord
     */
     pair = ADDINFO_search("SYSID", ACF_ADDINFO_KWD_LEN,
                        laddinfo->pair,
                        laddinfo->num_pairs);
     if (pair EQ NULL)
      {
        CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest,
                    component,func,"Mandatory keyword SYSID missing",
                    16,__LINE__);
        rc = ESA_FATAL;
        goto exit;
      }
     else
      {
        strcpy(sysid,pair->value);
        ADDINFO_delete(laddinfo,"SYSID");
      };

    /*
     *  Generate Change Command Header including REP
     *  (to support multi-value fields) and SYSID
     */
     sprintf(cmd,"ACF2 GSO CHANGE %*.*s SYSID(%s) REP ",
                 strlen(prefix)-1,
                 strlen(prefix)-1,
                 prefix, sysid);

     ESA_DIAG_printf(ESA_COMP_STRSPRM, 1,
                     "Command header prepared (%s)", cmd);

    /*
     *  Generate and Execute Change command, Dont issue command if
     *  no field present at ADDINFO
     */

     rc = ACF2cmd(func, EXECOUT_DDNAME, admin_params->admin_uname,
                  cmd, MAX_OK_RC_0,
                  1, &laddinfo, mkt, gso_kdts[i].gso_kdt,
                  admin_params,                          /* IS10174 */
                  CMDOUT_YES, ACF2_YES);
     /* IS10174   1, &laddinfo, mkt, gso_kdts[i].gso_kdt, dest, msgs, */

    /*
     *  If Command Failed, Dont continue with other records
     */
     if (rc NE ESA_OK)
      {
        rc = ESA_FATAL;
        goto exit;
      };

   };

  /*
   *   Finish
   */

   exit:;

  /*
   *   Release Local ADDINFO Objects
   */
   if (laddinfo NE NULL)
    ADDINFO_free(&laddinfo);
   if (laddinfo1 NE NULL)
    ADDINFO_free(&laddinfo1);

   ESA_DIAG_exit(ESA_COMP_STRSPRM, DEBUG_SHOW_IMPORTANT, func, rc);

   return rc;

}
