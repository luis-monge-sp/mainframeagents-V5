 /**************************************************************
 *                                                             *
 * Title            : Update a user group (RACF)               *
 *                                                             *
 * File Name        : ctsruug.c                                *
 *                                                             *
 * Author           : Doron Cohen                              *
 *                                                             *
 * Creation Date    : 31/03/94                                 *
 *                                                             *
 * Description      :                                          *
 *                                                             *
 * Assumptions and                                             *
 *   Considerations :                                          *
 *                                                             *
 **************************************************************/

 /**************************************************************
 * Mod.Id   Who      When     Description                      *
 * -------- -------- -------  -------------------------------- *
 *                   dd/mm/yy                                  *
 *                                                             *
 * as1506   A.Shv    15/06/95 call to new racf check program   *
 * ps0163   Alex     20/07/97 RACF security server support     *
 * ps0391   AlexS    11/11/99 RACF 2.8 support                 *
 * is0328   yonatan  01/12/05 update parent group              *
 * WS10024  AvnerL   29/07/09 Support AUTOGID for OMVS.        *
 * WS10025  BarakH   04/10/09 Support SHARED  for OMVS.        *
 * IS10076  NuritY   31/01/13 Support Custom Fields.           *
 * IS10100A NuritY   14/10/13 Support RACF command limitations.*
 * IS10174  NuritY   31/12/17 Dynamic EXECOUT support.         *
 * WS10082  MauriC   07/11/22 Changes for new ADDINFO macros   *
 **************************************************************/
 #include   <globs.h>

 /*
  *   Standard include files
  */

 #include   STDLIB
 #include   STDIO
 #include   STRING

 /*
  *   CONTROL-SA include files
  */

 #include ESA_DIAG
 #include ESA_API
 #include ESA_API_CODES         /* ps0391 */
 #include MVS_OS_CLI
 #include MVS_CODES                                     /* IS10076 */

 #include API_ADDINFO
 #include RACF_CODES            /* ps0391 */
 #include RACF

 static char component[] = "CTSRUUG";    /* ps0391 */

 /*
  *     RKT for updug
  *         (Reserved Keywords Table)
  */

 static ADDINFO_RKTE_rec_typ rkt[] = {
    "SUPGROUP",
    "ADDROLES", "DELROLES",               /* ps0391 */
    ""         /* a null string indicate end-of-rkt */
  };

 /*
  *     MKT for ADDGRP
  *         (Mandatory Keywords Table)
  */

 static ADDINFO_MKTE_rec_typ mkt[] = {
        "" };      /* a null string indicate end-of-mkt */

 /*
  *     KDT for ADDGRP  COMMAND
  *         (Keyword Decscription Table)
  */

/*  IS10076 - the static KDT is not used any more.
 *            A dynamic KDT created at API INIT time is used instead
 static ADDINFO_KDTE_rec_typ kdt[] =      {

   *                                                            *
   * keyword             type   negative       value delimiters *
   *                             value                          *
   * =================== ====== ============== ================ *

   {"DATA"               ,KDT_KEY ,"NODATA"        ,"('", "') "},
   {"OWNER"              ,KDT_KEY ,"OWNER()"       ,"(" , ") " },
   {"SUPGROUP"           ,KDT_KEY ,"SUPGROUP()"    ,"(" , ") " },
   {"TERMUACC"           ,KDT_FLG ,"NOTERMUACC"    ,""  , " "  },
   {"MODEL"              ,KDT_KEY ,"NOMODEL"       ,"(" , ") " },
   {"NODFP"              ,KDT_FLG ,""              ,""  , " "  },
   {"DFP.NO_PKB"         ,KDT_FLG ,""              ,""  ,   "" },
   {"DFP.DATAAPPL"       ,KDT_KEY ,"DFP.NODATAAPPL","(" , ") " },
   {"DFP.DATACLAS"       ,KDT_KEY ,"DFP.NODATACLAS","(" , ") " },
   {"DFP.MGMTCLAS"       ,KDT_KEY ,"DFP.NOMGMTCLAS","(" , ") " },
   {"DFP.STORCLAS"       ,KDT_KEY ,"DFP.NOSTORCLAS","(" , ") " },
   {"NOOMVS"             ,KDT_FLG ,""              ,""  , " "  },
   {"OMVS.NO_PKB"        ,KDT_FLG ,""              ,""  ,   "" },
   {"OMVS.GID"           ,KDT_KEY ,"OMVS.NOGID"    ,"(" , ") " },
   {"OMVS.AUTOGID"       ,KDT_FLG ,""         ,"(" , ") " }, *WS10024*
   {"OMVS.SHARED"        ,KDT_FLG ,""         ,"(" , ") " }, *WS10025*

    * ps0163 *
   {"NOOVM"              ,KDT_FLG ,""              ,""  , " "  },
   {"OVM.NO_PKB"         ,KDT_FLG ,""              ,""  ,   "" },
   {"OVM.GID"            ,KDT_KEY ,"OVM.NOGID"     ,"(" , ") " },

    * ps0391 *
   {"NOTME"              ,KDT_FLG ,""              ,""  , " "  },
   {"TME.NO_PKB"         ,KDT_FLG ,""              ,""  ,   "" },
   {"TME.ROLES"          ,KDT_IGN ,"TME.NOROLES"   ,"(" , ") " },

   {""                   ,KDT_KEY ,""              ,""  , ""   }  };
 */

 static ADDINFO_KDTE_rec_ptr    kdt = NULL;           /* IS10076  */


/*
 *     PS0391
 *     KDT for ALTGROUP COMMAND per delta keywords
 *         (Keyword Decscription Table)
 */

static ADDINFO_KDTE_rec_typ delta_kdt[] =      {

 /*                                                            */
 /* keyword             type   negative       value delimiters */
 /*                             value                          */
 /* =================== ====== ============== ================ */

  {"TME.ADDROLES"           ,KDT_KEY ,""         ,"(" , ")" },
  {"TME.DELROLES"           ,KDT_KEY ,""         ,"(" , ")" },
  {""                       ,KDT_FLG ,""         ,""  ,""   }};

 /*
  *  PS0391. Delta Keyword Table
  */

 typedef struct {
    char          kwd[RCF_ADDINFO_KWD_LEN+1];
    char          addkwd[RCF_ADDINFO_KWD_LEN+1];
    char          delkwd[RCF_ADDINFO_KWD_LEN+1];
    int           kwd_found; /* BSAR1007 */
    ADDINFO_typ   add_typ;
    /*WS10082A char oldval[RCF_ADDINFO_VAL_LEN+1];
    char          newval[RCF_ADDINFO_VAL_LEN+1];
    char          addval[RCF_ADDINFO_VAL_LEN+1];
    char          delval[RCF_ADDINFO_VAL_LEN+1];                    */
    char          oldval[ADDINFO_16K_VAL_LEN+1];          /*WS10082A*/
    char          newval[ADDINFO_16K_VAL_LEN+1];          /*WS10082A*/
    char          addval[ADDINFO_16K_VAL_LEN+1];          /*WS10082A*/
    char          delval[ADDINFO_16K_VAL_LEN+1];          /*WS10082A*/
  } DELTA_DESC_rec_typ;

 /*
  *     Delta keywords description table
  */

 #define DELTA_NUM         1

 static DELTA_DESC_rec_typ delta[DELTA_NUM] = {
   { "TME.ROLES"    ,  "TME.ADDROLES"  ,  "TME.DELROLES"  },
 };

/* ps0391 */
static ESA_RC CTSUpdUG_lists (short                  delta_num,
                              DELTA_DESC_rec_typ   * delta,
                              UG_PARAMS_rec_typ    * ug_params,
                              ADDINFO_rec_typ      * addinfo,
                              ADMIN_PARAMS_rec_typ * admin_params,
                              ERR_STRUCT_rec_typ   * err);

 /**************************************************************
 *                                                             *
 * PROCEDURE NAME : updug                                      *
 *                                                             *
 * DESCRIPTION    : Update a user group                        *
 *                                                             *
 * INPUT          : ug, addinfo, admin                         *
 *                                                             *
 * OUTPUT         : err                                        *
 *                                                             *
 * RETURN VALUE   : ESA_RC                                     *
 *                                                             *
 **************************************************************/

 ESA_RC CTSUpdUG (UG_PARAMS_rec_typ    * ug_params,
                  ADDINFO_rec_typ      * addinfo,
                  ADMIN_PARAMS_rec_typ * admin_params,
                  ERR_STRUCT_rec_typ   * err)
 {

  /*
   *   Variables
   */

   ESA_RC                     rc, chk_rc;
   /* IS10100A char          cmd[MAX_API_ST];             */
   static char                func[]="CTSUpdUG";
   CTSAMSG_HANDLE_rec_ptr     msgs;
   CTSAMSG_DEST_TABLE_rec_ptr dest;
   RACF_PARAMS_rec_typ      * params_ptr = NULL;    /* IS10076  */
   ADDINFO_rec_ptr            laddinfo = NULL;
   /* IS10100A ADDINFO_rec_ptr   addinfo_vec[2] = { NULL, NULL };   */
   ONE_FIELD_rec_ptr          pair;                 /* IS10076 */

  /* is0328 start */
   char  old_supgrp[10];  /* old SUPGROUP of current group */
   char  new_supgrp[10];  /* new SUPGROUP of current group */
   int   supgrp_len = 8;  /* Extract buffer */
  /* is0328 end  */

  /*
   *   Initialize
   */

   ESA_DIAG_enter(ESA_COMP_UPDUG, 1, func);

   msgs = admin_params->ctsamsg_handle;
   dest = admin_params->ctsamsg_dest;
   params_ptr = admin_params->apiinit_handle;             /* IS10076 */

  /* IS10076 - start  */
   if ( ESA_DIAG_get_debug_level(ESA_COMP_ADDUG) GE 1 )
     ADDINFO_dump(addinfo, 1);

  /*
   *   Check that the dynamic KDT exists
   */
   if (params_ptr->ug_kdt.p_kdt NE NULL)
   {
     kdt = params_ptr->ug_kdt.p_kdt;
     ESA_DIAG_printf(ESA_COMP_UPDUSER, 1,
                  "kdt = %.8X", kdt);
   }
   else
   {
     CTSAMSG_print(WARN_INT1, msgs, NULL, dest, component, func,
                   "Update Group: Dynamic KDT was not found",
                   ESA_FATAL,__LINE__);
     rc = ESA_FATAL;
     goto exit;
   }
  /* IS10076 - end    */

  /*
   *   Check that Reserved Keywords were not used
   */

   if (ADDINFO_rkt_check(func,1,&addinfo,rkt, dest,
                         msgs) NE ESA_OK) {
      rc = ESA_FATAL;
      goto exit;
   }


  /*
   *      Check group existance
   */

   ESA_DIAG_printf(ESA_COMP_UPDUG, 1,
                  "Checking group %s existance", ug_params->group);
   chk_rc = RACF_chk_group(ug_params->group,OBJ_EXIST, TRUE,dest,msgs);
   if ( chk_rc NE ESA_OK ) {
      rc = ESA_FATAL;
      goto exit;
   }

   /*  IS10076 - start   */
   /****************************************************************
   *                                                               *
   *   If CSDATA/NOCSDATA are provided but CUSRTOM_FIELDS_SUPPORT  *
   *   is N, issue a message.                                      *
   *                                                               *
   ****************************************************************/
   if (params_ptr->rssparm_CUSTOM_FIELDS_SUPPORT[0] EQ 'N')
   {
     pair = ADDINFO_prefix_search("CSDATA.",
                           RCF_ADDINFO_KWD_LEN,
                           TRUE,
                           addinfo->pair,
                           addinfo->num_pairs );

     if (pair EQ NULL)
       pair = ADDINFO_search("NOCSDATA",
                             RCF_ADDINFO_KWD_LEN,
                             addinfo->pair,
                             addinfo->num_pairs );

     if (pair NE NULL)
       CTSAMSG_print(ERR_NOT_SUPP_DUE_RSSP_NO, msgs, NULL,
                     dest, "CSDATA. and NOCSDATA keywords",
                     "CUSTOM_FIELDS_SUPPORT", "N");
   }
   /*  IS10076 - end     */

   /* is0328 part 1 start */

  /*
   *   Get old SUPGROUP name from RACF
   */
   rc = RACF_extract_field("GROUP ", ug_params->group, "BASE ",
                           "SUPGROUP", old_supgrp, &supgrp_len,
                           dest , msgs );

   old_supgrp[8] = NULL_CHAR;
   if (rc NE ESA_OK )
      ESA_DIAG_printf(ESA_COMP_UPDUG, 10,
         "Failed to get old SUPGROUP of %s",ug_params->group);
   else
      ESA_DIAG_printf(ESA_COMP_UPDUG, 10,
         "Old SUPGROUP of %s is : %s",ug_params->group,old_supgrp);

   /* is0328 part 1 end */

  /*
   *   Allocate a local addinfo
   */

   if (ADDINFO_alloc(func, 5, &laddinfo, dest, msgs) NE ESA_OK) {
      rc = ESA_FATAL;
      goto exit;
   }

   /* IS10100A
   addinfo_vec[0] = laddinfo;
   addinfo_vec[1] = addinfo;          */

  /*
   *   Add SUPGROUP to local addinfo
   */

   ESA_DIAG_printf(ESA_COMP_UPDUG, 1,
                   "Inserting paramters to local addinfo");

   if (  (*ug_params->parent_group NE NULL_CHAR) AND
         (*ug_params->parent_group NE BACKSLASH)     )
      ADDINFO_insert(TYPE_1A, "SUPGROUP", ug_params->parent_group,
                     laddinfo,
                     RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                     UNIQUE);

  /*
   *  Handle special NO_PKB flags for addinfo_concat
   */

   ADDINFO_insert_cond("NODFP"         , KWD_FLAG_ON, addinfo,
                       "DFP.NO_PKB"    , KWD_FLAG_ON,
                       RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                       laddinfo );

   ADDINFO_insert_cond("NOOMVS"        , KWD_FLAG_ON, addinfo,
                       "OMVS.NO_PKB"   , KWD_FLAG_ON,
                       RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                       laddinfo );

   /* ps0163 */
   ADDINFO_insert_cond("NOOVM"         , KWD_FLAG_ON, addinfo,
                       "OVM.NO_PKB"    , KWD_FLAG_ON,
                       RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                       laddinfo );
   /* ps0391 */
   ADDINFO_insert_cond("NOTME"         , KWD_FLAG_ON, addinfo,
                       "TME.NO_PKB"    , KWD_FLAG_ON,
                       RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                       laddinfo );

   /* IS10076 - start */
   if (params_ptr->rssparm_CUSTOM_FIELDS_SUPPORT[0] EQ 'Y')
     ADDINFO_insert_cond("NOCSDATA"       , KWD_FLAG_ON, addinfo,
                         "CSDATA.NO_PKB"     , KWD_FLAG_ON,
                         RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                         laddinfo );
   /* IS10076 - end */
  /*
   *      ALTGRP  command
   */

   /* IS10100A - start */
   /*
   sprintf(cmd,"ALTGROUP %s ",ug_params->group);
   ESA_DIAG_printf(ESA_COMP_UPDUG, 1,
                   "Command header prepared (%s)", cmd);
   rc = racfcmd(func, EXECOUT_DDNAME, admin_params->admin_uname,
                cmd, MAX_OK_RC_0,
                2, addinfo_vec, mkt, kdt, dest, msgs,
                CMDOUT_YES, RACF_YES);                    */

   rc = RACF_do_AddAlt_cmd(ESA_COMP_UPDUG, 'G',
                          ug_params->group, "ALT",
                          addinfo, laddinfo, mkt, kdt,
                          CMDOUT_YES, RACF_YES, MAX_OK_RC_0,
                          admin_params);
   /* IS10100A - end  */
   if (rc NE ESA_OK)                    /* ps0391 */
     goto exit;                         /* ps0391 */

  /*
   * ps0391
   * Handle lists changes TME.ROLES
   */

   rc = CTSUpdUG_lists ( DELTA_NUM, delta, ug_params, addinfo,
                         admin_params, err);
   if (rc NE ESA_OK)
      goto exit;

  /*
   *   Finish
   */

   /******************* is0328 part 2 start *******************/

   /*
    * Updating SUBGROUP field of old SUPGROUP by writing event
    * to the queue.
    */
   if (strcmp(old_supgrp,"") NE 0)
   {
      rc = (admin_params->cs_func.intercept_set_ptr)
                    (INTERCEPT_SPECIFIC,
                     INTERCEPT_GROUP,
                     NULL,
                     NULL,
                     old_supgrp);

      if (rc NE ESA_OK )
          ESA_DIAG_printf(ESA_COMP_UPDUG, 10,
               "Failed to write event for old supgroup %s",old_supgrp);
      else
          ESA_DIAG_printf(ESA_COMP_UPDUG, 10,
               "Write event for old supgroup %s",old_supgrp);
   }

   /* take supgroup from ESS transaction's data */
   strncpy(new_supgrp,ug_params->parent_group,8);
   new_supgrp[8] = NULL_CHAR;

   /*
    * Updating SUBGROUP field of new SUPGROUP by writing event
    * to the queue.
    */
   if (strcmp(new_supgrp,"") NE 0)
   {
       rc = (admin_params->cs_func.intercept_set_ptr)
                    (INTERCEPT_SPECIFIC,
                     INTERCEPT_GROUP,
                     NULL,
                     NULL,
                     new_supgrp);

      if (rc NE ESA_OK )
          ESA_DIAG_printf(ESA_COMP_UPDUG, 10,
               "Failed to write event for new supgroup %s",new_supgrp);
      else
          ESA_DIAG_printf(ESA_COMP_UPDUG, 10,
               "Write event for new supgroup %s",new_supgrp);
   }

   /******************* is0328 part 2 end **********************/

   exit:;

   ADDINFO_free(&laddinfo);


   ESA_DIAG_exit(ESA_COMP_UPDUG, 1, func, rc);

   return rc;

 }

 /* ps0391 */
/**************************************************************
*                                                             *
* PROCEDURE NAME : CTSUpdUG_lists                             *
*                                                             *
* DESCRIPTION    : Update a RACF group                        *
*                                                             *
* INPUT          :                                            *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ESA_RC                                     *
*                                                             *
**************************************************************/
static ESA_RC CTSUpdUG_lists (short                  delta_num,
                              DELTA_DESC_rec_typ   * delta,
                              UG_PARAMS_rec_typ    * ug_params,
                              ADDINFO_rec_typ      * addinfo,
                              ADMIN_PARAMS_rec_typ * admin_params,
                              ERR_STRUCT_rec_typ   * err)
{

  static char         func[]="CTSUpdUG_lists";

 /*
  *   Variables
  */

  ESA_RC                       rc;
  char                         cmd[MAX_API_ST];
  ADDINFO_rec_ptr              laddinfo = NULL;
  ONE_FIELD_rec_ptr            pair;
  ONE_FIELD_rec_ptr            real_pair;                 /* WS10082 */
  CTSAMSG_HANDLE_rec_typ     * msgs;
  CTSAMSG_DEST_TABLE_rec_typ * dest;
  /*WS10082A char              msgbuf[MAX_RSS_ADDINFO_VAL_LEN+100]; */
  char                         msgbuf[134];               /*WS10082A*/

  OBJ_EXISTS_typ               obj_exist;       /* GETUGs  params   */
  HAVE_MORE_typ                have_more;       /* GETUGs  params   */
  void                       * handle;          /* GETUGs  params   */
  short                        actual_num ;     /* GETUGs  params   */
  UG_PARAMS_rec_typ            group;           /* GETUGs  params   */

  short i, delta_count;                         /* Delta Processing */
  ESA_RC rc_add, rc_del;                        /* Delta Processing */

 /*
  *   Initialize
  */

  ESA_DIAG_enter(ESA_COMP_UPDUG, 1, func);

  msgs = admin_params->ctsamsg_handle;
  dest = admin_params->ctsamsg_dest;

 /*
  *   Check if any of the delta keywords were specified
  */

  delta_count=0;
  for (i=0; i LT delta_num; i++) {
      delta[i].kwd_found = 0;
      strcpy( delta[i].newval, NULL_STRING);
      pair = ADDINFO_search(delta[i].kwd,   RCF_ADDINFO_KWD_LEN,
                             addinfo->pair,
                             addinfo->num_pairs );
      if (pair NE NULL) {
         strcpy( delta[i].newval, pair->value);
         ESA_DIAG_printf(ESA_COMP_UPDUG, 2,
                  "Delta %d: '%s' at %X", i, delta[i].kwd, pair);
         delta_count++;
         delta[i].kwd_found = 1;
         delta[i].add_typ   = pair->add_typ;

         if ( (pair->add_typ NE TYPE_1B ) AND
              (pair->add_typ NE TYPE_2B )    ) {
            sprintf(msgbuf, "Invalid type=%d for list keyword=%s",
                    pair->add_typ,   pair->keyword);
            CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest,
                          component, func, msgbuf, 0, __LINE__);
         }

      }
  }
  ESA_DIAG_printf(ESA_COMP_UPDUG, 1,
                  "Delta keywords count = %d", delta_count);

 /*
  *   If no delta keywords, finish
  */

  if ( delta_count EQ 0 ) {
     rc = ESA_OK;
     goto exit;
  }

 /*
  *   Prepare parameters to obtain old group values
  */

  rc = ADDINFO_alloc(func, delta_num, &laddinfo, dest, msgs);
  if (rc NE ESA_OK) {
     rc = ESA_FATAL;
     goto exit;
  }

  ESA_DIAG_printf(ESA_COMP_UPDUG, 1,
                  "Obtaining grp %s details", ug_params->group);

  for (i=0; i LT delta_num; i++)
      ADDINFO_insert(TYPE_1B, delta[i].kwd, NULL_STRING,
                     laddinfo, RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                     UNIQUE);

  if ( ESA_DIAG_get_debug_level(ESA_COMP_UPDUG) GT 2)
     ADDINFO_dump(laddinfo ,1);

 /*
  *   Obatain group details of delta values
  */

  actual_num = 0;
  have_more = NO_MORE;
  handle = NULL;
  obj_exist = OBJ_NOT_EXIST;

  rc = CTSGetUGs   ( GET_MANY_GROUPS, "", 1, &actual_num,
                     &have_more, &handle,
                     1, ug_params, &group, &laddinfo, &obj_exist,
                     admin_params, err );

  ESA_DIAG_printf(ESA_COMP_UPDUG, 1,
                  "Obtained group %s rc=%d", ug_params->group, rc);

  if ( (rc NE ESA_OK) OR (obj_exist NE OBJ_EXIST) ) {
     rc = ESA_FATAL;
     goto exit;
  }

  if ( ESA_DIAG_get_debug_level(ESA_COMP_UPDUG) GT 1)
     ADDINFO_dump(laddinfo,1);

 /*
  *    Analyze differance between old and new value
  */

  for (i=0; i LT delta_num; i++) {

      strcpy( delta[i].addval, NULL_STRING);
      strcpy( delta[i].delval, NULL_STRING);

      if ( delta[i].kwd_found ) {
    /*   strcpy (delta[i].oldval, laddinfo->pair[i].value); WS10082 */
         real_pair = get_pairi(laddinfo->pair[i]);       /* WS10082 */
         strcpy (delta[i].oldval, real_pair->value);     /* WS10082 */

         rc_add = ADDINFO_list_diff(delta[i].newval, delta[i].oldval,
                                    delta[i].addval,
                                    ADDINFO_LIST_ENTRY,
                                    ADDINFO_LIST_ENTRY);
         rc_del = ADDINFO_list_diff(delta[i].oldval, delta[i].newval,
                                    delta[i].delval,
                                    ADDINFO_LIST_ENTRY,
                                    ADDINFO_LIST_ENTRY);
         ESA_DIAG_printf(ESA_COMP_UPDUG, 3,
               "Add: diff rc=%d addval=%s", rc_add, delta[i].addval);
         ESA_DIAG_printf(ESA_COMP_UPDUG, 3,
               "Del: diff rc=%d delval=%s", rc_del, delta[i].delval);
         if ( (rc_del NE ESA_OK) OR (rc_add NE ESA_OK) ) {
            CTSAMSG_print(RACF_LISTDIFF, msgs, NULL, dest,
                          delta[i].newval);
            rc = ESA_FATAL;
            goto exit;
         } /* Error in lists processing */
      } /* Keyword specfied */
  } /* Loop on delta array */

 /*
  *   Delete deleted items
  */

  ADDINFO_empty(laddinfo);
  for (i=0; i LT delta_num; i++) {
      ESA_DIAG_printf(ESA_COMP_UPDUG, 3,
          "Delta %d:%s: delval=%s", i, delta[i].kwd, delta[i].delval);
      if (strlen(delta[i].delval) GT 0)
         ADDINFO_insert(TYPE_1B, delta[i].delkwd,
                        delta[i].delval, laddinfo, RCF_ADDINFO_KWD_LEN,
                        RCF_ADDINFO_VAL_LEN, UNIQUE);
  }

  if (laddinfo->num_pairs GT 0) {
     ESA_DIAG_printf(ESA_COMP_UPDUG, 1,
                     "Deleting deleted list items");
     sprintf(cmd,"ALTGROUP %s ", ug_params->group);
     rc = racfcmd(func, EXECOUT_DDNAME, admin_params->admin_uname,
                  cmd, MAX_OK_RC_0,
                  1, &laddinfo, mkt, delta_kdt,          /* IS10174 */
                  admin_params,                          /* IS10174 */
                  CMDOUT_YES, RACF_YES);
       /* IS10174 1, &laddinfo, mkt, delta_kdt, dest, msgs,   */
     if (rc NE ESA_OK)
        goto exit;
  }

 /*
  *   Add added items
  */

  ADDINFO_empty(laddinfo);
  for (i=0; i LT delta_num; i++) {
      ESA_DIAG_printf(ESA_COMP_UPDUG, 3,
          "Delta %d:%s: addval=%s", i, delta[i].kwd, delta[i].addval);
      if (strlen(delta[i].addval) GT 0)
         ADDINFO_insert(TYPE_1B, delta[i].addkwd,
                        delta[i].addval, laddinfo, RCF_ADDINFO_KWD_LEN,
                        RCF_ADDINFO_VAL_LEN, UNIQUE);
  }

  if (laddinfo->num_pairs GT 0) {
     ESA_DIAG_printf(ESA_COMP_UPDUG, 1,
                     "Adding added list items");
     sprintf(cmd,"ALTGROUP %s ", ug_params->group);
     rc = racfcmd(func, EXECOUT_DDNAME, admin_params->admin_uname,
                  cmd, MAX_OK_RC_0,
                  1, &laddinfo, mkt, delta_kdt,          /* IS10174 */
                  admin_params,                          /* IS10174 */
                  CMDOUT_YES, RACF_YES);
       /* IS10174 1, &laddinfo, mkt, delta_kdt, dest, msgs,    */
     if (rc NE ESA_OK)
        goto exit;
  }

 /*
  *    Finished delta processing
  */

  exit:;

  ADDINFO_free(&laddinfo);

  ESA_DIAG_exit(ESA_COMP_UPDUG, 1, func, rc);

  return rc;

}

