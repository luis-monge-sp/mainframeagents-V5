 /**************************************************************
 *                                                             *
 * Title            : Convert date service functions           *
 *                                                             *
 * File Name        : ctscdat                                  *
 *                                                             *
 * Author           : Alexander Shvartsman                     *
 *                                                             *
 * Creation Date    : 04/06/97                                 *
 *                                                             *
 * Description      : Convert date service functions           *
 *                                                             *
 * Assumptions and                                             *
 *   Considerations :                                          *
 *                                                             *
 **************************************************************/

 /**************************************************************
 * Mod.Id   Who      When     Description                      *
 * -------- -------- -------  -------------------------------- *
 * SAS2IBMN NuritY   05/10/16 SAS/C to IBM C Conversion        *
 **************************************************************/

 #include   <globs.h>

 /*
  *   Standard include files
  */

 #include   STDIO
 #include   STDLIB
 #include   STRING
 /* SAS2IBMN #include  LCLIB    */

 /*
  *   ESA include files
  */

 #include ESA_DIAG
 #include ESA_CTSAMSG
 #include ESA_API
 #include ESA_API_CODES
 #include API_DATES

 /*
  *   MVS include files
  */

 #include MVS_CODES
 #include MVS_COMP
 #include MVS_OS_MVS

 /**************************************************************
 *                                                             *
 * PROCEDURE NAME : PutDateElement                             *
 *                                                             *
 * DESCRIPTION    : Put Date Element according pattern         *
 *                                                             *
 * INPUT          : pattrn                                     *
 *                  ess_date                                   *
 *                                                             *
 * OUTPUT         : rss_date                                   *
 *                                                             *
 * RETURN VALUE   : ESA_RC                                     *
 *                                                             *
 **************************************************************/

 static ESA_RC  PutDateElement(char    * rss_date,
                               char    * ess_date,
                               char    * pattrn )
 {

    ESA_RC  rc = ESA_OK;
    char    work[5];

    /*
     *  Put date element according pattrn
     */

     if ( memcmp(pattrn, "DD", 2 ) EQ 0 )
        strcat( rss_date, ess_date + 6 );     /* Day   */
     else if ( memcmp(pattrn, "MM", 2 ) EQ 0 ) {
        memcpy( work, ess_date + 4, 2 );
        work[2] = NULL_CHAR;
        strcat( rss_date, work );             /* Month */
     }
     else if ( memcmp(pattrn, "YY", 2 ) EQ 0 ) {
        memcpy( work, ess_date, 4 );
        work[4] = NULL_CHAR;
        strcat( rss_date, work + 2 );         /* Year  */
     }
     else
        rc = ESA_FATAL;

     return rc;

 }      /* PutDateElement */

 /**************************************************************
 *                                                             *
 * PROCEDURE NAME : CTSCDAT_conv2ESS                           *
 *                                                             *
 * DESCRIPTION    : Convert date from RSS format to ESS format *
 *                                                             *
 * INPUT          : comp        - diag component               *
 *                  rss_date    - rss date                     *
 *                  dest                                       *
 *                  msgs                                       *
 *                                                             *
 * OUTPUT         : ess_date    - ess date                     *
 *                                                             *
 * RETURN VALUE   : ESA_RC                                     *
 *                                                             *
 **************************************************************/

 ESA_RC CTSCDAT_conv2ESS(ESA_DIAG_COMP_typ            comp,
                         char                       * pattrn,
                         char                       * rss_date,
                         char                       * ess_date,
                         CTSAMSG_DEST_TABLE_rec_ptr   dest,
                         CTSAMSG_HANDLE_rec_ptr       msgs)
 {

  /*
   *   Variables
   */

   ESA_RC                  rc = ESA_OK ;
   static  char            func[]="CTSCDAT_conv2ESS";
   char                   *pattrn_elements[] = {
                                       "YY", "MM", "DD", NULL };
   int                     i, k;
   int                     yy;
   char                    val[20];
   char                    work[3];
   char                   *tmp;

  /*
   *  Initialize
   */

   ESA_DIAG_enter(comp, 5, func );

   ESA_DIAG_printf(comp, 5, "rss_date=%d/%s",
                             strlen(rss_date), rss_date);

   if ( (strlen(rss_date) EQ 0 )  OR
        (strlen(rss_date) GT 8 )   )   {
      CTSAMSG_print(API_ERRDATE, msgs, NULL, dest, rss_date);
      rc = ESA_FATAL;
      OS_MVS_btrace();
      goto exit;
   }

   strcpy( val, rss_date);
   ESA_DIAG_printf(comp, 5, "date format=%s", pattrn);

   /*  Convert Date loop  */

   k = 0;
   while ( pattrn_elements[k] ) {

      /*  Check parameters */

      tmp = strstr(pattrn, pattrn_elements[k] );
      if ( tmp EQ NULL ) {
          CTSAMSG_print(API_ERRDATE_FORMAT, msgs, NULL, dest, pattrn);
          rc = ESA_FATAL;
          OS_MVS_btrace();
          goto exit;
      }

      i = tmp - pattrn;
      if ( strlen(val) LT (i+2) ) {
          CTSAMSG_print(API_ERRDATE, msgs, NULL, dest, val);
          rc = ESA_FATAL;
          OS_MVS_btrace();
          goto exit;
      }

      /*  Extract parameter */

      memcpy(work, &val[i], 2 );
      work[2] = NULL_CHAR;

      /*   Convert Year  */

      if ( strcmp(pattrn_elements[k], "YY") EQ 0 ) {
         yy = atoi(work);
         if ( yy LT 70 )
            strcpy(ess_date, "20" );
         else
            strcpy(ess_date, "19" );
      }

      /*  Append parameter */

      strcat(ess_date, work);
      k++;     /* Get next pattrn */
   }

   ESA_DIAG_printf(comp, 5, "ess_date=%s", ess_date);

  /*
   *  Finish
   */

   exit : ;

   ESA_DIAG_exit(comp, 5, func, rc);

   return rc ;

 }    /* CTSCDAT_conv2ESS */

 /**************************************************************
 *                                                             *
 * PROCEDURE NAME : CTSCDAT_conv2RSS                           *
 *                                                             *
 * DESCRIPTION    : Convert ESS date to RSS format             *
 *                                                             *
 * INPUT          : comp          -   diag component           *
 *                  pattrn        -   date format              *
 *                  ess_date      -   ess date                 *
 *                  dest                                       *
 *                  msgs                                       *
 *                                                             *
 * OUTPUT         : rss_date      -   rss date                 *
 *                                                             *
 * RETURN VALUE   : ESA_RC                                     *
 *                                                             *
 **************************************************************/

 ESA_RC CTSCDAT_conv2RSS(ESA_DIAG_COMP_typ           comp,
                         char                       *pattrn,
                         char                       *ess_date,
                         char                       *rss_date,
                         CTSAMSG_DEST_TABLE_rec_ptr  dest,
                         CTSAMSG_HANDLE_rec_ptr      msgs)
 {

   static char       func[]="CTSCDAT_conv2RSS";
   ESA_RC            rc = ESA_OK;
   int               i, k;
   char              dsrc[3];

  /*
   *    Initialize
   */

   ESA_DIAG_enter(comp,4,func);

   ESA_DIAG_printf(comp, 4,
                   "date format=%s ess_date=%s",
                    pattrn, ess_date);

   *rss_date = NULL_CHAR;

  /*
   *    String is in incorrect len , can not convert !
   */

   if ( strlen(ess_date) NE 8 ) {
      CTSAMSG_print(API_ERRDATE, msgs, NULL, dest, ess_date);
      rc = ESA_FATAL;
      OS_MVS_btrace();
      goto exit;
   }

   k = 0;
   for (i=0; i LT 3 ; i++ ) {

     /* Add separator before none first element */

     if ( i NE 0 )
        strcat( rss_date, "/");

     /*  Put element 'i' of date */

     memcpy( dsrc, pattrn + k, 2 );
     rc = PutDateElement( rss_date, ess_date, dsrc);
     if ( rc NE ESA_OK) {
       CTSAMSG_print(API_ERRDATE_FORMAT, msgs, NULL, dest, pattrn);
       rc = ESA_FATAL;
       OS_MVS_btrace();
       goto exit;
     }
     k += 3;
   }

   ESA_DIAG_printf(comp, 4, "rss_date=%s", rss_date);

  /*
   *    Finish
   */

   exit :;

   ESA_DIAG_exit(comp,4, func, rc );

   return rc;

 }      /*  CTSCDAT_conv2RSS  */
