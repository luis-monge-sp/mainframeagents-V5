 /**************************************************************
 *                                                             *
 * Title            : Add a resource (RACF)                    *
 *                                                             *
 * File Name        : ctsrirs.c                                *
 *                                                             *
 * Author           : Doron Cohen, Shvartsman Alexander        *
 *                                                             *
 * Creation Date    : 06/05/96                                 *
 *                                                             *
 * Description      :                                          *
 *                                                             *
 * Assumptions and                                             *
 *   Considerations :                                          *
 *                                                             *
 **************************************************************/

 /**************************************************************
 * Mod.Id   Who      When     Description                      *
 * -------- -------- -------  -------------------------------- *
 * ps0170   Alex     03/08/97 SVFMR segment support            *
 * ps0238   Alex     16/02/98 Refresh GENERIC                  *
 * ps0249   Alex     25/03/98 HANDLING INCOMPLETE VOLUME/UNIT  *
 * ps0282   Guy      23/06/98 If resource type is DATASET, set *
 *                            max OK rc to 0 instead of 4      *
 * ps0391   AlexS    11/11/99 RACF 2.8 Support                 *
 * WS2517   Michael  19/10/03  Add quoted to RACF commands     *
 * IS0272   Michael  10/06/04  Update RACF 3.2.0 with old fixes*
 * SAS2IBMA AvnerL   20/07/16  SAS/C to IBM/C                  *
 * IS10174  NuritY   15/01/18 Dynamic EXECOUT support.         *
 * WS10082  AvnerL   02/10/23 Recompile & allow 16K volumes    *
 **************************************************************/
 #include   <globs.h>

 /*
  *   Standard include files
  */

 #include   STDLIB
 #include   STDIO
 #include   STRING

 /*
  *   ESA include files
  */

 #include ESA_DIAG
 #include ESA_API
 #include ESA_INIT

 #include MVS_OS_CLI
 #include ESA_CS_OS           /* ps0249 */
 #include MVS_OS_MVS          /* ps0249 */

 #include RACF_CODES
 #include API_ADDINFO
 #include RACF
 #include RACF_RES

 /*
  *     RKT for ADDSD/RDEFINE
  */

 static ADDINFO_RKTE_rec_typ rkt[] = {
    "ADDCATEGORY", "DELCATEGORY",
    "ADDMEM", "DELMEM",
    "" };  /* a null string indicate end-of-rkt */

 /*
  *     MKT for ADDSD
  *         (Mandatory Keywords Table)
  */

 static ADDINFO_MKTE_rec_typ addsd_mkt[] = {
        "" };      /* a null string indicate end-of-mkt */

 /*
  *     MKT for RDEFINE
  *         (Mandatory Keywords Table)
  */
 static ADDINFO_MKTE_rec_typ rdefine_mkt[] = {
        "" };      /* a null string indicate end-of-mkt */

 /*
  *     KDT for ADDSD  COMMAND
  *         (Keyword Decscription Table)
  */

 static ADDINFO_KDTE_rec_typ addsd_kdt[] =      {

  /*                                                            */
  /* keyword             type   negative       value delimiters */
  /*                             value                          */
  /* =================== ====== ============== ================ */

   {"CATEGORY"            ,KDT_IGN ,""            ,"(", ") " },

   /* ps0249 */
   {"DATASET_NAME"        ,KDT_IGN ,""            ,"(", ") " },

   {"ADDCATEGORY"         ,KDT_KEY ,""            ,"(", ") " },
   {"AUDIT.ALL"           ,KDT_KEY ,""            ,"(", ") " },
   {"AUDIT.FAILURES"      ,KDT_KEY ,""            ,"(", ") " },
   {"AUDIT.NONE"          ,KDT_FLG ,""            ,"(", ") " },
   {"AUDIT.SUCCESS"       ,KDT_KEY ,""            ,"(", ") " },
   {"DFP.RESOWNER"        ,KDT_KEY ,""            ,"(", ") " },
   {"DATA"                ,KDT_KEY ,""            ,"('", "') "},
   {"ERASE"               ,KDT_FLG ,""            ,"" , " "  },
   {"GENERIC"             ,KDT_FLG ,""            ,"" , " "  },
   {"SET"                 ,KDT_IGN ,""            ,"" , " "  },
   {"NOSET"               ,KDT_FLG ,"SET"         ,"" , " "  },
   {"GLOBALAUDIT.ALL"     ,KDT_IGN ,""            ,"(", ") " },
   {"GLOBALAUDIT.FAILURES",KDT_IGN ,""            ,"(", ") " },
   {"GLOBALAUDIT.NONE"    ,KDT_IGN ,""            ,"(", ") " },
   {"GLOBALAUDIT.SUCCESS" ,KDT_IGN ,""            ,"(", ") " },
   {"LEVEL"               ,KDT_KEY ,""            ,"(", ") " },
   {"NOTIFY"              ,KDT_KEY ,""            ,"(" ,") " },
   {"OWNER"               ,KDT_KEY ,""            ,"(", ") " },
   {"RETPD"               ,KDT_KEY ,""            ,"(", ") " },
   {"SECLABEL"            ,KDT_KEY ,""            ,"(", ") " },
   {"SECLEVEL"            ,KDT_KEY ,""            ,"(", ") " },
   {"SSIGNON.KEY"         ,KDT_IGN ,""            ,"(", ") " },
   {"SSIGNON.KEYENCRYPT"  ,KDT_IGN ,""            ,"(", ") " },
   {"UACC"                ,KDT_KEY ,""            ,"(", ") " },
   {"UNIT"                ,KDT_KEY ,""            ,"(", ") " },
   {"VOLUME"              ,KDT_KEY ,""            ,"(", ") " },
   {"WARNING"             ,KDT_FLG ,""            ,"" , " "  },
   {"NOSESSION"           ,KDT_IGN ,""            ,"" , " "  },
   {"SESSION.NO_PKB"      ,KDT_IGN ,""            ,"",   ""  },
   {"NODLFDATA"           ,KDT_IGN ,""            ,"" , " "  },
   {"DLFDATA.NO_PKB"      ,KDT_IGN ,""            ,"",   ""  },
   {"NOSTDATA"            ,KDT_IGN ,""            ,"" , " "  },
   {"STDATA.NO_PKB"       ,KDT_IGN ,""            ,"",   ""  },
   {"TVTOC"               ,KDT_IGN ,""            ,"" , " "  },
   {"SINGLEDSN"           ,KDT_IGN ,""            ,"" , " "  },
   {"SESSION.LOCK"        ,KDT_IGN ,""            ,"" , " "  },

   /* ps0170 */
   {"NOSVFMR"             ,KDT_IGN ,""            ,"" , " "  },
   {"SVFMR.NO_PKB"        ,KDT_IGN ,""            ,"",   ""  },

   /* ps0391 */
   {"NOTME"               ,KDT_IGN ,""            ,"" , " "  },
   {"TME.NO_PKB"          ,KDT_IGN ,""            ,"",   ""  },
   {"TME.ROLES"           ,KDT_KEY ,""            ,"(", ") " },
   {""                    ,KDT_KEY ,""            ,"" , ""   }  };

 /*
  *     KDT for RDEFINE  COMMAND
  *         (Keyword Decscription Table)
  */

 static ADDINFO_KDTE_rec_typ rdefine_kdt[] =      {

  /*                                                            */
  /* keyword             type   negative       value delimiters */
  /*                             value                          */
  /* =================== ====== ============== ================ */

   {"CATEGORY"            ,KDT_IGN ,""                  ,"(", ") " },
   {"MEMBER"              ,KDT_IGN ,""                  ,"(", ") " },
   {"SSIGNON.KEY"         ,KDT_IGN ,""                  ,"(", ") " },
   {"SSIGNON.KEYENCRYPT"  ,KDT_IGN ,""                  ,"(", ") " },
   {"SET"                 ,KDT_IGN ,""                  ,"" , ""   },

   {"ADDCATEGORY"         ,KDT_KEY ,""                  ,"(", ") " },
   {"ADDMEM"              ,KDT_KEYG,""                  ,"(", ") " },

   {"APPLDATA"            ,KDT_KEY ,""                  ,"('", "') "},
   {"DATA"                ,KDT_KEY ,""                  ,"('", "') "},
   {"ERASE"               ,KDT_IGN ,""                   ,"" , " "  },
   {"GENERIC"             ,KDT_IGN ,""                  ,"" , " "  },
   {"LEVEL"               ,KDT_KEY ,""                  ,"(", ") " },
   {"NOTIFY"              ,KDT_KEY ,""                  ,"(" ,") " },
   {"OWNER"               ,KDT_KEY ,""                  ,"(", ") " },
   {"SECLABEL"            ,KDT_KEY ,""                  ,"(", ") " },
   {"SECLEVEL"            ,KDT_KEY ,""                  ,"(", ") " },
   {"SINGLEDSN"           ,KDT_FLG ,""                  ,"" , " "  },
   {"TIMEZONE"            ,KDT_KEY ,""                  ,"(", ") " },
   {"TVTOC"               ,KDT_FLG ,""                  ,"" , " "  },
   {"UACC"                ,KDT_KEY ,""                  ,"(", ") " },
   {"WARNING"             ,KDT_FLG ,""                  ,"" , " "  },
   {"WHEN.TIME"           ,KDT_KEY ,""                  ,"(",  ")" },
   {"WHEN.DAYS"           ,KDT_KEY ,""                  ,"(",  ")" },

   {"AUDIT.ALL"           ,KDT_KEY ,""                  ,"(", ") " },
   {"AUDIT.FAILURES"      ,KDT_KEY ,""                  ,"(", ") " },
   {"AUDIT.NONE"          ,KDT_FLG ,""                  ,"(", ") " },
   {"AUDIT.SUCCESS"       ,KDT_KEY ,""                  ,"(", ") " },

   {"GLOBALAUDIT.ALL"     ,KDT_IGN ,""                  ,"(", ") " },
   {"GLOBALAUDIT.FAILURES",KDT_IGN ,""                  ,"(", ") " },
   {"GLOBALAUDIT.NONE"    ,KDT_IGN ,""                  ,"(", ") " },
   {"GLOBALAUDIT.SUCCESS" ,KDT_IGN ,""                  ,"(", ") " },

   {"NODLFDATA"           ,KDT_IGN ,""                  ,"" , " "  },
   {"DLFDATA.NO_PKB"      ,KDT_FLG ,""                  ,"",   ""  },
   {"DLFDATA.RETAIN"      ,KDT_KEY ,""                  ,"(", ") " },
   {"DLFDATA.JOBNAMES"    ,KDT_KEY ,""                  ,"(", ") " },

   {"NOSESSION"           ,KDT_IGN ,""                  ,"" , " "  },
   {"SESSION.NO_PKB"      ,KDT_FLG ,""                  ,"",   ""  },
   {"SESSION.INTERVAL"    ,KDT_KEY ,""                  ,"(", ") " },
   {"SESSION.LOCK"        ,KDT_FLG ,""                  ,"" , " "  },
   {"SESSION.SESSKEY"     ,KDT_KEY ,""                  ,"(", ") " },
   {"SESSION.CONVSEC"     ,KDT_KEY ,""                  ,"(", ") " },

   {"SSIGNON.KEYENCRYPTED",KDT_KEY ,""                  ,"(", ") " },
   {"SSIGNON.KEYMASKED"   ,KDT_KEY ,""                  ,"(", ") " },

   {"NOSTDATA"            ,KDT_IGN ,""                  ,"" , " "  },
   {"STDATA.NO_PKB"       ,KDT_FLG ,""                  ,"",   ""  },
   {"STDATA.USER"         ,KDT_KEY ,""                  ,"(", ") " },
   {"STDATA.GROUP"        ,KDT_KEY ,""                  ,"(", ") " },
   {"STDATA.PRIVILEGED"   ,KDT_KEY ,""                  ,"(", ") " },
   {"STDATA.TRACE"        ,KDT_KEY ,""                  ,"(", ") " },
   {"STDATA.TRUSTED"      ,KDT_KEY ,""                  ,"(", ") " },

   /* ps0170 */
   {"NOSVFMR"             ,KDT_IGN ,""                  ,"" , " "  },
   {"SVFMR.NO_PKB"        ,KDT_FLG ,""                  ,"",   ""  },
   {"SVFMR.SCRIPTNAME"    ,KDT_KEY ,""                  ,"(", ") " },
   {"SVFMR.PARMNAME"      ,KDT_KEY ,""                  ,"(", ") " },

   /* ps0391 */
   {"NOTME"               ,KDT_IGN ,""                  ,"" , " "  },
   {"TME.NO_PKB"          ,KDT_FLG ,""                  ,"",   ""  },
   {"TME.ROLES"           ,KDT_KEY ,""                  ,"(", ") " },
   {"TME.CHILDREN"        ,KDT_KEY ,""                  ,"(", ") " },
   {"TME.GROUPS"          ,KDT_KEY ,""                  ,"(", ") " },
   {"TME.PARENT"          ,KDT_KEY ,""                  ,"(", ") " },
   {"TME.RESOURCE"        ,KDT_KEY ,""                  ,"(", ") " },
   {""                    ,KDT_KEY ,""                  ,"" , ""   } };

 /* ps0249 */
 static void get_unit_info(ADDINFO_rec_typ      * laddinfo,
                           RES_PARAMS_rec_typ   * res_params,
                           char                 * volume,
                           ADDINFO_rec_typ      * addinfo,
                           ADMIN_PARAMS_rec_typ * admin_params);

/****************************************************
 * Procedure Name: CTSAddRes
 * Description   : Creadts a resource with non-ACL info
 * Input         : resource
 * Output        : None
 * Input/Output  : None
 * Return Value  : ESA_RC
 ***************************************************/

 ESA_RC CTSAddRes (RES_PARAMS_rec_typ   * res_params_ess,
                   ADDINFO_rec_typ      * addinfo,
                   ADMIN_PARAMS_rec_typ * admin_params,
                   ERR_STRUCT_rec_typ   * err)
 {

  /*
   *    Variables
   */

   ESA_RC                   rc, chk_rc;
   ADDINFO_rec_typ        * addinfo_res = NULL;
   RES_PARAMS_rec_typ       res_params_tmp;
   RES_PARAMS_rec_typ     * res_params = &res_params_tmp;
   char                     cmd_pref[MAX_API_ST];
   /*WS10082 char        volume[RCF_ADDINFO_VAL_LEN+1]= NULL_STRING; */
   char          volume[ADDINFO_16K_VAL_LEN+1]=NULL_STRING; /*WS10082*/
   ADDINFO_MKTE_rec_ptr     mkt;
   ADDINFO_KDTE_rec_ptr     kdt;

   static char                func[]="CTSAddRes";
   CTSAMSG_HANDLE_rec_ptr     msgs;
   CTSAMSG_DEST_TABLE_rec_ptr dest;
   int                        generic_flag = 0;
   int                        max_allowed_rc;             /* ps0282 */
   ONE_FIELD_rec_ptr          gen_pair, vol_pair;
   ONE_FIELD_rec_ptr          cpair,  cpairf;
   ADDINFO_rec_ptr            laddinfo = NULL;
   ADDINFO_rec_ptr            addinfo_vec[3] = { NULL, NULL, NULL };

   char                    racf_dataset_quotes[4];  /* WS2517 */
  #define RACF_DATASET_QUOTES "RACF_DATASET_QUOTES" /* WS2517 */
   ESA_RC prm_rc;                                   /* WS2517 */

  /*
   *   Initialize
   */

   ESA_DIAG_enter(ESA_COMP_ADDRES, 1, func);

   msgs = admin_params->ctsamsg_handle;
   dest = admin_params->ctsamsg_dest;

  /*
   *  Build addinfo_res from resource name
   */

   rc = RCFRES_build_res_addinfo(res_params_ess, res_params,
                                 &addinfo_res, dest, msgs);
   if (rc NE ESA_OK)
     goto exit;

   if (ESA_DIAG_get_debug_level(ESA_COMP_ADDRES) GT 4) {

       ESA_DIAG_printf(ESA_COMP_ADDRES,0, "addinfo_res");
       ADDINFO_dump(addinfo_res,1);

       ESA_DIAG_printf(ESA_COMP_ADDRES,0, "addinfo");
       ADDINFO_dump(addinfo,1);
   }

  /*
   *   Check that Reserved Keywords were not used
   */

   if (ADDINFO_rkt_check(func, 1, &addinfo, rkt,
                         dest, msgs ) NE ESA_OK) {
      rc = ESA_FATAL;
      goto exit;
   }

  /*
   *  Check if GENERIC
   */

   gen_pair = ADDINFO_search("GENERIC", RCF_ADDINFO_KWD_LEN,
                         addinfo_res->pair, addinfo_res->num_pairs);
   if (gen_pair EQ NULL)   /* Added ps0238 */
     gen_pair = ADDINFO_search("GENERIC", RCF_ADDINFO_KWD_LEN,
                                addinfo->pair, addinfo->num_pairs);
   if ( gen_pair NE NULL)
      if ( strcmp(gen_pair->value,KWD_FLAG_ON) EQ 0 )
         generic_flag = 1;

  /*
   *  GENERIC classes checking
   */

   if ( generic_flag EQ 1 ) {
      if ( RACF_is_generic_class(res_params->restype,
                                 dest, msgs ) NE ESA_OK ) {
        CTSAMSG_print(ERR_ADD_RES_CLASS_NO_GENERIC, msgs, NULL, dest,
                      res_params->resource,
                      res_params->restype);
        rc = ESA_FATAL;
        goto exit;
      }
   }

  /*
   *   Check resource existance
   */

   if ( ( generic_flag EQ 0 ) AND
        ( strcmp(res_params->restype, "DATASET" ) EQ 0 ) ) {

     vol_pair = ADDINFO_search("VOLUME", RCF_ADDINFO_KWD_LEN,
                       addinfo_res->pair, addinfo_res->num_pairs);
     if (vol_pair EQ NULL)  /* Added by ps0238 */
       vol_pair = ADDINFO_search("VOLUME", RCF_ADDINFO_KWD_LEN,
                                 addinfo->pair,
                                 addinfo->num_pairs);
     if ( vol_pair NE NULL)
        strcpy( volume, vol_pair->value );

   }

   ESA_DIAG_printf(ESA_COMP_ADDRES, 1,
        "Checking resource %s %s existance generic=%d volume=%s",
         res_params->restype, res_params->resource,
         generic_flag, volume );

   chk_rc = RACF_chk_res(res_params->restype, res_params->resource,
                         volume, generic_flag, OBJ_NOT_EXIST, TRUE,
                         dest, msgs);
   if ( chk_rc NE ESA_OK ) {        /* Resource exists */
      rc = ESA_FATAL;
      goto exit;
   }

   /*
    *  Prepare command (dataset profile / general profile)
    */

   if (strcmp(res_params->restype,"DATASET") EQ 0) {

      prm_rc = admin_params->cs_func.rssprm_get_opt_ptr    /* WS2517 */
                                (admin_params->rss_name,   /* WS2517 */
                                RACF_DATASET_QUOTES,       /* WS2517 */
                                1,                         /* WS2517 */
                                racf_dataset_quotes,       /* WS2517 */
                                OPT_TRUE,                  /* WS2517 */
                                OPT_FALSE);                /* WS2517 */
                if (prm_rc NE ESA_OK)                      /* WS2517 */
                  racf_dataset_quotes[0] = 'N'; /* Default=N  WS2517 */
                                                           /* WS2517 */
     if ( racf_dataset_quotes[0] EQ 'Y')                   /* WS2517 */
      sprintf(cmd_pref,"ADDSD '%s' ",res_params->resource);/* WS2517 */
     else                                                  /* WS2517 */
      sprintf(cmd_pref,"ADDSD %s ",res_params->resource);
       kdt = addsd_kdt;
       mkt = addsd_mkt;
       max_allowed_rc = MAX_OK_RC_0;                      /* ps0282 */
   }
   else {
       sprintf(cmd_pref,"RDEFINE %s %s ", res_params->restype,
               res_params->resource);
       kdt = rdefine_kdt;
       mkt = rdefine_mkt;
       max_allowed_rc = MAX_OK_RC_4;                      /* ps0282 */
   }

   ESA_DIAG_printf(ESA_COMP_ADDRES, 1,
                   "Command header prepared (%s)", cmd_pref);

  /*
   *   Alloc a local output addinfo buffer
   */

   if (ADDINFO_alloc(func, 20, &laddinfo, dest, msgs) NE ESA_OK) {
      rc = ESA_FATAL;
      goto exit;
   }

  /*
   *   Handle CATEGORY, MEMBER fields
   */

   cpair  = ADDINFO_search("CATEGORY", RCF_ADDINFO_KWD_LEN,
                            addinfo->pair,
                            addinfo->num_pairs);
   if ( cpair NE NULL )
      ADDINFO_insert(cpair->add_typ, "ADDCATEGORY",
                     cpair->value, laddinfo,
                     RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                     UNIQUE);

   cpair  = ADDINFO_search("MEMBER", RCF_ADDINFO_KWD_LEN,
                            addinfo->pair,
                            addinfo->num_pairs);
   if ( cpair NE NULL )
      ADDINFO_insert(cpair->add_typ, "ADDMEM",
                     cpair->value, laddinfo,
                     RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                     UNIQUE);

  /*
   *  Handle SET/NOSET
   */

   cpair = ADDINFO_search("SET", RCF_ADDINFO_KWD_LEN,
                           addinfo->pair,
                           addinfo->num_pairs);
   if ( cpair NE NULL) {
      if ( strcmp(cpair->value,KWD_FLAG_OFF) EQ 0 )
        ADDINFO_insert(cpair->add_typ, "NOSET",
                       KWD_FLAG_ON, laddinfo,
                       RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                       UNIQUE);
   }

  /*
   *   Handle PTKTDATA class
   */

   if (strcmp(res_params->restype,"PTKTDATA") EQ 0) {

       /*
        *   set local addinfo for SSIGNON parameters
        *
        *   SSIGNON.KEY        - is the secured signon application key
        *   SSIGNON.KEYENCRYPT - is a flag whther to encrypt
        *                        the application key or use masking.
        */

        cpairf = ADDINFO_search("SSIGNON.KEYENCRYPT",
                                RCF_ADDINFO_KWD_LEN,
                                addinfo->pair,
                                addinfo->num_pairs);
        cpair  = ADDINFO_search("SSIGNON.KEY",
                                RCF_ADDINFO_KWD_LEN,
                                addinfo->pair,
                                addinfo->num_pairs);
        if (cpair NE NULL) {
           if (cpairf NE NULL) {
              if (strcmp(cpairf->value, KWD_FLAG_ON) EQ 0)
                 ADDINFO_insert(TYPE_1A, "SSIGNON.KEYENCRYPTED",
                              cpair->value, laddinfo,
                              RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                              UNIQUE);
              else ADDINFO_insert(TYPE_1A, "SSIGNON.KEYMASKED",
                              cpair->value, laddinfo,
                              RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                              UNIQUE);
           } /* flag specified */
           else ADDINFO_insert(TYPE_1A, "SSIGNON.KEYMASKED",
                              cpair->value, laddinfo,
                              RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                              UNIQUE);
        } /* key specified */
   } /* PTKTDATA resrouce */

  /*
   *  Handle special NO_PKB flags for addinfo_concat
   */

   ADDINFO_insert_cond("NOSESSION"      , KWD_FLAG_ON, addinfo,
                       "SESSION.NO_PKB" , KWD_FLAG_ON,
                       RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                       laddinfo );
   ADDINFO_insert_cond("NODLFDATA"      , KWD_FLAG_ON, addinfo,
                       "DLFDATA.NO_PKB" , KWD_FLAG_ON,
                       RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                       laddinfo );
   ADDINFO_insert_cond("NOSTDATA"       , KWD_FLAG_ON, addinfo,
                       "STDATA.NO_PKB"  , KWD_FLAG_ON,
                       RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                       laddinfo );

  /* ps0170 */
   ADDINFO_insert_cond("NOSVFMR"        , KWD_FLAG_ON, addinfo,
                       "SVFMR.NO_PKB"   , KWD_FLAG_ON,
                       RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                       laddinfo );
  /* ps0391 */
   ADDINFO_insert_cond("NOTME"          , KWD_FLAG_ON, addinfo,
                       "TME.NO_PKB"     , KWD_FLAG_ON,
                       RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN,
                       laddinfo );

  /*
   *  ps0249. Complete VOLUME/UNIT info
   */

   if ( (strcmp(res_params->restype,"DATASET") EQ 0) AND
        (generic_flag EQ 0) AND (strlen(volume) NE 0)   )

      get_unit_info( laddinfo, res_params, volume, addinfo,
                     admin_params);

  /*
   *  Issue command
   */

   addinfo_vec[0] = laddinfo;
   addinfo_vec[1] = addinfo_res;
   addinfo_vec[2] = addinfo;

   rc = racfcmd(func, EXECOUT_DDNAME, admin_params->admin_uname,
                cmd_pref, max_allowed_rc,                 /* ps0282 */
                3, addinfo_vec, mkt, kdt,
                admin_params, CMDOUT_YES, RACF_NO);      /* IS10174 */
    /* IS10174  dest, msgs, CMDOUT_YES, RACF_NO);                   */

  /*
   *   Refresh based on resource class
   */

   if ( rc EQ ESA_OK ) {

      /*
       * RCFRES_set_resource_details(res_params->resource,
       *                             addinfo, dest, msgs);
       */

      RCFRES_set_resource_details(res_params->resource,
                                addinfo_res, dest, msgs);
      RACF_refresh(res_params->resource,                   /* ps0239 */
                 res_params->restype,                      /* ps0239 */
                 admin_params, dest,msgs);                 /* ps0239 */

      /**  Resource SYNC **/

      if (strcmp(res_params_ess->resource,
               res_params->resource ) NE 0) {

         /* Delete an  "old" ess resource ----------------------  */
         /* Res_sync(res_params_ess->resource,res_params->restype,*/
         /*          admin_params, dest,msgs);                    */
         /* ----------------------------------------------------  */

      }
   }

  /*
   *   Finish
   */

   exit:

   ADDINFO_free(&laddinfo);
   ADDINFO_free(&addinfo_res);

   ESA_DIAG_exit(ESA_COMP_ADDRES, 1, func, rc );
   return rc;

 }

/* ps0249 */

/****************************************************
 * Procedure Name: get_unit_info
 * Description   : Complete volume_unit info
 * Input         : res_params
 *               : addinfo_res
 *               : addinfo
 * Input/Output  : laddinfo
 *
 * Return Value  : None
 ****************************************************/

 static void get_unit_info(ADDINFO_rec_typ      * laddinfo,
                           RES_PARAMS_rec_typ   * res_params,
                           char                 * volume,
                           ADDINFO_rec_typ      * addinfo,
                           ADMIN_PARAMS_rec_typ * admin_params)
 {

  /*
   *   Variables
   */

   ESA_RC                     rc = ESA_OK;
   static char                func[]="get_unit_info";
   char                       script_lib_dd [] = "SYSPROC";/*SAS2IBMA*/
   char                       script_lib_dsn[45];          /*SAS2IBMA*/
   char                       script_name[] = "CTSUNIT";   /*SAS2IBMA*/
   ONE_FIELD_rec_ptr          cpair;
   CTSAMSG_HANDLE_rec_ptr     msgs;
   CTSAMSG_DEST_TABLE_rec_ptr dest;

  /*
   *  Initialize
   */

   ESA_DIAG_enter(ESA_COMP_ADDRES,1, func );

   msgs = admin_params->ctsamsg_handle;
   dest = admin_params->ctsamsg_dest;

   /* Try to obtain UNIT info from addinfo */

   cpair = ADDINFO_search("UNIT", RCF_ADDINFO_KWD_LEN,
                          addinfo->pair, addinfo->num_pairs);
   if (cpair NE NULL) {      /* UNIT field exists, do nothing */
      ESA_DIAG_printf(ESA_COMP_ADDRES, 1,
                      "UNIT=%s. Exists in addinfo", cpair->value);
      goto exit;
   }

   /*** UNIT field was not found in both, invoke script ***/

   /*   Get General script library name  */

                                /*SAS2IBMA chg casting */
   /*rc = OS_MVS_ddinfo(script_lib_dd,script_lib_dsn,TRUE,dest,msgs);*/
   rc = OS_MVS_ddinfo( (char *) script_lib_dd, (char *) script_lib_dsn,
        TRUE,dest,msgs, 0 );       /*SAS2IBMA*/    /* IS10174 */
    /* IS10174      TRUE,dest,msgs );        *SAS2IBMA*  */
   if (rc NE ESA_OK)
     goto exit;

   /*   Insert an ampty UNIT field */

   ADDINFO_insert(TYPE_1A, "UNIT", "", laddinfo,
                  RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN, UNIQUE);

   /*   Insert : dataset_name, volume fields */

   ADDINFO_insert(TYPE_1A, "DATASET_NAME",
                  res_params->resource, laddinfo,
                  RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN, UNIQUE);
   ADDINFO_insert(TYPE_1A, "VOLUME", volume, laddinfo,
                  RCF_ADDINFO_KWD_LEN, RCF_ADDINFO_VAL_LEN, UNIQUE);

   ESA_DIAG_printf(ESA_COMP_ADDRES, 1,
             "DATASET=%s VOLUME=%s", res_params->resource, volume);

   /*   Invoke script to obtain UNIT field value */

   OS_CS_script (admin_params->rss_name,
                 admin_params->rss_type,
                 script_lib_dsn,
                 script_name,
                 FUNC_ADDRES,
                 SCRIPT_PRE,
                 NULL,       /* CTSA0. entity_info  */
                 laddinfo,   /* CTSA1. addinfo      */
                 NULL,       /* CTSA2. cur_addinfo  */
                 NULL,       /*                     */
                 admin_params);
   cpair = ADDINFO_search("UNIT", RCF_ADDINFO_KWD_LEN,
                          laddinfo->pair, laddinfo->num_pairs);
   if (cpair NE NULL)
      ESA_DIAG_printf(ESA_COMP_ADDRES, 1,
                     "UNIT=%s. Obtained from script", cpair->value);
   exit:

   ESA_DIAG_exit(ESA_COMP_ADDRES,1, func, rc );

 }
