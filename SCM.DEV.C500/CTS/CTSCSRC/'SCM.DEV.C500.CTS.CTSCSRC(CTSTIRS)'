 /**************************************************************
 *                                                             *
 * Title            : Add a resource (TSS)                     *
 *                                                             *
 * File Name        : ctstirs.c                                *
 *                                                             *
 * Author           : Shvartsman Alexander                     *
 *                                                             *
 * Creation Date    : 19/01/97                                 *
 *                                                             *
 * Description      :                                          *
 *                                                             *
 * Assumptions and                                             *
 *   Considerations :                                          *
 *                                                             *
 **************************************************************/

 /**************************************************************
 * Mod.Id   Who      When     Description                      *
 * -------- -------- -------- -------------------------------- *
 * PS0252   Guy      13/04/98 Common code changes              *
 * WS10082  MauriC   14/11/22 Recompile for new ADDINFO macros *
 **************************************************************/

 /*
  *   Standard include files
  */

 #include   <globs.h>
 #include   STDIO
 #include   STDLIB
 #include   STRING

 /*
  *   ESA include files
  */

 #include   ESA_API
 #include   ESA_DIAG
 #include   ESA_CTSAMSG
 #include   ESA_API_CODES
 #include   API_ADDINFO

 /*
  *   MVS include files
  */

 #include MVS_COMP

 #include MVS_ONLINE_INTERCEPTOR

 #include MVS_OS_MVS

 /*
  *   TSS include files
  */

 #include TSS
 #include TSS_XRES
 #include TSS_CODES

 static ESA_RC TSS_aux_res_tests(ESA_DIAG_COMP_typ     comp,
                          TSS_GET_RES_HANDLE_typ     * get_handle,
                          RES_PARAMS_rec_typ         * res_params,
                          CTSAMSG_DEST_TABLE_rec_ptr   dest,
                          CTSAMSG_HANDLE_rec_ptr       msgs);

/****************************************************
 * Procedure Name: CTSAddRes
 * Description   : Creadts a resource with non-ACL info
 * Input         : resource, addinfo_res addinfo_data
 * Output        : None
 * Input/Output  : None
 * Return Value  : ESA_RC
 ***************************************************/

 ESA_RC CTSAddRes (RES_PARAMS_rec_typ   * res_params,
           /*      ADDINFO_rec_typ      * addinfo_res,    PS0252 */
                   ADDINFO_rec_typ      * addinfo_data,
                   ADMIN_PARAMS_rec_typ * admin_params,
                   ERR_STRUCT_rec_typ   * err)
 {

  /*
   *    Variables
   */

   ESA_RC                      rc = ESA_OK;
   static char                 func[]="CTSAddRes";
   TSS_GET_RES_HANDLE_typ    * get_handle = NULL;
   void                      * handle = NULL;
   TSS_RES_ITEM_typ          * res = NULL;
   char                      * res_name = NULL;
   ONE_FIELD_rec_ptr           pair;
   TSS_CMD_BUF_rec_typ         cmd = { 0, 0, "" };
   char                        acid[MAX_TSS_PARAM_LEN] = "";
   CTSAMSG_HANDLE_rec_ptr      msgs;
   CTSAMSG_DEST_TABLE_rec_ptr  dest;

  /*
   *   Initialize
   */

   ESA_DIAG_enter(ESA_COMP_ADDRES, 1, func);

   msgs = admin_params->ctsamsg_handle;
   dest = admin_params->ctsamsg_dest;

   if (ESA_DIAG_get_debug_level(ESA_COMP_ADDRES) GE 5) {
       ESA_DIAG_printf(ESA_COMP_ADDRES,0, "addinfo_data");
       ADDINFO_dump(addinfo_data,1);
   }

  /*
   *  Check resource type (except for ACID)
   */

   if (strcmp(res_params->restype,"ACID") NE 0) {
      rc = TSS_check_restype(ESA_COMP_ADDRES,
                             res_params->restype);
      if (rc NE ESA_OK) {
        CTSAMSG_print(ERR_RES_TYPE, msgs, NULL, dest,
                      res_params->restype, res_params->resource);
        rc = ESA_FATAL;
        goto exit;
      }
   }
   else {
      rc = TSS_acid_restype_handling(ESA_COMP_ADDRES,
                                     res_params,
                                     addinfo_data,
                                     admin_params,
                                     err);
      goto exit;
   }

  /*
   *  Initialize res handle
   */

   rc = TSS_init_res_handle(ESA_COMP_ADDRES, &get_handle, &handle ,
                            admin_params, err );
   if ( rc NE ESA_OK )
     goto exit ;

   rc = TSS_get_res_list(ESA_COMP_ADDRES,
                         TSS_CMD_QUIET_MODE,
                         TSS_WHOOWNS_LIST_ONLY,
                         res_params, get_handle,
                         TSS_SAVE_UNIQ_RES_NAME_ONLY,
                         admin_params, err);
   if ( rc NE ESA_OK )
     goto exit;

  /*
   *  Select resource
   */

   rc = TSS_select_res(ESA_COMP_ADDRES, get_handle, res_params,
                       &res, &res_name);

   ESA_DIAG_printf(ESA_COMP_ADDRES, 1,
                   "rc=%d res ptr=%x res_name ptr=%x",
                    rc, res, res_name );

   if ( rc EQ ESA_ERR ) {         /* Res not found */
     rc = ESA_OK;
     pair = ADDINFO_search(TSS_RES_OWNER, TSS_ADDINFO_KWD_LEN,
                           addinfo_data->pair,addinfo_data->num_pairs);
     if ( pair EQ NULL ) {      /* Resource does not have the owner */
       rc = TSS_aux_res_tests(ESA_COMP_ADDRES, get_handle, res_params,
                              dest, msgs );
       goto exit;
     }

    /*
     *  Create command header
     */

     sprintf(cmd.buffer, "ADD(%s) %s(%s) ",
             pair->value,
             TSS_convert_restype(res_params->restype),
             res_params->resource);
     strcpy(acid, pair->value);

    /*
     *  Add resource action fields
     */

     pair = ADDINFO_search("UNDERCUT",
                           TSS_ADDINFO_KWD_LEN,
                           addinfo_data->pair, addinfo_data->num_pairs);
     if ( pair NE NULL ) {
       if ( strcmp(pair->value, KWD_FLAG_ON ) EQ 0 )
         strcat(cmd.buffer, " UNDERCUT ");
     }

     pair = ADDINFO_search("NOPERMIT",
                           TSS_ADDINFO_KWD_LEN,
                           addinfo_data->pair, addinfo_data->num_pairs);
     if ( pair NE NULL ) {
       if ( strcmp(pair->value, KWD_FLAG_ON ) EQ 0 )
         strcat(cmd.buffer, " NOPERMIT ");
     }

     ESA_DIAG_printf(ESA_COMP_ADDRES, 1,"cmd.buffer=%s", cmd.buffer);

     cmd.max_len = strlen(cmd.buffer);
     cmd.use_len = strlen(cmd.buffer);

     rc = TSS_issue_cmd(ESA_COMP_ADDRES, &cmd,
                        acid, TYPE_IGNORE,  /* UNKNOWN */
                        TSS_EVNT_ACTION_UPDATE, admin_params);
   }
   else  {         /* Res found */
     CTSAMSG_print(TSS_RESOURCE_ALREADY_OWNED , msgs, NULL, dest,
                   res_params->resource, res_params->restype);
     CTSAMSG_print(TSS_RESOURCE_DETAILS , msgs, NULL, dest,
                   res->owner,
                   res_params->resource, res_params->restype);
   }

  /*
   *   Finish
   */

   exit:;

   if ( handle NE NULL )
      TSS_free_res_handle(ESA_COMP_ADDRES , &handle, dest, msgs);

   ESA_DIAG_exit(ESA_COMP_ADDRES, 1, func, rc );
   return rc;

 }

 /**************************************************************
 *                                                             *
 * PROCEDURE NAME : TSS_aux_res_tests                          *
 *                                                             *
 * DESCRIPTION    : Select resource                            *
 *                                                             *
 * INPUT          : get_handle   - get res handle              *
 *                  res_params   - resource params structure   *
 *                  comp         - diag component              *
 *                                                             *
 * OUTPUT         : none                                       *
 *                                                             *
 * RETURN VALUE   : ESA_OK , ESA_FATAL, ESA_ERR                *
 *                                                             *
 **************************************************************/

 static ESA_RC TSS_aux_res_tests(ESA_DIAG_COMP_typ     comp,
                          TSS_GET_RES_HANDLE_typ     * get_handle,
                          RES_PARAMS_rec_typ         * res_params,
                          CTSAMSG_DEST_TABLE_rec_ptr   dest,
                          CTSAMSG_HANDLE_rec_ptr       msgs)
 {

   ESA_RC                     rc = ESA_OK;
   int                        i;
   static char                func[]="TSS_aux_res_tests";
   TSS_TRAP_RES_BUF_typ     * trap_buff = get_handle->trap_buffer;
   TSS_RES_INFO_typ         * items;
   TSS_RES_NAMES_AREA_typ   * res_names;
   char                     * wrk;
   TSS_ADD_RES_ERR_MSG_typ    msg_type = TSS_ADD_RES_OK;
   int                        res_len;

  /*
   *    Initialize
   */

   ESA_DIAG_enter(comp, 5, func);

   items     = &(trap_buff->res_info);
   res_names = &(trap_buff->res_names);
   res_len   = strlen(res_params->resource);

   ESA_DIAG_printf(comp, 5,
                   "alloc items=%d used=%d",
                    items->alloc_items, items->used_items);

   if ( items->used_items EQ 0 ) {      /* Res list is empty */
     msg_type = TSS_ADD_RES_ERR_EMPTY_BUFFER;
     goto exit;
   }

  /*
   *  Check whether we have resource with longer name
   */

   for (i=0; i LT items->used_items; i++) {
       wrk = res_names->res_names + items->res_items[i].ref_to_name;
       ESA_DIAG_printf(comp,5, "%d %s %s %s %s %s",
                       i, trap_buff->res_type, wrk,
                       items->res_items[i].owner,
                       items->res_items[i].has_owner,
                       items->res_items[i].ace_acid);
       if ( strlen(wrk) GT res_len ) {
         if (memcmp(wrk, res_params->resource, res_len) EQ 0) {
            msg_type = TSS_ADD_RES_ERR_FOUND_LONGER_NAME;
            goto exit;
         }
       }
   }

  /*
   *    Finish
   */

   exit:;

   switch( msg_type ) {
      case TSS_ADD_RES_OK:
            CTSAMSG_print(TSS_RESOURCE_ALREADY_OWNED , msgs, NULL, dest,
                          res_params->resource, res_params->restype);
            rc = ESA_OK;
            break;
      case TSS_ADD_RES_ERR_EMPTY_BUFFER:
            CTSAMSG_print(TSS_RESOURCE_NOT_OWNED , msgs, NULL, dest,
                          res_params->resource, res_params->restype);
            CTSAMSG_print(TSS_RESOURCE_NOT_OWNED_ORDER ,
                          msgs, NULL, dest);
            rc = ESA_FATAL;
            break;
      case TSS_ADD_RES_ERR_FOUND_LONGER_NAME:
            CTSAMSG_print(TSS_RESOURCE_NOT_OWNED , msgs, NULL, dest,
                          res_params->resource, res_params->restype);
            CTSAMSG_print(TSS_RESOURCE_IS_PREFIX_ORDER1,
                          msgs, NULL, dest);
            CTSAMSG_print(TSS_RESOURCE_IS_PREFIX_ORDER2,
                          msgs, NULL, dest);
            rc = ESA_FATAL;
            break;
      defailt :
            rc = ESA_OK;
            break;
   }

   ESA_DIAG_exit(comp, 5, func, rc);
   return rc;

}

