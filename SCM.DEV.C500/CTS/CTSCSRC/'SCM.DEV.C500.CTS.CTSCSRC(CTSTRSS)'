/**************************************************************
*                                                             *
* Title            : oe related functions                     *
*                                                             *
* File Name        : ctstrss.c                                *
*                                                             *
* Author           : Alexander Shvartsman                     *
*                                                             *
* Creation Date    : 09/10/96                                 *
*                                                             *
* Description      :                                          *
*                                                             *
* Assumptions and                                             *
*   Considerations :                                          *
*                                                             *
**************************************************************/

/**************************************************************
* Mod.Id   Who      When     Description                      *
* -------- -------- -------  -------------------------------- *
* ps0310   Alex     09/09/98 Common Offline Interceptor supp  *
* BS2432   AlexS    13/09/00 Supress "acid does not exist"    *
*                            messages                         *
* WS2531   AmirH    12Oct04  Add CTSVersion                   *
* IS10022  AvnerL   01Jul08  Update CTSVersion with 3.2.03.   *
* IS10127  AvnerL   08SEP14  Update CTSVersion with 3.3.03.   *
*SAS2IBMN  NuritY   24Jan17  Update CTSVersion with 4.0.03.   *
* WS10082A AvnerL   12NOV23  Remove API_ADDINFO               *
**************************************************************/

 #include   <globs.h>

 /*
  *   Standard include files
  */

 #include   STDIO
 #include   STDLIB
 #include   STRING

 /*
  *   ESA include files
  */

 #include ESA_DIAG
 #include ESA_CTSAMSG
 #include ESA_API
 #include ESA_API_CODES

 /*WS10082A #include API_ADDINFO --- not used */

 /*
  *   TSS include files
  */

 #include TSS

/****************************************************
 * Procedure Name: Is_acid_in_oe
 * Description   : User/Group/OE belong to the OE
 * Input         : acid         - User name, Group name, OE name
 *                 oe           - OE
 * Output        :
 * Return Value  : ESA_OK     User in OE
 *                 ESA_EOF    User not in OE
 *                 ESA_ERR    on any other situation
 ***************************************************/

 static ESA_RC Is_acid_in_oe(char                  * acid,
                             OE_typ                  oe,
                             ADMIN_PARAMS_rec_typ  * admin_params,
                             ERR_STRUCT_rec_typ    * err)
{

   ESA_RC                       rc   = ESA_OK;
   static char                  func[]="Is_acid_in_oe";
   ESA_DIAG_COMP_typ            comp = ESA_COMP_ISINOE;
   TSS_ACID_HEADER_rec_typ      acid_info;
   CTSAMSG_HANDLE_rec_typ     * msgs;
   CTSAMSG_DEST_TABLE_rec_typ * dest;
   char                         root_name[MAX_TSS_PARAM_LEN + 1];


   ESA_DIAG_enter(comp, 4, func);

   ESA_DIAG_printf(comp, 4, "Entering params:acid=%s oe=%s",
                   acid, oe);

   msgs = admin_params->ctsamsg_handle;
   dest = admin_params->ctsamsg_dest;

   TSS_use_root_object(comp,root_name,dest,msgs);

   if ( (strcmp(acid, root_name) EQ 0 ) OR
        (strcmp(oe,   root_name) EQ 0 )  )
     goto exit;

  /*
   * For some, unclear reasons the common code calls
   * to this function with an empty acid.
   * To prevent get operation with an empty acid the code below.
   */

   if ( (strlen(acid) EQ 0 ) OR
        (strlen(oe)   EQ 0 )  ) {
       rc = ESA_ERR;
       goto exit;
   }

   /***  Get acid info  ***/

   rc = TSS_get_acid_header(comp,
                /* BS2432   TSS_CMD_DEFAULT_MODE,    */
                            TSS_CMD_WEAK_QUIET_MODE, /* BS2432 */
                            acid, &acid_info,
                            admin_params, err);
   if ( rc NE ESA_OK ) {
       rc = ESA_ERR;
       goto exit;
   }

   /*  Verify ACID  */

   ESA_DIAG_printf(comp, 5, "acid=%s info.acid=%s",
                   acid, acid_info.acid);
   if ( strcmp(acid, acid_info.acid) NE 0 ) {
       rc = ESA_ERR;
       goto exit;
   }

   /*  Is oe department ? */

   ESA_DIAG_printf(comp, 5, "oe=%s info.dept_acid=%s",
                   oe, acid_info.dept_acid);
   if ( strcmp(oe, acid_info.dept_acid) EQ 0 )
       goto exit;

   /*  Is oe division ? */

   ESA_DIAG_printf(comp, 5, "oe=%s info.div_acid=%s",
                   oe, acid_info.div_acid);
   if ( strcmp(oe, acid_info.div_acid) EQ 0 )
       goto exit;

   /*  Is oe zone ? */

   ESA_DIAG_printf(comp, 5, "oe=%s info.zone_acid=%s",
                   oe, acid_info.zone_acid);
   if ( strcmp(oe, acid_info.zone_acid) EQ 0 )
       goto exit;

   /*
    *  Obtained acid does not belong to recieved oe
    *  Neither department, nor division, nor zone
    */

   rc = ESA_EOF;

  exit :;

   ESA_DIAG_exit(comp, 4, func, rc);

   return rc;
}

/****************************************************
 * Procedure Name: CTSIsUserInOE
 * Description   : User belong to the OE
 * Input         : user_type    - User name.
 *                 oe_mask      - OE mask.
 *                 admin_params -
 * Output        :
 * Return Value  : ESA_OK     User in OE
 *                 ESA_EOF    User not in OE
 *                 ESA_ERR    on any other situation
 ***************************************************/

 ESA_RC CTSIsUserInOE(USER_typ               user,
                      OE_typ                 oe_mask,
                      ADMIN_PARAMS_rec_typ * admin_params,
                      ERR_STRUCT_rec_typ   * err)
{
   ESA_DIAG_COMP_typ     comp = ESA_COMP_ISINOE;
   static char           func[]="CTSIsUserInOE";
   ESA_RC                rc;

   ESA_DIAG_enter(comp, 4, func);

   rc = Is_acid_in_oe( (char *)user, oe_mask, admin_params, err);

   ESA_DIAG_exit(comp, 4, func, rc);

   return rc;
}

/****************************************************
 * Procedure Name: CTSIsUGInOE
 * Description   : Group belong to the OE
 * Input         : ug_type      - Group name.
 *                 oe_mask      - OE mask.
 *                 admin_params -
 * Output        :
 * Return Value  : ESA_OK     Group in OE
 *                 ESA_EOF    Group not in OE
 *                 ESA_ERR    on any other situation
 ***************************************************/

 ESA_RC CTSIsUGInOE(UG_typ                 ug,
                    OE_typ                 oe_mask,
                    ADMIN_PARAMS_rec_typ * admin_params,
                    ERR_STRUCT_rec_typ   * err)
{
   ESA_DIAG_COMP_typ     comp = ESA_COMP_ISINOE;
   static char           func[]="CTSIsUGInOE";
   ESA_RC                rc;

   ESA_DIAG_enter(comp, 4, func);

   rc = Is_acid_in_oe( (char *)ug, oe_mask, admin_params, err);

   ESA_DIAG_exit(comp, 4, func, rc);

   return rc;
}

/****************************************************
 * Procedure Name: CTSIsOEInOE
 * Description   : OE belong to the OE
 * Input         : oe_name      - OE name.
 *                 oe_mask      - OE mask.
 *                 admin_params -
 * Output        :
 * Return Value  : ESA_OK     OE in OE
 *                 ESA_EOF    OE not in OE
 *                 ESA_ERR    on any other situation
 ***************************************************/

 ESA_RC CTSIsOEInOE(OE_typ                 oe_name,
                    OE_typ                 oe,
                    ADMIN_PARAMS_rec_typ * admin_params,
                    ERR_STRUCT_rec_typ   * err)
{
   ESA_DIAG_COMP_typ     comp = ESA_COMP_ISINOE;
   static char           func[]="CTSIsOEInOE";
   ESA_RC                rc;

   ESA_DIAG_enter(comp, 4, func);

   rc = Is_acid_in_oe( (char *)oe_name, oe, admin_params, err);

   ESA_DIAG_exit(comp, 4, func, rc);

   return rc;
}

/****************************************************
 * Procedure Name: CTSIsMaskMatch
 * Description   : Object is matches a Mask
 * Input         : object.
 *
 *                 admin_params -
 * Output        :
 * Return Value  : ESA_OK     Mask is Match
 *                 ESA_EOF    Mask is not Match
 *                 ESA_ERR    on any other situation
 ***************************************************/

 ESA_RC CTSIsMaskMatch(char                 * object  ,
                       char                 * mask,
                       OBJECT_TYPE_typ        object_type,
                       MASK_TYPE_typ          mask_type,
                       ADMIN_PARAMS_rec_typ * admin_params,
                       ERR_STRUCT_rec_typ   * err)

{

   ESA_DIAG_COMP_typ     comp =  ESA_COMP_ISMASKMATCH;
   static char           func[]="CTSIsMaskMatch";
   ESA_RC                rc = ESA_OK;

   /*  Initialize  */

   ESA_DIAG_enter(comp, 4, func);

   switch ( mask_type )  {
    case MASK_REGULAR :  /* Exactly match compare */

                         ESA_DIAG_printf(comp, 4,
                                    "MASK_REGULAR: object=%s mask=%s",
                                     object, mask );

                         if ( strcmp(object, mask ) EQ 0 )
                            rc = ESA_OK;
                         else
                            rc = ESA_EOF;
                         break;

    case MASK_WILD    :  /* Compare according wild mask */

                         ESA_DIAG_printf(comp, 4,
                                  "MASK_WILD: object=%d/%s mask=%d/%s",
                         strlen(object), object, strlen(mask),   mask );

                         if ( strlen(object) LT strlen(mask) )
                            rc = ESA_EOF;
                         else {
                            if ( memcmp(object, mask, strlen(mask) )
                                                              EQ 0 )
                                rc = ESA_OK;
                            else
                                rc = ESA_EOF;
                         }
                         break;

    default           :  rc = ESA_ERR;
   }

   /*  Finish  */

   exit:;

   ESA_DIAG_exit(comp, 4, func, rc);

   return rc;

}

/* ps0310 */
/****************************************************
 * Procedure Name: CTSTransactionEvent
 * Description   : Notify USAAPI of ESS transaction completion
 * Input         : Object type , container , user , group
 * Output        : None
 * Input/Output  : None
 * Return Value  : ESA_RC
 ***************************************************/

ESA_RC CTSTransactionEvent(INTERCEPT_obj_typ       object_type ,
                           OE_typ                  oe ,
                           USER_typ                user,
                           UG_typ                  ug ,
                           TRNSEVNT_UPCON_FLAG_typ connflag ,
                           ADMIN_PARAMS_rec_typ  * admin_params,
                           ERR_STRUCT_rec_typ    * err)
{

   return ESA_OK;

}

/****************************************************
 * Procedure Name : CTSVersion
 * Description    : return API version
 * Input          :
 * Output         : api_version
 * Return Value   : ESA_RC
 * Comments       : Platform-dependent operations to be performed
 *                  prior to any API call.     ws2531
 ***************************************************/
 ESA_RC CTSVersion (RSS_vers_typ  version)

 {

   ESA_RC rc = ESA_OK;
   /*strcpy (version, "3.2.03");                          *IS10022*/
   /*sas2ibmn strcpy (version, "3.3.03");                 *IS10127*/
   strcpy (version, "4.0.03");                           /* SAS2IBMN */
   return (rc) ;

 }
