 /**************************************************************
 * Title            : RACF_pro_user function only              *
 * File Name        : ctsrpro.c                                *
 * Author           : Avner Livny                              *
 * Creation Date    : 14/06/17                                 *
 * Description      : Check whether a RACF user is protected.  *
 * Background: This element ctsrpro should include only this   *
 * single function, RACF_pro_user. It may be called either as  *
 * usual, by function, or by ptr after calling ctsaldm.        *
 * Its entry point is like its short function name.            *
 * RACF_pro_user is copied from CTSRCHK.                       *
 * Since module may be called either as an indepedent module   *
 * or as part of CTSCRCF, diagnostic calls should be direct as *
 * coded below. Messages should not be called at all.          *
 *                                                             *
 *                  ===> BS10102 <===                          *
 * IS101812 introduced a change in the definition of the diag  *
 * routine pointed by cs_func pointer. After this change       *
 * programs cannot call diags using this pointer any more.     *
 * The only "user" of this pointer is the SPI ESA_diag_printf  *
 * "glue" routine in CTSCSRV.                                  *
 * Therefore:                                                  *
 * 1. All diag calls should be done using ESA_diag_xxx routines*
 *    (the "glue" routines in CTSCSRV) and not using the       *
 *    pointers in cs_func.                                     *
 * 2. To support using this program as a stand-alone program   *
 *    which is dynamically loaded, init_global_admin_params    *
 *    has to be called to initialize the pointers in CTSCSRV   *
 *    (link-edited with this program) that are required for    *
 *    diag and messages.                                       *
 *    This has to be done as first thing before any diag or    *
 *    message is issued.                                       *
 * 3. From this change on, messages can also be issued from    *
 *    this program (not checked)                               *
 **************************************************************/

 /**************************************************************
 * Mod.Id   Who      When     Description                      *
 * -------- -------- -------  -------------------------------- *
 * protect  AvnerL   14/06/17 Created Empty pswd 4 protected.  *
 * IS10174  NuritY   14/05/18 Use MS_YES and MS_NO instead of  *
 *                            RACF_YES and RACF_NO             *
 * IS10182  AvnerL   17/07/19  S0C4/S0C1 due to DIAG vsprintf  *
 * BS10102  AvnerL   30/07/19 S0C1 when protected user&IS10182 *
 **************************************************************/
 #include   <globs.h>

 /*
  *   Standard include files
  */

 #include   STDIO
 #include   STDLIB
 #include   STRING

 /*
  *   CONTROL-SA include files
  */

 #include ESA_DIAG
 #include ESA_CTSAMSG
 #include ESA_API_CODES
 #include ESA_RSS

 #include MVS_COMP

 #include RACF
 #include RACF_CODES
 #include RACF_CODES

 static char component[]="CTSRPRO";
  extern int ctsfrch ();                                  /* SAS2IBMT */
 /*
  *    Global Variables
  */

  static char function[8], object[8];
  static char msg_buf[100];
  static int  dbglvl = 0;
  static int  racf_rc, racf_reason , extr_rc ;

 #define BLOCK_STR(a,b)                   \
       memset(a, BLANK, sizeof(a) );      \
       if ( strlen(b) LE sizeof(a) )      \
          memcpy(a,b,strlen(b));


 /**************************************************************
 *                                                             *
 * PROCEDURE NAME : RACF_pro_user - added by PS0460            *
 *                                                             *
 * DESCRIPTION    : Check RACF user PROTECTED attribute        *
 *                                                             *
 * INPUT          : user     - User name                       *
 *                  msg_flag - Issue existance error message   *
 *                  dest     - Vector of error msg dests       *
 *                  msgs     - Error messages buffer           *
 *                                                             *
 * OUTPUT         : protect  - MC_NO -Not Protected            *
 *                           - MS_YES- No Password=Protected   *
 * RETURN VALUE   : ESA_RC                                     *
 *                                                             *
 *                  ESA_OK   - Test OK                         *
 *                  ESA_ERR  - Test FAILED No user             *
 *                  ESA_FATAL- Test FAILED Internal Error      *
 *                                                             *
 **************************************************************/
 ESA_RC RACF_pro_user(char                     * user,
                      MS_FLAG_typ           * protect,
 /* protect           int                      msg_flag, */
 /* protect */      ADMIN_PARAMS_rec_typ * admin_params)
 /* protect           CTSAMSG_DEST_TABLE_rec_ptr   dest,
                      CTSAMSG_HANDLE_rec_ptr       msgs) */
 {

  static char func[]="RACF_pro_user";
  ESA_RC pro_rc, rc;
  CTSAMSG_DEST_TABLE_rec_ptr dest;                      /* protect */

 /*   call init_global_admin_params                        BS10102 */
  init_global_admin_params(admin_params);               /* BS10102 */

  dest = admin_params->ctsamsg_dest;                    /* protect */
 /*
  *   Initialize
  *
      Replace all DIAG calls to direct calls           protect *
      All msgs are dropped and should be issued by the caller */
  /* BS10102
  admin_params->cs_func.DIAG_enter_ptr(PLT_COMP_API_RACF,1,func); */
  ESA_DIAG_enter(PLT_COMP_API_RACF,1,func);             /* BS10102 */
  /* protect ESA_DIAG_enter(PLT_COMP_API_RACF,1,func); */

  /* protect ESA_DIAG_printf(PLT_COMP_API_RACF,1, */
  /*IS10182admin_params->cs_func.DIAG_printf_ptr(PLT_COMP_API_RACF,1,*/

  ESA_DIAG_printf(PLT_COMP_API_RACF,1,                    /*IS10182*/
                  "User=%s", user);

  /* protect dbglvl = ESA_DIAG_get_debug_level(PLT_COMP_API_RACF);*/
  /* BS10102
  dbglvl = admin_params->cs_func.DIAG_get_debug_level_ptr(
              PLT_COMP_API_RACF);                       * protect * */
  dbglvl = ESA_DIAG_get_debug_level(PLT_COMP_API_RACF); /* BS10102*/

 /*
  *   Check user PROTECTED
  */

  BLOCK_STR(function, "PROTECT")
  BLOCK_STR(object, user);

  /* SAS2IBMT
  rc = ctsfrch(&dbglvl, &racf_rc, &racf_reason, &extr_rc,            */
  rc = (*(ASM_RTN_TYP *)&ctsfrch)                         /* SAS2IBMT */
              (&dbglvl, &racf_rc, &racf_reason, &extr_rc,
               function, object);

 /*
  *   Examine rc
  */

  /* protect ESA_DIAG_printf(PLT_COMP_API_RACF,1, */
 /*admin_params->cs_func.DIAG_printf_ptr(PLT_COMP_API_RACF,1,*protect*/
  ESA_DIAG_printf(PLT_COMP_API_RACF,1, /*IS10182 protect*/
                  "racf_rc=%d-%d-%d racf protected check rc=%d",
                   racf_rc, racf_reason, extr_rc, rc);

  switch (rc) {

    case 0:
      /* IS10174 *protect = RACF_NO;     */
      *protect = MS_NO;                                  /* IS10174 */
       pro_rc = ESA_OK;
       /*admin_params->cs_func.DIAG_printf_ptr(PLT_COMP_API_RACF,6,*/
       ESA_DIAG_printf(PLT_COMP_API_RACF,6,             /*IS10182*/
                  "User <%s> is not protected.",user);  /*protect*/
       break;

    case 1:
      /* IS10174 *protect = RACF_YES;   */
      *protect = MS_YES;                                 /* IS10174 */
       pro_rc  = ESA_OK;
       /*admin_params->cs_func.DIAG_printf_ptr(PLT_COMP_API_RACF,6,*/
       ESA_DIAG_printf(PLT_COMP_API_RACF,6,          /*IS10182*/
                  "User <%s> is protected.",user);   /*protect*/
       break;

    case 4:
       pro_rc = ESA_ERR;
       /*admin_params->cs_func.DIAG_printf_ptr(PLT_COMP_API_RACF,6,*/
       ESA_DIAG_printf(PLT_COMP_API_RACF,6,            /*IS10182*/
                  "User <%s> does not exist.",user);   /*protect*/
       /* protect if (msg_flag)
          CTSAMSG_print( ERR_NO_USER, msgs, NULL, dest, user ); */
       break;

    default:
       pro_rc = ESA_FATAL;
       /*admin_params->cs_func.DIAG_printf_ptr(PLT_COMP_API_RACF,6,*/
       ESA_DIAG_printf(PLT_COMP_API_RACF,6,             /*IS10182*/
          "RACF error when handling user=(%s>.",user);  /*protect*/
       /* protect CTSAMSG_print(RACF_FAILED_EXAMINE,msgs,NULL,dest, *
       admin_params->cs_func.MSG_printf_ptr(RACF_FAILED_EXAMINE,
              msgs, NULL, dest, "USER", user ); /* protect *
       /* protect CTSAMSG_print(RACF_EXTRACTOR_ERR_RC,msgs,NULL,dest,*
       admin_params->cs_func.MSG_printf_ptr(RACF_EXTRACTOR_ERR_RC,
         msgs, NULL, dest, racf_rc, racf_reason, extr_rc, component);*/
       break;
  }

 /*
  *    Finish
  */

  /* protect ESA_DIAG_exit(PLT_COMP_API_RACF,1,func,pro_rc ); */
  /* BS10102
  admin_params->cs_func.DIAG_exit_ptr(PLT_COMP_API_RACF,1,
                                      func,pro_rc);      *protect* */
  ESA_DIAG_exit(PLT_COMP_API_RACF,1,func,pro_rc); /*protect BS10102*/
  return pro_rc;

 }

