/**************************************************************
*                                                             *
* Title            : ASN1 parse routine (digital certficate)  *
*                                                             *
* File Name        : ctscdgt.c                                *
*                                                             *
* Author           : Alexander Shvartsman                     *
*                                                             *
* Creation Date    : 22/07/98                                 *
*                                                             *
* Description      :                                          *
*                                                             *
* Assumptions and                                             *
*   Considerations :                                          *
*                                                             *
**************************************************************/

/**************************************************************
* Mod.Id   Who      When     Description                      *
* -------- -------- -------  -------------------------------- *
* BS2712   YoniMa   25/07/06 Support '@' + date in dig cert.  *
* BS2714   YoniMa   13/09/06 Update Issure format.            *
* BS2717   YoniMa   04/10/06 Add parm for addinfo allocation. *
* IS10110  AvnerL   26/12/13 drop digital cert msgs.          *
* SAS2IBMT SeligT   16/02/17 SAS/C to IBM C Conversion Project*
**************************************************************/
#include   <globs.h>

/*
 *   Standard include files
 */

#include   STDIO
#include   STDLIB
#include   STRING
#include   CTYPE

/*
 *   ESA include files
 */

#include   ESA_DIAG
#include   ESA_API
#include   ESA_CTSAMSG
#include   ESA_API_CODES
#include   MVS_COMP
#include   RACF

static char from_ascii[] =  {
  0x00, 0x01, 0x02, 0x03, 0x37, 0x2D, 0x2E, 0x2F,    /* 0x00 ... 0x07 */
  0x16, 0x05, 0x25, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,    /* 0x08 ... 0x0F */
  0x10, 0x11, 0x12, 0x13, 0x3C, 0x3D, 0x32, 0x26,    /* 0x10 ... 0x17 */
  0x18, 0x19, 0x3F, 0x27, 0x1C, 0x1D, 0x1E, 0x1F,    /* 0x18 ... 0x1F */
  0x40, 0x5A, 0x7F, 0x7B, 0x5B, 0x6C, 0x50, 0x7D,    /* 0x20 ... 0x27 */
  0x4D, 0x5D, 0x5C, 0x4E, 0x6B, 0x60, 0x4B, 0x61,    /* 0x28 ... 0x2F */
  0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,    /* 0x30 ... 0x37 */
  0xF8, 0xF9, 0x7A, 0x5E, 0x4C, 0x7E, 0x6E, 0x6F,    /* 0x38 ... 0x3F */
  0x7C, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,    /* 0x40 ... 0x47 */
  0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6,    /* 0x48 ... 0x4F */
  0xD7, 0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6,    /* 0x50 ... 0x57 */
  0xE7, 0xE8, 0xE9, 0xBA, 0xE0, 0xBB, 0xB0, 0x6D,    /* 0x58 ... 0x5F */
  0x79, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,    /* 0x60 ... 0x67 */
  0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96,    /* 0x68 ... 0x6F */
  0x97, 0x98, 0x99, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6,    /* 0x70 ... 0x77 */
  0xA7, 0xA8, 0xA9, 0xC0, 0x4F, 0xD0, 0xA1, 0x07,    /* 0x78 ... 0x7F */
  0x20, 0x21, 0x22, 0x23, 0x24, 0x15, 0x06, 0x17,    /* 0x80 ... 0x87 */
  0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x09, 0x0A, 0x1B,    /* 0x88 ... 0x8F */
  0x30, 0x31, 0x1A, 0x33, 0x34, 0x35, 0x36, 0x08,    /* 0x90 ... 0x97 */
  0x38, 0x39, 0x3A, 0x3B, 0x04, 0x14, 0x3E, 0xE1,    /* 0x98 ... 0x9F */
  0x41, 0x42, 0x4A, 0x44, 0x45, 0x46, 0x47, 0x48,    /* 0xA0 ... 0xA7 */
  0x49, 0xB4, 0x52, 0x53, 0x5F, 0x55, 0x56, 0x57,    /* 0xA8 ... 0xAF */
  0x58, 0x59, 0x62, 0x63, 0x64, 0x65, 0x66, 0xB3,    /* 0xB0 ... 0xB7 */
  0x68, 0x69, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75,    /* 0xB8 ... 0xBF */
  0x20, 0x21, 0x22, 0x23, 0x24, 0x15, 0x06, 0x17,    /* 0x80 ... 0x87 */
  0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x09, 0x0A, 0x1B,    /* 0x88 ... 0x8F */
  0x30, 0x31, 0x1A, 0x33, 0x34, 0x35, 0x36, 0x08,    /* 0x90 ... 0x97 */
  0x38, 0x39, 0x3A, 0x3B, 0x04, 0x14, 0x3E, 0xE1,    /* 0x98 ... 0x9F */
  0x41, 0x42, 0x4A, 0x44, 0x45, 0x46, 0x47, 0x48,    /* 0xA0 ... 0xA7 */
  0x49, 0xB4, 0x52, 0x53, 0x5F, 0x55, 0x56, 0x57,    /* 0xA8 ... 0xAF */
  0x58, 0x59, 0x62, 0x63, 0x64, 0x65, 0x66, 0xB3,    /* 0xB0 ... 0xB7 */
  0x68, 0x69, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75,    /* 0xB8 ... 0xBF */
  0x76, 0x77, 0x78, 0x80, 0x8A, 0x8B, 0x8C, 0x8D,    /* 0xC0 ... 0xC7 */
  0x8E, 0x8F, 0x90, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E,    /* 0xC8 ... 0xCF */
  0x9F, 0xA0, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xBF,    /* 0xD0 ... 0xD7 */
  0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7,    /* 0xD8 ... 0xDF */
  0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,    /* 0xE0 ... 0xE7 */
  0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xDA, 0xDB,    /* 0xE8 ... 0xEF */
  0xDC, 0xDD, 0xDE, 0xDF, 0xEA, 0xEB, 0xEC, 0xE1,    /* 0xF0 ... 0xF7 */
  0xEE, 0xEF, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,    /* 0xF8 ... 0xFF */
 };
static int i_ascii;
#define STR_TO_EBCDIC(buffer,len)                         \
 {                                                        \
    for (i_ascii=0;i_ascii LT (len);i_ascii++)            \
       (buffer)[i_ascii]= from_ascii [(buffer)[i_ascii]]; \
 }

#define CHR_TO_EBCDIC(ch)                                 \
 {                                                        \
    ch = from_ascii[ch];                                  \
 }

/**  For PARSE **/

static   int  utctime_c;
static   int  parse_index;
static   int  asn1buf_nb;
static   int  validity_period;
static   int  serial_number;
static   char ebcdic_buffer [2048];
static   char    msg_buf[500];
static   ESA_RC  parse_rc = ESA_OK;
static   CTSAMSG_DEST_TABLE_rec_ptr dest;
static   CTSAMSG_HANDLE_rec_ptr     msgs;
static   char *r_serial_number;
static   char *r_issuer_name  ;
static   char *r_valid_date   ;
static   char *r_expired_date ;
static   char *r_subject_name ;

static char component[] = "CTSCDGT";

/* Structure to hold info on an ASN.1 item */

typedef struct {
        int id;                 /* Identifier/tag */
        long len;               /* Data length */
        int indefinite;         /* Item has indefinite length */
        int headerSize;         /* Size of tag+length */
        int header [16] ;       /* Tag+length data */
        } ASN1_ITEM;

/*
    #define FALSE   0
    #define TRUE    1
 */

/* Function prototypes */
static unsigned char buf_fgetc( char *asn1buf);   /* added  SAS2IBMT */

static unsigned char buf_getc( char *asn1buf);    /* added  SAS2IBMT */
/*
static OIDINFO * getOIDinfo ( char *oid, const int oidLength );  */

static char * dumpHex( char *asn1buf, long length, int level);

static char * GetStringValue( char *asn1buf, long length, int level );

static char * getIntValue( char *asn1buf, const long length );

static void   parseConstructed( char      *asn1buf,
                                int        level,
                                ASN1_ITEM *item );

static void   parseASN1object( char *asn1buf,
                               ASN1_ITEM *item,
                               int level);

static int    getItem( char *asn1buf, ASN1_ITEM *item );

static int    parseAsn1( char  *asn1buf, int level, long length,
                         int    isIndefinite );

/*** Buffer processing functions ***/

static int obtain_buf_idx(void)
{
   return parse_index;
}

static unsigned char buf_fgetc( char *asn1buf)
{
   static unsigned char   c;              /* make it static SAS2IBMT */
   c = asn1buf[parse_index];
   parse_index++;
   return c;
}

static unsigned char buf_getc( char *asn1buf)
{
   static unsigned char   c;              /* make it static SAS2IBMT */

   c = asn1buf[parse_index];
   parse_index++;
   return c;
}

static int if_buf_ended (void )
{
   if ( (parse_index+1) >= asn1buf_nb)
      return TRUE;
   else
      return FALSE;
}

static void set_buf_idx ( int offset )
{
   parse_index += offset;
}

static int get_buf_info( char *oid, int items,
                      int  len, char   *asn1buf )
{
    int    ix=0;

    for (; (ix LT (len * items) ) AND
           (parse_index LT asn1buf_nb); parse_index++, ix++)
       oid[ix] = asn1buf[parse_index];

    return items;
}

/* Dump the header bytes for an object */

static void dumpHeader( char *asn1buf, const ASN1_ITEM *item )
{
 int  i;
 int  len;
 char wrk1_buffer[10];
 char temp_buffer[80];

 len = sizeof(temp_buffer) - 1;
 if (item->headerSize LT len)
   len = item->headerSize;

 /* Dump the tag and length bytes */
  sprintf(temp_buffer, "<%02X", *item->header );
  for( i = 1; i LT len; i++ ) {
     sprintf(wrk1_buffer,  " %02X", item->header [i]  );
     strcat(temp_buffer, wrk1_buffer);
  }
  strcat(temp_buffer, ">");
  ESA_DIAG_printf(PLT_COMP_API_RACF,1, "Header=%s", temp_buffer);
}

/* Tag classes */

#define CLASS_MASK    0xC0    /* Bits 8 and 7 */
#define UNIVERSAL     0x00    /* 0 = Universal (defined by ITU X.680) */
#define APPLICATION   0x40    /* 1 = Application */
#define CONTEXT       0x80    /* 2 = Context-specific */
#define PRIVATE       0xC0    /* 3 = Private */

/* Encoding type */

#define FORM_MASK     0x20    /* Bit 6 */
#define PRIMITIVE     0x00    /* 0 = primitive */
#define CONSTRUCTED   0x20    /* 1 = constructed */

/* Universal tags */

#define TAG_MASK      0x1F    /* Bits 5 - 1 */
#define EOC           0x00    /*  0: End-of-contents octets */
#define BOOLEAN       0x01    /*  1: TRUE or FALSE */
#define INTEGER       0x02    /*  2: Arbitrary precision integer */
#define BITSTRING     0x03    /*  2: Sequence of bits */
#define OCTETSTRING   0x04    /*  4: Sequence of bytes */
#define NULLTAG       0x05    /*  5: NULL */
#define OID           0x06    /*  6: Object Identifier */
#define OBJDESCRIPTOR 0x07    /*  7: Object Descriptor */
#define EXTERNAL      0x08    /*  8: External / Instance Of */
#define REAL          0x09    /*  9: Real (Mantissa * Base^Exponent) */
#define ENUMERATED    0x0A    /* 10: Enumerated */
#define EMBEDDED_PDV  0x0B    /* 11: Embedded Presentation Data Value */
#define STRUDEL       0x0C    /* 11: strudel */ /* BS2712 */
#define SEQUENCE      0x10    /* 16: Constructed Sequence  */
#define SET           0x11    /* 17: Constructed Set / Set Of */
#define NUMERICSTR    0x12    /* 18: Numeric String (digits only) */
#define PRINTABLESTR  0x13    /* 19: Printable String */
#define T61STR        0x14    /* 20: T61 String (Teletex) */
#define VIDEOTEXSTR   0x15    /* 21: Videotex String */
#define IA5STR        0x16    /* 22: IA5 String */
#define UTCTIME       0x17    /* 23: UTC Time */
#define GENERALIZEDTIME 0x18    /* 24: Generalized Time */
#define GRAPHICSTR    0x19    /* 25: Graphic String */
#define VISIBLESTR    0x1A    /* 26: Visible String (ISO 646) */
#define GENERALSTR    0x1B    /* 27: General String */
#define UNIVERSALSTR  0x1C    /* 28: Universal String */
#define BMPSTR        0x1E    /* 30: Basic Multilingual Plane String */

/* Length encoding */

#define LEN_XTND  0x80 /* Indefinite or long form */
#define LEN_MASK  0x7F /* Bits 7 - 1 */

/* Table of ASN.1 Object Identifiers */

typedef struct {
        const char *oid, *comment, *name, *dist_name;
        } OIDINFO;

static const OIDINFO oidInfo[] = {
/* X.520 */
{ "\x06\x03\x55\x04\x00", "X.520 id-at (2 5 4)",
  "objectClass (2 5 4 0)", "" },
{ "\x06\x03\x55\x04\x01", "X.520 id-at (2 5 4)",
  "aliasObjectName (2 5 4 1)", "" },
{ "\x06\x03\x55\x04\x02", "X.520 id-at (2 5 4)",
  "knowledgeInformation (2 5 4 2)", "" },
{ "\x06\x03\x55\x04\x03", "X.520 id-at (2 5 4)",
  "commonName (2 5 4 3)" , "CN="},
{ "\x06\x03\x55\x04\x04", "X.520 id-at (2 5 4)",
  "surname (2 5 4 4)" , ""},
{ "\x06\x03\x55\x04\x05", "X.520 id-at (2 5 4)",
  "serialNumber (2 5 4 5)" , ""},
{ "\x06\x03\x55\x04\x06", "X.520 id-at (2 5 4)",
  "countryName (2 5 4 6)", "C=" },
{ "\x06\x03\x55\x04\x07", "X.520 id-at (2 5 4)",
  "localityName (2 5 4 7)", "L=" },
{ "\x06\x03\x55\x04\x08", "X.520 id-at (2 5 4)",
  "stateOrProvinceName (2 5 4 8)", "SP=" },
{ "\x06\x03\x55\x04\x09", "X.520 id-at (2 5 4)",
  "streetAddress (2 5 4 9)" , "" },
{ "\x06\x03\x55\x04\x0A", "X.520 id-at (2 5 4)",
  "organizationName (2 5 4 10)" , "O="},
{ "\x06\x03\x55\x04\x0B", "X.520 id-at (2 5 4)",
  "organizationalUnitName (2 5 4 11)" , "OU=" },
{ "\x06\x03\x55\x04\x0C", "X.520 id-at (2 5 4)",
/*  "title (2 5 4 12)" , "" },     BS2714 */
  "title (2 5 4 12)" , "T=" },  /* BS2714 */
{ "\x06\x03\x55\x04\x0D", "X.520 id-at (2 5 4)",
  "description (2 5 4 13)" , "" },
{ "\x06\x03\x55\x04\x0E", "X.520 id-at (2 5 4)",
  "searchGuide (2 5 4 14)" , "" },
{ "\x06\x03\x55\x04\x0F", "X.520 id-at (2 5 4)",
  "businessCategory (2 5 4 15)" , ""},
{ "\x06\x03\x55\x04\x10", "X.520 id-at (2 5 4)",
  "postalAddress (2 5 4 16)" , "" },
{ "\x06\x03\x55\x04\x11", "X.520 id-at (2 5 4)",
  "postalCode (2 5 4 17)" , ""},
{ "\x06\x03\x55\x04\x12", "X.520 id-at (2 5 4)",
  "postOfficeBox (2 5 4 18)" , "" },
{ "\x06\x03\x55\x04\x13", "X.520 id-at (2 5 4)",
  "physicalDeliveryOfficeName (2 5 4 19)", "" },
{ "\x06\x03\x55\x04\x14", "X.520 id-at (2 5 4)",
  "telephoneNumber (2 5 4 20)" , "" },
{ "\x06\x03\x55\x04\x15", "X.520 id-at (2 5 4)",
  "telexNumber (2 5 4 21)" , ""},
{ "\x06\x03\x55\x04\x16", "X.520 id-at (2 5 4)",
  "teletexTerminalIdentifier (2 5 4 22)", "" },
{ "\x06\x03\x55\x04\x17", "X.520 id-at (2 5 4)",
  "facsimileTelephoneNumber (2 5 4 23)" , ""},
{ "\x06\x03\x55\x04\x18", "X.520 id-at (2 5 4)",
  "x121Address (2 5 4 24)" , ""},
{ "\x06\x03\x55\x04\x19", "X.520 id-at (2 5 4)",
  "internationalISDNNumber (2 5 4 25)", "" },
{ "\x06\x03\x55\x04\x1A", "X.520 id-at (2 5 4)",
  "registeredAddress (2 5 4 26)" , ""},
{ "\x06\x03\x55\x04\x1B", "X.520 id-at (2 5 4)",
  "destinationIndicator (2 5 4 27)", "" },
{ "\x06\x03\x55\x04\x1C", "X.520 id-at (2 5 4)",
  "preferredDeliveryMehtod (2 5 4 28)" , ""},
{ "\x06\x03\x55\x04\x1D", "X.520 id-at (2 5 4)",
  "presentationAddress (2 5 4 29)" , ""},
{ "\x06\x03\x55\x04\x1E", "X.520 id-at (2 5 4)",
  "supportedApplicationContext (2 5 4 30)", "" },
{ "\x06\x03\x55\x04\x1F", "X.520 id-at (2 5 4)",
  "member (2 5 4 31)" , ""},
{ "\x06\x03\x55\x04\x20", "X.520 id-at (2 5 4)",
  "owner (2 5 4 32)" , ""},
{ "\x06\x03\x55\x04\x21", "X.520 id-at (2 5 4)",
  "roleOccupant (2 5 4 33)" , ""},
{ "\x06\x03\x55\x04\x22", "X.520 id-at (2 5 4)",
  "seeAlso (2 5 4 34)" , ""},
{ "\x06\x03\x55\x04\x23", "X.520 id-at (2 5 4)",
  "userPassword (2 5 4 35)" , ""},
{ "\x06\x03\x55\x04\x24", "X.520 id-at (2 5 4)",
  "userCertificate (2 5 4 36)" , ""},
{ "\x06\x03\x55\x04\x25", "X.520 id-at (2 5 4)",
  "CAcertificate (2 5 4 37)" , ""},
{ "\x06\x03\x55\x04\x26", "X.520 id-at (2 5 4)",
  "authorityRevocationList (2 5 4 38)", "" },
{ "\x06\x03\x55\x04\x27", "X.520 id-at (2 5 4)",
  "certifcateRevocationList (2 5 4 39)" , ""},
{ "\x06\x03\x55\x04\x28", "X.520 id-at (2 5 4)",
  "crossCertificatePair (2 5 4 40)", "" },
{ "\x06\x03\x55\x04\x34", "X.520 id-at (2 5 4)",
  "supportedAlgorithms (2 5 4 52)" , ""},
{ "\x06\x03\x55\x04\x35", "X.520 id-at (2 5 4)",
  "deltaRevocationList (2 5 4 53)" , ""},
{ "\x06\x03\x55\x04\x3A", "X.520 id-at (2 5 4)",
  "crossCertificatePair (2 5 4 58)" , ""},

/* End of Table */
 { NULL, NULL, NULL }
       };

/**************************************************************
*                                                             *
* PROCEDURE NAME : dumpHex                                    *
*                                                             *
* DESCRIPTION    : Return information on an object identifier *
*                                                             *
* INPUT          : oid              - oid header info         *
*                  oidlength        - oid header length       *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : oid info ptr                               *
*                                                             *
**************************************************************/
static OIDINFO *getOIDinfo( char *oid, const int oidLength )
{
  /*
   *      Variables
   */

 static char fn[]= "getOIDinfo";
 char wrk1_buffer[10];
 char temp_buffer[80];
 OIDINFO * rc = NULL;
 int i = 0;
 int j;

  /*
   *      Initialize
   */

 ESA_DIAG_enter(PLT_COMP_API_RACF,1,fn);

 memset( oid + oidLength, 0, 2 );
 while( oidInfo [i] .oid NE NULL ) {
  if( !memcmp( oidInfo [i] .oid + 2, oid, oidLength ) ) {
     ESA_DIAG_printf(PLT_COMP_API_RACF,1,
            "Table index=%d. Length=%d", i, oidLength);
     strcpy(temp_buffer, "oid=");
     for (j=0; j LT oidLength; j++) {
      sprintf(wrk1_buffer, "%02X", oid[j]);
      strcat(temp_buffer, wrk1_buffer);
     }
     ESA_DIAG_printf(PLT_COMP_API_RACF,1, "%s", temp_buffer);
     rc = (OIDINFO *) &oidInfo [i];
  }
  i++;
 }

 exit :;
 ESA_DIAG_exit(PLT_COMP_API_RACF,1, fn, parse_rc);

 return(rc);
}

/**************************************************************
*                                                             *
* PROCEDURE NAME : dumpHex                                    *
*                                                             *
* DESCRIPTION    : Dump data as a string of hex digits        *
*                                                             *
* INPUT          : asn1buf          -  asn1 info buffer       *
*                  length           - data length             *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : char value in char representation          *
*                                                             *
**************************************************************/
static char * dumpHex( char *asn1buf, long length, int level)
{
  /*
   *      Variables
   */

 static char fn[]= "dumpHex";
 char temp_buffer[10];
 long noBytes = length;
 int  ch , i;
 int  first_time = TRUE;

  /*
   *      Initialize
   */

 ESA_DIAG_enter(PLT_COMP_API_RACF,1,fn);

 for( i = 0; i LT noBytes; i++ ) {
    ch = buf_getc( asn1buf );
    sprintf(temp_buffer, "%02X", ch );
    if ( first_time ) {
       first_time = FALSE;
       strcpy(ebcdic_buffer, temp_buffer);
    }
    else {
       strcat(ebcdic_buffer, temp_buffer);
    }
 }

 ESA_DIAG_printf(PLT_COMP_API_RACF,1,
                 "Returned buffer=%s", ebcdic_buffer);

 ESA_DIAG_exit(PLT_COMP_API_RACF,1, fn, parse_rc);

 return ebcdic_buffer;
}

/**************************************************************
*                                                             *
* PROCEDURE NAME : getStringvalue                             *
*                                                             *
* DESCRIPTION    : Get a string value                         *
*                                                             *
* INPUT          : asn1buf          -  asn1 info buffer       *
*                  length           - data length             *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : char value in char representation          *
*                                                             *
**************************************************************/
static char * GetStringValue( char *asn1buf, long length, int level )
{
  /*
   *      Variables
   */

 static char fn[]= "getStringValue";
 char temp_buffer[80];
 int       len=0;
 int       ch;
 int       i;
 long      noBytes = ( length > 384 ) ? 384 : length;

  /*
   *      Initialize
   */

 ESA_DIAG_enter(PLT_COMP_API_RACF,1,fn);

 ebcdic_buffer   [len ]= '\'';
 len++;

 for( i = 0; i LT noBytes; i++ ) {
   ch = buf_getc( asn1buf );
   if( ch LT 0x20 OR ch EQ 0xFF ) {
        sprintf(temp_buffer, "%02X", ch );
        ebcdic_buffer [len ]= temp_buffer[0];
        len++;
        ebcdic_buffer [len ]= temp_buffer[1];
        len++;
   }
   else {
        CHR_TO_EBCDIC( ch ); /* Convert to EBCDIC */
        ebcdic_buffer [len ]= ch;
        len++;
   }
 }

 if( length > 384 ) {
    length -= 384;
    printf( "'\n" );
    sprintf(temp_buffer, "  Another %ld characters skipped  ", length );
    ebcdic_buffer [len ]= '\0';
    strcat(ebcdic_buffer, temp_buffer);
    len = strlen(ebcdic_buffer);
    set_buf_idx( length );
 }
 else {
   ebcdic_buffer [len ]= '\'';
   len++;
 }

 ebcdic_buffer [len ]= '\0';
 ESA_DIAG_printf(PLT_COMP_API_RACF,1,
                 "Returned buffer=%s", ebcdic_buffer);

 ESA_DIAG_exit(PLT_COMP_API_RACF,1, fn, parse_rc);

 return ebcdic_buffer;
}

/**************************************************************
*                                                             *
* PROCEDURE NAME : getIntvalue                                *
*                                                             *
* DESCRIPTION    : Get an integer value                       *
*                                                             *
* INPUT          : asn1buf          -  asn1 info buffer       *
*                  length           - data length             *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : int value in char representation           *
*                                                             *
**************************************************************/
static char * getIntValue( char *asn1buf, const long length )
{
  /*
   *      Variables
   */

  static char fn[]= "getIntValue";
  long  value;
  int   sign = 1, i;

  /*
   *      Initialize
   */

  ESA_DIAG_enter(PLT_COMP_API_RACF,1,fn);

  value = buf_getc( asn1buf );
  if( value & 0x80 )
      sign = -1;
  for( i = 0; i LT length - 1; i++ )
    value = ( value << 8 ) | buf_getc( asn1buf );

  sprintf(ebcdic_buffer, "%d",  value * sign );
  ESA_DIAG_printf(PLT_COMP_API_RACF,1,
                  "Returned buffer=%s", ebcdic_buffer);

  ESA_DIAG_exit(PLT_COMP_API_RACF,1, fn, parse_rc);
  return( ebcdic_buffer );
}

/**************************************************************
*                                                             *
* PROCEDURE NAME : parseASN1object                            *
*                                                             *
* DESCRIPTION    : Print a single ASN.1 object                *
*                                                             *
* INPUT          : asn1buf          -  asn1 info buffer       *
*                                                             *
* OUTPUT         : asn1item                                   *
*                                                             *
* RETURN VALUE   : none                                       *
*                                                             *
**************************************************************/
static void parseASN1object( char *asn1buf,
                             ASN1_ITEM *item,
                             int level)
{
  /*
   *      Variables
   */

  OIDINFO *oidInfo;
  char    *value = NULL;
  char oid[64] ;
  char    year[3] ;   /* BS2712 */
  char    datetime[15] ;   /* BS2712 */
  static char fn[]= "parseASN1object";

  /*
   *      Initialize
   */

  ESA_DIAG_enter(PLT_COMP_API_RACF,1,fn);
  ESA_DIAG_printf(PLT_COMP_API_RACF,6,
    "parseObject item->id=<%x>",item->id);               /*IS10110*/

  if( ( item->id & CLASS_MASK ) EQ UNIVERSAL ) {

    /* Perform a sanity check */
    if( ( ( item->id & TAG_MASK ) NE NULLTAG )
          AND ( item->len LT 0 ) ) {
      sprintf(msg_buf, "Error: Object has bad length field." );
      ESA_DIAG_printf(PLT_COMP_API_RACF,1, "%s", msg_buf);
      /* IS10110 drop msg
      CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest,
                    component, fn, msg_buf, 8, __LINE__); */
      parse_rc = ESA_ERR;
      goto exit;
    }

    if( ( item->id & FORM_MASK ) EQ CONSTRUCTED )
       parseConstructed( asn1buf, level, item );
    else {
       switch( item->id & TAG_MASK ) {
         case BOOLEAN:
            break;

         case INTEGER:
            value = dumpHex( asn1buf, item->len, level);
            break;

          case ENUMERATED:
             value = getIntValue( asn1buf, item->len );
             break;

          case BITSTRING:
          case OCTETSTRING:
             value = dumpHex( asn1buf, item->len, level);
             break;

          case OID:

            get_buf_info( oid, 1, ( size_t ) item->len, asn1buf );
            if( (oidInfo=
                       getOIDinfo(oid, (int)item->len)) NE NULL) {
              if (level EQ 5) {
                ESA_DIAG_printf(PLT_COMP_API_RACF,1,
                                "%d. case OID.", level);
                if (!validity_period) {
                 ESA_DIAG_printf(PLT_COMP_API_RACF,1,
                                 "Issuer Name=%s", oidInfo->dist_name);
                 strcat(r_issuer_name, oidInfo->dist_name);
                }
                else {
                 ESA_DIAG_printf(PLT_COMP_API_RACF,1,
                                 "Subject Name=%s",oidInfo->dist_name);
                 strcat(r_subject_name, oidInfo->dist_name);
                }

                ESA_DIAG_printf(PLT_COMP_API_RACF,1,
                                "oidInfo->name=%s(%s)",
                                oidInfo->dist_name,
                                oidInfo->name);
              }
            }

            break;

         case EOC:
         case NULLTAG:
              break;

         case UTCTIME:
              validity_period = TRUE;
              ESA_DIAG_printf(PLT_COMP_API_RACF,1,
                              "%d. case UTCTIME : ", level);
              value = GetStringValue( asn1buf, item->len, level );
   /* BS2712 start
      value retrieve from GetStringValue is in format "'YYMMDDHHMMSSZ'"
      format need to be  - "YYYYMMDDHHMMSS"
      remove char 'Z' and apostrophe in start and end of
      the string . 'Z' - indicate Zulu time .
   */

              strncpy(year,value+1,2) ;
              if (atoi(year) >= 50)       /* add prefix year */
                strcpy(datetime,"19");
              else
                strcpy(datetime,"20");
              strncat(datetime,value+1,item->len-1);
              value[strlen(datetime)] = '\0' ;
   /* BS2717  ESA_DIAG_printf(PLT_COMP_API_RACF,0,
                              "datetime =(%s)", datetime); */
   /* BS2712 end */
              ESA_DIAG_printf(PLT_COMP_API_RACF,1,
                              "%d-%s", utctime_c, value);
              if ( utctime_c EQ 0 )
   /* BS2712    strcpy(r_valid_date, value);   */
                strcpy(r_valid_date, datetime);    /* BS2712 */
              else
   /* BS2712    strcpy(r_expired_date, value); */
                strcpy(r_expired_date, datetime);  /* BS2712 */

              utctime_c++;
              break;

         case EXTERNAL : /* BS2717 */
         case STRUDEL:      /* BS2712 add support STRUDEL */
         case GENERALIZEDTIME:
         case PRINTABLESTR:
         case OBJDESCRIPTOR:
         case GRAPHICSTR:
         case VISIBLESTR:
         case GENERALSTR:
         case UNIVERSALSTR:
         case NUMERICSTR:
         case T61STR:
         case VIDEOTEXSTR:
         case IA5STR:
         case BMPSTR:
              value = GetStringValue( asn1buf, item->len, level );
              ESA_DIAG_printf(PLT_COMP_API_RACF,1,
                              "String=%s", value);
              if (!validity_period) {
                 strcat(r_issuer_name,  value);
                 strcat(r_issuer_name,  " ");
              }
              else {
                 strcat(r_subject_name, value);
                 strcat(r_subject_name, " ");
              }

              break;

         default:
              sprintf(msg_buf,
                      "Unrecognised primitive, hex value is:%s",
                      dumpHex( asn1buf, item->len, level) );
              ESA_DIAG_printf(PLT_COMP_API_RACF,1, "%s", msg_buf);
              /* IS10110 drop msg
              CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest,
                            component, fn, msg_buf, 8, __LINE__); */
              parse_rc = ESA_ERR;
              break;
    }
   }
  }

  /** Verify, what was obtained from asn1 **/

  if ( (level EQ 2) AND !serial_number ) {
    if (!validity_period AND value) {
      serial_number = TRUE;
      ESA_DIAG_printf(PLT_COMP_API_RACF,1,
                      "Serial Number=%s",  value);
      strcpy(r_serial_number, value);   /* Serial Number */
    }
  }

  exit :;

  ESA_DIAG_exit(PLT_COMP_API_RACF,1, fn, parse_rc);
}

/**************************************************************
*                                                             *
* PROCEDURE NAME : getItem                                    *
*                                                             *
* DESCRIPTION    : Get an ASN.1 objects tag and length        *
*                                                             *
* INPUT          : asn1buf          -  asn1 info buffer       *
*                                                             *
* OUTPUT         : asn1item                                   *
*                                                             *
* RETURN VALUE   : none                                       *
*                                                             *
**************************************************************/
static int getItem( char *asn1buf, ASN1_ITEM *item )
{

  /*
   *      Variables
   */

   int  length;
   int  rc = TRUE;
   static char fn[]= "getItem";

  /*
   *      Initialize
   */

  ESA_DIAG_enter(PLT_COMP_API_RACF,1,fn);

  item->indefinite = FALSE;
  item->id = item->header [0]  = buf_fgetc( asn1buf );
  if( if_buf_ended( ) ) {
      rc = FALSE;
      goto exit;
  }

  length = item->header [1]    = buf_fgetc( asn1buf );

  ESA_DIAG_printf(PLT_COMP_API_RACF,1,
                  "item->header=%02X%02X length=%d",
                  item->header [0]  , item->header [1] , length);

  if( length & LEN_XTND ) {
    int i;
    length &= LEN_MASK;
    if( length > 4 ) {
      sprintf(msg_buf,"Error: Object length field %d too large.",
                length );
      ESA_DIAG_printf(PLT_COMP_API_RACF,1, "%s", msg_buf); /*IS10110*/
      /* IS10110 drop msg
      CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest,
                    component, fn, msg_buf, 8, __LINE__); */
      parse_rc = ESA_ERR;
      goto exit;
    }

    item->headerSize = 2 + length;
    item->len = 0;
    if( !length )
      item->indefinite = TRUE;
    for( i = 0; i LT length; i++ ) {
      int ch = buf_fgetc( asn1buf );
      item->len = ( item->len << 8 ) | ch;
      item->header [i + 2]  = ch;
    }
  }
  else {
   item->len = length;
   item->headerSize = 2;
  }

  exit :;

  ESA_DIAG_exit(PLT_COMP_API_RACF,1, fn, parse_rc);
  return( rc );
}

/**************************************************************
*                                                             *
* PROCEDURE NAME : parseConstructed                           *
*                                                             *
* DESCRIPTION    : parseConstructed object                    *
*                                                             *
* INPUT          : asn1buf          -  asn1 info buffer       *
*                  level            -  level of data          *
*                                                             *
* OUTPUT         : asn1item                                   *
*                                                             *
* RETURN VALUE   : none                                       *
*                                                             *
**************************************************************/
static void parseConstructed( char *asn1buf,
                              int level,
                              ASN1_ITEM *item )
{

  /*
   *      Variables
   */

   int result;
   static char fn[]= "parseConstructed";

  /*
   *      Initialize
   */

   ESA_DIAG_enter(PLT_COMP_API_RACF,1,fn);

   result = parseAsn1( asn1buf, level + 1,
                       item->len, item->indefinite );
   if( result ) {
      sprintf( msg_buf,
               "Error: Inconsistent object length, %d byte%s " \
               "difference.",
               result, ( result > 1 ) ? "s" : "" );
      ESA_DIAG_printf(PLT_COMP_API_RACF,1, "%s", msg_buf);
      /* IS10110 drop msg
      CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest,
                    component, fn, msg_buf, 8, __LINE__); */
      parse_rc = ESA_ERR;
   }

   ESA_DIAG_exit(PLT_COMP_API_RACF,1, fn, parse_rc);
}

/**************************************************************
*                                                             *
* PROCEDURE NAME : parseAsn1                                  *
*                                                             *
* DESCRIPTION    : Parse a complex ASN.1 object               *
*                                                             *
* INPUT          : asn1buf          -  asn1 info buffer       *
*                  level            -  data level             *
*                  length           -  data length            *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ESA_RC                                     *
*                                                             *
**************************************************************/
static int parseAsn1(char                      *asn1buf,
                     int                        level,
                     long                       length,
                     int                        isIndefinite)
{

  /*
   *      Variables
   */

   ASN1_ITEM item;
   long lastPos = obtain_buf_idx( );
   int seenEnum = FALSE, seenEOC = FALSE;
   int    rc = 0;
   static char fn[]= "parseAsn1";

  /*
   *      Initialize
   */

   ESA_DIAG_enter(PLT_COMP_API_RACF,1,fn);

    /* Special-case for zero-length objects */
    if( !length AND !isIndefinite ) {
       rc = 0;
       goto exit;
    }

    /* Scan ASN1 format buffer */
    while( getItem( asn1buf, &item) AND (parse_rc EQ ESA_OK) )  {
      /* Adjust the enum level */
      if( seenEnum )
        seenEnum--;
      if( item.id EQ ENUMERATED )
        seenEnum = 2;

      dumpHeader( asn1buf, &item );
      /* Get details on the item */
      if( !seenEOC )
         parseASN1object( asn1buf, &item, level);

      length -= ( int )(obtain_buf_idx( ) - lastPos );
      lastPos = obtain_buf_idx( );
      if( isIndefinite ) {
        if( seenEOC ) {
           rc = 0;
           goto exit;
        }
      }
      else {
       if( length LE 0 ) {
         if( length LT 0 ) {
           rc = ( ( int ) -length );
           goto exit;
         }
         rc = 0;
         goto exit;
       }
      }
    }

  exit :;

   ESA_DIAG_printf(PLT_COMP_API_RACF,1,
                   "Returned length=%d", rc);

   ESA_DIAG_exit(PLT_COMP_API_RACF,1, fn, parse_rc);
   return rc ;

}

/**************************************************************
*                                                             *
* PROCEDURE NAME : RACF_getdig_info                           *
*                                                             *
* DESCRIPTION    : Get digital certificate info               *
*                                                             *
* INPUT          : asn1buf          -  asn1 info buffer       *
*                  length           -  data length            *
*                                                             *
* OUTPUT         : serial_number    - serial number           *
*                  issuer_name      - issuer name             *
*                  valid_date       - valid_date              *
*                  expired_date     - expired_date            *
*                  subject_name     - subject_name            *
*                                                             *
* RETURN VALUE   : ESA_RC                                     *
*                                                             *
**************************************************************/
ESA_RC RACF_getdig_info(char                      *asn1buf,
                        int                        length,
                        char                      *p_serial_number,
                        char                      *p_issuer_name,
                        char                      *p_valid_date,
                        char                      *p_expired_date,
                        char                      *p_subject_name,
                        CTSAMSG_DEST_TABLE_rec_ptr p_dest,
                        CTSAMSG_HANDLE_rec_ptr     p_msgs)
{

  /*
   *      Variables
   */

   static char fn[]= "RACF_getdig_info";

  /*
   *      Initialize
   */

   ESA_DIAG_enter(PLT_COMP_API_RACF,1,fn);

   parse_rc        = ESA_OK;
   parse_index     = 0;
   validity_period = FALSE;
   serial_number   = FALSE;
   utctime_c       = 0;
   dest            = p_dest;
   msgs            = p_msgs;
   asn1buf_nb      = length;

   ESA_DIAG_printf(PLT_COMP_API_RACF,1,
                   "length=%d", length);

   strcpy(p_serial_number, "");
   strcpy(p_issuer_name,   "");
   strcpy(p_valid_date,    "");
   strcpy(p_expired_date,  "");
   strcpy(p_subject_name,  "");

   r_serial_number = p_serial_number;
   r_issuer_name   = p_issuer_name;
   r_valid_date    = p_valid_date;
   r_expired_date  = p_expired_date;
   r_subject_name  = p_subject_name;

   if (length GT 0)
       parseAsn1 ( asn1buf, 0, asn1buf_nb, 0);

  /*
   *  finish
   */

   exit: ;

   ESA_DIAG_printf(PLT_COMP_API_RACF,1,
                   "serial_number=%s",
                   p_serial_number);
   ESA_DIAG_printf(PLT_COMP_API_RACF,1,
                   "issuer_name=%s",
                   p_issuer_name);
   ESA_DIAG_printf(PLT_COMP_API_RACF,1,
                   "valid_date=%s",
                   p_valid_date);
   ESA_DIAG_printf(PLT_COMP_API_RACF,1,
                   "expired_date=%s",
                   p_expired_date);
   ESA_DIAG_printf(PLT_COMP_API_RACF,1,
                   "subject_name=%s",
                   p_subject_name);

   ESA_DIAG_exit(PLT_COMP_API_RACF,1, fn, parse_rc);
   return parse_rc ;

}
