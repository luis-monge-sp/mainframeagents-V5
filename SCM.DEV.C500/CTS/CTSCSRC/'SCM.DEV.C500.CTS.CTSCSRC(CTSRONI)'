/**************************************************************
*                                                             *
* Title            : Online interceptor dynamic system exits  *
*                    support                                  *
*                                                             *
* File Name        : ctsroni.c                                *
*                                                             *
* Author           : Doron Cohen                              *
*                                                             *
* Creation Date    : 19/10/94                                 *
*                                                             *
* Description      :                                          *
*                                                             *
* Assumptions and                                             *
*   Considerations :                                          *
*                                                             *
**************************************************************/

/**************************************************************
* Mod.Id   Who      When     Description                      *
* -------  ------   -------- -------------------------------- *
* SAS2IBMT SeligT   09/10/16 SAS/C to IBM C Conversion Project*
* WS10064  MeirS    04/10/17 Support Phrase.                  *
* WS10069  MeirS    19/02/18 EnablePhrase exits optional      *
*                                                             *
**************************************************************/

#include   <globs.h>

#include STDLIB
#include STDIO
#include STRING

#include ESA_API
#include ESA_DIAG
#include ESA_CTSAMSG
#include ESA_RSS

#include MVS_OS_DYNAM

#include RACF_CODES
#include RACF_INTERCEPTOR

/*
 *   Assembler service routine
 */

#define SDX_INIT    "INIT    "
#define SDX_TERM    "TERM    "
#define SDX_LOAD    "LOAD    "
#define SDX_DELETE  "DELETE  "
#define SDX_ENABLE  "ENABLE  "
#define SDX_DISABLE "DISABLE "
#define SDX_SNAP    "SNAP    "

#define SDX_MODULE  "CTSASDX "

#define SDX_RACF_NAME_U83   "IEFU83"
#define SDX_RACF_LMOD_U83   "CTSFU83 "
#define SDX_RACF_PREF_U83   "U83"

#define SDX_ACF2_NAME_U83   "IEFU83"
#define SDX_ACF2_LMOD_U83   "CTS2U83 "
#define SDX_ACF2_PREF_U83   "U83"

#define SDX_ACF2_NAME_NPX   "ACFNPXIT"
#define SDX_ACF2_LMOD_NPX   "CTS2NPX "
#define SDX_ACF2_PREF_NPX   "NPX"
   /* WS10064 start */
#define SDX_ACF2_NAME_NPH   "NPWPEXIT"
#define SDX_ACF2_LMOD_NPH   "CTS2NPH "
#define SDX_ACF2_PREF_NPH   "NPH"
   /* WS10064 end   */

#define SDX_RACF_NAME_PWX   "ICHPWX01"
#define SDX_RACF_LMOD_PWX   "CTSFPWX "
#define SDX_RACF_PREF_PWX   "PWX01"

#define SDX_RACF_NAME_RIX   "ICHRIX02"
#define SDX_RACF_LMOD_RIX   "CTSFRIX "
#define SDX_RACF_PREF_RIX   "RIX02"
   /* WS10064 start */
#define SDX_RACF_NAME_PPX   "ICHPWX11"
#define SDX_RACF_LMOD_PPX   "CTSFPPX "
#define SDX_RACF_PREF_PPX   "PWX11"
   /* WS10064 end   */


#define DYNAM_ON    "Y"
#define DYNAM_PARAM "ONLI_DYNAM_%s"

typedef struct {
 char name[9];
 char lmod[9];
 char pref[9];
 int  support;
 OPTION_typ opt;                                        /* WS10069  */
} INTERCEPT_EXIT_rec_typ ;

static INTERCEPT_EXIT_rec_typ RACF_exits[] = {
 /*{ SDX_RACF_NAME_U83, SDX_RACF_LMOD_U83, SDX_RACF_PREF_U83  , 0 },*/
 /*{ SDX_RACF_NAME_PWX, SDX_RACF_LMOD_PWX, SDX_RACF_PREF_PWX  , 0 },*/
   { SDX_RACF_NAME_PWX, SDX_RACF_LMOD_PWX, SDX_RACF_PREF_PWX  , 0 ,
     OPT_FALSE },                                       /* WS10069  */
 /*{ SDX_RACF_NAME_RIX, SDX_RACF_LMOD_RIX, SDX_RACF_PREF_RIX  , 0 },*/
   { SDX_RACF_NAME_RIX, SDX_RACF_LMOD_RIX, SDX_RACF_PREF_RIX  , 0 ,
     OPT_FALSE },                                       /* WS10069  */
   /* WS10064 start */
 /*{ SDX_RACF_NAME_PPX, SDX_RACF_LMOD_PPX, SDX_RACF_PREF_PPX  , 0 },*/
   { SDX_RACF_NAME_PPX, SDX_RACF_LMOD_PPX, SDX_RACF_PREF_PPX  , 0 ,
     OPT_TRUE},                                         /* WS10069  */
   /* WS10064 end   */
 /*{ NULL_STRING      , 0                , 0                  , 0 },*/
   { NULL_STRING      , 0                , 0                  , 0 ,
     OPT_TRUE},                                         /* WS10069  */
};

static INTERCEPT_EXIT_rec_typ ACF2_exits[] = {
 /*{ SDX_ACF2_NAME_U83, SDX_ACF2_LMOD_U83, SDX_ACF2_PREF_U83  , 0 },*/
 /*                                                               },*/
 /*{ SDX_ACF2_NAME_NPX, SDX_ACF2_LMOD_NPX, SDX_ACF2_PREF_NPX  , 0 },*/
   { SDX_ACF2_NAME_NPX, SDX_ACF2_LMOD_NPX, SDX_ACF2_PREF_NPX  , 0 ,
     OPT_FALSE },                                       /* WS10069  */
   /* WS10064 start */
 /*{ SDX_ACF2_NAME_NPH, SDX_ACF2_LMOD_NPH, SDX_ACF2_PREF_NPH  , 0 },*/
   { SDX_ACF2_NAME_NPH, SDX_ACF2_LMOD_NPH, SDX_ACF2_PREF_NPH  , 0 ,
     OPT_TRUE},                                         /* WS10069  */
   /* WS10064 end   */
 /*{ NULL_STRING      , 0                , 0                  , 0 },*/
   { NULL_STRING      , 0                , 0                  , 0 ,
     OPT_TRUE},                                         /* WS10069  */
};

static INTERCEPT_EXIT_rec_typ * exits ;

static int num_exits = 0 ;

/* SAS2IBMT prototype changed for IBM C
extern int ctsasdx( char *func, char *ssname, char *jobname,
                     char *exit, int *dbg, int *rc , int  *reason ) ;*/
extern int ctsasdx();                                     /* SAS2IBMT */

static int  sdx_r15 = 0, sdx_rc = 0, sdx_reason = 0;

static ESA_RC get_exits_params ( RSS_typ rss_name,
                                 RSS_typ rss_type,
                                 int     * num_exits);

/****************************************************
* Procedure Name: ONLI_exits_snap
*
* Description   : Snap all dynamic interceptions tables
*
* Input         : rssname
*                 rsstype
*                 ssname
*                 jobname
*                 CTSAMSG parameters
*
* Output        : None
*
* Return Value  : None
*
* Comments      :
* Scope         :
****************************************************/

void ONLI_exits_snap (RSS_typ                  rss_name,
                      RSS_typ                  rss_type,
                      char                   * ssname,
                      char                   * jobname,
                      CTSAMSG_PARAMS_rec_typ * msg_params )
{

  static char func[]="ONLI_exits_snap";

  int dbg_lvl = 1;

 /*
  *     Initialize
  */

  ESA_DIAG_enter ( ESA_COMP_RSS_INTERCEPT, 1 , func);

 /*
  *   Dynamic exits snap
  */

  /* SAS2IBMT
  sdx_r15 = OS_DYNAM_call(SDX_MODULE, 1,                             */
  sdx_r15 = (*(ASM_RTN_TYP *)&OS_DYNAM_call)              /* SAS2IBMT */
                         (SDX_MODULE, 1,
                          SDX_SNAP, ssname, jobname, NULL_STRING,
                          &dbg_lvl, &sdx_rc, &sdx_reason);
  ESA_DIAG_printf(ESA_COMP_RSS_INTERCEPT,2,
                 "Dynamic exits snap R15=%d rc=%d rs=%d",
                  sdx_r15, sdx_rc, sdx_reason );
 /*
  *     Finish
  */

  exit:;

  ESA_DIAG_exit ( ESA_COMP_RSS_INTERCEPT,1, func, ESA_RC_VOID );

  return ;

 }

/****************************************************
* Procedure Name: ONLI_exits_on
*
* Description   : handle dynamic exit installation
*
* Input         : rssname
*                 rsstype
*                 ssname
*                 jobname
*                 CTSAMSG parameters
*
* Output        : None
*
* Return Value  : ESA_OK     upon success
*                 ESA_FATAL  on any fail situation
* Comments      :
* Scope         :
****************************************************/

ESA_RC ONLI_exits_on (RSS_typ                  rss_name,
                      RSS_typ                  rss_type,
                      char                   * ssname,
                      char                   * jobname,
                      CTSAMSG_PARAMS_rec_typ * msg_params )
{

  static char func[]="ONLI_exits_on";

  int i = 0 ;
  int dbg_lvl;
  ESA_RC rc = ESA_OK;
  CTSAMSG_HANDLE_rec_ptr     msgs;
  CTSAMSG_DEST_TABLE_rec_ptr dest;

 /*
  *     Initialize
  */

  ESA_DIAG_enter ( ESA_COMP_RSS_INTERCEPT, 1 , func);

  msgs = msg_params->ctsamsg_handle;
  dest = msg_params->ctsamsg_dest;

  if ( ESA_DIAG_get_debug_level(ESA_COMP_RSS_INTERCEPT) GE 3 )
     dbg_lvl = 1;

  rc = get_exits_params(rss_name, rss_type, &num_exits);
  if (rc NE ESA_OK) {
     rc = ESA_FATAL;
     goto exit;
  }

 /*
  *   Do nothing if no exits need to be dynamically loaded
  */

  if (num_exits EQ 0)
     goto exit;

 /*
  *   Dynamic exits initialization
  */

  /* SAS2IBMT
  sdx_r15 = OS_DYNAM_call(SDX_MODULE, 1,                             */
  sdx_r15 = (*(ASM_RTN_TYP *)&OS_DYNAM_call)              /* SAS2IBMT */
                         (SDX_MODULE, 1,
                          SDX_INIT, ssname, jobname, NULL_STRING,
                          &dbg_lvl, &sdx_rc, &sdx_reason);
  ESA_DIAG_printf(ESA_COMP_RSS_INTERCEPT,2,
                 "Dynamic exits initialization R15=%d rc=%d rs=%d",
                  sdx_r15, sdx_rc, sdx_reason );
  if (sdx_r15 GT 4) {
     CTSAMSG_print(RACF_SDX_INIT, msgs, NULL, dest );
     CTSAMSG_print(RACF_SDX_DETAIL, msgs, NULL, dest,
                   "INITIALIZE", NULL_STRING, sdx_r15, sdx_rc,
                   sdx_reason );
     rc = ESA_FATAL;
     goto exit;
  }

 /*
  *    Load Exits to CSA
  */

  for (i=0; strlen(exits[i].name) GT 0; i++)  {

     if (exits[i].support) {
        /* SAS2IBMT
        sdx_r15 = OS_DYNAM_call(SDX_MODULE, 1,                       */
        sdx_r15 = (*(ASM_RTN_TYP *)&OS_DYNAM_call)        /* SAS2IBMT */
                               (SDX_MODULE, 1,
                                SDX_LOAD, ssname, jobname,
                                exits[i].lmod, &dbg_lvl, &sdx_rc,
                                &sdx_reason);
        ESA_DIAG_printf(ESA_COMP_RSS_INTERCEPT,2,
                        "%s Loading - R15=%d rc=%d rs=%d",
                     exits[i].lmod, sdx_r15, sdx_rc, sdx_reason );
        if ( sdx_r15 GT 4) {
           CTSAMSG_print(RACF_SDX_LOAD, msgs, NULL, dest,
                         exits[i].name );
           CTSAMSG_print(RACF_SDX_DETAIL, msgs, NULL, dest,
                         "LOAD", exits[i].name, sdx_r15, sdx_rc,
                         sdx_reason );
           rc = ESA_FATAL;
           goto exit;
        }
     }
     else ESA_DIAG_printf(ESA_COMP_RSS_INTERCEPT,2,
                         "%s loading canceled . exit not requested",
                         exits[i].lmod );
  }

 /*
  *    Activate exits
  */

  for (i=0; strlen(exits[i].name) GT 0; i++)  {

     if (exits[i].support) {
        /* SAS2IBMT
        sdx_r15 = OS_DYNAM_call(SDX_MODULE, 1,                       */
        sdx_r15 = (*(ASM_RTN_TYP *)&OS_DYNAM_call)        /* SAS2IBMT */
                               (SDX_MODULE, 1,
                                SDX_ENABLE, ssname, jobname,
                                exits[i].lmod, &dbg_lvl, &sdx_rc,
                                &sdx_reason);
        ESA_DIAG_printf(ESA_COMP_RSS_INTERCEPT,2,
                        "%s enable - R15=%d rc=%d rs=%d",
                        exits[i].lmod, sdx_r15, sdx_rc, sdx_reason );
        if ( sdx_r15 GT 4) {
           CTSAMSG_print(RACF_SDX_ENABLE, msgs, NULL, dest,
                         exits[i].name);
           CTSAMSG_print(RACF_SDX_DETAIL, msgs, NULL, dest,
                         "ENABLE", exits[i].name, sdx_r15, sdx_rc,
                         sdx_reason );
           rc = ESA_FATAL;
           goto exit;
        }
     }
     else ESA_DIAG_printf(ESA_COMP_RSS_INTERCEPT,2,
                     "%s activation canceled . exit not requested",
                     exits[i].lmod );
  }

 /*
  *     Finish
  */

  exit:;

  ESA_DIAG_exit ( ESA_COMP_RSS_INTERCEPT,1, func, rc );

  return rc;

 }

/****************************************************
* Procedure Name: ONLI_exits_off
*
* Description   : handle dynamic exit removal
*
* Input         : subsystem name
*                 jobname
*                 CTSAMSG parameters
*
* Output        : None
*
*
* Return Value  : ESA_OK     upon success
*                 ESA_FATAL  on any fail situation
* Comments      :
* Scope         :
****************************************************/

ESA_RC ONLI_exits_off (RSS_typ                  rss_name,
                       RSS_typ                  rss_type,
                       char                   * ssname,
                       char                   * jobname,
                       CTSAMSG_PARAMS_rec_typ * msg_params)
{

  static char func[]="ONLI_exits_off";

  int dbg_lvl;
  int i = 0 ;
  ESA_RC rc = ESA_OK;
  CTSAMSG_HANDLE_rec_ptr     msgs;
  CTSAMSG_DEST_TABLE_rec_ptr dest;

 /*
  *     Initialize
  */

  ESA_DIAG_enter ( ESA_COMP_RSS_INTERCEPT, 1 , func);

  msgs = msg_params->ctsamsg_handle;
  dest = msg_params->ctsamsg_dest;

  if ( ESA_DIAG_get_debug_level(ESA_COMP_RSS_INTERCEPT) GE 3 )
     dbg_lvl = 1;

 /*
  *    Dectivate exits
  */

  for (i=0; strlen(exits[i].name) GT 0; i++)  {

     /* SAS2IBMT
     sdx_r15 = OS_DYNAM_call(SDX_MODULE, 1,                          */
     sdx_r15 = (*(ASM_RTN_TYP *)&OS_DYNAM_call)           /* SAS2IBMT */
                            (SDX_MODULE, 1,
                             SDX_DISABLE, ssname, jobname,
                             exits[i].lmod, &dbg_lvl, &sdx_rc,
                             &sdx_reason);
     ESA_DIAG_printf(ESA_COMP_RSS_INTERCEPT,2,
                     "%s disable - R15=%d rc=%d rs=%d",
                     exits[i].lmod, sdx_r15, sdx_rc, sdx_reason );
     if ( sdx_r15 GT 4) {
        CTSAMSG_print(RACF_SDX_DISABLE, msgs, NULL, dest,
                      exits[i].name );
        CTSAMSG_print(RACF_SDX_DETAIL, msgs, NULL, dest,
                      "DISABLE", exits[i].name, sdx_r15, sdx_rc,
                      sdx_reason );
       rc = ESA_FATAL;
     }

  }

 /*
  *    Delete Exits from CSA
  */

  for (i=0; strlen(exits[i].name) GT 0; i++)  {

     /* SAS2IBMT
     sdx_r15 = OS_DYNAM_call(SDX_MODULE, 1,                          */
     sdx_r15 = (*(ASM_RTN_TYP *)&OS_DYNAM_call)           /* SAS2IBMT */
                            (SDX_MODULE, 1,
                             SDX_DELETE, ssname, jobname,
                             exits[i].lmod, &dbg_lvl, &sdx_rc,
                             &sdx_reason);
     ESA_DIAG_printf(ESA_COMP_RSS_INTERCEPT,2,
                     "%s Delete - R15=%d rc=%d rs=%d",
                     exits[i].lmod, sdx_r15, sdx_rc, sdx_reason );
     if ( sdx_r15 GT 4) {
        CTSAMSG_print(RACF_SDX_DELETE, msgs, NULL, dest,
                      exits[i].name);
        CTSAMSG_print(RACF_SDX_DETAIL, msgs, NULL, dest,
                     "DELETE", exits[i].name, sdx_r15, sdx_rc,
                     sdx_reason );
        rc = ESA_FATAL;
     }

  }

 /*
  *   Dynamic exits Termination
  */

  /* SAS2IBMT
  sdx_r15 = OS_DYNAM_call(SDX_MODULE, 1,                             */
  sdx_r15 = (*(ASM_RTN_TYP *)&OS_DYNAM_call)              /* SAS2IBMT */
                         (SDX_MODULE, 1,
                          SDX_TERM, ssname, jobname, NULL_STRING,
                          &dbg_lvl, &sdx_rc, &sdx_reason);
  ESA_DIAG_printf(ESA_COMP_RSS_INTERCEPT,2,
                 "Dynamic exits termination R15=%d rc=%d rs=%d",
                  sdx_r15, sdx_rc, sdx_reason );
  if ( sdx_r15 GT 8) {
     CTSAMSG_print(RACF_SDX_TERM, msgs, NULL, dest );
     CTSAMSG_print(RACF_SDX_DETAIL, msgs, NULL, dest,
                   "TERMINATE", NULL_STRING, sdx_r15, sdx_rc,
                   sdx_reason);
     rc = ESA_FATAL;
     goto exit;
  }

 /*
  *     Finish
  */

  exit:;

  ESA_DIAG_exit ( ESA_COMP_RSS_INTERCEPT,1, func, rc );

  return rc;

}

/****************************************************
* Procedure Name: get_exits_params
*
* Description   : Obtain online interceptor rss params
*
* Input         :
*
* Return Value  : ESA_OK, ESA_FATAL
*
* Comments      :
* Scope         :
****************************************************/

static ESA_RC get_exits_params ( RSS_typ rss_name,
                                 RSS_typ rss_type,
                                 int     * num_exits)
{

 static char func[] = "get_exits_params";
 char parm_get[256] ;
 char parm_name[256] ;
 ESA_RC rc    = ESA_OK;
 ESA_RC maxrc = ESA_OK;                                /* WS10069 */
 int i = 0 ;

/*
 *    Initialize
 */

 ESA_DIAG_enter(ESA_COMP_RSS_INTERCEPT, 4, func);
 *num_exits = 0;

 if ( memcmp( "RACF", rss_type , 4) EQ 0)
    exits = RACF_exits;
 else if ( memcmp( "ACF2", rss_type , 4) EQ 0)
    exits = ACF2_exits;

/*
 *    set exits support flag
 */

 for (i=0; strlen(exits[i].name) GT 0; i++)  {
     sprintf(parm_name, DYNAM_PARAM, exits[i].pref);
 /*  rc = rssprm_get (rss_name, parm_name,         WS10069
                      sizeof(parm_get), parm_get); WS10069 */
 /* WS10069 start */
     rc = rssprm_get_opt (rss_name, parm_name,
                          sizeof(parm_get), parm_get,
                          exits[i].opt, exits[i].opt) ;
 /* WS10069 end   */
     if (rc NE ESA_OK) {
        ESA_DIAG_printf (ESA_COMP_RSS_INTERCEPT, 4,
        /* WS10064       "parameter get error keyword=%s rc=%d", */
        /* WS10064 */    "parameter keyword=%s not found. rc=%d",
                         parm_name, rc );
     /* rc = ESA_FATAL;                             WS10064 */
     /* goto exit;                                  WS10064 */
        exits[i].support = 0;                   /*  WS10064 */
        if (exits[i].opt EQ OPT_FALSE)          /*  WS10069 */
           maxrc = ESA_FATAL ;                  /*  WS10069 */
     }
  /* else ESA_DIAG_printf (ESA_COMP_RSS_INTERCEPT, 4,       WS10069 */
     else {                                              /* WS10069 */
        ESA_DIAG_printf (ESA_COMP_RSS_INTERCEPT, 4,      /* WS10069 */
                         "parameter keyword=%s value=%s",
                          parm_name, parm_get );
        if ( strcmp(parm_get, DYNAM_ON) EQ 0) {
           exits[i].support = 1;
           (*num_exits)++;
        }
        else exits[i].support = 0;
     }                                                   /* WS10069 */
 }
 rc = maxrc ;                                            /* WS10069 */
 exit: ;

/*
 *    Finish
 */

 ESA_DIAG_exit(ESA_COMP_RSS_INTERCEPT, 4, func, rc);

 return rc;

}
