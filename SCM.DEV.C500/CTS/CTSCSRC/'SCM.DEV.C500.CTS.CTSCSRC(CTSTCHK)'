 /**************************************************************
 *                                                             *
 * Title            : TSS  objects check functions             *
 *                                                             *
 * File Name        : ctstchk.c                                *
 *                                                             *
 * Author           : Alexander Shvartsman                     *
 *                                                             *
 * Creation Date    : 16/02/97                                 *
 *                                                             *
 * Description      : TSS  objects existance checks            *
 *                                                             *
 * Assumptions and                                             *
 *   Considerations :                                          *
 *                                                             *
 **************************************************************/

 /**************************************************************
 * Mod.Id   Who      When     Description                      *
 * -------- -------- -------- -------------------------------- *
 * PS0268   GS(Alex) 13/05/98 Fix download with prefixes       *
 * WS10082A Avner    12/11/23 Remove API_ADDINFO               *
 **************************************************************/
 #include   <globs.h>

 /*
  *   Standard include files
  */

 #include   STDIO
 #include   STDLIB
 #include   STRING

 /*
  *   ESA include files
  */

 #include ESA_DIAG
 #include ESA_CTSAMSG
 #include ESA_API
 #include ESA_API_CODES

 /*
  *   MVS include files
  */

 #include MVS_COMP
 /*WS10082A #include API_ADDINFO --- not used */

 /*
  *   TSS include files
  */

 #include TSS
 #include TSS_CODES

 static char component[] = "CTSTCHK";

 /**************************************************************
 *                                                             *
 * PROCEDURE NAME : TSS_chk_acid                               *
 *                                                             *
 * DESCRIPTION    : Check TSS acid existance                   *
 *                                                             *
 * INPUT          : acid     - acid                            *
 *                  acid_type- acid type                       *
 *                  test     - Check type - EXIST, NOEXIST     *
 *                  msg_flag - Issue existance error message   *
 *                  admin_params                               *
 *                  err                                        *
 *                                                             *
 * OUTPUT         : real_acid_type                             *
 *                  real_object_type                           *
 *                                                             *
 * RETURN VALUE   : ESA_RC                                     *
 *                                                             *
 *                  ESA_OK   - Test OK                         *
 *                  ESA_ERR  - Test FAILED                     *
 *                  ESA_FATAL- Intrenal Error                  *
 *                                                             *
 **************************************************************/
 ESA_RC TSS_chk_acid (ESA_DIAG_COMP_typ            comp,
                      char                       * acid,
                      char                       * acid_type,
                      OBJECT_TYPE_typ              object_type,
                      OBJ_EXISTS_typ               test,
                      int                          msg_flag,
                      char                       * real_acid_type,
                      OBJECT_TYPE_typ            * real_object_type,
                      ADMIN_PARAMS_rec_typ       * admin_params,
                      ERR_STRUCT_rec_typ         * err)
 {

  static char func[]="TSS_chk_acid";
  CTSAMSG_HANDLE_rec_typ     * msgs;
  CTSAMSG_DEST_TABLE_rec_typ * dest;
  TSS_ACID_HEADER_rec_typ      acid_info;
  ESA_RC                       rc = ESA_OK;
  int                          res;
  int                          found;
  int                          i;
  struct  _chk_acid_type {
     char             * acid_type;
     OBJECT_TYPE_typ    obj_type;
  };

  static struct _chk_acid_type chk_types[] = {
                       {  TSS_USER,       TYPE_USER       } ,
                       {  TSS_DCA,        TYPE_USER       } ,
                       {  TSS_VCA,        TYPE_USER       } ,
                       {  TSS_ZCA,        TYPE_USER       } ,
                       {  TSS_SCA,        TYPE_USER       } ,
                       {  TSS_LSCA,       TYPE_USER       } ,
   /* PS0268 */        {  TSS_MSCA,       TYPE_USER       } ,
                       {  TSS_PROFILE,    TYPE_GROUP      } ,
                       {  TSS_GROUP,      TYPE_GROUP      } ,
                       {  TSS_ZONE,       TYPE_CONTAINER  } ,
                       {  TSS_DIVISION,   TYPE_CONTAINER  } ,
                       {  TSS_DEPARTMENT, TYPE_CONTAINER  } ,
                       {  NULL ,          0               }   };

 /*
  *   Initialize
  */

  ESA_DIAG_enter(comp,4,func);

  msgs = admin_params->ctsamsg_handle;
  dest = admin_params->ctsamsg_dest;

  ESA_DIAG_printf(comp,4, "acid=%s type=%s Test=%d",
                  acid, acid_type, test);

  memset( (char *)&acid_info, '\0', sizeof(TSS_ACID_HEADER_rec_typ) );
  TSS_get_acid_header(comp,
                      /* TSS_CMD_QUIET_MODE, */
                      TSS_CMD_WEAK_QUIET_MODE,
                      acid, &acid_info, admin_params, err);

  /* Test results */

  ESA_DIAG_printf(comp,4, "Entered acid=%s obtained=%s",
                  acid, acid_info.acid);

  if (strcmp(acid, acid_info.acid) EQ 0 )  {
     res=4;

     /* Check type */

     found = FALSE;
     for(i=0; chk_types[i].acid_type; i++ ) {

       ESA_DIAG_printf(comp,4,                            /* PS0268 */
                       "1. Object_type=%d/%d - %s/%s",
                       object_type ,  chk_types[i].obj_type,
                       acid_info.type,
                       chk_types[i].acid_type) ;

       if ( (object_type EQ chk_types[i].obj_type)  AND
            (strcmp(acid_info.type,
                    chk_types[i].acid_type) EQ 0 )    ) {
         strcpy(real_acid_type, acid_info.type );
         *real_object_type = chk_types[i].obj_type;

         ESA_DIAG_printf(comp,4,
                         "1. Real acid_type=%s obj_type=%d",
                          real_acid_type,
                          *real_object_type);
         res=0;
         found = TRUE;
         break;
       }
     }

    /*
     *   If Object and obj_type not found
     *   try to return real obj type
     */

     for(i=0; chk_types[i].acid_type; i++ ) {
       if (strcmp(acid_info.type,
                  chk_types[i].acid_type) EQ 0 )  {
         strcpy(real_acid_type, acid_info.type );
         *real_object_type = chk_types[i].obj_type;

         ESA_DIAG_printf(comp,4,
                         "2. Real acid_type=%s obj_type=%d",
                          real_acid_type,
                          *real_object_type);
         break;
       }
     }
  }
  else
     res=4;

 /*
  *   Examine rc
  */

  switch (res) {

    case 0:
       if (test NE OBJ_EXIST) {
          rc = ESA_ERR;
          if (msg_flag)
             CTSAMSG_print(TSS_ERR_DUP_ACID, msgs, NULL,
                           dest, acid_type, acid );
       }
       break;

    case 4:
       if (test EQ OBJ_EXIST) {
          rc = ESA_ERR;
          if (msg_flag)
             CTSAMSG_print(TSS_ERR_NO_ACID, msgs, NULL,
                           dest, acid_type, acid );
       }
       break;

    default:
       rc = ESA_FATAL;
       break;
  }

 /*
  *    Finish
  */

 exit :;

  ESA_DIAG_exit(comp, 4, func, rc );
  return rc;

 }

