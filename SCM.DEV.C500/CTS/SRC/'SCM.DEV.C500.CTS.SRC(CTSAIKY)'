****************************************************************
* MOD.ID   WHO      WHEN     DESCRIPTION                       *
* -------- -------- -------- --------------------------------- *
* IS10188  AL       14/10/24 MOVE OUR MODULES ABOVE 16M LINE   *
****************************************************************
CTSAIKY  CSECT                                                  IS10188
CTSAIKY  AMODE ANY                                              IS10188
CTSAIKY  RMODE ANY                                              IS10188
CTSAIKY  ARLBEGIN BASE1=R15,WATYPE=
          MACRO
          SHIFT1
* ===== PERFORM 1-STEP CYCLIC LEFT SHIFT ON KEY REGS. (C(I) & D(I))
          SLA  R8,1           R8 = C(I)
          BNO  *+6
             OR   R8,R10      R10 IS PERSUMABLY ALREADY LOADED WITH "1"
          SLA  R9,1           R9 = D(I)
          BNO  *+6
             OR   R9,R10
          MEND
*
          MACRO
          SHIFT2
* ===== PERFORM 2-STEP CYCLIC SHIFT SIMPLY BY INVOKING SHIFT1 TWICE
          SHIFT1
          SHIFT1
          MEND
          MACRO
          LIGHTBIT &PART=,&BOX=,&OFFSET=,&SHIFT=
.* ===================================================================
.*    LIGHTING A SINGLE KEY BIT OF KEY PART &PART. THIS BIT IS ONE OF
.* 6 BITS CORRESPONDING S-BOX NUMBER &BOX. THE BIT IS EXTRACTED FROM
.* KEY-REGISTER BY THE MASK AT OFFSET &OFFSET OF S&BOX-MASK-TABLE.
.* LIGHTING MASK IS KEPT IN A REGISTER AND IS SHIFTED, AT END, &SHIFT
.* STEPS TO THE RIGHT. USUALY &SHIFT=1 BUT WHEN 6 BITS ARE LIT, A NEW
.* BYTE SHOULD BE TREATED - SO &SHIFT=3.
.* ===================================================================
        LR   R6,R7               R7=CURRENT KEY REGISTER: C(I) OR D(I)
        N    R6,S&BOX.MASK+&OFFSET       EXTRACT: TEST PROPPER BIT
        BZ   *+6
           OR   RKEY&PART,RLIGHT         LIGHT NEXT BIT
        SRL  RLIGHT,&SHIFT          NEXT BIT POSITION
          MEND
*
          MACRO
        LIGHT6     &PART=,&BOX=
.* ===================================================================
.*    LIGHT 6 KEY-BITS OF KEY PART &PART. THESE BITS CORRESPOND TO BOX
.* NUMBER &BOX AND OCCUPY MOST SIGNIFICANT POSITIONS IN BYTE, SO THEY
.* WOULD SERVE AS INDICES INTO S-BOX.
.* ===================================================================
        LIGHTBIT   PART=&PART,BOX=&BOX,OFFSET=0,SHIFT=1
        LIGHTBIT   PART=&PART,BOX=&BOX,OFFSET=4,SHIFT=1
        LIGHTBIT   PART=&PART,BOX=&BOX,OFFSET=8,SHIFT=1
        LIGHTBIT   PART=&PART,BOX=&BOX,OFFSET=12,SHIFT=1
        LIGHTBIT   PART=&PART,BOX=&BOX,OFFSET=16,SHIFT=1
        LIGHTBIT   PART=&PART,BOX=&BOX,OFFSET=20,SHIFT=3
          MEND
*
          MACRO
        MAKEKEY  &PART=
.* ===================================================================
.*    PREPARE A KEY WORD, (PART "A" OR "B"), CONSISTING OF 4 KEY-BIT
.* 6-TUPPLES. EACH IN A BYTE. PART "A" KEEPS 6-TUPPLES CORRESPONDING
.* BOXES: S1;S3;S5;S7, WHILE PART "B" KEEPS BITS CORRESPONDING BOXES
.* S2;S4;S6;S8.
.* ===================================================================
        LCLA  &B#0,&B#2,&B#4,&B#6
&B#0    SETA  1
        AIF   ('&PART' EQ 'A').L1
&B#0    SETA  2
.L1     ANOP
&B#2    SETA  &B#0+2
&B#4    SETA  &B#0+4
&B#6    SETA  &B#0+6
        L       RLIGHT,=X'80000000'  PREPARE BIT-LIGHTING-MASK
        LR      R7,R8                 R8=C(I). WHERE S1,S2,S3,S4 BITS
*                                     - ARE EXTRACTED FROM.
        LIGHT6  PART=&PART,BOX=&B#0   LIGHT S1 BITS (A), OR S2 (B)
        LIGHT6  PART=&PART,BOX=&B#2   S3 BITS (A), OR S4 (B)
*
        LR      R7,R9                 R9=D(I). WHERE S5,S6,S7,S8 BITS
*                                     - ARE EXTRACTED FROM.
        LIGHT6  PART=&PART,BOX=&B#4   S5 BITS (A), OR S6 (B)
        LIGHT6  PART=&PART,BOX=&B#6   S7 BITS (A), OR S8 (B)
        MEND
*
RLIGHT    EQU     R3            LIGHT-A-BIT MASK
RKEYA     EQU     R4            TO CONTAIN KEY PART "A"
RKEYB     EQU     R5            TO CONTAIN KEY PART "B"
*
* ===================================================================
*     KEY GENERATED CONSISTS OF 16 48-BIT STRINGS TO BE USED BY THE
* 16 ITERATION ENCYPHERING PROCESS. EACH BIT STRING IS PREPARED INTO
* A DOUBLE-WORD, WHERE EACH BYTE HOLDS 6 BITS.
*     THE SAME KEY STRINGS ARE USED ALSO FOR DECYPHERING - BUT IN A
* REVERSED ORDER. ALL ENC/DEC KEY-STRINGS ARE INSERTED INTO KEYTAB.
* THUS, ITS SIZE IS 2* 16*8 = 256 BYTES.
*     === CALLING SEQUENCE:    CALL INITKY(INPUT-KEY,KEYTAB)
*
*     === USE OF KEYTAB:  ENC: CALL ENC64(TXT,KEYTAB(1,1))
*                         DEC: CALL ENC64(TXT,KEYTAB(1,2))
*
*     FIRST STEP WOULD BE TO GENERATE THE 2 INITIAL KEY-REGISTERS C &
* D, ACCORDING TO "PERMUTATION CHOICE 1", PERFORMED UPON THE * 64-BIT
* KEY SUPPLIED AS 1ST INPUT PARAMETER.
* ===================================================================
*
*
          L    R12,0(R1)          R12 -> 64 KEY BITS.
          L    R7,=X'40000000'    LIGHTS KEY REG BITS
          SLR  R8,R8              C0: KEY BITS 1-28 (IN POS. 2-29)
          SLR  R9,R9              D0: KEY BITS 29-56. (POS.  2-29)
GET8BITS EQU   *                  3-ITER. GET 8 BITS AT A TIME.
          LA   R2,7(R12)          R2-> LAST INPUT KEY BYTE
          LA   R3,8               FOR BCT OF LOOP
LOOP#1       EQU  *
             TM   0(R2),X'80'     BITS 57,49,41,33,25,17,9,1 FOR C0
             BZ   *+6             WHEN ZERO - JUMP OVER LIGHT
                OR   R8,R7        LIGHT A C0 BIT IN R8
             TM   0(R2),X'02'     D0 BITS: 63,55,47,39,31,23,23,15,7
             BZ   *+6             WHEN ZERO - JUMP OVER LIGHT
                OR   R9,R7        LIGHT A D0 BIT IN R9
             SRL  R7,1            MASK WILL LIGHT NEXT BIT
             BCTR R2,0
             BCT  R3,LOOP#1       BCT LOOP.
*                                  ==== 2ND TIME
          LA   R2,7(R12)          R2-> LAST INPUT KEY BYTE
          LA   R3,8               FOR BCT OF LOOP
LOOP#2       EQU  *
             TM   0(R2),X'40'     C0 BITS: 58,50,42,34,26,18,10,2
             BZ   *+6             WHEN ZERO - JUMP OVER LIGHT
                OR   R8,R7        LIGHT A C0 BIT IN R8
             TM   0(R2),X'04'     D0 BITS: 62,54,43 ...
             BZ   *+6             WHEN ZERO - JUMP OVER LIGHT
                OR   R9,R7        LIGHT A D0 BIT IN R9
             SRL  R7,1
             BCTR R2,0
             BCT  R3,LOOP#2       BCT LOOP.
*                                  ==== 3RD TIME
          LA   R2,7(R12)          R2-> LAST INPUT KEY BYTE
          LA   R3,8               FOR BCT OF LOOP
LOOP#3       EQU  *
             TM   0(R2),X'20'     C0 BITS:
             BZ   *+6             WHEN ZERO - JUMP OVER LIGHT
                OR   R8,R7        LIGHT A C0 BIT IN R8
             TM   0(R2),X'08'     D0 BITS:
             BZ   *+6             WHEN ZERO - JUMP OVER LIGHT
                OR   R9,R7        LIGHT A D0 BIT IN R9
             SRL  R7,1
             BCTR R2,0
             BCT  R3,LOOP#3       BCT LOOP.
* ==== TREAT REMAINING BITS: 25-28 & 53-56 (DIVIDED TO 2 LOOPS)
REMAIN    LA   R3,0(R12)          COMPARE VALUE FOR BXH
          BCTR R3,0               MAKE SURE LOOP IS DONE 4 TIMES...
          LA   R4,4(R3)           R4 -> 3RD BYTE (FOR BIT 28)
          L    R2,=F'-1'          DECREMENT FOR BXH
LREST        EQU  *
             TM   0(R4),X'10'    GET BITS 28,20,12,4 INTO POSITIONS
*                                 - 53 TO 56 (25-28 OF D0)
             BZ   *+6
                OR   R9,R7
             TM   4(R4),X'10'    GET BITS 60,52,44,36 INTO POS.
*                                 - 25-28 (OF C0)
             BZ   *+6
                OR   R8,R7
             SRL  R7,1
             BXH  R4,R2,LREST    PREVIOUS BYTE
*
* ==== STEP 2: GENERATE 16 KEY SEQUENCES FOR ENC/DEC. ON EACH STEP,
* ==== KEY REGS ARE LEFT-SHIFTED CYCLICLY, AND 48 BITS ARE EXTRACTED
* ==== ACCORDING TO "PERMUTATION CHOICE 2". NUMBER OF SHIFT STEPS IS
* ==== ALSO DETERMINED BY A STANDARD D.E.S TABLE.
*
          L    R12,4(R1)          R12 -> KEYTAB (ENC)
          LA   R11,2*16*8-8       OFFSET TO DEC-KEYTAB'S LAST ENTRY
          L    R10,=F'8'          USED BY "SHIFT" TO LIGHT 28TH KEY BIT
*     ====== SHIFT LEFT AND CREATE FIRST KEY SEQUENCE
          SHIFT1
          BAL  R14,PC2
*     ====== SHIFT LEFT AND CREATE SECOND KEY SEQUENCE
          SHIFT1
          BAL  R14,PC2
*
*     ====== C(I) & D(I) ARE SHIFTED 1 ! 2 STEPS, AND PC2 EXTRACTS
*     ====== APPROPRIATE BITS FOR I+1 KEY SEQUENCE.
*
          LA   R2,2
LOOP1        EQU  *                       A 2-ITERATION LOOP.
             SHIFT2
             BAL  R14,PC2
             SHIFT2
             BAL  R14,PC2
             SHIFT2
             BAL  R14,PC2
             SHIFT2
             BAL  R14,PC2
             SHIFT2
             BAL  R14,PC2
             SHIFT2
             BAL  R14,PC2
             SHIFT1
             BAL  R14,PC2
*
             BCT  R2,LOOP1
        ARLEND  RC=NO
*
* ==== PERMUTED CHOICE 2: GENERATING A 48-BIT KEY-SEQUENCE IN 8 BYTES.
* ==== (6 BITS IN A BYTE, POS. 1-6, SO TO SERVE AS INDEX INTO SBOX).
*
PC2     EQU   *
        SLR   RKEYA,RKEYA           ZERO KEYA
        MAKEKEY  PART=A    1ST KEY(I) WORD INTO "RKEYA"
        SLR   RKEYB,RKEYB           ZERO KEYB
        MAKEKEY  PART=B    2ND KEY(I) WORD INTO "RKEYB"
*                               - EXTRACTION (48 WORDS)
        ST      RKEYA,0(R12)       R12-> ENC-KEYTAB(I)
        ST      RKEYB,4(R12)
        ST      RKEYA,0(R11,R12)           R11= OFFSET TO DEC-KEYTAB(16
        ST      RKEYB,4(R11,R12)
          LA    R12,8(R12)           NEXT ENC-KEYTAB ENTRY
          S     R11,=F'16'           R11 = R11-TWO KEYTAB ENTRIES
          BR    R14                  BACK TO PROCESS.
*
*   ===== MASKS: A MASK ENABLES EXTRACTION OF A SPECIFIC BIT OUT OF
*   ===== KEY REGS. REMEMBER THAT THEY START AT POS 2. (C3 IS 4TH BIT).
MASKS     EQU *
S1MASK    DC X'00020000',X'00004000',X'00100000'
          DC X'00000080',X'40000000',X'04000000'
*            === C14,C17,C11,C24,C1,C5
S2MASK    DC X'10000000',X'00000008',X'00010000'
          DC X'02000000',X'00000400',X'00200000'
*            === C3,C28,C15,C6,C21,C10
S3MASK    DC X'00000100',X'00001000',X'00080000'
          DC X'08000000',X'00000020',X'00800000'
*             === C23,C19,C12,C4,C26,C19
S4MASK    DC X'00008000',X'01000000',X'00000010'
          DC X'00000800',X'00040000',X'20000000'
*             === C16,C7,C27,C20,C13,C2
S5MASK    DC X'00040000',X'00000080',X'10000000'
          DC X'00400000',X'00001000',X'00000010'
*             === D13,D24,D3,D9,D19,D27
S6MASK    DC X'20000000',X'00080000',X'00000100'
          DC X'00004000',X'04000000',X'00000800'
*             === D2,D12,D23,D17,D5,D20
S7MASK    DC X'00008000',X'00000400',X'00100000'
          DC X'00000008',X'02000000',X'00000040'
*             === D16,D21,D11,D28,D6,D25
S8MASK    DC X'00002000',X'00020000',X'00000200'
          DC X'00800000',X'40000000',X'08000000'
*             === D18,D14,D22,D8,D1,D4
*
          END
