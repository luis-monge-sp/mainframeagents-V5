*********************************************************************** 00010000
****                                                               **** 00020000
****       CONTROL-SA  RELEASE 1.3.0                               **** 00030000
****                                                               **** 00040000
****       LICENCED MATERIAL - NEW DIMENSION SOFTWARE LTD.         **** 00050000
****                                                               **** 00060000
*********************************************************************** 00070000
*  MOVES THE STRING "MSG" INTO "LINE" AFTER PLANTING IN IT THE NUMBERS* 00080000
*  N1,N2... INSTEAD OF "#" SIGNS, AND THE STRINGS AREA1,AREA2...      * 00090000
*  INSTEAD OF "_" SIGNS.                                              * 00100000
*                                                                     * 00110000
* LINE  - (O) THE OUTPUT LINE INTO WHICH ALL THE MESS IS MOVED        * 00120000
* LLINE - (O) THE LENGTH OF THE DATA IN "LINE"                        * 00130000
* MLINE - (I) A LIMITATION ON "LLINE"                                 * 00140000
* MSG   - (I) A STRING THAT ENDS WITH A "½" (CENT), AND CONTAINS A "#"* 00150000
*         SIGN FOR EVERY NUMBER AND A "_" SIGN FOR EVERY STRING THAT  * 00160000
*         HAS TO BE PLANTED IN IT.                                    * 00170000
*                                                                     * 00180000
* FOR EACH OCCURANCE OF "#" IN "MSG" THERE SHOULD COME AN ADDITIONAL  * 00190000
* PARAMETER "N" - (I) THE NUMBER TO BE CONVERTED TO CHARACTERS AND    * 00200000
*                 PLANTED INSTEAD OF THE "#"                          * 00210000
*                                                                     * 00220000
* FOR EACH OCCURANCE OF "_" IN "MSG" THERE SHOULD COME ADDITIONAL     * 00230000
* PARAMETERS: EITHER  AREA,LAREA   OR   AREA,CHAR,MAREA    WHERE:     * 00240000
*      "AREA" - (I) THE CHARACTER STRING TO BE SUBSTITUTED FOR THE "_"* 00250000
*      "LAREA"- (I) THE LENGTH OF THAT STRING                         * 00260000
*      "CHAR" - (I) ONE CHARACTER DIFFERENT FROM X'FF' OR X'00' THAT  * 00270000
*                   DELIMITS "AREA"                                   * 00280000
*      "MAREA"- (I) MAXIMUM NUMBER OF CHARACTERS THAT ARE TO BE MOVED * 00290000
*                   FROM "AREA" IF NO CHARACTER MATCHING "CHAR" IS    * 00300000
*                   FOUND IN IT.                                      * 00310000
*                                                                     * 00320000
*      THE ORDER IN WHICH THE NUMBERS AND STRINGS APPEAR MUST MATCH   * 00330000
* THE ORDER OF THE "#" AND "_" SIGNS IN "MSG"                         * 00340000
*                                                                     * 00350000
*    EXAMPLES:                                                        * 00360000
* CALL MOVEIN(LINE,L,40,'MSG ##X_ #_# IS #=# ½',                      * 00370000
*                 -312,20,'YZ',2, 8700,' RES',4,10,-100009,376654)    * 00380000
* WILL RESULT IN L=40, AND                                            * 00390000
* LINE='MSG -31220XYZ 8700 RES10 IS -100009=3766'                     * 00400000
*                                                                     * 00410000
*    OR:   CALL MOVEIN(A,LA,40,'*** RC FOR (_) IS #. ½',MEM,8,RC)     * 00420000
* WHERE MEM='BLANK   ',  RC=17,                                       * 00430000
* WILL CAUSE: LA=29, A='*** RC FOR (BLANK   ) IS 17. '                * 00440000
*                                                                     * 00450000
*    OR:   CALL MOVEIN(A,LA,40,'*** RC FOR (_) IS #. ½',MEM,' ',8,RC) * 00460000
* WHERE MEM='BLANK   ',  RC=17,                                       * 00470000
* WILL CAUSE: LA=26, A='*** RC FOR (BLANK) IS 17. '                   * 00480000
*                                                                     * 00490000
*********************************************************************** 00500000
* MM001   04.03.93 ADD '$' FUNCTION (VARIABLE HEX STRING)      - MM - * 00510000
* IS10188 07.10.24 ADD AMODE(ANY) AND RMODE(ANY)               - NY - * 00511000
*********************************************************************** 00520000
*---------------------------------------------------------------------* 00530000
*        WORK DSECT                                                   * 00540000
*---------------------------------------------------------------------* 00550000
WORK     DSECT                                                          00560000
SAVE     DS    20F    SAVE AREA                                         00570000
LENADDR  DS    F      FOR KEEPING ADDR FOR "LLINE"                      00580000
LINEADDR DS    F      FOR KEEPING ADDR OF "LINE"                        00590000
PKNUM    DS    D      FOR THE NUMBER IN PACKED-DECIMAL                  00600000
CHNUM    DS    CL11   FOR THE NUMBER IN CHARACTER FORM                  00610000
NUMSAV   DS    3F     SAVE AREA FOR SEVERAL REGISTERS                   00620000
KEEPR2   DS    F      FOR KEEPING R2 DURING TRT                         00630000
STRSAV   DS    3F     SAVE AREA FOR SAVING A FEW REGISTERS              00640000
*---------------------------------------------------------------------* 00650000
*        EQUATES                                                      * 00660000
*---------------------------------------------------------------------* 00670000
         CTSEQUR                                                        00680000
ROUT     EQU   R2        -> ONE AFTER LAST STORED CHAR                  00690000
RMAX     EQU   R3        -> LAST PERMITTED PLACE FOR STORING CHARS      00700000
RIN      EQU   R4        -> CURRENT INPUT CHAR                          00710000
RCH      EQU   R5        CURRENT INPUT CHAR                             00720000
RTYP     EQU   R6        TYPE OF INPUT CHAR (0=ZVL, 4=½, 8=#, 12=_)     00730000
RLEN     EQU   R7        FOR KEEPING ALL KINDS OF LENGTHS               00740000
RIMAX    EQU   R8        LIMIT ON "MSG"S LENGTH (INITIATED TO 72)       00750000
RPRMS    EQU   R12       -> LAST USED ADDR IN PARMS-BLOCK               00760000
*              R14 - RETURN ADDR FOR INTERNAL SUBROUTINES | WORK REG    00770000
*              R15 - VALUE RETURNED BY INTERNAL SUBROUTINES | WORK REG  00780000
*---------------------------------------------------------------------* 00790000
*        START OF CODE                                                * 00800000
*---------------------------------------------------------------------* 00810000
CTSAMVN  CSECT                                                          00820000
CTSAMVN  AMODE ANY                                                      00821000
CTSAMVN  RMODE ANY                                                      00822000
         STM   14,12,12(R13)                                            00830000
         LR    R10,R15                                                  00840000
         USING CTSAMVN,R10                                              00850000
         USING WORK,R13                                                 00860000
         CTSLEVEL                                                       00870000
         L     RIN,12(R1)         -> MSG                                00880000
         BCTR  RIN,0              -> ONE BEFORE MSG                     00890000
         L     ROUT,0(R1)         -> ONE AFTER LAST STORED CHAR         00900000
         ST    ROUT,LINEADDR      (KEEP IT FOR FUTURE USE)              00910000
         LA    R15,4(R1)          -> WHERE TO RETURN "LLINE"            00920000
         ST    R15,LENADDR           KEEP IT FOR FUTURE USE             00930000
         L     RMAX,8(R1)         -> MLINE                              00940000
         AR    RMAX,ROUT          -> ONE AFTER END OF "LINE"            00950000
         BCTR  RMAX,0             -> LAST PERMITTED PLACE IN "LINE"     00960000
         LA    RIMAX,72           MAX PERMITTED LEN FOR "MSG"           00970000
         LA    RPRMS,12(R1)       -> LAST INSPECTED ADDR IN PARMS-BLOCK 00980000
         SLR   RCH,RCH            INPUT CHAR                            00990000
         SLR   RTYP,RTYP          ITS TYPE (04=½ 0C=# 10=_ 08=ELSE)     01000000
*                                                                       01010000
* REPEAT UNTIL "MSG" EXHAUSTED (I.E. MORE THAN 72 CHARS PROCESSED):     01020000
* CHECK CURRENT INPUT CHAR:                                             01030000
*   IF "½" - FINISH                                                     01040000
*   IF "#" - GO PLANT A NUMBER                                          01050000
*   IF "_" - GO PLANT A STRING                                          01060000
*   IF "~" - GO PLANT A HEX NUMBER                                      01070000
*   IF "$" - GO PLANT A HEX STRING                                      01080000
*   ELSE   - GO ADD IT TO OUTPUT                                        01090000
*                                                                       01100000
LOOP     EQU   *                                                        01110000
         LA    RIN,1(RIN)       -> NEXT CHAR IN "MSG"                   01120000
         IC    RCH,0(RIN)       MAKE IT CURRENT CHAR                    01130000
         IC    RTYP,TYPDIC(RCH) ITS TYPE: 4=½ 8=# 12=_ 0=ELSE           01140000
         B     *+4(RTYP)                                                01150000
         B     CHAR             ANYTHING - ADD TO "LINE"                01160000
         B     FINISH           '½' MEANS: END OF "MSG"                 01170000
         B     NUM              '#' MEANS: PLANT A NUMBER               01180000
         B     STR              '_' MEANS: PLANT A STRING               01190000
         B     HEX              '~' MEANS: PLANT A HEX NUMBER           01200000
         B     HEXSTR           '$' MEANS: PLANT A HEX STRING    MM001  01210000
CHAR     BAL   R14,PUTCH                                                01220000
         B     LOOPEND                                                  01230000
NUM      BAL   R14,PUTNUM                                               01240000
         B     LOOPEND                                                  01250000
STR      BAL   R14,PUTSTR                                               01260000
         B     LOOPEND                                                  01270000
HEX      BAL   R14,PUTHEX                                               01280000
         B     LOOPEND                                                  01290000
HEXSTR   BAL   R14,PUTHEX2                                       MM001  01300000
         B     LOOPEND                                           MM001  01310000
LOOPEND  BCT   RIMAX,LOOP                                               01320000
* ------- END OF MAIN LOOP -------                                      01330000
*                                                                       01340000
FINISH   EQU   *                                                        01350000
         S     ROUT,LINEADDR       = NUMBER OF STORED CHARS             01360000
         L     R15,LENADDR         ADDR FOR RETURNING IT ("LLINE")      01370000
         ST    ROUT,0(R15)         RETURN IT                            01380000
         LM    R14,R12,12(R13)                                          01390000
         LA    R15,4               (FOR "MOVE-&-GOTO" EFFECT)           01400000
         BR    R14                                                      01410000
*                                                                       01420000
TYPDIC   DC    256X'00'      DICTIONARY OF CHAR TYPES:                  01430000
         ORG   TYPDIC+C'½'                                              01440000
         DC    X'04'         '½' = END OF MESSAGE                       01450000
         ORG   TYPDIC+C'#'                                              01460000
         DC    X'08'         '#' = PLANT A NUMBER                       01470000
         ORG   TYPDIC+C'_'                                              01480000
         DC    X'0C'         '_' = PLANT A STRING                       01490000
         ORG   TYPDIC+C'~'                                              01500000
         DC    X'10'         '~' = PLANT A HEX NUMBER                   01510000
         ORG   TYPDIC+C'$'                                              01520000
         DC    X'14'         '$' = PLANT A HEX STRING                   01530000
         ORG                                                            01540000
*                                                                       01550000
*--------------------------------------------------------------         01560000
*        INTERNAL SUBROUTINE "PUTCH"                                    01570000
* ADDS ONE CHARACTER TO THE OUTPUT LINE                                 01580000
* INPUT:  RCH  = CHAR TO BE ADDED TO "LINE"                             01590000
*         ROUT -> PLACE FOR IT                                          01600000
*         RMAX -> LAST PERMITTED PLACE FOR STORING                      01610000
*         R14  RETURN ADDR                                              01620000
* "ROUT" IS INCREMENTED BY ONE;                                         01630000
* A BRANCH TO "FINISH" IS EXECUTED IF THE CHAR IS STORED IN LAST PLACE  01640000
* PERMITTED.                                                            01650000
*                                                                       01660000
PUTCH    EQU   *                                                        01670000
         STC   RCH,0(ROUT)        PUT THE CHAR                          01680000
         LA    ROUT,1(ROUT)       -> NEXT PLACE                         01690000
         CR    ROUT,RMAX          BEYOND END OF "LINE"?                 01700000
         BH    FINISH                 IF YES - QUIT                     01710000
         BR    R14                RETURN                                01720000
*--------------------------------------------------------------         01730000
*        INTERNAL SUBROUTINE "PUTHEX"                                   01740000
* CONVERTS A NUMBER FROM BINARY TO HEX AND ADDS IT TO OUTPUT LINE       01750000
* (CALLS "PUTCH" FOR ADDING EACH CHARACTER)                             01760000
* R15,R1,RCH - ARE DESTROYED.                                           01770000
*                                                                       01780000
PUTHEX   EQU   *                                                        01790000
         ST    R14,NUMSAV      |                                        01800000
         ST    RIN,NUMSAV+4    | SAVE CALLER'S REGISTERS                01810000
         ST    RLEN,NUMSAV+8   |                                        01820000
         BAL   R14,GETPARM      GET NUMBER (IN R15)                     01830000
         LTR   RIN,R15          IS IT ZERO?                             01840000
         BNZ   GETHEX                 IF NOT ZERO - GO WORK HARD.       01850000
         LA    RCH,C'0'         FOR ZERO - ONLY ADD A '0' TO "LINE"     01860000
         BAL   R14,PUTCH                                                01870000
         B     NUMRTRN                   AND RETURN.                    01880000
*                                                                       01890000
*        GET HEX REPRESENTATION FOR BYNARY NUMBER                       01900000
*        R0 = THE INPUT BYNARY NUMBER                                   01910000
*        PKNUM = THE DUMPED HEX REPRESENTATION                          01920000
*                                                                       01930000
GETHEX   DS    0H                                                       01940000
         LR    R0,RIN                                                   01950000
         LA    R15,8               LOOP COUNTER                         01960000
         XR    R1,R1               WORK REGISTER                        01970000
HEXLOOP  DS    0H                                                       01980000
         SRDL  R0,4                GET ONE HEX DIGIT                    01990000
         SRL   R1,28               IN R1                                02000000
         IC    R1,HEXTAB(R1)       GET IT'S HEX REPRESENTATION          02010000
         STC   R1,PKNUM-1(R15)     AND STORE IT IN HEX BUFFER           02020000
         BCT   R15,HEXLOOP         REPEAT IF MORE DIGITS                02030000
         LA    RLEN,8                                                   02040000
         LA    RIN,PKNUM                                                02050000
HEXPRTL  IC    RCH,0(RIN)        GET A CHARACTER FROM THE CONVERTED NUM 02060000
         LA    RIN,1(RIN)        -> NEXT CHAR OF NUMBER                 02070000
         BAL   R14,PUTCH         ADD THE CHARACTER TO "LINE"            02080000
         BCT   RLEN,HEXPRTL      LOOP TILL ALL DIGITS PLANTED.          02090000
         B     NUMRTRN                   AND RETURN.                    02100000
HEXTAB   DC    C'0123456789ABCDEF'                                      02110000
*                                                                       02120000
*--------------------------------------------------------------         02130000
*        INTERNAL SUBROUTINE "PUTNUM"                                   02140000
* CONVERTS A NUMBER FROM BINARY TO CHARS AND ADDS IT TO OUTPUT LINE     02150000
* (CALLS "PUTCH" FOR ADDING EACH CHARACTER)                             02160000
* R15,R1,RCH - ARE DESTROYED.                                           02170000
*                                                                       02180000
PUTNUM   DS    0F                                                       02190000
         ST    R14,NUMSAV      |                                        02200000
         ST    RIN,NUMSAV+4    | SAVE CALLER'S REGISTERS                02210000
         ST    RLEN,NUMSAV+8   |                                        02220000
         BAL   R14,GETPARM      GET ADDR OF NUMBER (IN R15)             02230000
         LTR   RIN,R15          IS IT ZERO?                             02240000
         BNZ   NONZERO                IF NOT ZERO - GO WORK HARD.       02250000
         LA    RCH,C'0'         FOR ZERO - ONLY ADD A '0' TO "LINE"     02260000
         BAL   R14,PUTCH                                                02270000
         B     NUMRTRN                   AND RETURN.                    02280000
*                                                                       02290000
* CONVERT A NONZERO NUMBER FROM BINARY TO CHARACTERS AND GET NUMBER OF  02300000
* DIGITS (THE PART OF "GET NUM OF DIGS" DOES NOT WORK IF THE NUMBER IS  02310000
* ZERO)                                                                 02320000
*                                                                       02330000
NONZERO  EQU   *                                                        02340000
         CVD   RIN,PKNUM          THE NUM IN PACKED DECIMAL FORM.       02350000
         UNPK  CHNUM(11),PKNUM(8) CHARACTER FORM.                       02360000
         OI    CHNUM+10,X'F0'     CONVERT RIGHTMOST DIG TO A DECENT DIG 02370000
         ST    R2,KEEPR2              SAVE R2; TRT MODIFIES IT.         02380000
         TRT   CHNUM(11),TRTDIC   FIND MOST SIGNIFICANT DIGIT'S PLACE   02390000
         L     R2,KEEPR2              RESTORE R2 (= ROUT)               02400000
         LTR   RIN,RIN            TEST THE NUMBER'S SIGN:               02410000
         BP    POSITIVE           IF POS.- SKIP PLANTING MINUS SIGN     02420000
*                                                                       02430000
         BCTR  R1,0               -> ONE BEFORE LEFTMOST DIGIT          02440000
         MVI   0(R1),C'-'         PLANT THERE A MINUS SIGN.             02450000
*                                                                       02460000
POSITIVE EQU   *                                                        02470000
         LA    RLEN,CHNUM+11     LEN OF NUM = ADDR OF RIGHTMOST DIG     02480000
         SR    RLEN,R1             MINUS ADDR OF LEFTMOST DIG (OR SIGN) 02490000
         LR    RIN,R1            -> LEFTMOST DIGIT (OR MINUS SIGN)      02500000
NUMLOOP  IC    RCH,0(RIN)        GET A CHARACTER FROM THE CONVERTED NUM 02510000
         LA    RIN,1(RIN)        -> NEXT CHAR OF NUMBER                 02520000
         BAL   R14,PUTCH         ADD THE CHARACTER TO "LINE"            02530000
         BCT   RLEN,NUMLOOP      LOOP TILL ALL DIGITS PLANTED.          02540000
*                                                                       02550000
NUMRTRN  L     R14,NUMSAV      |                                        02560000
         L     RIN,NUMSAV+4    | RESTORE CALLER'S REGISTERS             02570000
         L     RLEN,NUMSAV+8   |                                        02580000
         BR    R14                                                      02590000
*                                                                       02600000
NUMERROR LA    RCH,C'#'        THE '#' TO BE LEFT IN CASE OF ERROR      02610000
         BAL   R14,PUTCH       ADD IT TO OUTPUT LINE                    02620000
         B     NUMRTRN         AND RETURN                               02630000
*                                                                       02640000
*                                                                       02650000
* THE DICTIONARY FOR LOCATING THE LEFTMOST DIGIT USING TRT INSTRUCTION; 02660000
* ONLY THE VALUES FOR '0' THROUGH '9' ARE MEANINGFUL SINCE THE AREA IN  02670000
* WHICH SEARCHING IS DONE CONTAINS ONLY THOSE CHARACTERS.               02680000
*                                                                       02690000
TRTDIC   EQU   *-C'0'                                                   02700000
         DC    X'00',9X'01'   DON'T STOP ON '0', STOP ON '1'..'9'       02710000
*                                                                       02720000
*--------------------------------------------------------------         02730000
*        INTERNAL SUBROUTINE "PUTSTR"                                   02740000
* GETS A STRING AND EITHER ITS LEN OR ITS DELIMITING CHAR + ITS MAX LEN 02750000
* FROM THE PARMS-BLOCK, AND ADDS IT TO THE OUTPUT LINE.                 02760000
* (CALLS "PUTCH" FOR ADDING EACH CHARACTER)                             02770000
* R15,RCH - ARE DESTROYED.                                              02780000
*                                                                       02790000
PUTSTR   DS    0F                                                       02800000
         ST    R14,STRSAV     |                                         02810000
         ST    RIN,STRSAV+4   | SAVE CALLER'S REGISTERS                 02820000
         ST    RLEN,STRSAV+8  |                                         02830000
         BAL   R14,GETPARM     GET ADDR OF STRING (IN R15)              02840000
         LTR   RIN,R15         IS THERE ANY?                            02850000
         BZ    STRERROR        IF NOT - JUST LEAVE A '_'                02860000
         BAL   R14,GETPARM     GET ADDR OF STR-LEN OR CHAR (IN R15)     02870000
         LTR   RLEN,R15        IS THERE ANY?                            02880000
         BZ    STRERROR        IF NOT - JUST LEAVE A '_'                02890000
*                                                                       02900000
STRLOOP  IC    RCH,0(RIN)      GET A CHARACTER FROM THE STRING          02910000
         LA    RIN,1(RIN)      -> NEXT CHAR OF STRING                   02920000
         BAL   R14,PUTCH       ADD THE CHARACTER TO "LINE"              02930000
         BCT   RLEN,STRLOOP    LOOP TILL ALL STRING MOVED.              02940000
*                                                                       02950000
STRRTRN  L     R14,STRSAV     |                                         02960000
         L     RIN,STRSAV+4   | RESTORE CALLER'S REGISTERS              02970000
         L     RLEN,STRSAV+8  |                                         02980000
         BR    R14                                                      02990000
*                                                                       03000000
STRERROR LA    RCH,C'_'        THE '_' TO BE LEFT IN CASE OF ERROR      03010000
         BAL   R14,PUTCH       ADD IT TO OUTPUT LINE                    03020000
         B     STRRTRN         AND RETURN                               03030000
*                                                                       03040000
*--------------------------------------------------------------  MM001  03050000
*        INTERNAL SUBROUTINE "PUTHEX2"                           MM001  03060000
* GETS A STRING AND ITS LEN FROM THE PARMS-BLOCK,                MM001  03070000
* AND ADDS ITS HEX REPRESENTATION TO THE OUTPUT LINE.            MM001  03080000
* (2 OUTPUT BYTES FOR EACH INPUT BYTE, OF COURSE)                MM001  03090000
* R15,RCH - ARE DESTROYED.                                       MM001  03100000
*                                                                MM001  03110000
PUTHEX2  DS    0F                                                MM001  03120000
         ST    R14,STRSAV     |                                  MM001  03130000
         ST    RIN,STRSAV+4   | SAVE CALLER'S REGISTERS          MM001  03140000
         ST    RIMAX,STRSAV+8 |                                  MM001  03150000
*                                                                MM001  03160000
         BAL   R14,GETPARM     GET ADDR OF STRING (IN R15)       MM001  03170000
         LTR   RIN,R15         IS THERE ANY?                     MM001  03180000
         BZ    HEXERROR        IF NOT - JUST LEAVE A '$'         MM001  03190000
         BAL   R14,GETPARM     GET ADDR OF STR-LEN (IN R15)      MM001  03200000
         LTR   RLEN,R15        IS THERE ANY?                     MM001  03210000
         BZ    HEXERROR        IF NOT - JUST LEAVE A '$'         MM001  03220000
*                                                                MM001  03230000
         SR    R9,R9               CLEAR R9 FOR IC               MM001  03240000
HEXLP    DS    0H                                                MM001  03250000
         IC    R0,0(RIN)           GET A CHARACTER FROM THE STR  MM001  03260000
         SRDL  R0,4                GET ONE HEX DIGIT             MM001  03270000
         SRL   R1,28               IN R1                         MM001  03280000
         IC    R9,HEXTAB(R1)       GET IT'S HEX REPRESENTATION   MM001  03290000
         SRDL  R0,4                GET ONE HEX DIGIT             MM001  03300000
         SRL   R1,28               IN R1                         MM001  03310000
         IC    RCH,HEXTAB(R1)      GET IT'S HEX REPRESENTATION   MM001  03320000
         BAL   R14,PUTCH       ADD THE CHARACTER TO "LINE"       MM001  03330000
         LR    RCH,R9          GET 2ND CHAR IN RCH               MM001  03340000
         BAL   R14,PUTCH       ADD THE CHARACTER TO "LINE"       MM001  03350000
         LA    RIN,1(RIN)      -> NEXT CHAR OF STRING            MM001  03360000
         BCT   RLEN,HEXLP      LOOP TILL ALL STRING MOVED.       MM001  03370000
*                                                                MM001  03380000
HEXRTRN  L     R14,STRSAV     |                                  MM001  03390000
         L     RIN,STRSAV+4   | RESTORE CALLER'S REGISTERS       MM001  03400000
         L     RIMAX,STRSAV+8 |                                  MM001  03410000
         BR    R14                                               MM001  03420000
*                                                                MM001  03430000
HEXERROR LA    RCH,C'$'        '$' IS LEFT IN CASE OF ERROR      MM001  03440000
         BAL   R14,PUTCH       ADD IT TO OUTPUT LINE             MM001  03450000
         B     HEXRTRN         AND RETURN                        MM001  03460000
*                                                                MM001  03470000
*--------------------------------------------------------------         03480000
*        INTERNAL SUBROUTINE "GETPARM"                                  03490000
* GETS NEXT PARM'S ADDRESS FROM THE PARMS-BLOCK. IF PARMS-BLOCK ALREADY 03500000
* EXHAUSTED - RETURN ADDR=0.  (THE ADDR IS RETURNED IN R15)             03510000
*                                                                       03520000
* R15,R1,RCH - ARE DESTROYED.                                           03530000
*                                                                       03540000
GETPARM  DS    0F                                                       03550000
*TM      CLC   4(4,RPRMS),=XL4'80000000' PREVIOUS PARM LAST IN BLOCK?   03560000
*TM      BE    NOMORE            IF YES - RETURN A "NO-ADDR" INDICATION 03570000
         LA    RPRMS,4(RPRMS)    -> NEXT ADDR IN BLOCK                  03580000
         L     R15,0(RPRMS)      LOAD IT                                03590000
         BR    R14               AND RETURN                             03600000
*TMORE   SLR   R15,R15        RETURN A ZERO INSTEAD OF AN ADDR.         03610000
*TM      BR    R14                                                      03620000
*                                                                       03630000
         LTORG                                                          03640000
         END                                                            03650000
