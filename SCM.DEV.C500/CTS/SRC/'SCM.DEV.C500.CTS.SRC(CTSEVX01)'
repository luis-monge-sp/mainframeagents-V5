         TITLE 'SA-AGENT CTSEVX01 EXIT FOR ONLINE INTERCEPTOR'
*
*********************************************************************
***                                                              ****
***   SA-AGENT VERSION 3.1.01                                    ****
***                                                              ****
***   (C) COPYRIGHT 1999-2002 BMC SOFTWARE INC.                  ****
***                                                              ****
*********************************************************************
*                                                                     *
* MODULE NAME : CTSEVX01                                              *
*                                                                     *
* DESCRIPTION : SA-AGENT IRREVX01 EXIT ROUTINE                        *
*                                                                     *
* FUNCTION: TRAP RRSF-INBOUND PASWWORD CHANGE ENVELOPED IN ALTUSER    *
*           COMMAND AND NOTIFY ONLINE INTERCEPTOR                     *
*                                                                     *
* ATTRIBUTES  : THE EXIT MODULE SHOULD BE LINK-EDITED WITH RMODE ANY  *
*               AND AMODE 31 , REUSABLE AND REENTRABLE , INTO         *
*               SYSTEM LINKLIB CONCATENATION                          *
*                                                                     *
* RESTRICTIONS : THIS EXIT IS OPERATED ON CTSA MANAGED NODE           *
*                (WHERE FULL RACF AGENT IS OPERATED)                  *
*                                                                     *
*                IT MUST BE LINKED WITH MODULE CTSRRSTB, A TABLE      *
*                SEPARATELY ASSMBLED BY THE CUSTOMER                  *
*                                                                     *
*                IF CTSRRSTB HAS FLAG WTODBG1 TURNED ON, THIS EXIT    *
*                CAN BE TRACED BY WTO MESSAGES                        *
* INPUT :                                                             *
*                                                                     *
*    REGISTER 1 POINTS TO A RACF IRREXPL EXIT PARAMETER LIST          *
*    WHICH IS MAPPED BY THE EVXPL CONTROL BLOCK (IRREVXP MACRO)       *
*                                                                     *
**       REQUIREMENTS:                                              **
**       1. The exit routine must be added to the IRREVX01 exit     **
**          point via OS/390(MVS) Dynamic Exit Services.  For       **
**          the routine to take effect at IPL time, have an         **
**          entry in the PROGxx member of SYS1.PARMLIB, as          **
**          pointed to by PROG= in the IEASYSxx member of           **
**          SYS1.PARMLIB.  See OS/390(MVS) Initialization and       **
**          Tuning Reference for details.                           **
**                                                                  **
**          EXAMPLE:                                                **
**           In the PROGxx member:                                  **
**            EXIT ADD                                              **
**                 EXITNAME(IRREVX01)                               **
**                 MODNAME(CTSEVX01)                                **
**                 STATE(ACTIVE)                                    **
**           Or from the console:                                   **
**            SETPROG EXIT,ADD,EXITNAME=IRREVX01,MODNAME=CTSEVX01   **
**           IN BOTH ABOVE METHODS A DSNAME CAN SPECIFY LOAD LIBRARY**
**              IF A LIBRARY WHICH IS NOT IN LINKLIST CONTAINS EXIT **
**                                                                  **
**       RETURN CODES:                                              **
**          0  - Ignore command                                     **
**          4  - Fail Command without message                       **
**          8    Fail Command with message                          **
**                                                                  **
***********************************************************************
***                                                                 ***
***      MAPPING MACROS            MACRO LIBRARY                    ***
***      --------------            -------------                    ***
***      IRREVXP                   SYS1.MODGEN                      ***
***      IHAACEE                   SYS1.MACLIB                      ***
***                                                                 ***
***********************************************************************
*                                                                     *
*                                                                     *
* CHANGE ACTIVITY :                                                   *
*                                                                     *
*    24/10/2001 SK CREATED                                            *
*                                                                     *
***********************************************************************
*
**********************************************************************
         MACRO
&WTOLBL  WTODBG &TEXT=
.* THIS MACRO GENERATES DEBUG WTO, DEPENDING ON SETTING OF WTODBG1
.* FLAG IN CTSRRSTB SEPARATE MODULE. TWO TYPES OF WTO ARE GENERATED:
.* WTO 'INLINE TEXT' GENERATED WHEN FIRST &TEXT CHAR IS NOT (
.* WTO TEXT=(),MF=(E,ML) GENERATED OTHERWISE
.* RRSFLAGS IS WORKAREA COPY OF WTODBG1 FLAG
&WTOLBL  TM     RRSFLAGS,WTOYES
         BZ     W&SYSNDX
.CHKPARM AIF ('&TEXT'(1,1) NE '(').TEXT1
         WTO TEXT=(&TEXT(1)),MF=(E,WTODBGL)
         AGO .WEXIT
.TEXT1   ANOP
         WTO &TEXT
.WEXIT    ANOP
W&SYSNDX EQU *
         MEND
****************************************************************
*        REGISTER EQUATES                                      *
* NOTE:  SHORTAGE OF REGISTERS EXISTS, TAKE CARE WHEN CHANGING *
****************************************************************
R0       EQU   0  OS USAGE
R1       EQU   1  OS USAGE
R2       EQU   2  SPARE REGISTER, USED IN ESTAE ONLY
R3       EQU   3  WORK REGISTER, NO LONG "ASSIGNMENT"
R4       EQU   4  RACF COMMAND BUFFER
R5       EQU   5  MODULE ADDRESSABILITY ALONGSIDE R12
R6       EQU   6  USED IN ANALYZING/PARSING COMMAND BUFFER
R7       EQU   7  USED IN ANALYZING/PARSING COMMAND BUFFER
R8       EQU   8  USED IN ANALYZING/PARSING COMMAND BUFFER
R9       EQU   9  INITIALLY CTSRRSTB ADDRESSABILITY
*                 AFTERWARDS USED IN ANALYZING/PARSING COMMAND BUFFER
R10      EQU   10   RETURN CODE FOR THE SUBSEQUENT PIECE OF CODE
R11      EQU   11   RACF PARAMETERS LIST TO EXIT
R12      EQU   12   MODULE ADDRESSABILITY ALONGSIDE R5
R13      EQU   13   DYNAMIC AREA
R14      EQU   14   OS USAGE
R15      EQU   15   OS USAGE
*
CTSEVX01 CSECT ,
CTSEVX01 AMODE 31
CTSEVX01 RMODE ANY
*
****************************************************************
*        PROLOG CODE                                           *
****************************************************************
*
         SAVE  (14,12),,SA-AGENT-3.1.01-CTSEVX01-&SYSDATE-&SYSTIME
         LR    R12,R15                 R12 -> PROGRAM BASE
         USING CTSEVX01,R12,R5         PROGRAM ADDRESSABILITY
*
         LR    R11,R1                  R11 -> PARAMETERS LIST TO EXIT
         USING EVXPL,R11          RACF PARAMETER LIST ADDRESSABILITY
         LA    R10,0              RETCODE=0 COMMAND IGNORED BY PRE
*                                 MANDATORY BY POST-COMMAND EXIT
****************************************************************
*        OBTAIN WORKAREA          THIS MODULE IS REENTRANT     *
****************************************************************
*
         GETMAIN RC,LV=WORKLEN         OBTAIN WORK AREA
         LTR   R15,R15                 SUCCESS ?
         BZ    CHAINSA                 YES, CONTINUE AS PLANNED
         WTO  'CTSEVX01: GETMAIN FAILED/FATAL ERROR'
         B     RETURN                  NO, CAN'T PROCESS THE EVENT
CHAINSA  DS    0H
         ST    R1,8(R13)               CHAIN
         ST    R13,4(R1)               SAVE AREAS
         LR    R13,R1                  ESTABLISH WORK AREA
         USING WORKAREA,R13               ADDRESSABILITY
*
****************************************************************
*        INITIIALIZE AND CREATE RECOVERY ENVIRONMENT
****************************************************************
         XC    ABNDCODE,ABNDCODE       CLEAR ABEND CODE
         MVC   WRKESTAE,LSTESTAE       INITIALIZE ESTAE WORK AREA
         ESTAE ABNDEXIT,PARAM=WORKAREA,TERM=YES,MF=(E,WRKESTAE)
*
         MVC   WTOAREA(WTOAREAL),WTOAREAM   INITIALIZE WTO WORK AREAS
         MVC   WTODBGL(WTODBGML),WTODBGM
*
         ICM   R9,15,VRRSFTAB               ADDRESS EXTERNAL MODULE
         BNZ   YRRSFTAB
         WTO  'CTSEVX01 FATAL: RCFRRSTB TABLE NOT LINKED WITH EXIT'
         B     EXITEXIT                NO, CAN'T PROCESS THE EVENT
YRRSFTAB EQU   *
         USING CTSRRSTB,R9                          CONTAINING TABLE
         MVC   RRSFLAGS,HDRFLAGS            EXTRACT TABLE HEADER FLAGS
         MVC   WRKDUMMY,CTSDUMMY            EXTRACT DUMMY USER
         MVC   WRKDUMML,LENDUMMY            EXTRACT DUMMY USER
*
*
*
* check if this is a PRE-exit invocation
*
         L     R3,EVXFLAGS
         TM    0(R3),EVXPRE        pre-exit ?
         BO    STARTING
         WTODBG TEXT='STARTING CTSEVX01 POST-EXIT'
         B     EXITEXIT
STARTING WTODBG TEXT='STARTING CTSEVX01 PRE-EXIT'
         TM    0(R3),EVXAT         AT or ONLYAT
         BNO   EXITEXIT           (no post-processing in this example)
         WTODBG TEXT='ISSUED BY AT OR ONLYAT'
*
* QUICK CHECK ON WHICH COMMAND WAS ISSUED: ALTUSER?
*
         L     R3,EVXCALLR
         TM    0(R3),EVXALTUS      IS THIS AN ALTUSER?
         BNO   EXITEXIT            YES
         WTODBG TEXT='ALTUSER COMMAND'
*
         L     R4,EVXCMBUF         POINT TO COMMAND BUFFER
         USING CMDBUF,R4
         MVC   WTOBUFD(120),CMDBUFD  WTO DEBUG COMMAND BUFFER
         MVC   WTOBUFL,=AL2(120)
         LA    R3,WTOBUFL
         WTODBG TEXT=(R3)
*
         L     R3,EVXSRCND         EXTRACT SOURCE NODE
         MVC   SRCNODE,0(R3)
         L     R3,EVXSRCUS         EXTRACT SOURCE USER
         MVC   SRCUSER,0(R3)
*
         L     R3,EVXACEE
         LTR   R3,R3
         BNZ   YESHACEE
         WTO  'CTSEVX01: NO LOCAL ACEE/USER FATAL ERROR'
         B     RETURN    CAN'T PROCESS THE EVENT
*
YESHACEE EQU   *
         USING ACEE,R3
         MVC  LCLUSER,ACEEUSRI
         DROP  R3
*
         MVC   CTSECWTO,=AL2(CTSECLEN)
         LA    R3,CTSECWTO   WTO DEBUG ENVIRONMENT
         WTODBG TEXT=(R3)
*
         LA    R6,ENTRYF     LOAD FIRST TABLE ENTRY
         LH    R15,ENTRYH    LOAD MAX NUMBER OF FIELDS IN ANY ENTRY
         SLL   R15,2         MULTIPLY BY 4 FOR JUMP TABLE
         B     SEARCH(R15)
SEARCH   B     CTSECFND     +0
         B     SEARCH08     +4
         B     SEARCH16     +8
*
SEARCH24 LA    R7,3   SEARCH ON 3 FIELDS CONCAT: SRCUSER-SRCNODE-LCLUSR
         WTODBG TEXT='SEARCH24'   3 ADJACENT FIELDS MAKE 24 BYTES
COMPAR24 CLC   ZEROES(ENTRYLEN),2(R6)  IS IT LAST ENTRY OF ZEROES ?
         BE    CTSECNOT                IF YES, NOT FOUND
         CH    R7,0(R6)                CHECK NUMBER OF FIELDS IN ENTRY
         BNE   NEXT24                  MUST BE 3
         CLC   CTSECENV(24),2(R6)      IF 3, COMPARE ENTRY
         BE    CTSECFND                FOUND
NEXT24   LA    R6,26(R6)               PROCEED LOOP IF NOT FOUND
         B     COMPAR24
*
SEARCH16 LA    R7,2   SEARCH ON 2 FIELDS CONCAT: SRCUSER-SRCNODE
         WTODBG TEXT='SEARCH16' 2 ADJACENT FIELDS MAKE 16 BYTES
COMPAR16 CLC   ZEROES,2(R6)
         BE    CTSECNOT
         CH    R7,0(R6)
         BNE   NEXT16
         CLC   CTSECENV(16),2(R6)
         BE    CTSECFND
NEXT16   LA    R6,26(R6)
         B     COMPAR16
*
SEARCH08 LA    R7,1   SEARCH ON 1 FIELD: SRCUSER
         WTODBG TEXT='SEARCH08' 1 FIELD 8 BYTES
COMPAR08 CLC   ZEROES,2(R6)
         BE    CTSECNOT
         CH    R7,0(R6)
         BNE   NEXT08
         CLC   CTSECENV(08),2(R6)
         BE    CTSECFND
NEXT08   LA    R6,26(R6)
         B     COMPAR08
*
CTSECNOT WTODBG TEXT='CTSECENV NOT FOUND IN TABLE'
         B     EXITEXIT
CTSECFND WTODBG TEXT='CTSECENV !!! FOUND IN TABLE'
         DROP R9
*
ANALYZER LA    R6,CMDBUFD          SET START OF BUFFER DATA
         LR    R9,R6
         AH    R6,CMDBUFO          SET FIRST BLANK AFTER COMMAND NAME
         AH    R9,CMDBUFL          SET PAST LAST IN BUFFER
*
         BAL   R14,TRAVKW         TRAVERSE FIRST KEYWORD AFTER COMMAND
         LTR   R8,R8              IS THERE A KEYWORD ?
         BZ    EXITEXIT           IF NOT, EXIT NO MSG
*
         CLI   0(R7),LEFTPAR      CHECK  ( ) SURROUNDING USERID
         BNE   CHKULEN            BYPASS IF NONE
         LA    R7,1(R7)           IGNORE ( ) SURROUNDING USERID
         BCTR  R8,0
*
CHKULEN  SR    R8,R7              CALCULATE KEYWORD LENGTH(DUMMY USER)
         CH    R8,WRKDUMML        DOES IT HAVE LENGTH OF DUMMY USER ?
         BNE   EXITEXIT           IF NOT, EXIT NO MSG
         WTODBG TEXT='USER KEYWORD HAS REQUIRED LENGTH'
*
         BCTR  R8,0               SUBSTRACT 1 FROM KEYWORD LENGTH
         EX    R8,CHKDUMMY        COMPARE KEYWORD TO DUMMY USER
         BNE   EXITEXIT           IF NOT, EXIT NO MSG
         WTODBG TEXT='DUMMY USER FOUND AND IT IS:' DEBUG
         LA    R3,WRKDUMML
         WTODBG TEXT=(R3)
*
NOMSGRC  L     R3,EVXMSSG          LOAD ADDRESS OF ADDITIONAL TEXT
         MVC   0(MSGINFOL,R3),MSGINFO    COPY THE TEXT IN
         LA    R10,8               FROM NOW ON FAIL COMMAND WITH MSG
*
         BAL   R14,TRAVKW          TRAVERSE NEXT KEYWORD
         WTODBG TEXT='COMMAND BUFFER ANALYZING DATA KEYWORD'
*
         MVC   WTOBUFD(120),CMDBUFD
         MVC   WTOBUFL,=AL2(120)
         LA    R3,WTOBUFL
         WTODBG TEXT=(R3)
*
         LTR   R8,R8               DID WE FIND A KEYWORD ?
         BZ    EXITEXIT            IF NOT, EXIT WITH MSG
*
         LR    R3,R8               LOAD 1ST BLANK AFTER KEYWORD
         SR    R3,R7               CALCULATE KEYWORD LENGTH
         CH    R3,=AL2(DATAKWML)   DOES IS HAVE MINIMUM LENGTH ?
         BL    EXITEXIT            IF NOT, EXIT WITH MSG
*
         LH    R3,=AL2(DATAKWPL)   LOAD DATA KEYWORD PREFIX LENGTH
         BCTR  R3,0                SUBSTRACT 1
         EX    R3,CHKDATA          IS IS DATA(' ?
         BNE   EXITEXIT            IF NOT, EXIT WITH MSG
*
         AH    R7,=AL2(DATAKWPL)   POINT BEYOND DATA('
         SH    R8,=H'2'            POINT TO QUOTE   ')
         SR    R8,R7     CALCULATE LENGTH OF DATA BETWEEN QUOTES
         CH    R8,=H'8'            IS IT 8 OR LESS (RACF USERID) ?
         BH    EXITEXIT            IF NOT, EXIT WITH MSG
*
         STH   R8,DATAKWVL         STORE LENTGH OF RACF USER
         BCTR  R8,0                SUBSTRACT 1
         MVC   DATAKWV(0),0(R7)
         EX    R8,*-6              MOVE DATA KEYWORD VALUE BETWEEN''
         WTODBG TEXT='DATA KEYWORD OK AND IS:' DEBUG
         LA    R3,DATAKWVL
         WTODBG TEXT=(R3)
*
         BAL   R14,TRAVKW          TRAVERSE NEXT KEYWORD IF IT EXISTS
         WTODBG TEXT='PASS KEYWORD BACK FROM EXIT'
         MVC   WTOBUFD(120),CMDBUFD
         MVC   WTOBUFL,=AL2(120)
         LA    R3,WTOBUFL
         WTODBG TEXT=(R3)
*
         LTR   R8,R8               DID IT ARRIVE ?
         BZ    EXITEXIT            IF NOT, EXIT AND FAIL COMMAND
*
         LR    R3,R8               POINT TO 1ST BLANK AFTER KEYWORD
         SR    R3,R7               CALCULATE KEYWORD LENGTH
         CH    R3,=AL2(PASSKWML)   IS IT MINIMUM LENGTH OF PASSWORD( )
         BL    EXITEXIT            IF NOT, FAIL COMMAND AND EXIT
*
         LH    R3,=AL2(PASSKWPL)   LOAD LENGTH OF PASSWORD(
         BCTR  R3,0                SUBSTRACT 1
         EX    R3,CHKPASS          CHECK KEYWORD STARTS WITH PASSWORD(
         BNE   EXITEXIT            IF NOT, FAIL COMMAND AND EXIT
*
         AH    R7,=AL2(PASSKWPL)   POINT AFTER PASSWORD OPENING (
         SH    R8,=H'1'            POINT TO CLOSING  )
         SR    R8,R7               CALCULATE LENGTH BETWEEN ( )
         CH    R8,=H'8'            IS PASSWORD LENGTH 8 OR LESS ?
         BH    EXITEXIT            IF NOT, FAIL COMMAND AND EXIT
*
         STH   R8,PASSKWVL         STORE LENTGH OF PASSWORD
         BCTR  R8,0                SUBSTRACT 1
         MVC   PASSKWV(0),0(R7)
         EX    R8,*-6              MOVE PASSWORD VALUE BETWEEN ( )
         WTODBG TEXT='PASSWORD KEYWORD OK AND IS:' DEBUG
         LA    R3,PASSKWVL
         WTODBG TEXT=(R3)
*
****************************************************************
*        BUILD RQC AND EVT                                     *
****************************************************************
*                                                              *
* 'RQC' IS THE 'REQUEST CONTROL BLOCK' WHICH IS USED BY THE PC *
* ROUTINES TO PASS INFORMATION TO THE SA-AGENT ONLINE          *
* INTERCEPTOR .                                                *
*                                                              *
* 'EVT' IS THE 'EVENT CONTROL BLOCK' WHICH IS IMBEDED IN THE   *
* REQUEST BLOCK FOR 'NOTIFY REQUESTS' . IT DESCRIBES THE       *
* EVENT THAT OCCURED INCLUDING THE ENTITY (USER, GROUP ETC...) *
* AND THE EVENT ACTION TYPE (ADD, DELETED, MODIFY, PASSWORD    *
* CHANGED, ETC...) .                                           *
*                                                              *
* THE FOLLOWING CODE FORMATS THESE CONTROL BLOCKS AND FILL THEM*
* WITH THE RELEVANT INFO SO THEY CAN BE PASSED ON TO THE PC    *
* ROUTINES AND BE TRANSFERED TO THE ONLINE INTERCEPTOR SERVER. *
*                                                              *
****************************************************************
*
*
*        INITIALIZE RQC
*
*PS0244  XC    RQCAREA,RQCAREA        CLEAR LOCAL RQC AREA
         LA    R0,RQCAREA             CLEAR THE AREA            PS0244
         LA    R1,RQCLEN              SET LENGTH                PS0244
         XR    R15,R15                PADD WITH X'00'           PS0244
         MVCL  R0,R14                 CLEAR                     PS0244
         LA    R9,RQCAREA              R9 -> LOACL RQC AREA
         USING RQC,R9                  MAP IT
*PS0244  MVI   RQCTYPE,RQCTNOT         REQUEST TYPE IS 'NOTIFY'
         MVI   RQCTYPE,RQCTNOTX        REQUEST TYPE IS 'NOTIFY' PS0244
*
*        INITIALIZE EVT
*
         LA    R8,RQCEVT               R8 -> EVT
         USING EVT,R8                  MAP EVENT BLOCK
         MVC   EVTEVT,=CL4'EVT '       SETUP EYE CATCHER
         MVC   EVTFLAG,=A(EVTFULL)     EVT IS LOADED WITH DATA
         MVI   EVTTYPE,EVTTUSER        EVENT TYPE = USER
         MVI   EVTACT,EVTAPSWD         ACTION = PASSWORD CHANGE
         TIME  BIN
         ST    R0,EVTTIME              EVENT TIME STAMP
         ST    R1,EVTDATE              EVENT TIME STAMP
*
*        ORIGINATOR USERID
*
COPYOUID DS    0H
         MVC   EVTOUID,LCLUSER         COPY UID UNDER WHICH
SKIPOUID DS    0H
*
*        COPY USERID
*
         MVC   EVTUSER,=CL8' '
         LH    R3,DATAKWVL             R3 = LENGTH OF USER ID
         BCTR  R3,0                    ADJUST USERID LENGTH FOR 'EX'
         MVC   EVTUSER(*-*),DATAKWV    CODE FOR 'EX'
         EX    R3,*-6                  COPY THE USERID TO EVT
*
*        COPY NEW PASSWORD
*
         MVC   EVTGROUP,=CL8' '
         LH    R3,PASSKWVL             R3 = NEW PASSWORD LENGTH
         BCTR  R3,0                    ADJUST FOR 'EX'
         MVC   EVTGROUP(*-*),PASSKWV   CODE FOR 'EX'
         EX    R3,*-6                  COPY PASSWORD
         DROP  R8
*
****************************************************************
*        NOTIFY SA-AGENT INTERCEPTOR SERVER VIA PC ROUTINE
****************************************************************
*
         CALL  CTSAPCC,(FUJIFLAG,SSNAME,JOBNAME,(R9),PCCWORK),         X
               MF=(E,CALLAREA)
         LTR   R15,R15                 SUCCESS  ?
         BZ    FAILNMSG                YES, FINISH
         CH    R15,=H'160'             WAS SERVER UP ?
         BNH   FAILNMSG                NO, THEN FINISH
*
         LR    R3,R15                  SAVE ACROSS WTO
         WTODBG TEXT='CTSAPCC FAILED'
*
****************************************************************
*        NOTIFY ROUTINE INTERNAL ERROR - ISSUE  ERROR MESSAGE
****************************************************************
*
         CVD   R3,PACKD               CONVERT RC TO EBCDIC
         UNPK  CHARRC,PACKD            CONVERT RC TO EBCDIC
         OI    CHARRC+7,X'F0'          CONVERT RC TO EBCDIC
         MVC   WTOAREA(WTONTFYL),WTONTFY
         MVC   WTOAREA+WTONTFYL-4(4),CHARRC+4
         WTO   MF=(E,WTOAREA)
*
****************************************************************
*        ISSUE ABEND MESSGAE                                   *
****************************************************************
*
CLEANUP  DS    0H
         ICM   R3,15,ABNDCODE          R3 -> ABEND CODE WORD
         BZ    NOABEND                 ZERO, NO ABEND OCCURED
         MVI   ABNDTYPE,C'U'           ASSUME USER ABNED
         N     R3,=XL4'00000FFF'       ISOLATE USER ABEND CODE
         BNZ   ABENDMSG                HAVE IT, ISSUE THE MESSAGE
         L     R3,ABNDCODE             TRY AGAIN FOR SYSTEM ABNED
         SRL   R3,12                   ISOLATE SYSTEM ABEND CODE
         MVI   ABNDTYPE,C'S'           SET SYSTEM ABEND TYPE
ABENDMSG DS    0H
         ST    R3,ABNDBIN              SAVE ISOLATED ABEND CODE
         UNPK  ABNDCHAR(9),ABNDBIN(5)  CONVERT ABEND CODE TO ZONED
         TR    ABNDCHAR(8),HEX2CHAR    CONEVRT TO CHARACTERS
         MVC   ABNDCHAR+4(1),ABNDTYPE  SET ABEND TYPE CHARACTER
         MVC   WTOAREA(WTOABNDL),WTOABND
         MVC   WTOAREA+WTOABNDL-4(4),ABNDCHAR+4
         WTO   MF=(E,WTOAREA)
NOABEND  DS    0H
         B     EXITEXIT
*
****************************************************************
*        CLRER RECOVERY ENVIRONMENT                            *
****************************************************************
*
FAILNMSG LA    R10,4
         WTODBG TEXT='PRE NORMAL EXIT'
EXITEXIT ESTAE 0
*
         WTODBG TEXT='CTSEVX01:  GETTING OUT'
****************************************************************
*        RELEASE WORKAREA STORAGE                              *
****************************************************************
*
         LR    R1,R13                  ADDRESS FOR FREEMAIN
         L     R13,4(R13)              RESTORE CALLERS SAVE AREA
         LA    R0,WORKLEN
         FREEMAIN RC,LV=(R0),A=(R1)
         LTR   R15,R15
         BZ    RETURN
         WTO  'CTSEVX01: FREEMAIN FAILED/FATAL ERROR'
*
****************************************************************
*        FINISHED                                              *
****************************************************************
*
RETURN   DS    0H                      RETURN TO RACHECK
         LR    R15,R10               LOAD RETURN CODE
         RETURN (14,12),T,RC=(15)      RESTORE REGISTERS AND RETURN
*
* TRAVKW ROUTINE
TRAVKW   EQU  *
         WTODBG TEXT='INSIDE TRAVKW'
         SR    R7,R7               RESET START OF KEYWORD
         SR    R8,R8               RESET FIRST BLANK AFTER KEYWORD
         SR    R3,R3               RESET BLANK WITHIN ()
BEFOREKW CR    R6,R9               CHECK FOR END OF BUFFER
         BE    TRAVEXIT            DONE
         CLI   0(R6),BLANK         STILL BLANK?
         BNE   STARTKW             NO - START OF NEXT KEYWORD FOUND
         LA    R6,1(R6)            BUMP TO NEXT IN BUF
         B     BEFOREKW
STARTKW  LR    R7,R6               START OF KEYWORD POINTER
WITHINKW CR    R6,R9               CHECK FOR END OF BUFFER
         BE    TRAVEXIT            DONE
         LA    R6,1(R6)            BUMP TO NEXT IN BUF
         CLI   0(R6),LEFTPAR
         BNE   CHKBLANK
         WTODBG TEXT='LEFT PAR FOUND'
WITHINP  LA    R6,1(R6)
         CLI   0(R6),BLANK
         BNE   CKRIGHTP
         LTR   R3,R3
         BNZ   WITHINP
         LR    R3,R6
         WTODBG TEXT='SETTING BLANK INSIDE PARANS'
         B     WITHINP
CKRIGHTP CLI   0(R6),RIGHTPAR
         BNE   WITHINP
         LA    R6,1(R6)
CHKBLANK CLI   0(R6),BLANK         STILL NON-BLANK ?
         BNE   WITHINKW            IF YES, CONTINUE WITHIN KEYWORD
*
         LTR   R3,R3
         BZ    ACOMPRES
         WTODBG TEXT='DOING COMPRESS'
COMPRESS MVI   0(R3),RIGHTPAR
         BCTR  R6,0
         MVI   0(R6),BLANK
         LA    R6,1(R3)
ACOMPRES EQU   *                   IF BLANK, SET FIRST AFTER KEYWORD
         WTODBG TEXT='AFTER COMPRESS'
         LR    R8,R6               IF BLANK, SET FIRST AFTER KEYWORD
TRAVEXIT BR    R14
*
****************************************************************
*        CONSTANTS                                             *
****************************************************************
*
CHKDUMMY CLC   0(0,R7),WRKDUMMY
CHKDATA  CLC   0(0,R7),DATAKWP
CHKPASS  CLC   0(0,R7),PASSKWP
*
FUJIFLAG DC    AL1(128)                FIXED FLAG FOR MVS SYSTEM
SSNAME   DC    CL4'    '
JOBNAME  DC    CL8'CTSAONI'            CROSS MEMORY JOBNAME
*
         WXTRN RCFRRSTB                ALLOW CHGBMC PUTBACK
VRRSFTAB DC    V(RCFRRSTB)
LSTESTAE ESTAE MF=L                    LIST FORM FOR ESTAE
LENESTAE EQU   *-LSTESTAE
*
WTOAREAM WTO   '....,....1....,....2....,....3....,....4....,....5....,*
               ....6....,....7....,....8....,....9....,....0....,....1.*
               ...,....2',MF=L
WTOAREAL EQU  *-WTOAREAM  120
*
WTONTFY  WTO   'CTSEVX01: SA-AGENT COMMAND EXIT NOTIFY AONI  HAS   FAIL*
               ED RC=XXXX',MF=L
WTONTFYL EQU   *-WTONTFY
*
WTOABND  WTO   'CTSEVX01: SA-AGENT RACF COMMAND EXIT  HAS ABENDED.   AB*
               END CODE=XXXX',MF=L
WTOABNDL EQU   *-WTOABND
*
WTODBGM  WTO   TEXT=(R3),MF=L
WTODBGML EQU   *-WTODBGM
*
*
         DS    0H
*
MSGINFO  DC    C'CTSEVX01 FAILED THIS COMMAND DUE TO ERROR'
MSGINFOL EQU   *-MSGINFO
*
DATAKWM  DC    C'DATA('' '')'             MINIMUM DATA KEYWORD
DATAKWML EQU   *-DATAKWM                  AND ITS LENGTH
DATAKWP  DC    C'DATA('''                 PREFIX OF DATA KEYWORD
DATAKWPL EQU   *-DATAKWP                  AND ITS LENGTH
PASSKWM  DC    C'PASSWORD('' '')'         MINIMUM PASSWORD KEYWORD
PASSKWML EQU   *-PASSKWM                  AND ITS LENGTH
PASSKWP  DC    C'PASSWORD('               PREFIX OF PASSWORD KEYWORD
PASSKWPL EQU   *-PASSKWP                  AND ITS LENGTH
ZEROES   DS  XL(ENTRYLEN)'00'
*
HEX2CHAR DC    256AL1(*-HEX2CHAR)      ZONED TO HEX EBCDIC
         ORG   HEX2CHAR+X'FA'             CONVERSION
         DC    CL6'ABCDEF'                     TABLE
         ORG
         LTORG
         DROP
*
BLANK    EQU   X'40'
LEFTPAR  EQU   77
RIGHTPAR EQU   93
*
****************************************************************
*        ABEND RECOVERY ROUTINE                                *
****************************************************************
*
ABNDEXIT DS    0H
         USING ABNDEXIT,R15            ABEND EXIT ADDRESSABILITY
         L     R12,=A(CTSEVX01)        RESTORE LMOD BASE REG
         DROP  R15
         USING CTSEVX01,R12,R5         RESTORE ITS ADDRESSABILITY
         C     R0,=F'12'               SDWA PROVIDED ?
         BE    NOSDWA                  NO, CAN NOT RETRY
         USING SDWA,R1                 MAP SDWA
         L     R13,SDWAPARM            RESTORE WORKAREA REGISTER
         USING WORKAREA,R13            MAP WORKAREA
         MVC   ABNDCODE,SDWAABCC       SET ABEND CODE
         TM    SDWAERRD,SDWACLUP       RETRY ALLOWED ?
         BNZ   NORETRY                 NO, CAN NOT RETRY
*
RETRY    DS    0H
         ST    R12,SDWASR12            SET BASE REGISTER FOR RETRY
         ST    R13,SDWASR13            SET WORKAREA REGISTER FOR RETRY
*
         STM   R14,R1,SAVEREGS
         SDUMP HDR='SA-AGENT IRREVX01 RACF EXIT ABEND',                X
               SDATA=(ALLPSA,CSA,LSQA,RGN,SUMDUMP)
         LM    R14,R1,SAVEREGS
*
         SETRP RETREGS=YES,RC=4,RETADDR=CLEANUP,                       X
               FRESDWA=YES,DUMP=YES
         BR    R14
*
NOSDWA   DS    0H
         LR    R13,R2                   NO SDWA, PARM IN R2
         ST    R1,ABNDCODE              SAVE ABEND CODE
         XR    R1,R1                    CLEAR
NORETRY  DS    0H
         XR    R15,R15                  INDICATE NO RETRY
         BR    R14                      RETURN TO RTM
         LTORG
*
*
****************************************************************
*        DYNAMIC WORK AREA DSECT                               *
****************************************************************
*
WORKAREA DSECT
SAVEAREA DS    18F                     SAVE AREA TO CALL OTHERS
CALLAREA CALL  ,(,,,,,,,,),MF=L        EXECUTE FORM CALL AREA
PCCWORK  DS    XL512                   WORK AREA FOR CTSAPCC ROUTINE
RQCAREA  DS    CL(RQCLEN)              AREA FOR RQC
PACKD    DS    D                       RETURN CODE CONVERSION
CHARRC   DS    CL8                     RETURN CODE CONVERSION
ABNDCODE DS    XL4                     ABCODE SAVED BY ESTAE ROUTINE
ABNDBIN  DS    XL5                     ISOLATED ABEND CODE + PAD BYTE
ABNDTYPE DS    CL1                     ABEND TYPE (S/U)
ABNDCHAR DS    CL9                     CHARCTER ABEND CODE FOR MSG
WRKESTAE DS    CL(LENESTAE)            EXECUTE FORM FOR ESTAE
SAVEREGS DS    15F                     TEMPORARY SAVE REGISTERS AREA
*
RRSFLAGS DS    X
WRKDUMML DS    H
WRKDUMMY DS    CL8
*
CTSECWTO DS    H
CTSECENV EQU   *
SRCUSER  DS    CL8
SRCNODE  DS    CL8
LCLUSER  DS    CL8
CTSECLEN EQU   *-CTSECENV
*
DATAKWVL DS    H
DATAKWV  DS    CL8
PASSKWVL DS    H
PASSKWV  DS    CL8
WTOBUFL  DS    H
WTOBUFD  DS    CL120
WTOAREA  WTO   '....,....1....,....2....,....3....,....4....,....5....,*
               ....6....,....7....,....8....,....9....,....0....,....1.*
               ...,....2',MF=L
WTODBGL  DS    CL(WTODBGML)
WORKLEN  EQU   *-WORKAREA
*
****************************************************************
*        SA-AGENT CONTROL BLOCKS                               *
****************************************************************
*
RQC      DSECT
         COPY  CTSRQC
EVT      DSECT
         COPY  CTSEVT
*
         CTSRRSTB TYPE=DSECT
****************************************************************
*        SYSTEM CONTROL BLOCKS                                 *
****************************************************************
*
         IRREVXP
         IHASDWA
         IHAACEE
         END
