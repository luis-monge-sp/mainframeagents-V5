 /**************************************************************
 *                                                             *
 * Title            : Online interceptor callers functions     *
 *                                                             *
 * File Name        : ctscino.h                                *
 *                                                             *
 * Author           : Doron Cohen                              *
 *                                                             *
 * Creation Date    : 9/6/97                                   *
 *                                                             *
 * Description      :                                          *
 *                                                             *
 * Assumptions and                                             *
 *   Considerations :                                          *
 *                                                             *
 **************************************************************/

 /**************************************************************
 * Mod.Id   Who      When     Description                      *
 * -------- -------- -------- -------------------------------- *
 * ws2411 field_block defined here also in ctscint.h included  *
 *                              by #include MVS_INTERCEPTOR    *
 * SAS2IBMT SeligT   30/10/16 SAS/C to IBM C Conversion Project*
 **************************************************************/

#include <globs.h>

#include STRING
#include STDIO
#include STDLIB
#include CTYPE

#include ESA_API
#include ESA_DIAG
#include ESA_API_CODES

#include MVS_CODES
#include MVS_INTERCEPTOR
#include MVS_ONLINE_INTERCEPTOR

/*
 *   Field blocking and coversion
 */
/* ws2411 double defined
#define FIELD_BLOCK(a,b)                  \
      memcpy(a, b, sizeof(a)-1);          \
      if ( a[0] LT BLANK)                 \
         memset(a, BLANK, sizeof(a) -1 ); \
      a[sizeof(a)-1] = NULL_CHAR;         \
      a[strcspn(a," ")] = NULL_CHAR;
*/
static char comp[]= "CTSCONI";

/**************************************************************
*                                                             *
* Subroutine name : CTSCINO_notify_onli                       *
*                                                             *
* DESCRIPTION     : Notify online interceptor                 *
*                                                             *
* INPUT           :                                           *
*                                                             *
* OUTPUT          : none                                      *
*                                                             *
* RETURN VALUE    : ESA_RC                                    *
*                                                             *
**************************************************************/

ESA_RC CTSCINO_notify_onli (
              char       * ssname,         /* subsys name          */
              RSS_typ      rss_name,       /* rss    name          */
              RSS_typ      rss_type,       /* rss    type          */
              char       * o_user,         /* originating userid   */
              char       * o_jobname,      /* originating jobname  */
              char       * o_terminal,     /* originating terminal */
              char       * o_program,      /* originating program  */
              char         evnt_type,      /* u/g/c/r/o            */
              char         evnt_action,    /* a/u/d/?/p/r          */
              char       * evnt_usr,       /* user/oe              */
              char       * evnt_grp,       /* group                */
              CTSAMSG_DEST_TABLE_rec_typ  * dest,
              CTSAMSG_HANDLE_rec_typ      * msgs )
{

  static char func[]="CTSCINO_notify_onli";

  char        user[9];          /*** Evt parameters ***/
  char        group[9];         /*** Evt parameters ***/
  char        ojobname[9];      /*** Evt parameters ***/
  char        ouserid[9];       /*** Evt parameters ***/
  char        oterminal[9];     /*** Evt parameters ***/
  char        oprogram[9];      /*** Evt parameters ***/
  char        subsys[5];        /*** Evt parameters ***/

  ESA_RC      rc = ESA_OK ;
  int         r15 = 0;

  /**************************************************************
  *    Initialize                                               *
  **************************************************************/

  ESA_DIAG_enter(ESA_COMP_RSS_INTERCEPT,1, func);

  FIELD_BLOCK(user, evnt_usr)
  FIELD_BLOCK(group,evnt_grp)
  FIELD_BLOCK(ouserid, o_user)
  FIELD_BLOCK(ojobname, o_jobname)
  FIELD_BLOCK(oprogram, o_program)
  FIELD_BLOCK(oterminal, o_terminal)
  FIELD_BLOCK(subsys, ssname)

  ESA_DIAG_printf(ESA_COMP_RSS_INTERCEPT,2,
                  "Event: user=%s group=%s type=%c action=%c",
                  user, group, evnt_type, evnt_action) ;

  ESA_DIAG_printf(ESA_COMP_RSS_INTERCEPT,2,
                  "Origin: user=%s jobname=%s program=%s terminal=%s",
                  ouserid, ojobname, oprogram, oterminal );

  /**************************************************************
  *    Call notification routine                                *
  **************************************************************/

  /* SAS2IBMT
  r15 = ctsaino ( subsys,                  // subsys name          */
  r15 = (*(ASM_RTN_TYP *)&ctsaino)(subsys, /* subsys name  SAS2IBMT */
                  user,                    /* user                 */
                  group,                   /* group                */
                 &evnt_type,               /* u/g/c/r/o            */
                 &evnt_action,             /* a/u/d/?/p/r          */
                  ouserid,                 /* originating userid   */
                  ojobname,                /* originating jobname  */
                  oterminal,               /* originating terminal */
                  oprogram    );           /* originating program  */

  /**************************************************************
  *    Check rc and issue message in case of error              *
  **************************************************************/

  if (r15 GT 160) {
     CTSAMSG_print(ERR_INTERNAL, msgs, NULL, dest,
                        comp,__FILE__,r15,__LINE__);
     rc = ESA_FATAL;
  }

  /**************************************************************
  *    Finish up                                                *
  **************************************************************/

  ESA_DIAG_exit(ESA_COMP_RSS_INTERCEPT,1, func, rc );

  return rc;

}
