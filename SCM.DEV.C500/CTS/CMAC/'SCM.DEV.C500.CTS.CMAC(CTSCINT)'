 /**************************************************************
 *                                                             *
 * Title            : Common interceptor functions             *
 *                                                             *
 * File Name        : ctscint.h                                *
 *                                                             *
 * Author           : Doron Cohen                              *
 *                                                             *
 * Creation Date    : 25/08/94                                 *
 *                                                             *
 * Description      :                                          *
 *                                                             *
 * Assumptions and                                             *
 *   Considerations :                                          *
 *                                                             *
 **************************************************************/

 /**************************************************************
 * Mod.Id   Who      When     Description                      *
 * -------- -------- -------- -------------------------------- *
 * as2503   Alex     25/3/96  Send password in lower/upper case*
 *                            according parameter from RSSPARM *
 *                                                             *
 * as2503   Alex     25/3/96  Send password in lower/upper case*
 *                            according parameter from RSSPARM *
 *                                                             *
 * ps0089   Doron    20/5/97  Add CTSCINT_write_event          *
 *                            Add CTSCINT_RACF_event           *
 *                            Add CTSCINT_TSS_event            *
 * ps0219   Alex     26/10/97 Support for rss_type in EVT      *
 * ps0244   Doron    25/02/98 Long RQC/EVT support             *
 * ps0295   Guy      13/08/98 Changes for common code 3.0.0 GA *
 * ws2348   Doron    9/5/99   Add password filter              *
 * bs2388   Yonatan  6/6/99   change 'SUPRESS' to 'SUPPRESS'   *
 *                            in onli_password_filter.         *
 * ws2372   Yonatan  4/7/00   add o_program to                 *
 *                            CTSCINT_RACF_event               *
 * ws2437   ShmuelK  9/2/02   Special Interceptor for RRSF     *
 * IS0121   MichaelC 2/10/03  add support for Db2 ONLI         *
 *                            including enlarged EVT           *
 * IS0231   AmirH    25/1/04  Add support for multiple Online  *
 *                            Intercetpors for DB2 subsystems  *
 * BS2663   AmirH    25/2/04  Filter Online Interception events*
 *                            filtering (apply WS2505)         *
 * BS2624   AvnerL   14/10/03 Enlarge SMF rec from 8k to 32k   *
 * bs2618   AmirH    18/11/03 Send connections after rename    *
 * IS0272   Michael 10/06/04  Update C31B libs with old fixes  *
 * is0328   yonatan  01/12/05 update parent group              *
 *WS10013   AvnerL   12/11/07 Update EVT remarks.              *
 *IS10018   AvnerL   15/06/08 Onli intercepts ESS ChPass-BS2707*
 * IS10100  NuritY   29/07/13  Support CTSA internal custom    *
 *                             fields (CTSACFs)                *
 * IS10107  NuritY   23/12/13 Support value of ASIS for        *
 *                            ONLI_PASSWORD_CASE.              *
 * SAS2IBMN NuritY   09/08/16 SAS/C to IBM C Conversion:       *
 *                            replace loadm, buildm, unloadm,  *
 *                            OS_DYNAM_Load and OS_DYNAM_Delete*
 *                            with calls to ctsaldm and ctsadlm*
 * SAS2IBMT SeligT   30/10/16 SAS/C to IBM C Conversion Project*
 * SAS2IBMN NuritY   12/01/17 Remove DB2.  The area for db2    *
 *                            in evt was not removed for       *
 *                            V3 compatibility.                *
 * WS10064  MeirS    01/10/17 Passphrase exit support          *
 * WS10067  SeligT   18/01/18 Update GDB dynamically when      *
 *                            access or resource rules are     *
 *                            added/modified                   *
 * IS10170  AvnerL   01/04/18 Verify-Password fails with blank *
 * WS10085  PatilV   09/10/23 Enable RU_LOCKED for IDN with    *
 *                            RACF                             *
 **************************************************************/

#ifndef INTERCEPT_H_included
#define INTERCEPT_H_included

#ifdef EXT
#undef EXT
#endif
#ifndef INTERCEPT_owner
#define EXT extern
#else
#define EXT
#endif

#define CTSCINT_write_event            cint010
#define CTSCINT_TSS_event              cint011
#define CTSCINT_RACF_event             cint012
#define CTSCINT_ACF2_event             cint013
#define verify_password                cint015    /* IS10018 */
#define CTSCINT_RACF_Init              cint016    /* IS10100 */
#define CTSCINT_RACF_Term              cint017    /* IS10100 */
#define CTSCINT_ACF2_Init              cint018    /* WS10067 */
#define CTSCINT_ACF2_Term              cint019    /* WS10067 */

#define MAX_SIZE_SMF_REC80             32760 /*was 8000 BS2624 */

/* as2503 */
#define PASSWORD_CASE_PARAM            "ONLI_PASSWORD_CASE"
#define PASSWORD_CASE_LOWER            "LOWER"
#define PASSWORD_CASE_UPPER            "UPPER"
#define PASSWORD_CASE_ASIS             "ASIS"             /* IS10107 */
#define PASSWORD_FLAG_LOWER            'L'
/* IS10107 #define PASSWORD_FLAG_UPPER            'U'                */
#define PASSWORD_FLAG_ASIS             'A'                /* IS10107 */

/* WS2348 */

#define PASSWORD_FILTER_PARAM          "ONLI_PASSWORD_FILTER"
#define PASSWORD_FILTER_SUPRESS        "SUPRESS"
#define PASSWORD_FILTER_SUPPRESS       "SUPPRESS"   /* BS2388 */
#define PASSWORD_FILTER_FORWARD        "FORWARD"
#define PASSWORD_FILTER_ON             'Y'
#define PASSWORD_FILTER_OFF            'N'

/* BS2663 - begin */

#define EVENT_USERID_PARAM             "ONLI_EVENT_USER"
#define EVENT_USERID_YES               "Y"
#define EVENT_USERID_NO                "N"
#define FLAG_USERID_ON                 'Y'
#define FLAG_USERID_OFF                'N'

/* WS10064 start */
#define EVENT_PASSWORD_PARAM           "ONLI_EVENT_PASSWORD"
#define EVENT_PASSWORD_YES             "Y"
#define EVENT_PASSWORD_NO              "N"
#define FLAG_PASSWORD_ON               'Y'
#define FLAG_PASSWORD_OFF              'N'
#define EVENT_PHRASE_PARAM             "ONLI_EVENT_PHRASE"
#define EVENT_PHRASE_YES               "Y"
#define EVENT_PHRASE_NO                "N"
#define FLAG_PHRASE_ON                 'Y'
#define FLAG_PHRASE_OFF                'N'
/* WS10064 end  */

#define EVENT_GROUP_PARAM              "ONLI_EVENT_GROUP"
#define EVENT_GROUP_YES                "Y"
#define EVENT_GROUP_NO                 "N"
#define FLAG_GROUP_ON                  'Y'
#define FLAG_GROUP_OFF                 'N'

#define EVENT_OE_PARAM                 "ONLI_EVENT_OE"
#define EVENT_OE_YES                   "Y"
#define EVENT_OE_NO                    "N"
#define FLAG_OE_ON                     'Y'
#define FLAG_OE_OFF                    'N'

#define EVENT_PWD_ONLY_PARAM           "ONLI_EVENT_USER_PWD_ONLY"
#define EVENT_PWD_ONLY_YES             "Y"
#define EVENT_PWD_ONLY_NO              "N"
#define FLAG_PWD_ONLY_ON               'Y'
#define FLAG_PWD_ONLY_OFF              'N'

/*  BS2663 - end */
/* WS10085 Start  */
#define IDNT_PLTFORM_PARAM             "IDENTITY_PLATFORM"
#define IDNT_PLTFORM_IDN               "IDN"
#define IDNT_PLTFORM_IDN_FLAG          'N'
#define IDNT_PLTFORM_IIQ               "IIQ"
#define IDNT_PLTFORM_IIQ_FLAG          'Q'
/* WS10085 - End  */

#define RACF_U83_MODULE                "CTSFU83 "
#define ACF2_U83_MODULE                "CTS2U83 "

/* Online interceptor options for connections notification     BS2618 */
/* sent in case of ACID updated / added.                              */
/* ( values for the conn (EVTCONN) flag under the EVT structure)      */
#define ONLI_SEND_NO_CONNECTIONS   'N' /* Normal action               */
#define ONLI_SEND_ALL_CONNECTIONS  'A' /* Send all ACIDs connections  */

/*
 *   Field blocking and coversion
 */

#define FIELD_BLOCK(a,b)                    \
      memcpy(a, b, sizeof(a)-1);            \
      if ( a[0] LT BLANK)                   \
         memset(a, BLANK, sizeof(a) -1 );   \
      a[sizeof(a)-1] = NULL_CHAR;           \
      a[strcspn(a," ")] = NULL_CHAR;

/*
 *   Field blocking and conversion with blank          IS10170
 *   b should be string or its length GE than a
 */

#define FIELD_BLOCK_WITH_BLANK(a,b)         \
      strncpy(a, b, sizeof(a)-1);            \
      a[sizeof(a)-1] = NULL_CHAR;

 /*
  *   Interceptor event block - (corresponds to CTSEVT assembly)
  */

 typedef struct {
    char         prefix[4];                /* EVT                  */
    int          flag ;                    /* creating struc 1=full*/
    int          time;                     /* time ( timestamp )   */
    int          date;                     /* date ( timestamp )   */
    char         type;                     /* u/g/c/r/o/s/l        */
    char         action;                   /* a/u/d/r/p/l/?        */
    char         user_id[8];               /* user id              */
    char         group_id[8];              /* group                */
    char         o_user[8];                /* originating user     */
    char         o_jobname[8];             /* originating jobname  */
    char         o_terminal[8];            /* originating terminal */
    char         o_program[8];             /* originating program  */
    char         sup_group_id[8];          /* IS0328  sup group    */
/*IS0328 char         reserv[8];    */          /* reserved        */
    char         rss_type_prefix[20];      /* ps0219               */
    char         res_type[64];             /* ps0244               */
    char         res_name[256];            /* ps0244               */
  /*char         reserv2[64];        */    /*ws2431                */
    char         conn[1];                  /*ws2431                */
    char         old_uid_string[24];       /*ws2431 old uid(partial)*/
    char         pswd_vio[1];              /*ws2451                */
/*IS10100  char         reserv2[34];        *ws2451                */
    char         update_type;              /* v/s          IS10100 */
    char         revoke_reason;            /* p/i/c/' '    IS10100 */
    char         reserv2[32];              /*              IS10100 */
 /* char         compat[2024];       */    /* WS10064       sas2ibmn*/
    char         passphrase_len  ;         /*              WS10064  */
    char         passphrase[101] ;         /*              WS10064  */
    char         caller_type     ;         /*              WS10064  */
    char         compat[1921];             /*              WS10064  */
 } INTERCEPT_EVENT_rec_typ, *INTERCEPT_EVENT_rec_ptr ;

 /*
  *   RSS parameters block for rsxxxxx functions
  */

 #define   MAX_INTERCEPT_RSS          20                   /* ps0219 */
 typedef struct {
    RSS_typ                   type;
    RSS_typ                   name;
    void                    * handle;
    CTSAMSG_PARAMS_rec_typ  * msg_params;
    RSS_typ                   rss_pfx;                     /* ps0219 */
    int                       rss_num;                     /* ps0219 */
    RSS_typ                   rss_name[MAX_INTERCEPT_RSS]; /* ps0219 */
    RSS_typ                   rss_type[MAX_INTERCEPT_RSS]; /* ps0219 */
 } INTERCEPT_RSS_PARAMS_rec_typ, *INTERCEPT_RSS_PARAMS_rec_ptr ;

 #define  RCF_RRSF_NODE_LEN 8                          /* ws2437 */
 typedef  struct {                                     /* ws2437 */
    int                rrsf_mode;                      /* ws2437 */
    char             target_node[RCF_RRSF_NODE_LEN+1]; /* ws2437 */
    char             target_user[RCF_USER_NAME_LEN+1]; /* ws2437 */
    char              dummy_user[RCF_USER_NAME_LEN+1]; /* ws2437 */
 } INTERCEPT_RRSF_PARMS_rec_typ;                       /* ws2437 */

 /*
  *   SMF record
  */

 struct smf_header {
       char  smf80flg ;     /*  System indicator     */
       char  smf80rty ;     /*  Record type 80       */
       char  smf80tme[4];   /*  Time                 */
       char  smf80dte[4];   /*  Date                 */
       char  smf80sid[4];   /*  System id            */
       char  smf80des[2];   /*  Descriptor flag      */
       char  smf80evt;      /*  Event code           */
       char  smf80evq;      /*  Event code qualifier */
 } ;

 typedef  struct {
    int  rdw;
    union {
       char    data[MAX_SIZE_SMF_REC80];
       struct  smf_header header;
    } record;
 } INTERCEPT_SMF_RECORD_rec_typ, *INTERCEPT_SMF_RECORD_rec_ptr ;

 /* SAS2IBMN - start */
 /*
 typedef int  (*FP_U83)(char                    * intercept_flag,
                        char                    * smf_record,
                        INTERCEPT_EVENT_rec_typ * evt,
                        char                    * workarea );
 */

 typedef int  FP_U83();
 /* SAS2IBMT #pragma    linkage(ASM_TYP, OS)                         */
 /* SAS2IBMN - end */

 /**************************************************************
 *                                                             *
 * PROCEDURE NAME : ctsfu83                                    *
 *                                                             *
 * DESCRIPTION    : RACF smf rec80 analyzer                    *
 *                                                             *
 * INPUT          : smf_record -                               *
 *                                                             *
 * OUTPUT         : evt        - event block                   *
 *                                                             *
 * RETURN VALUE   : NONE                                       *
 *                                                             *
 **************************************************************/

 /* SAS2IBMT prototype changed for IBM C
 int  ctsfu83(char                    * intercept_flag,
              char                    * smf_record,
              INTERCEPT_EVENT_rec_typ * evt,
              char                    * workarea );                  */
 int  ctsfu83();                                          /* SAS2IBMT */


 /**************************************************************
 *                                                             *
 * PROCEDURE NAME : cts2u83                                    *
 *                                                             *
 * DESCRIPTION    : ACF2 smf records analyzer                  *
 *                                                             *
 * INPUT          : acf2_smf_record -                          *
 *                                                             *
 * OUTPUT         : evt        - event block                   *
 *                                                             *
 * RETURN VALUE   : NONE                                       *
 *                                                             *
 **************************************************************/

 /* SAS2IBMT prototype changed for IBM C
 int  cts2u83(char                    * intercept_flag,
              char                    * smf_record,
              INTERCEPT_EVENT_rec_typ * evt,
              char                    * workarea );                  */
 int  cts2u83();                                          /* SAS2IBMT */

 /**************************************************************
 *                                                             *
 * Subroutine name : evnt2rs                                   *
 *                                                             *
 * DESCRIPTION     : Notify Control-SA of an event             *
 *                                                             *
 * INPUT           : evt -        event block                  *
 *                 : rss_parm     rss parameters block         *
 *                 : admin_params                              *
 *                                                             *
 * OUTPUT          : none                                      *
 *                                                             *
 * RETURN VALUE    : ESA_RC                                    *
 *                                                             *
 **************************************************************/

 EXT ESA_RC evnt2rs(INTERCEPT_EVENT_rec_ptr        evt,
                    INTERCEPT_RSS_PARAMS_rec_typ * rss_parm,
                    int                            msg_flag,
                    char                         * acs_jbn,
                    char                         * acs_pgm,
 /* as2503 */       char                          password_case_flag,
 /* ws2348 */       char                          password_filter_flag,
 /* ps0295 */       ADMIN_PARAMS_rec_typ         * admin_params);
 /* BS2663          char                       event_userid_flag, */
 /* BS2663          char                       event_group_flag,  */
 /* BS2663          char                       event_oe_flag,     */
 /* BS2663          char                       event_pwd_only_flag, */

/**************************************************************
*                                                             *
* Subroutine name : CTSCINT_write_event                       *
*                                                             *
* DESCRIPTION     : Notify of event to Control-SA             *
*                                                             *
* INPUT           :                                           *
*                                                             *
* OUTPUT          : none                                      *
*                                                             *
* RETURN VALUE    : ESA_RC                                    *
*                                                             *
**************************************************************/

EXT ESA_RC CTSCINT_write_event (char                   type,
                           char                         * group,
                           char                         * user,
                           ACTION_typ                     action,
                           int                            msg_flag,
                           INTERCEPT_RSS_PARAMS_rec_typ * rss_parm,
              /* WS10064    ADMIN_PARAMS_rec_typ         * admin_parms);
                                                             ps0295 */
              /* WS10064 */ ADMIN_PARAMS_rec_typ         * admin_parms,
              /* WS10064 */ char                         * pwphrase);

/**************************************************************
*                                                             *
* Subroutine name : CTSCINT_RACF_event                        *
*                                                             *
* DESCRIPTION     : Notify of RACF event to Control-SA        *
*                                                             *
* INPUT           :                                           *
*                                                             *
* OUTPUT          : none                                      *
*                                                             *
* RETURN VALUE    : ESA_RC                                    *
*                                                             *
**************************************************************/

EXT ESA_RC CTSCINT_RACF_event (char                   type,
                           char                         * group,
                           char                         * user,
                           ACTION_typ                     action,
                           int                            msg_flag,
                           INTERCEPT_RSS_PARAMS_rec_typ * rss_parm,
                           ADMIN_PARAMS_rec_typ         * admin_parms,
                           char                         * o_program,
      /* IS10100 */        INTERCEPT_EVENT_rec_typ      * evt);
                                    /* ws2372 */          /* ps0295 */

/**************************************************************
*                                                             *
* Subroutine name : CTSCINT_TSS_event                         *
*                                                             *
* DESCRIPTION     : Notify of TSS event to Control-SA         *
*                                                             *
* INPUT           :                                           *
*                                                             *
* OUTPUT          : none                                      *
*                                                             *
* RETURN VALUE    : ESA_RC                                    *
*                                                             *
**************************************************************/

EXT ESA_RC CTSCINT_TSS_event (char                       type,
                          char                         * group,
                          char                         * user,
                          ACTION_typ                     action,
                          int                            date,
                          int                            time,
                          char                         * admin,
                          char                         * terminal,
                          int                            msg_flag,
                          INTERCEPT_RSS_PARAMS_rec_typ * rss_parm,
                          ADMIN_PARAMS_rec_typ         * admin_parms,
                          char                           get_conn_flag);
                                                /* BS2618   ps0295 */

/*ws2431*/
/**************************************************************
*                                                             *
* Subroutine name : CTSCINT_ACF2_event                        *
*                                                             *
* DESCRIPTION     : Notify of ACF2 event to Control-SA        *
*                                                             *
* INPUT           :                                           *
*                                                             *
* OUTPUT          : none                                      *
*                                                             *
* RETURN VALUE    : ESA_RC                                    *
*                                                             *
**************************************************************/

EXT ESA_RC CTSCINT_ACF2_event (char                     type,
                           char                         * group,
                           char                         * user,
                           ACTION_typ                     action,
                           int                            msg_flag,
                           INTERCEPT_RSS_PARAMS_rec_typ * rss_parm,
                           ADMIN_PARAMS_rec_typ         * admin_params,
                           char                         * conn,
                           char               * partial_old_UID,
                           char               * pswd_vio,
                           char               * res_type,  /* WS10067 */
                           char               * res_name); /* WS10067 */

/* IS10018 start */
/**************************************************************
*                                                             *
* WS2240                                                      *
*                                                             *
* Subroutine name : verify_password                           *
*                                                             *
* DESCRIPTION     : verify that the changed password          *
*                   was excepted by the RSS.                  *
*                                                             *
* INPUT           : user  -   the changed passwords user      *
*                   password - the new passowrd               *
*                                                             *
* OUTPUT          : none                                      *
*                                                             *
* RETURN VALUE    : ESA_RC                                    *
*                                                             *
* written by      : RamiK                                     *
*                                                             *
* note: although some vars names contain RACF this code is    *
* relevant also for ACF2 and TSS. they also return RACF codes *
* and reasons.                                                *
*                                                             *
**************************************************************/


EXT ESA_RC verify_password(char                     * user,
                           char                     * password,
                       INTERCEPT_RSS_PARAMS_rec_typ * rss_parm,
          /*IS10002*/    ADMIN_PARAMS_rec_typ       *admin_params);
/* IS10018 end */

/* IS10100 - start */
/********************************************************************
 *
 * Procedure Name : CTSCINT_RACF_Init
 *
 * Description    : Perform specific RACF tasks for Online and
 *                  Offline interceptors Initialization:
 *                  - Allocate area for RACF_PARAMS and prepare
 *                    the CTSACF blocks. Chain RACF_PARAMS on
 *                    admin_params.
 *
 * Input          :
 *
 * Output         : None.
 *
 * Input/Output   : admin_params.
 *
 * Return Value   : ESA_RC:
 *                  - ESA_OK - OK
 *                  - ESA_ERR - CTSACF Fields initialization failed.
 *                              No tables were created.
 *                  - ESA_FATAL - Severe error.
 *
 *
 * Side Effects   :
 *
 ********************************************************************/

 ESA_RC CTSCINT_RACF_Init(ESA_DIAG_COMP_typ      comp,
                          ADMIN_PARAMS_rec_typ  *admin_params);

/********************************************************************
 *
 * Procedure Name : CTSCINT_RACF_Term
 *
 * Description    : Perform specific RACF tasks for Online and
 *                  Offline interceptors termination:
 *                  - Free the CTSACF blocks and the RACF_PARAMS
 *                    area.
 *
 * Input          :
 *
 * Output         : None.
 *
 * Input/Output   : admin_params.
 *
 * Return Value   : ESA_RC:
 *                  - ESA_OK - OK
 *                  - ESA_ERR - CTSACF Fields initialization failed.
 *                              No tables were created.
 *                  - ESA_FATAL - Severe error.
 *
 *
 * Side Effects   :
 *
 ********************************************************************/

 ESA_RC CTSCINT_RACF_Term(ESA_DIAG_COMP_typ      comp,
                          ADMIN_PARAMS_rec_typ  *admin_params);
/* IS10100 - start */
 #endif  /* INTERCEPT_H_included */
