 /**************************************************************
 *                                                             *
 * Title            : Update KDT with installation dependent   *
 *                    fields.                                  *
 *                                                             *
 * File Name        : ctsbkdt.c                                *
 *                                                             *
 * Author           : Yishay Yovel                             *
 *                                                             *
 * Creation Date    : 20/05/97                                 *
 *                                                             *
 * Description      :                                          *
 *                                                             *
 * Return Codes     : 0  -    Operation ended OK               *
 *                   12  -    Operation Failed: Table Full     *
 *                                                             *
 * Assumptions and                                             *
 *   Considerations :                                          *
 *                                                             *
 **************************************************************/

 /**************************************************************
 * Mod.Id   Who      When     Description                      *
 * -------- -------- -------  -------------------------------- *
 * bs2607   AvnerL 29/05/2003 support date user defined fields *
 **************************************************************/

 #include   <globs.h>

 /*
  *   Standard include files
  */

 #include   STDLIB
 #include   STDIO
 #include   STRING

 /*
  *   ESA include files
  */

 #include ESA_DIAG
 #include ESA_API
 #include ESA_API_CODES
 #include ESA_CTSAMSG

 #include MVS_OS_CLI
 #include MVS_COMP

 #include API_ADDINFO
 #include ACF2_CODES
 #include ACF2

 ADDINFO_KDTE_rec_ptr ACF2_Update_KDT(
                      ADDINFO_KDTE_rec_ptr       KDT           ,
                      ACF2_Get_Fields_Filter     Get_Field_Type,
                      ACF2_KDT_Processing_Option MR            ,
                      ADMIN_PARAMS_rec_typ * admin_params)
 {

   static char                func[]="ACF2_Update_KDT";

  /*
   *   Variables
   */

   int                  i, j, Keyword_Match, Update_KDT;
   int                  ACF2_KDT_Num_Entries, Static_KDT_Num_Entries;
   ADDINFO_KDTE_rec_ptr acf2kdt, new_kdt, a, k;

   CTSAMSG_HANDLE_rec_ptr     msgs;
   CTSAMSG_DEST_TABLE_rec_ptr dest;

   msgs = admin_params->ctsamsg_handle;
   dest = admin_params->ctsamsg_dest;

   ESA_DIAG_enter(PLT_COMP_API_ACF2, DEBUG_SHOW_REGULAR, func);

   /*-----------------------------------------*/
   /* Count Entries in Static KDT from caller */
   /*-----------------------------------------*/

   for(i=0; KDT[i].kwd[0] NE NULL_CHAR;i++);

   Static_KDT_Num_Entries = i;

   /*-----------------------------------------*/
   /* Get ACF2 Installation KDT               */
   /*-----------------------------------------*/

   acf2kdt = ACF2_build_KDT_from_ACFFDR(
                              Get_Field_Type,
                              &ACF2_KDT_Num_Entries,
                              admin_params); /* +admin_params bs2607*/

   a = acf2kdt;

   /*----------------------------------------------------------------*/
   /* Allocate new KDT with combined size of static KDT and ACF2 KDT */
   /*----------------------------------------------------------------*/

   new_kdt = (void *) calloc ((ACF2_KDT_Num_Entries +
                         Static_KDT_Num_Entries + 1)
                        * sizeof(ADDINFO_KDTE_rec_typ) , 1);

   /*----------------------------------------------------------------*/
   /* Copy Static KDT to the NEW KDT                                 */
   /*----------------------------------------------------------------*/
   memcpy(new_kdt, KDT,
          Static_KDT_Num_Entries * sizeof(ADDINFO_KDTE_rec_typ));

   /*----------------------------------------------------------------*/
   /* Compare ACF2 KDT with Static KDT                               */
   /*----------------------------------------------------------------*/
   for (i=0; a->kwd[0] NE NULL_CHAR; a++, i++)
    {
    Keyword_Match = FALSE;

    for (j=0, k = new_kdt;
         (k->kwd[0] NE NULL_CHAR) AND (k->kwd[0] NE ACF2_END_OF_KDT);
         k++, j++)
     {
       if (strcmp( a->kwd , k->kwd ) EQ 0)
        {
         Keyword_Match = TRUE;
         break;
        };
     };

   /*----------------------------------------------------------------*/
   /* Process Results of a single-field check                        */
   /*----------------------------------------------------------------*/
       Update_KDT = TRUE;

       if (Keyword_Match EQ TRUE)
         if (MR EQ ACF2_KDT_Merge)
          Update_KDT = FALSE;

       ESA_DIAG_printf(PLT_COMP_API_ACF2,DEBUG_SHOW_ALL,
              "KM=%d, UK=%d, k:kwd=%s a:kwd=%s at=%d\n",Keyword_Match,
              Update_KDT, k->kwd, a->kwd,j);

       if (Update_KDT EQ TRUE)
        {
         (*k) = (*a);
        };
   };

   /*-----------------------------------------------------------*/
   /* Finish ...                                                */
   /*-----------------------------------------------------------*/

   exit:

   ESA_DIAG_exit(PLT_COMP_API_ACF2, DEBUG_SHOW_REGULAR, func, ESA_OK);

   return new_kdt;

 }
