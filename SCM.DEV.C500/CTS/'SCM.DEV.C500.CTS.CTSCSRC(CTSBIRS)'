 /**************************************************************
 *                                                             *
 * Title            : Add a resource (ACF2)                    *
 *                                                             *
 * File Name        : ctsbirs.c                                *
 *                                                             *
 * Author           : Guy Shavitt                              *
 *                                                             *
 * Creation Date    : 25/01/1998                               *
 *                                                             *
 * Description      :                                          *
 *                                                             *
 * Assumptions and                                             *
 *   Considerations :                                          *
 *                                                             *
 **************************************************************/

 /**************************************************************
 * Mod.Id   Who    When       Description                      *
 * -------- ------ ---------- -------------------------------- *
 * PS0252   Guy    13/04/1998 Common code changes              *
 * WS2333   Guy    02/08/1998 No more Get_Dsn_Resource         *
 * PS0347   Guy    03/12/1998 Changed parms of Compile_Ruleset *
 * WS2358   Guy    14/10/1999 Support for the virtual resource *
 * IS10122  NuritY 16/06/2014 Ignore ROLESET rules.            *
 * WS10082  MauriC   07/11/22 Recompile for new ADDINFO macros *
 **************************************************************/
 #include   <globs.h>
 #include   <ctype.h>

 /*
  *   Standard include files
  */

 #include   STDLIB
 #include   STDIO
 #include   STRING

 /*
  *   ESA include files
  */

 #include   ESA_DIAG
 #include   ESA_API
 #include   ESA_CTSAMSG
 #include   ESA_API_CODES

 #include   MVS_OS_CLI
 #include   MVS_OS_MVS
 #include   MVS_COMP

 #include   API_ADDINFO
 #include   API_AUTH

 #include   ACF2_CODES
 #include   ACF2

 static  char   component[] = "ADDRES";
/****************************************************
 * Procedure Name: CTSAddRes
 * Description   : Creates a resource with non-ACL info
 * Input         : resource, addinfo_res addinfo_data
 * Output        : None
 * Input/Output  : None
 * Return Value  : ESA_RC
 ***************************************************/

 ESA_RC CTSAddRes (RES_PARAMS_rec_typ   * res_params,
            /*     ADDINFO_rec_typ      * addinfo_res,    PS0252 */
                   ADDINFO_rec_typ      * addinfo_data,
                   ADMIN_PARAMS_rec_typ * admin_params,
                   ERR_STRUCT_rec_typ   * err)
 {

  /*
   *    Variables
   */

   ESA_RC                     rc = ESA_OK;
   static char                func[]="CTSAddRes";
   CTSAMSG_HANDLE_rec_ptr     msgs;
   CTSAMSG_DEST_TABLE_rec_ptr dest;

   ACE_rec_typ                 ace;
   RESOURCE_typ                model_resource="", current_key="";
   ONE_FIELD_rec_ptr           pair = NULL;
   ADDINFO_rec_ptr             ace_addinfo = NULL;
   ACF2_Get_ResACL_Handle     *h = NULL;
   FILE                       *rule_file = NULL;
   char                       *obj_buffer = NULL;
   char                        msg[256]="";
   char                        errmsg[256]="";
   int                         num_rules, iterate, i;

  /*
   *   Initialize
   */

   ESA_DIAG_enter(ESA_COMP_ADDRES, 1, func);

   msgs = admin_params->ctsamsg_handle;
   dest = admin_params->ctsamsg_dest;

   /* WS2358 */
   /*****************************************************************
   * Did the request specify the virtual resource ?                 *
   ******************************************************************/
   if (ACF2_Is_Virtual_Resource (res_params->resource) )
     goto exit;
   /* End of WS2358 */

   /*****************************************************************
   * Prepare ACF2IN file for output                                 *
   ******************************************************************/
   rc = Prepare_ACF2IN_File (&rule_file,
                             msgs,
                             dest);
   if (rc NE ESA_OK)
     goto exit;

   /*************************************************************
   * Write ruleset data to file                                 *
   **************************************************************/
   rc = Build_Ruleset (res_params->resource,              /* WS2358 */
                       res_params->restype,               /* WS2358 */
                       addinfo_data,
                       rule_file,
                       msgs,
                       dest);

   if (rc NE ESA_OK)
   {
     sprintf(msg,"Add Res fail res=%s msg=Build_Ruleset failed",
               res_params->resource);
     CTSAMSG_print(ERR_INTERNAL2,msgs, NULL, dest, component,
            func, msg, 16,__LINE__);
     rc = ESA_FATAL;
     goto exit;
   };

   /*************************************************************
   * Obtain storage for rule object buffer                      *
   **************************************************************/
   obj_buffer = (char *) malloc (ACF2_RULE_BUFFER_LENGTH);

   if (obj_buffer EQ NULL)
   {
     CTSAMSG_print(ERR_MALLOC, msgs, NULL, dest,
                  "RULE OBJECT BUFFER",
                  ACF2_RULE_BUFFER_LENGTH);
     rc = ESA_FATAL;
     goto exit;
   };

   num_rules = 50;

   /*************************************************************
   * Was a resource model given ?                               *
   **************************************************************/
   pair = ADDINFO_search ("COPYRES",
                          ACF_ADDINFO_KWD_LEN,
                          addinfo_data->pair,
                          addinfo_data->num_pairs);

   if (pair NE NULL)
     if (pair->value[0] EQ 'Y')
     {
       pair = NULL;
       pair = ADDINFO_search ("RESMODEL",
                              ACF_ADDINFO_KWD_LEN,
                              addinfo_data->pair,
                              addinfo_data->num_pairs);

       if (pair NE NULL)
         if (pair->value[0] NE NULL_CHAR)
         {
           strcpy (model_resource, pair->value);

           for (i=0; i LT strlen(model_resource); i++)
             model_resource[i] = toupper(model_resource[i]);

           /**********************************************************
           * Allocate handle for Get_ACE operation and initialize it *
           ***********************************************************/
           rc = Init_ACE_Handle (&h,
                                 msgs,
                                 dest);

           if (rc NE ESA_OK)
             goto exit;

           /**********************************************************
           * Allocate addinfo for the model resource ACE's           *
           ***********************************************************/
           if (ADDINFO_alloc(func,
                             ACF2_ADDINFO,
                             &ace_addinfo,
                             NULL,
                             NULL) NE ESA_OK)
           {
             rc = ESA_FATAL;
             goto exit;
           };

           ADDINFO_empty(ace_addinfo);

           /**********************************************************
           * Fill ACE addinfo with all the ACE keywords              *
           ***********************************************************/
           Fill_ACE_Keywords (ace_addinfo);

           /**********************************************************
           * Get all ACEs of model resource and write them to ACF2IN *
           ***********************************************************/
           iterate = TRUE;

           num_rules = 0;

           while (iterate)
           {
             ADDINFO_clear(ace_addinfo);

             rc = ACF2_Get_Resource(model_resource,
                                    ACF2_Object_is_Not_Masked,
                                    res_params->restype,
                                    ACF2_Return_Rule_Entries,
                                    h,
                                    NULL,                 /* WS2333 */
                                    current_key,
                                    &ace,
                                    ace_addinfo,
                                    errmsg,
                                    admin_params);

             switch(rc)
             {
                case ACF2_OK:
                  break;

                case ACF2_Not_Found:
                  /* IS10122 - start */
                  if ( strcmp(errmsg, ACF2_ROLESET_IGNORED_MSG) EQ 0 )
                    CTSAMSG_print(ACF2_RES_ROLESET_IGNORED, msgs, NULL,
                            dest, model_resource, res_params->restype);
                  else
                  /* IS10122 - end */
                    CTSAMSG_print(ACF2_RESMODEL_NOT_FOUND, msgs, NULL,
                                  dest, model_resource,
                                  res_params->restype);
                  rc = ESA_FATAL;
                  goto exit;

                default:
                  sprintf(msg,"Get ResACL fail res=%s rc=%d msg=%s",
                            model_resource, rc, errmsg);
                  CTSAMSG_print(ERR_INTERNAL2,msgs, NULL, dest,
                   component,
                   func, msg, 16,__LINE__);
                  rc = ESA_FATAL;
                  goto exit;
             }

             if (strcmp (errmsg, "NO MORE ACES") EQ 0)
               iterate = FALSE;
             else
             {
               rc = Build_Rule_Entry (&ace,
                                      ace_addinfo,
                                      res_params->restype,
                                      rule_file,
                                      msgs,
                                      dest);
               if (rc NE ESA_OK)
               {
                 rc = ESA_FATAL;
                 goto exit;
               };
             };
             num_rules++;
           };
           num_rules = num_rules + 50;
         };
     };

   /*************************************************************
   * Compile the ruleset and store it                           *
   **************************************************************/
   fclose (rule_file);
   rule_file = NULL;

   rc = Compile_Ruleset (res_params->resource,
                         res_params->restype,
                         ACF2_Dont_Replace_Rule,
                         num_rules,
                         obj_buffer,
                         errmsg,
                         admin_params);                   /* PS0347 */

   if (rc NE ESA_OK)
   {
     if (rc EQ ESA_ERR)
     {
       CTSAMSG_print(ERR_DUP_RES, msgs, NULL, dest,
                     res_params->resource);
     }
     else
     {
       if (strcmp (errmsg, "ACF2 Compiler Error") NE 0)
       {
         sprintf(msg,"Add Res fail res=%s msg=%s",
                 res_params->resource, errmsg);
         CTSAMSG_print(ERR_INTERNAL2,msgs, NULL, dest, component,
                func, msg, 16,__LINE__);
       };
     };

     rc = ESA_FATAL;
     goto exit;
   };

  /*
   *   Finish
   */

   exit:;

   if (rule_file NE NULL)
     fclose (rule_file);

   if (obj_buffer NE NULL)
     free (obj_buffer);

   if (ace_addinfo NE NULL)
    ADDINFO_free(&ace_addinfo);

   if (h NE NULL)
   {
     if (h->Rule_Buffer NE NULL)
       free(h->Rule_Buffer);

     free(h);
   };

   ESA_DIAG_exit(ESA_COMP_ADDRES, 1, func, rc );

   return rc;

 }

