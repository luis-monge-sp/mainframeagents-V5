 /**************************************************************
 *                                                             *
 * Title            : Add    a user group (ACF2)               *
 *                                                             *
 * File Name        : ctsbiug.c                                *
 *                                                             *
 * Author           : Yishay Yovel                             *
 *                                                             *
 * Creation Date    : 07/07/97                                 *
 *                                                             *
 * Description      :                                          *
 *                                                             *
 * Assumptions and                                             *
 *   Considerations :                                          *
 *                                                             *
 * When an ACF2 virtual group is created, a special check is   *
 * being done that no other group exist the gives partial      *
 * access rights of the new group.                             *
 *                                                             *
 * The purpose is that if these 2 groups will be connected to  *
 * the same user, and one is removed the other should be       *
 * affected as well.                                           *
 *                                                             *
 * What sholud be done is to create 2 limited groups which     *
 * will give, when combined, the full access rights.           *
 *                                                             *
 * example: suppose the first char in the UID designated       *
 *          business function and the second char is department*
 *                                                             *
 * We could define the following groups:                       *
 *                                                             *
 * B - Clerk                                                   *
 * *C - Accounting                                             *
 * *D - Payroll                                                *
 * BC - Clerk in Accounting                                    *
 * BD - Clerk in Payroll                                       *
 *                                                             *
 * We cannot (using the abovementioned model) define all these *
 * groups.                                                     *
 *                                                             *
 * The actual definition depend on installation data:          *
 * If a person can have a business function but not be assigned*
 * to any Department, we should define both B & C groups, and  *
 * give them selectively to people.                            *
 *                                                             *
 * If ,on the other hand, every user is assigned both Business *
 * function & Department we can define combinations as groups: *
 * BC & BD.                                                    *
 *                                                             *
 * Breaking down the UID components and using them as building *
 * bricks is always a solution. But it could be simpler to     *
 * manage is more complex combination can be created as single *
 * groups.                                                     *
 **************************************************************/

 /**************************************************************
 * Mod.Id   Who      When     Description                      *
 * -------- -------- -------- -------------------------------- *
 * BS2306   Guy      28/10/97 Added dest+msgs parms            *
 * BS2309   Guy      02/11/97 Added local copy of addinfo      *
 * PS0234   Guy      20/01/98 Truncate UIDMASKs before write   *
 * IS10088  NuritY   03/06/13 S0C4 when UID < 24 .  (BS10030)  *
 * IS10128  AvnerL   28/09/14 Allow correlated UIDs for IIQ.   *
 * BS10097  SeligT   19/11/18 ACF2 Group Aggregation Endless   *
 *                            Loop                             *
 * IS10178  SeligT   18/12/18 Supporting LID Anywhere in UID   *
 * WS10076  SeligT   07/11/19 Manage Permissions as Account    *
 *                            and Group Attributes             *
 * WS10079  ThomaS   22/09/20 Insert role/source               *
 * WS10084  ThomaS   13/07/23 Replace ACFRPTRX                 *
 * WS10082  MauriC   07/11/22 Recompile for new ADDINFO macros *
 **************************************************************/
 #include   <globs.h>

 /*
  *   Standard include files
  */

 #include   STDLIB
 #include   STDIO
 #include   STRING
 #include   TIME
 #include   CTYPE                                  /* WS10079 */

 /*
  *   ESA include files
  */

 #include ESA_DIAG
 #include ESA_CTSAMSG                              /* WS10079 */
 #include ESA_API
 #include ESA_API_CODES
 #include API_ADDINFO
 #include API_AUTH

 /*
  *   MVS include files
  */

 #include MVS_OS_CLI
 #include MVS_COMP                                 /* WS10079 */
 #include MVS_CODES                                /* WS10079 */

 #include ACF2_CODES
 #include ACF2
 ASM_RTN_TYP           cts2ver;                          /* WS10079T */

 /*
  *     KDT for Insert Group
  *         (Keyword Decscription Table)
  */

 static ADDINFO_KDTE_rec_typ kdt[] =     {

  /*                                                            */
  /* keyword             type   negative       value delimiters */
  /*                             value                          */
  /* =================== ====== ============== ================ */

    {"DESCRIPTION"     , KDT_KEY , ""           ,""    ,""    },
    {"UIDMASKS"        , KDT_KEY , ""           ,""    ,""    },
    {""                , KDT_IGN , ""           ,""    ,""    }
    };

 /*
  *     MKT for Insert Group
  *         (Mandatory Keywords Table)
  */

 static ADDINFO_MKTE_rec_typ mkt[] = {
    "UIDMASKS",
    ""         };      /* a null string indicate end-of-mkt */

 static   char   component[]="ADDGROUP";

 /**************************************************************
 *                                                             *
 * PROCEDURE NAME : AddUg                                      *
 *                                                             *
 * DESCRIPTION    : Add    a ACF2 user group                   *
 *                                                             *
 * INPUT          : ug_params : User Group infomration         *
 *                              ADDINFO                        *
 *                              admin, err                     *
 *                                                             *
 * OUTPUT         : none                                       *
 *                                                             *
 * RETURN VALUE   : ESA_RC                                     *
 **************************************************************/

 ESA_RC CTSAddUG (UG_PARAMS_rec_typ    * ug_params,
                  ADDINFO_rec_typ      * addinfo,
                  ADMIN_PARAMS_rec_typ * admin_params,
                  ERR_STRUCT_rec_typ   * err)
 {

   static char                   func[]="CTSAddUG";

  /*
   *     Variables
   */

   ESA_RC                        rc = ESA_OK;
   GDB_Codes                     GDB_rc = GDB_OK;
   CTSAMSG_HANDLE_rec_typ      * msgs;
   CTSAMSG_DEST_TABLE_rec_typ  * dest;
   char                          errmsg[128]="";
   char                          parm_get[81]="";         /* WS10076 */
   UG_typ                        cgroup="";
   ADDINFO_rec_ptr               laddinfo = NULL;
   ADDINFO_rec_ptr               caddinfo = NULL;         /* BS2309 */
   ACF2_PARAMS_rec_typ * params_ptr = NULL;               /* IS10128 */
   char                iiqAcf2Groups = ' ';               /* IS10128 */
   int                           LID_In_UID, LID_Offset;  /* BS10097 */
   int                           LID_Length;              /* IS10178 */
   char                     xref_type[4]  = "";           /* WS10079 */
   ONE_FIELD_rec_ptr             pair = NULL;             /* BS10097 */
   ONE_FIELD_rec_ptr           i_pair = NULL;             /* WS10079 */
   ONE_FIELD_rec_ptr           e_pair = NULL;             /* WS10079 */
   XREF_Cmd_Struct_typ         xref_command_struct;       /* WS10079 */
   int                         rc_asm=0;                  /* WS10079 */
   char                        acf_version[5]="";         /* WS10079 */
   int                         dbg_lvl=0;                 /* WS10079 */
   XBhandle_rec_typ          * xbhandle = NULL;           /* WS10079 */
   void                      * get_xref_handle  = NULL;   /* WS10079 */
   char                        block_read    = NULL_CHAR; /* WS10079 */
   char                        xrefname_out[19] = "";     /* WS10079 */
   ACF2_API_Return_Codes       ACF2_rc = ACF2_OK;         /* WS10079 */
   char                        * action = NULL;           /* WS10079 */
   char with_sysid[]="with SYSID as follows: name(sysid)";/* WS10079 */
   char without_sysid[] = "without SYSID";                /* WS10079 */

  /*
   *   Initialize
   */

   ESA_DIAG_enter(ESA_COMP_ADDUG, DEBUG_SHOW_IMPORTANT, func);

   msgs = admin_params->ctsamsg_handle;
   dest = admin_params->ctsamsg_dest;

  /*     Start WS10079                                             */

   xref_command_struct.add_command = NULL;
   xref_command_struct.del_command = NULL;
   xref_command_struct.rep_command = NULL;
   xref_command_struct.ref_command = NULL;

  /*
   *   If there is no TYPE, or if TYPE is Group then skip handling
   *   XREF commands
   */

   pair = ADDINFO_search("TYPE", ACF_ADDINFO_KWD_LEN,
                         addinfo->pair,
                         addinfo->num_pairs);
   if (pair NE NULL)
    {
       ESA_DIAG_printf(ESA_COMP_ADDUG, 6,
           "TYPE = <%.8s>",
            pair->value);

       if (strcmp(pair->value,"Group" ) EQ 0)
          goto skip_xref;                  /* this is not XREF stuff */

       if ( (strcmp(pair->value,"Role") NE 0)
             AND
            (strcmp(pair->value,"Source") NE 0)  )
        {
          sprintf(errmsg,"Invalid Type in addinfo: %.40s", pair->value);
          CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest, component,func,
               errmsg, 16,__LINE__);
          rc = ESA_FATAL;
          goto exit;
        }
       if (strcmp(pair->value,"Role") EQ 0)
        {
          strcpy(xref_type,"ROL");
          /*
           *   Validate ACF2 version GE 16.0
           */

           if ((int)ESA_DIAG_get_debug_level(ESA_COMP_ADDUG) GE 6)
              dbg_lvl=1;

           rc_asm=cts2ver(&dbg_lvl, acf_version);
           acf_version[3]=NULL_CHAR;
           ESA_DIAG_printf(ESA_COMP_ADDUG,6,"ACF2 ver=<%s>",
                           acf_version);
           if (strcmp(acf_version,"160") LT 0)
           {
            sprintf(errmsg,
             "Add %s %s: ",
              pair->value,ug_params->group);
            CTSAMSG_print(ACF2_MIN_VER2,
                          msgs, NULL, dest,
                          errmsg,
                          "16.0","Roles",
                          "Add Role request rejected");
            rc = ESA_FATAL;
            goto exit;
           }

        }
       if (strcmp(pair->value,"Source") EQ 0)
          strcpy(xref_type,"SGP");

       ESA_DIAG_printf(ESA_COMP_ADDUG, 6,
           "full xref_name=<%.18s>",
            ug_params->group);

       /*
        *   Validate that the xref name provided is valid
        */

       rc = XREF_Validate_name(ug_params->group,
                               ESA_COMP_ADDUG,
                               admin_params);
       if (rc NE ESA_OK)
        {
         /* WS10079
         sprintf(errmsg,
          "Add %s: invalid %s name = %s",
           pair->value,pair->value,ug_params->group);
         CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest, component,
                func, errmsg, 16, __LINE__);               WS10079 */
         params_ptr = admin_params->apiinit_handle;     /* WS10079 */
         if(params_ptr->XREF_SYSID_SCOPE[0] EQ 'a')     /* WS10079 */
           action = with_sysid;                         /* WS10079 */
         else                                           /* WS10079 */
           action = without_sysid;                      /* WS10079 */
         sprintf(errmsg,                                /* WS10079 */
                 "Add %s %s: %s is invalid.",           /* WS10079 */
                 pair->value,                           /* WS10079 */
                 ug_params->group,ug_params->group);    /* WS10079 */
         CTSAMSG_print(ACF2_PRVD_VALID_NAME,            /* WS10079 */
                    msgs, NULL, dest,                   /* WS10079 */
                    errmsg,                             /* WS10079 */
                    action);                            /* WS10079 */
         rc = ESA_FATAL;
         goto exit;
        }

       /*
        *   IncludeList is mandatory when inserting a new
        *   Role/Source
        */

       i_pair = ADDINFO_search("IncludeList",
                         ACF_ADDINFO_KWD_LEN,
                         addinfo->pair,
                         addinfo->num_pairs);

       if (i_pair EQ NULL)
        {
          sprintf(errmsg,
          "Add %s %s: IncludeList",
           pair->value,ug_params->group);
          CTSAMSG_print(PRE_REQ_ATTRIBUTE,
          msgs,NULL,dest,errmsg,pair->value,"Add Request");
          rc = ESA_FATAL;
          goto exit;
        }
       else if (i_pair->vallen EQ 0)
        {
         sprintf(errmsg,
          "Add %s %s: No IncludeList value",
           pair->value,ug_params->group);
         CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest, component,
                func, errmsg, 16, __LINE__);
         rc = ESA_FATAL;
         goto exit;
        }


       /*
        *   IncludeList/ExcludeList can't have blanks or commas.
        *   If it has blanks or commas then it means that the
        *   customer provided more than 1 name for 1 entry of the
        *   multi-value list
        */

       if (  (strchr(i_pair->value,' ') NE NULL)
              OR
             (strchr(i_pair->value,',') NE NULL)   )
        {
         sprintf(errmsg,
                "Add %s %s: "
                "IncludeList value contains multiple names:<%.40s>",
                pair->value,ug_params->group,
                i_pair->value);
         CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest, component,
             func, errmsg, 16, __LINE__);
         rc = ESA_FATAL;
         goto exit;
        }

       e_pair = ADDINFO_search("ExcludeList",
                         ACF_ADDINFO_KWD_LEN,
                         addinfo->pair,
                         addinfo->num_pairs);
       if (e_pair NE NULL)
         if (  (strchr(e_pair->value,' ') NE NULL)
                OR
               (strchr(e_pair->value,',') NE NULL)   )
          {
             sprintf(errmsg,
                "Add %s %s: "
                "ExcludeList value contains multiple names:<%.40s>",
                pair->value,ug_params->group,
                e_pair->value);
             CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest, component,
                func, errmsg, 16, __LINE__);
             rc = ESA_FATAL;
             goto exit;
          }


       /*
        *   XREF_Commands_Create builds XREF commands for the INSERT
        *   request in xxx_command areas pointed by xref_command_struct.
        *   We will need to free these xxx_command areas at the end.
        */

       rc = XREF_Commands_Create(
                   xref_type,
                   addinfo,
                   ug_params->group,
                   "INS",
                   NULL,
                   NULL,
                   &xref_command_struct,
                   ESA_COMP_ADDUG,
                   admin_params);

       ESA_DIAG_printf(ESA_COMP_ADDUG, 6,
           "XREF_Commands_Create rc = %d",rc);

       if (rc NE ESA_OK)
        {
         sprintf(errmsg,
                "Add %s %s: "
                "XREF_Commands_Create rc = %d",
                pair->value,ug_params->group,rc);
         CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest, component,
             func, errmsg, 16, __LINE__);
         rc = ESA_FATAL;
         goto exit;
        }

       /*
        *   Only REP is a valid operation for insert request.
        */


       if ( ((xref_command_struct.add_command NE NULL)
              OR
             (xref_command_struct.del_command NE NULL))
              AND
             (xref_command_struct.rep_command EQ NULL)  )
        {
         sprintf(errmsg,
             "Add %s %s: "
             "Insert must include REP and must not include ADD or DEL",
             pair->value,ug_params->group);
         CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest, component,
             func,errmsg,
             16, __LINE__);
         rc = ESA_FATAL;
         goto exit;
        }

      if (ADDINFO_alloc(func,1,&caddinfo,dest,msgs)
                        NE ESA_OK)
       {
        sprintf(errmsg,"ADDINFO_alloc of caddinfo failed. rc=%d",rc);
        CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest, component,
               func, errmsg, 16, __LINE__);
        rc = ESA_FATAL;
        goto exit;
       };

       xbhandle = calloc(1, sizeof(XBhandle_rec_typ));
       if (xbhandle EQ NULL)
        {
           CTSAMSG_print(ERR_MALLOC, msgs, NULL, dest,
           "XBhandle", sizeof(XBhandle_rec_typ));
           rc = ESA_FATAL;
           goto exit;
        }
       strcpy(xbhandle->request_type,"XREFONLY");
       strcpy(xbhandle->xrefname,ug_params->group);
       xbhandle->PB_type        = xref_type[0]; /*1st char of ROL/SGP*/
       xbhandle->active_request = 'N';
       xbhandle->need_rec_YN    = 'N';
       xbhandle->sysidYN        = NULL_CHAR;
       xbhandle->active_check   = NULL_CHAR;
       xbhandle->active_default = NULL_CHAR;
       xbhandle->shortest       = NULL_CHAR;
       xbhandle->XREF_PB_handle   = NULL;
       xbhandle->Groups_PB_handle = NULL;
       xbhandle->bld_err        = FALSE;
       xbhandle->bld_nf         = FALSE;
       xbhandle->XB_err         = FALSE;

       ACF2_rc = ACF2_Get_Xref(
                     "GETTHIS",
                     xbhandle,
                     &get_xref_handle,
                     'X',
                     &block_read,
                     ug_params->group,
                     xrefname_out,
                     NULL,
                     ESA_COMP_ADDUG,
                     admin_params);

       if (ACF2_rc NE ACF2_Not_Found)
       {
         if (ACF2_rc EQ ACF2_OK)
         {
           CTSAMSG_print(ACF2_XREF_ALREADY_EXISTS,
                   msgs, NULL, dest,
                   (xbhandle->PB_type EQ 'R'?
                                  "Role" : "Source"),
                   ug_params->group);
         }
         else
         {
           sprintf(errmsg,
             "Add %s %s: "
             "ACF2_Get_Xref GETTHIS rc =%d",
             pair->value,
             ug_params->group,
             ACF2_rc);
           CTSAMSG_print(ERR_INTERNAL2, msgs, NULL,
                   dest, component, func,
                   errmsg,
                   16, __LINE__);
         }
         rc = ESA_FATAL;
         goto exit;
       }

       /*
        *   Now go issue the command created in
        *   xref_command_struct.rep_command area
        */

       ESA_DIAG_printf(ESA_COMP_ADDUG, 6,
           "Command to ACF2cmd = %s",
            xref_command_struct.rep_command);


       rc = ACF2cmd(func,
                     EXECOUT_DDNAME,
                     admin_params->admin_uname,
                     xref_command_struct.rep_command,
                     MAX_OK_RC_0,
                     0,
                     &caddinfo,
                     NULL,
                     NULL,
                     admin_params,
                     CMDOUT_YES,
                     ACF2_YES);

       ESA_DIAG_printf(ESA_COMP_ADDUG, 6,
           "ACF2cmd rc = %d",rc);

       if (rc EQ ESA_FATAL)
          {
            sprintf(errmsg,
                    "INSERT %s %s failed. rc=%d",
                    pair->value,
                    ug_params->group, rc);
            ESA_DIAG_printf(ESA_COMP_ADDUG, 6, errmsg);

            CTSAMSG_print(ACF2_CMD_FAILURE, msgs, NULL, dest,
                    "Insert",
                    pair->value,
                    ug_params->group, rc);
            rc = ESA_FATAL;
            goto exit;
          };

       /*
        *   If REFRESH was requested then go issue the command in
        *   xref_command_struct.ref_command area
        */

       if (xref_command_struct.ref_command NE NULL)
        {
          ESA_DIAG_printf(ESA_COMP_ADDUG, 6,
           "REFRESH command to ACF2cmd = %s",
            xref_command_struct.ref_command);

          rc = ACF2cmd(func,
                     EXECOUT_DDNAME,
                     admin_params->admin_uname,
                     xref_command_struct.ref_command,
                     MAX_OK_RC_0,
                     0,
                     &caddinfo,
                     NULL,
                     NULL,
                     admin_params,
                     CMDOUT_YES,
                     ACF2_YES);

          ESA_DIAG_printf(ESA_COMP_ADDUG, 6,
           "ACF2cmd rc = %d",rc);

          /*
           *   If REFRESH command failed we don't want to fail the
           *   transaction, just issue a warning
           */

          if (rc NE ESA_OK)      /* refresh failed?  */
            {
              sprintf(errmsg,
              "Add %s %s: REFRESH",
              pair->value,ug_params->group);
              CTSAMSG_print(ACF2_RESULTS_UNCERTAIN,
                 msgs, NULL, dest,
                 errmsg,rc);
              rc = ESA_WARN;
              goto exit;
            };
        };
       goto exit;
    };
   skip_xref:
   pair = NULL;
   /* * * * * * * * Start WS10076 * * * * * * * */

   /*----------------------------------------------------------*/
   /* Check whether REFRESH_GDB is set to "Y".  If yes,        */
   /* display error message and return to caller.              */
   /*----------------------------------------------------------*/

   rc = admin_params->cs_func.rssprm_get_opt_ptr(
                                     admin_params->rss_name,
                                     "REFRESH_GDB",
                                     sizeof(parm_get),
                                     parm_get,
                                     OPT_TRUE,
                                     OPT_TRUE);
   if (rc EQ ESA_OK)
   {
      ESA_DIAG_printf(ESA_COMP_ADDUG, DEBUG_SHOW_IMPORTANT,
                      "REFRESH_GDB = |%s|", parm_get);
      if ( (strcmp (parm_get, "Y") EQ 0) AND
           (Global_UDB_Active() EQ TRUE) )
      {
         CTSAMSG_print(ACF2_CANT_ADDGRP, msgs, NULL, dest);
         rc = ESA_FATAL;
         goto exit;
      }
   }

   /* * * * * * * * End WS10076 * * * * * * * */

   RESTORE_ENDING_BLANK(ug_params->group, ESA_COMP_ADDUG);/* BS10097 */

   pair = ADDINFO_search ("UIDMASKS",                     /* BS10097 */
                          ACF_ADDINFO_KWD_LEN,            /* BS10097 */
                          addinfo->pair,                  /* BS10097 */
                          addinfo->num_pairs);            /* BS10097 */

   if (pair EQ NULL)             goto skip_UIDMASKS;      /* BS10097 */
   if (pair->value EQ NULL_CHAR) goto skip_UIDMASKS;      /* BS10097 */

   RESTORE_ENDING_BLANK(pair->value,
                        ESA_COMP_ADDUG);                  /* BS10097 */

   skip_UIDMASKS:                                         /* BS10097 */

  /*
   *    Check that mandatory keywords were specified
   */

   rc = ADDINFO_mkt_check(func,1,&addinfo,mkt,kdt,dest,msgs);

   if (rc NE ESA_OK)
    {
      rc = ESA_FATAL;
      goto exit;
    };

  /*
   *    Allocate ADDINFO buffer
   */

   if (ADDINFO_alloc(func, ACF2_ADDINFO, &laddinfo, dest, msgs)
                      NE ESA_OK)
    {
      CTSAMSG_print(ERR_INTERNAL2,msgs, NULL, dest, component,func,
               "laddinfo alloc failed", 16,__LINE__);
      rc = ESA_FATAL;
      goto exit;
    };

  /* **BS2309 START** */

  /*
   *    Allocate ADDINFO buffer
   */

   if (ADDINFO_alloc(func, ACF2_ADDINFO, &caddinfo, dest, msgs)
                      NE ESA_OK)
    {
      CTSAMSG_print(ERR_INTERNAL2,msgs, NULL, dest, component,func,
               "caddinfo alloc failed", 16,__LINE__);
      rc = ESA_FATAL;
      goto exit;
    };

   ADDINFO_copy(caddinfo, addinfo);

  /* **BS2309 END** */

  /*
   *    Check group's UIDMASKS are present and valid
   */

   rc = Check_Group_UIDMASKS(ug_params->group,
                             caddinfo,                    /* BS2309 */
                             admin_params);               /*IS10128 */
   /* drop as pass admin_params dest,
                                msgs);                      IS10128*/

   if (rc NE ESA_OK)
    goto exit;

  /*
   *    Open GDB Database for update
   */

   GDB_rc = GDB_Set_Mode(GDB_ReadWrite,admin_params,err);
   switch(GDB_rc)
    {
     case GDB_OK:
      break;

     case GDB_Update_Lock_Failed:
      sprintf(errmsg,"Unable to obtain lock on group database");
      CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest, component,func,
               errmsg, 16,__LINE__);
      rc = ESA_FATAL;
      goto exit;

     default:
      sprintf(errmsg,"Open GDB for Update failed, rc = %d",GDB_rc);
      CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest, component,func,
               errmsg, 16,__LINE__);
      rc = ESA_FATAL;
      goto exit;
    };

  /*
   *    Check that Group do not correlate with another group
   */
   params_ptr = admin_params->apiinit_handle;             /*IS10128*/
   iiqAcf2Groups = params_ptr->rssparm_IIQACF2GROUPS[0];  /*IS10128*/
   if (iiqAcf2Groups NE 'Y')                              /*IS10128*/
   {
   /*IS10088 if (Check_Group_Correllation(ug_params->group, */
   rc = Check_Group_Correllation(ug_params->group,
                                 caddinfo,                 /* BS2309 */
                                 cgroup,
                                 laddinfo,
                                 dest,                     /* BS2306 */
                                 msgs, /*IS10088*/         /* BS2306 */
                                 admin_params);            /*IS10088*/
   if (rc NE ESA_OK) {                                     /*IS10088*/
     if (rc NE ESA_SKIP) /*msg was not issued yet           *IS10088*/
       CTSAMSG_print(ACF2_UG_CORRELLATE, msgs, NULL, dest,
                    ug_params->group, cgroup);
      rc = ESA_FATAL;
      goto exit;
     }
   } /* end of (iiqAcf2Groups NE 'Y') IS10128 */

  Trunc_UIDMASKS (caddinfo);                              /* PS0234 */

  /*
   *    Build Group Record
   */

   rc = GDB_Convert_to_Record(GDB_RECORD_TYPE_GROUP,
                              ug_params->group,
                              caddinfo);                  /* BS2309 */


   if (rc NE ESA_OK)
    {
     sprintf(errmsg,"Build GDB Record Failed");
     CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest, component,func,
              errmsg, 16,__LINE__);
     ADDINFO_dump(caddinfo,1);                            /* BS2309 */
     rc = ESA_FATAL;
     goto exit;
    };

  /*
   *    Insert New Group Record
   */

   GDB_rc = GDB_Insert();

    switch(GDB_rc)
     {
      case GDB_OK:
       break;

      case GDB_Duplicate_Key:
       CTSAMSG_print(ERR_DUP_GROUP,msgs,NULL,dest,ug_params->group);
       rc = ESA_FATAL;
       goto exit;

      default:
       sprintf(errmsg,"Insert failed for Group %s (rc=%d)",
               ug_params->group,GDB_rc);
       CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest, component,func,
                errmsg, 16,__LINE__);
       rc = ESA_FATAL;
       goto exit;
     };

  /*
   *   Finish
   */

   exit:;

   /* start WS10079    */

   if (xref_command_struct.add_command NE NULL)
      free(xref_command_struct.add_command);

   if (xref_command_struct.del_command NE NULL)
      free(xref_command_struct.del_command);

   if (xref_command_struct.rep_command NE NULL)
      free(xref_command_struct.rep_command);

   if (xref_command_struct.ref_command NE NULL)
      free(xref_command_struct.ref_command);

   /* end t WS10079    */

   if (laddinfo NE NULL)
    ADDINFO_free(&laddinfo);

   if (caddinfo NE NULL)                                  /* BS2309 */
    ADDINFO_free(&caddinfo);                              /* BS2309 */

  /*
   *   Close GDB
   */
   GDB_rc = GDB_Set_Mode(GDB_Closed,admin_params,err);

   if (GDB_rc NE GDB_OK)
    {
      sprintf(errmsg,"GDB close failed, rc = %d",GDB_rc);
      CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest, component,func,
               errmsg, 16,__LINE__);
      rc = ESA_FATAL;
    };

   ESA_DIAG_exit(ESA_COMP_ADDUG, DEBUG_SHOW_IMPORTANT, func, rc);

   return rc;
}
