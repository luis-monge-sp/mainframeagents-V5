 /**************************************************************
 *                                                             *
 * Title            : Delete a resource(ACF2)                  *
 *                                                             *
 * File Name        : ctsbdrs.c                                *
 *                                                             *
 * Author           : Guy Shavitt                              *
 *                                                             *
 * Creation Date    : 27/01/1998                               *
 *                                                             *
 * Description      :                                          *
 *                                                             *
 * Assumptions and                                             *
 *   Considerations :                                          *
 *                                                             *
 **************************************************************/

 /**************************************************************
 * Mod.Id   Who    When       Description                      *
 * -------- ------ ---------- -------------------------------- *
 * PS0252   Guy    13/04/1998 Common code changes              *
 * PS0278   Guy    15/06/1998 Added rule backup                *
 * WS2358   Guy    14/10/1999 Support for the virtual resource *
 **************************************************************/
 #include   <globs.h>

 /*
  *   Standard include files
  */

 #include   STDLIB
 #include   STDIO
 #include   STRING
 #include   TIME

 /*
  *   ESA include files
  */

 #include ESA_DIAG
 #include ESA_CTSAMSG
 #include ESA_API
 #include ESA_API_CODES

 /*
  *   MVS include files
  */

 #include MVS_OS_CLI
 #include MVS_COMP

 #include API_ADDINFO
 #include API_AUTH

 #include ACF2_CODES
 #include ACF2

 static   char   component[]="DELRES";
/****************************************************
 * Procedure Name: CTSDelRes
 * Description   : Deletes a resource with it's ACL info
 * Input         : resource, addinfo_data.
 * Output        : None
 * Input/Output  : None
 * Return Value  : ESA_RC
 ***************************************************/

 ESA_RC CTSDelRes (RES_PARAMS_rec_typ   * res_params,
             /*    ADDINFO_rec_typ      * addinfo_res,    PS0252 */
                   ADDINFO_rec_typ      * addinfo_data,
                   ADMIN_PARAMS_rec_typ * admin_params,
                   ERR_STRUCT_rec_typ   * err)
 {

   static char                   func[]="CTSDelRes";

  /*
   *     Variables
   */

   ESA_RC                        rc = ESA_OK;
   CTSAMSG_HANDLE_rec_typ      * msgs;
   CTSAMSG_DEST_TABLE_rec_typ  * dest;

   char                        msg[256]="";
   char                        errmsg[256]="";

  /*
   *   Initialize
   */

   ESA_DIAG_enter(ESA_COMP_DELRES, 1, func);

   msgs = admin_params->ctsamsg_handle;
   dest = admin_params->ctsamsg_dest;

 /* WS2358 */
 /*----------------------------------------------------------------*/
 /* Did the DEL RESOURCE request specify the virtual resource ?    */
 /*----------------------------------------------------------------*/
 if (ACF2_Is_Virtual_Resource (res_params->resource) )
 {
   ESA_DIAG_printf(ESA_COMP_DELRES, DEBUG_SHOW_IMPORTANT,
                   "VIRTUAL RESOURCE detected");
   CTSAMSG_print(ACF2_CANNOT_DEL_VIRTUAL_RES, msgs, NULL, dest);
   rc = ESA_FATAL;
   goto exit;
 };
 /* End of WS2358 */

   /*************************************************************
   * Back up the rule before deleting it                        *
   **************************************************************/
   rc = Rule_Backup ("DELRES",
                     res_params -> resource,
                     res_params -> restype,
                     admin_params);

   if (rc NE ESA_OK)
     goto exit;

   rc = Delete_Ruleset (res_params->resource,
                        res_params->restype,
                        errmsg,
                        msgs,
                        dest);

   if (rc NE ESA_OK)
     if (rc EQ ESA_ERR)
     {
       CTSAMSG_print(ERR_RES_NOT_EXIST, msgs, NULL, dest,
                     res_params->resource);
       rc = ESA_FATAL;
       goto exit;
     }
     else
     {
       sprintf(msg,"Del Res fail res=%s msg=%s",
                 res_params->resource, errmsg);
       CTSAMSG_print(ERR_INTERNAL2,msgs, NULL, dest, component,
              func, msg, 16,__LINE__);
       rc = ESA_FATAL;
       goto exit;
     };

  /*
   *   Finish
   */

   exit:;

   ESA_DIAG_exit(ESA_COMP_DELRES, 1, func, rc);

   return rc;

 }

