 /**************************************************************
 *                                                             *
 * Title            : API termination routine (ACF2)           *
 *                                                             *
 * File Name        : ctsrterm.c                               *
 *                                                             *
 * Author           : Yishay Yovel                             *
 *                                                             *
 * Creation Date    : 20/05/97                                 *
 *                                                             *
 * Description      :                                          *
 *                                                             *
 * Assumptions and                                             *
 *   Considerations :                                          *
 *                                                             *
 **************************************************************/

 /**************************************************************
 * Mod.Id   Who      When     Description                      *
 * -------- -------- -------- -------------------------------- *
 * WS2338   Guy      02/11/98 Group support of MUL.VALUE fields*
 * BS2509   RamiK    03/03/02 correct memory leak in ONLI      *
 * BS2607   AvnerL   31/05/03 support user defined date fields *
 * is0077   AvnerL   29/06/03 fix bs2607.                      *
 * IS10002  AvnerL   01/11/06 Drop CTS3121E. WS2549 improvement*
 * WS10054  SeligT   26/07/16 Add ENQ/DEQ SYSTEMS RNL Parameter*
 * IS10139  SeligT   28/08/16 Update OS Functions for Agents   *
 * IS10174  NuritY   31/12/17 Dynamic EXECOUT support.         *
 * WS10075  SeligT   21/11/19 Manage Permissions as Account    *
 *                            and Group Attributes             *
 * IS10184  NuritY   31/08/21 Improve scripts performance      *
 * WS10084  ThomaS   13/07/23  Replace ACFRPTRX                *
 **************************************************************/

 #include   <globs.h>
 #include   STDIO
 #include   STDLIB
 #include   STRING
 #include   CTYPE
 #include   TIME
 #include   FCNTL

 #include   ESA_API
 #include   ESA_DIAG
 #include   ESA_CTSAMSG
 #include   ESA_API_CODES
 #include   API_AUTH                                       /* IS10174 */

 #include API_ADDINFO
 /* IS10139 #include <CTSCSRV.h>                             WS10054 */

 #include MVS_CODES                                       /* WS10075 */
 #include MVS_OS_DYNAM                                    /* WS10075 */
 #include ACF2_CODES
 #include ACF2

 /* clean bs2607 elements by is10002 (is0077 forgot to do it)
 /*IS10002 #include MVS_COMP                        /*bs2607*
 /*IS10002 #include MVS_OS_CLI                      /*bs2607*
 typedef struct {       /* an element in date fields table bs2607 *
  char *Date_Field_Name;
  } Date_Field_typ;
#define Date_Fields_Table dateflt /* extern should be LE 8 bs2607 *
 extern Date_Field_typ Date_Fields_Table [20];         /* bs2607 *
  * end of cleanup by is10002 (is0077 forgot to do it) ************/

/****************************************************
 * Procedure Name : apiterm
 * Description    : API termination & cleanup
 * Input          :
 * Output         :
 * Input/Output   : admin, err
 * Return Value   : ESA_RC
 * Side Effects   :
 * Comments       : Platform-dependent operations to be performed
 *                  when API is no longer needed.
 ***************************************************/

 ESA_RC CTSAPITerm (ADMIN_PARAMS_rec_typ * admin_params,
                    ERR_STRUCT_rec_typ   * err)
{
   char          func[] = "CTSAPITerm";                      /*IS10002*/
   ACF2_PARAMS_rec_typ * params_ptr = NULL;                  /*IS10002*/
 /*char log[]    = NULL_STRING;
   char shadow[] = NULL_STRING; */
   int                          del_rc = 0;               /* WS10075 */
   int                          debug_level = 0;          /* WS10075 */
   /* WS10084 int                         rxs_rc = 0;     /* WS10075 */
   /* WS10084 CTS2RX_error_block_rec_typ  rxe_error_block;/* WS10075 */
   CTSAMSG_HANDLE_rec_typ     * msgs;                     /* WS10075 */
   CTSAMSG_DEST_TABLE_rec_typ * dest;                     /* WS10075 */
   ESA_RC        rc = ESA_OK;                            /* IS10174 */
   COMMON_PARAMS_rec_typ      * comm_parms = NULL;       /* IS10174 */


   /* ESA_DIAG_initialize (log, shadow, func,
                        &admin_params->esadiag_handle) ;  */

   admin_params->cs_func.DIAG_enter_ptr(
     ESA_COMP_APITERM, 1, func );


 /* is0077 no need in df variable                          is0077
 Date_Field_typ   *df;  /* ptr of date field               bs2607 */

  GDB_Set_Mode(GDB_Closed,admin_params,err);

  UDB_Set_Mode(UDB_Closed,admin_params,err);              /* WS2338 */

  ACF2_Free_ACFFDR(); /* BS2509 */

  /* * * * * * * * WS10075 Start * * * * * * */

  msgs = admin_params->ctsamsg_handle;
  dest = admin_params->ctsamsg_dest;

  debug_level = ESA_DIAG_get_debug_level(ESA_COMP_APITERM);
  if (debug_level GT 1)
     debug_level = 1;

  /* IS10184 - this code is moved below, after we verify that
               params_ptr is not NULL.
  params_ptr = admin_params->apiinit_handle;

  if (params_ptr->p_cts2rxs NE NULL)
  {
    rxs_rc = (*params_ptr->p_cts2rxs)("TERM    ",
                      debug_level,
                      &rxe_error_block);

    if (rxs_rc NE 0)
      if (rxe_error_block.rxeerror EQ TRUE)
      {
         CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest,
                       rxe_error_block.rxepgm,
                       rxe_error_block.rxefunc,
                       rxe_error_block.rxemsg,
                       16, __LINE__);
      }
      else
      {
         CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest,
                       "CTS2RXS", func,
                       "joblog contains the error message",
                       16, __LINE__);
      }

    GLR_del_mods(admin_params);

  }
      end of moved code - IS10184 */

  /* * * * * * * * WS10075 End * * * * * * * */

  /************************ bs2607 *********************/
  /*** free date fields pointed by elements of table ***/
  /*** is0077 - drop bs2607 code ***********************/
  /* as CTSAPITerm is called in online interceptor for every
     event handled, we can't free it here. We will let MVS
     frees the areas pointed by the date table, when STC of online
     goes down.
    for (df=Date_Fields_Table;
         df->Date_Field_Name[0] NE NULL_CHAR;
         df++) {
       ESA_DIAG_printf(PLT_COMP_API_ACF2,DEBUG_SHOW_IMPORTANT,
             "Date Field 2 b freed (%s)",
             df->Date_Field_Name);
       free(df->Date_Field_Name);
    } /* end for  end of is0077*/
  /********************* bs2607 end *********************/
   /******************** IS10002 starts **************************/
   /* free area allocated by CTSAPIInit.                         */
   params_ptr = admin_params->apiinit_handle;
   if ( params_ptr EQ NULL )
   {
     /*IS10182 admin_params->cs_func.DIAG_printf_ptr( */
     ESA_DIAG_printf(                             /*IS10182*/
       ESA_COMP_APITERM,3,"apiinit_handle is NULL");
   }
   else
   {
     /* IS10184 - code moved here to be executed only when
                  params_ptr is not NULL.
                  The code is part of WS10075                   */
/* WS10084
     if (params_ptr->p_cts2rxs NE NULL)
     {
       rxs_rc = (*params_ptr->p_cts2rxs)("TERM    ",
                         debug_level,
                         &rxe_error_block);

       if (rxs_rc NE 0)
         if (rxe_error_block.rxeerror EQ TRUE)
         {
            CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest,
                          rxe_error_block.rxepgm,
                          rxe_error_block.rxefunc,
                          rxe_error_block.rxemsg,
                          16, __LINE__);
         }
         else
         {
            CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest,
                          "CTS2RXS", func,
                          "joblog contains the error message",
                          16, __LINE__);
         }

       GLR_del_mods(admin_params);

     }
   WS10084 */
     /* IS10184 - end of moved code. */

     /* IS10174 - start */
     /*
      *  Terminate all administrators and free the Administrators
      *  list
      */
     if (params_ptr->common_params NE NULL)
     {
       rc = ESA_OK;                                       /* IS10184 */
       comm_parms = params_ptr->common_params;

       /* IS10184 - the code bellow was moved to Common_params_handle
                    to be executed each time comon_params is freed
                    either by CC or by SPI.
       /@IS10182 admin_params->cs_func.DIAG_printf_ptr( @/
       ESA_DIAG_printf(                                /@IS10182@/
                    ESA_COMP_APITERM, 3,
                    "AdminsLIst_Handle(TERMF): area = %8X -> %8X",
                    &comm_parms->RSS_Admins_list,
                    comm_parms->RSS_Admins_list);

       if (comm_parms->RSS_Admins_list NE NULL)
       {
         rc = CTSCRSS_AdminsList_Handle ("TERMF",
             (RSS_ADMINS_LIST_rec_typ **)&comm_parms->RSS_Admins_list,
             ESA_COMP_APITERM, admin_params);

         /@IS10182 admin_params->cs_func.DIAG_printf_ptr( @/
         ESA_DIAG_printf(                                /@IS10182@/
                      ESA_COMP_APITERM, 3,
                      "AdminsLIst_Handle(TERMF): rc = %d", rc);
       }
          end of moved code - IS10184 */

       /*
        *  Free the Common_params block.
        */
       /* free common usaapi parameters area                   WS10054 */
       /*  See comments related to this fix in CTSCSRV.
       free_common_parms_area(admin_params,
                             (DUMMY_PARAMS_rec_typ *) params_ptr); */
       /*IS10182 admin_params->cs_func.DIAG_printf_ptr( */
       ESA_DIAG_printf(                                /*IS10182*/
                      ESA_COMP_APITERM,3,
                     "Common_params address=<%x> - free area.",
                     params_ptr->common_params);
       /* IS10184
       rc = Common_params_Handle ("TERM", &params_ptr->common_params,
                                 admin_params); */
       rc = Common_params_Handle ("TERM",
                                  COMMON_PARAMS_OWNER_SPI, /* IS10184 */
                                  &params_ptr->common_params,
                                  admin_params);
       /*IS10182 admin_params->cs_func.DIAG_printf_ptr(*/
       ESA_DIAG_printf(                                 /*IS10182*/
                      ESA_COMP_APITERM,3,
                     "Common_params_Handle(TERM) - rc = %d", rc);
     }
     /* IS10174- end   */

     /* If the rc from  Common_params_Handle is ESA_NOT_SUPP IS10184 */
     /* it means that common_params is not ours and we did   IS10184 */
     /* free it, so we willnot free the params block.        IS10184 */
     /* The comon_params and the params block will be freed  IS10184 */
     /* by the owner of the common_params.                   IS10184 */
     if (rc NE ESA_NOT_SUPP)                              /* IS10184 */
     {                                                    /* IS10184 */
       /*IS10182 admin_params->cs_func.DIAG_printf_ptr( */
       ESA_DIAG_printf(                               /*IS10182*/
         ESA_COMP_APITERM,3,
         "apiinit_handle address=<%x>, free area.",params_ptr);

       free(params_ptr);
       admin_params->apiinit_handle = NULL;
     };                                                   /* IS10184 */
   }

   admin_params->cs_func.DIAG_exit_ptr(
      ESA_COMP_APITERM, 1, func,ESA_OK);
   /********************* IS10002 ends ***************************/
   return ESA_OK;
}
