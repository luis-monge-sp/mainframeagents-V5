/***************************************************************
*                                                              *
* Title            : General Service functions for callable    *
*                    services                                  *
*                                                              *
* File Name        : ctscsrv.c                                 *
*                                                              *
* Author           : Michael Cohen                             *
*                                                              *
* Creation Date    : 30/12/03                                  *
*                                                              *
* Description      : These function call the common code       *
*                    callable services using function pointers.*
*                    The USA-API are linked to these functions *
*                    and not to the common code functions.     *
*                                                              *
* Assumptions and                                              *
*   Considerations :                                           *
*                                                              *
***************************************************************/

 /**************************************************************
 * Mod.Id   Who      When     Description                      *
 *-------- ------   -------  --------------                    *
 * IS0153  MichaelC  30Dec2003 Created                         *
 * IS0222  MichaelC  12Jan2004 Enlarge string size             *
 * WS10054 SeligT    26Jul2016 Add ENQ/DEQ SYSTEMS RNL Parm    *
 *SAS2IBMN NuritY    02Feb2017 MSG_print_ptr now points to     *
 *                             CTSAMSG_print_direct to the     *
 *                             parameters passed to it are     *
 *                             changed accordingly.            *
 * IS10174  NuritY  31/12/17  Dynamic EXECOUT support.         *
 * WS10074  KailasP 24/12/18   Check Password history.         *
 * IS10182  NuritY  17/07/19   S0C4/S0C1 due 2 DIAG vsprintf   *
 * BS10102  AvnerL  30/07/19   S0C1 with protected & IS10182   *
 * WS10082  AvnerL  04/10/23   Remove API_ADDINFO & more       *
 **************************************************************/

#include   <globs.h>

/*
 *   Standard include files
 */

#include   STDLIB
#include   STDIO
#include   STRING

/*
 *   CONTROL-SA include files
 */

#include ESA_API
#include ESA_API_CODES
#include ESA_DIAG
#include ESA_CTSAMSG

#include MVS_CODES
#include MVS_OS_MVS

#include RACF_CODES
/* WS10082 #include API_ADDINFO --- it is not really used */
#include API_AUTH
#include <CTSCSRV.h>
/* IS10174 #include RACF                                           */
/* IS10174 #include ACF2                                           */

static char component[] = "CTSCSRV";                     /* IS10174 */

/*------------------------------------------------------------------*/
/* g_admin_params is the static variable that contains              */
/* the address of the admin_params to be used for the               */
/* pointers to callable services functions.                         */
/*------------------------------------------------------------------*/
/*BS10102 static ADMIN_PARAMS_rec_typ * g_admin_params; */
static ADMIN_PARAMS_rec_typ * g_admin_params = NULL; /*BS10102*/

/*------------------------------------------------------------------*/
/* This function initializes the static variable with the address   */
/* of the admin params.                                             */
/* This function is called by the API_init functions.               */
/*------------------------------------------------------------------*/
ESA_RC init_global_admin_params (ADMIN_PARAMS_rec_typ * admin_params)
{
   ESA_RC      rc = ESA_OK;
   if (g_admin_params EQ NULL)      /*BS10102*/
     g_admin_params = admin_params;
   return rc;
}

/*------------------------------------------------------------------*/
/* WS10074 - START */
/*****************************************************************
* Procedure Name: My_strrev
* Description   : Reverse the string
* Input         : str1 - String to reverse
* Return Value  : str1 - Reversed string
* Return codes  : ESA_OK - string reversed
*                 ESA_WARN - NULL string passed
*
*****************************************************************/

ESA_RC My_strrev (char  *str1)
{
    ESA_RC rc = ESA_WARN;
    unsigned char char1;
    int i,j;

    unsigned len;

    if ( str1 EQ NULL )
         rc = ESA_WARN;
    else
    {
      len = strlen(str1);
      /* If string length is greater than 1 then reverse the string */
      if ( len GT 1 )
      {
      /* In this loop we swap the characters from left to right
         and from right to left. Example if string is abcde then
         we will swap first char 'a' and last char 'e' then second
         from left 'b' and second last 'd' and so on              */
        for (i = 0, j = (len-1); i LT j ; i++,j--)
        {
          char1   = str1[i];
          str1[i] = str1[j];
          str1[j] = char1;

        }
      }
      rc = ESA_OK;
    }
    return rc;
}
/* WS10074 - END */

/*------------------------------------------------------------------*/
void ESA_DIAGR_enter (void               * handle,
                      ESA_DIAG_COMP_typ    comp,
                      ESA_DIAG_LEVEL_typ   level,
                      const char         * funcname)
{
 /*  printf ("DIAGR not suppported\n"); */
 return;
}
/*------------------------------------------------------------------*/
void ESA_DIAGR_exit (void               * handle,
                     ESA_DIAG_COMP_typ    comp,
                     ESA_DIAG_LEVEL_typ   level,
                     const char         * funcname,
                     ESA_RC               rc_ret)
{
 /* printf ("DIAGR not suppported\n"); */
 return;
}
/*------------------------------------------------------------------*/
void ESA_DIAGR_printf (void               * handle,
                       ESA_DIAG_COMP_typ    comp,
                       ESA_DIAG_LEVEL_typ   level,
                       const char         * format, ...)
{
 /* printf ("DIAGR not suppported\n"); */
 return;
}
/*------------------------------------------------------------------*/
void ESA_DIAG_enter (ESA_DIAG_COMP_typ    comp,
                     ESA_DIAG_LEVEL_typ   level,
                     const char         * funcname)
{
  /* Call DIAG_enter function            */
  g_admin_params->cs_func.DIAG_enter_ptr(comp,level,funcname);
}
/*------------------------------------------------------------------*/
void ESA_DIAG_exit (ESA_DIAG_COMP_typ   comp,
                    ESA_DIAG_LEVEL_typ  level,
                    const char        * funcname,
                    ESA_RC              rc_ret)
{
  /* Call DIAG_exit function            */
  g_admin_params->cs_func.DIAG_exit_ptr(comp,level,funcname,rc_ret);
}
/*------------------------------------------------------------------*/
/* ESA_DIAG_printf                                                  */
/* This function calls the DIAG_printf callable service via funtion */
/* pointer (from admin_params).                                     */
/* The parameters are converted to va_list format and passed to     */
/* vsprint function that builds the string to be printed.           */
/*------------------------------------------------------------------*/

void ESA_DIAG_printf (ESA_DIAG_COMP_typ    comp,
                      ESA_DIAG_LEVEL_typ   level,
                      const char         * format, ...)
{
 /* IS0222 */
  /*WS10082char diagstr[80+ACF_ADDINFO_KWD_LEN+ACF_ADDINFO_VAL_LEN];*/
  va_list arg_list;
  va_start (arg_list, format);
  /* IS10182 vsprintf (diagstr, format, arg_list);  */

  /* IS10182
  g_admin_params->cs_func.DIAG_printf_ptr
      (comp,level,"%s", diagstr);                                */
  g_admin_params->cs_func.DIAG_printf_ptr(            /* IS10182 */
                  comp, level, format, arg_list);     /* IS10182 */

  va_end (arg_list);

} /* ESA_DIAG_printf */
/*------------------------------------------------------------------*/
/* ESA_DIAG_get_debug_level                                         */
/*------------------------------------------------------------------*/
ESA_DIAG_LEVEL_typ ESA_DIAG_get_debug_level (ESA_DIAG_COMP_typ comp)
{
  return g_admin_params->cs_func.DIAG_get_debug_level_ptr(comp);
}
/*------------------------------------------------------------------*/
/* ESA_DIAG_initialize not suppported                               */
/*------------------------------------------------------------------*/
void ESA_DIAG_initialize (const char  * log_file_name,
                          const char  * shadow_file_name,
                          const char  * procname,
                          void       ** handle)
{
  /* printf ("ESA_DIAG_initialize not suppported\n"); */
 return ;
}
/*------------------------------------------------------------------*/
/****************************************************
 * Procedure Name: ESA_rc2str
 * Description   : Translate ESA_RC code to string
 * Input         : RC
 * Output        :
 * Return Value  : const char *
 * Side Effects  :
 * Scope         : Global
 * Re-entrant    : Yes
 ****************************************************/

const char * ESA_rc2str (ESA_RC rc)
{
   switch ((int)rc) {
     case ESA_OK:                return "OK";
     case ESA_SKIP:              return "SKIP";
     case ESA_WARN:              return "WARN";
     case ESA_ERR:               return "ERR";
     case ESA_FATAL:             return "FATAL";
     case ESA_LOCKED:            return "LOCKED";
     case ESA_KEY_NOT_FOUND:     return "KEY_NOT_FOUND";
     case ESA_DUP_KEY:           return "DUPLICATE KEY";
     case ESA_EOF:               return "EOF";
     case ESA_NOT_SUPP:          return "UNSUPP";
     case ESA_RC_VOID:           return "<VOID>";
     case ESA_RC_UNDEFINED:      return "<UNDEFINED>";
     case ESA_MBX_FULL:          return "MBX FULL";
     case ESA_MBX_NOT_EXIST:     return "MBX NOT EXIST";
     case ESA_MBX_BUFFEROVF:     return "MBX OVERFLOW";
     case ESA_MBX_EMPTY:         return "MBX EMPTY";
     case ESA_MBX_ALREADY_EXIST: return "MBX ALREADY EXISTS";
     case ESA_TERM_CTSA:         return "TERMINATE CTSA";
     case ESA_CANCEL_SERVICE:    return "CANCEL SERVICE";
     case ESA_FATAL_IO:          return "FATAL I/O";
     case ESA_ABORT_REQ:         return "ABORT REQUEST";
     case ESA_RSS_INACTIVE:      return "RSS INACTIVE";
     case ESA_UNKNWNERR:         return "UNKNOWN ERROR";
     case ESA_DB_DUPLIC:         return "DUPLICATE DB KEY";
     case ESA_PROC_NOTEXIST:     return "PROCESS NOTEXIST";
     case ESA_PROC_EXIST:        return "PROCESS EXIST";
     default:                    return "<UNKNOWN RC!!>";
   }
} /* ESA_rc2str */

/*------------------------------------------------------------------*/
/* CTSAMSG_print function calls the MSG_printf_ptr callable service */
/* using function pointer from admin_params.                        */
/* It gets msgid, handle, buffer, dest and a list of arguments (...)*/
/* but uses only the msgid and (...) to call the callable service.  */
/* We use va_start to get a pointer (arg_list[0]) to the '...'      */
/* We can't just pass arg_list[0] to the callable service function  */
/* since it expects to get a list of parameters -pointers and values*/
/* so we have to pass the parameter list exactly as we got it.      */
/* The way to do it is to pass the parameter list in a few parameters*/
/* (4 bytes groups).                                                */
/* (void **)arg_list[0])[0], (void **)arg_list[0])[1] etc.          */
/* We actually tell the compiler that arg_list[0] is a pointer to an*/
/* array of ptrs  and we ask to pass the "pointers" to the function */
/* one by one.  Since these are pointers the compiler actually copies*/
/* them to the parameter list of the called function.               */
/* The current limit in the code is 9 words which are 9 pointers/   */
/* integers.
/*------------------------------------------------------------------*/
ESA_RC CTSAMSG_print (const char                 * msgid,
                      CTSAMSG_HANDLE_rec_typ     * handle,
                      char                       * buffer,
                      CTSAMSG_DEST_TABLE_rec_typ * dest,
                      ... )
{

  ESA_RC rc;

  va_list arg_list;
  va_start (arg_list, dest);

  /* SAS2IBMN - start  */
  /* rc = g_admin_params->cs_func.MSG_printf_ptr
      (msgid,((void **)arg_list[0])[0],
             ((void **)arg_list[0])[1],
             ((void **)arg_list[0])[2],
             ((void **)arg_list[0])[3],
             ((void **)arg_list[0])[4],
             ((void **)arg_list[0])[5],
             ((void **)arg_list[0])[6],
             ((void **)arg_list[0])[7],
             ((void **)arg_list[0])[8]);    */
  rc = g_admin_params->cs_func.MSG_printf_ptr(msgid, handle, buffer,
                                              dest, arg_list);
  /* SAS2IBMN - end    */

  va_end (arg_list);

  return rc;
} /* CTSAMSG_printf */

/* SAS2IBMN - The routines below are removed becasue, as described
              below, they are not currently used.
              When needed, they will have to be changed a bit:
                - Add standard diags (enter, exit, etc.)
                - Issue messages using CTSAMSG.
 **************  start of WS10054  **********************************
 *------------------------------------------------------------------*
 * This function sets common usa-api global parameters.  It is      *
 * called from CTSBINI (ACF2), CTSRINI (RACF), and CTSTINI (TSS).   *
 * Please note:  This routine is currently not in use.  When doing  *
 *               a PB, we noticed that CTSCSRV is not in the link   *
 *               cards of CTSCOFI and CTSCONI so we commented out   *
 *               the call to this routine from CTSBINI, CTSRINI,    *
 *               and CTSTINI (instead of including CTSCSRV in the   *
 *               CTSCOFI and CTSCONI load module). In the future,   *
 *               it may be a good idea to move this routine to a    *
 *               module accessible by all and then it can be used   *
 *               to set common usaapi parameters.                   *
 *------------------------------------------------------------------*
void set_common_usaapi_parms (ADMIN_PARAMS_rec_typ * admin_params,
                              DUMMY_PARAMS_rec_typ * params_ptr)
{
   char component[] = "CTSCSRV";
   char func[] = "set_common_usaapi_parms";
   char  errmsg[81] = "";
   COMMON_PARAMS_rec_typ * common_ptr = NULL;

   admin_params->cs_func.DIAG_printf_ptr(ESA_COMP_APIINIT,3,
       "Allocating <%d> bytes for COMMON_PARAMS ",
       sizeof(COMMON_PARAMS_rec_typ));
   common_ptr = malloc(sizeof(COMMON_PARAMS_rec_typ));
   if (params_ptr EQ NULL)
     {
      sprintf(errmsg,"COMMON_PARAMS in comp=%s fn=%s",component,func);
      admin_params->cs_func.MSG_printf_ptr (
          ERR_MALLOC, errmsg,sizeof(COMMON_PARAMS_rec_typ));
      return;
     }
   else
     {
      admin_params->cs_func.DIAG_printf_ptr(ESA_COMP_APIINIT,3,
      "COMMON_PARAMS allocated at %X",common_ptr);
      params_ptr->common_params = common_ptr;
     }
   return;
}

 *------------------------------------------------------------------*
 * This function frees the common usa-api global parameters area.   *
 * It is called from CTSBTRM (ACF2), CTSRTRM (RACF), and CTSTTRM    *
 * (TSS).  The area was set by the set_common_usaapi_parms routine  *
 * in this module.                                                  *
 * Please note:  This routine is currently not in use.  When doing  *
 *               a PB, we noticed that CTSCSRV is not in the link   *
 *               cards of CTSCOFI and CTSCONI so we commented out   *
 *               the call to this routine from CTSBTRM, CTSRTRM,    *
 *               and CTSTTRM (instead of including CTSCSRV in the   *
 *               CTSCOFI and CTSCONI load module). In the future,   *
 *               it may be a good idea to move this routine to a    *
 *               module accessible by all and then it can be used   *
 *               to set common usaapi parameters.                   *
 *------------------------------------------------------------------*
void free_common_parms_area (ADMIN_PARAMS_rec_typ * admin_params,
                             DUMMY_PARAMS_rec_typ * params_ptr)
{
   COMMON_PARAMS_rec_typ * common_ptr = NULL;
   common_ptr = params_ptr->common_params;
   if ( common_ptr EQ NULL )
   {
     admin_params->cs_func.DIAG_printf_ptr(
       ESA_COMP_APITERM,3,"common_params pointer is NULL");
   }
   else
   {
     admin_params->cs_func.DIAG_printf_ptr(
       ESA_COMP_APITERM,3,
       "common_params pointer=<%x>, free area.",common_ptr);
     free(common_ptr);
     params_ptr->common_params = NULL;
   }
   return;
}
 ****************  end of WS10054  **********************************
*/
