 /**************************************************************
 *                                                             *
 * Title            : Various ACF2 ACFFDR manipulation funcs   *
 *                                                             *
 * File Name        : ctsbkda.c                                *
 *                                                             *
 * Author           : Yishay Yovel                             *
 *                                                             *
 * Creation Date    : 20/07/97                                 *
 *                                                             *
 * Description      :                                          *
 *                                                             *
 * Assumptions and                                             *
 *   Considerations :                                          *
 *                                                             *
 * The main functionality of this package is to analyze the    *
 * ACFFDR module. This module is a data dictionary compiled    *
 * during ACF2 Install and maps all the ACF2 and User defined  *
 * fields in the logonid record database.                      *
 *                                                             *
 * We analyze this module to sync our field dictionary with    *
 * ACF2 and auto-detect user defined fields. It also provides  *
 * the UID strcuture information.                              *
 *                                                             *
 * ACFFDR is pointed from ACCVT (ACF2 main cb) or can be loaded*
 * from lpa/linklist.                                          *
 *                                                             *
 * See Also: CTSBUID (for some uid related functions)          *
 **************************************************************/

 /**************************************************************
 * Mod.Id   Who      When     Description                      *
 * -------- -------- -------- -------------------------------- *
 * BS2310   Guy      02/11/97 Modified types to KDT_KEYG       *
 * WS2337   Guy      07/10/98 Added Multi Valued Fields support*
 * PS0321   Guy      25/10/98 Changed structure of ACFFDR field*
 *                            and added UIDX field             *
 * PS0349   Guy      06/12/98 Add quotes for each multivalued  *
 *                            field value                      *
 * BS2372   Guy      13/01/99 Hex fields cannot be nullified   *
 * BS2497   Michael  12/11/01 get rss params fails when UID    *
 *                            string is multi-valued.          *
 * BS2509   RamiK  03/03/2002 internal errors in online intrcptr*
 * bs2607   AvnerL 29/05/2003 support date user defined fields *
 * is0077   AvnerL 29/06/2003 fix bs2607.                      *
 * BS2639   AvnerL 01/02/2004 Update diag levels.No code change*
 * BS2665   AvnerL 09/03/2004 S0c4 in Federal Reserve.         *
 * sas750   AvnerL 23/11/2009 clear SAS/C 7.5 warnings.        *
 * SAS2IBMT SeligT 09/10/2016 SAS/C to IBM C Conversion Project*
 **************************************************************/
#include <globs.h>

#include STDLIB
#include STDIO
#include STRING
#include CTYPE

#include ESA_DIAG

#include MVS_COMP

#include API_ADDINFO
#include ACF2
#include ESA_API_CODES       /* for ERR_MALLOC  bs2607 */

 /*************************************************************
 * ACFFDR global information                                  *
 **************************************************************/
typedef struct {
 int ACFFDR_Address    ;
 int ACFFDR_First_CFDE ;
 int ACFFDR_Field_Count;
 int ACFFDR_Entry_Len  ;
 char ACFFDR_ACF2_Release[16];
 char ACFFDR_EOS1[4];
 int ACFFDR_UID_Field_Count;
 char ACFFDR_UID_Description[255];
 char ACFFDR_EOS2[4];
 } ACFFDR_Global_Info;

 /*************************************************************
 * UID component (raw)                                        *
 **************************************************************/
typedef struct {
 short UID_Field_Offset;
 short UID_Field_Length;
 } UID_entry;

 /*************************************************************
 * CFDE mapping: a single ACF2 field descriptor               *
 **************************************************************/
typedef struct {
 char ACFFDR_Field_Name[10];
 short ACFFDR_Field_Offset ;
 short ACFFDR_Field_Length ;
 char ACFFDR_Field_Type    ;
 char ACFFDR_Field_RW      ;
 short ACFFDR_Min_Values   ;                              /* WS2337 */
 short ACFFDR_Max_Values   ;                              /* WS2337 */
 char ACFFDR_Multi_Value   ;                              /* WS2337 */
 char ACFFDR_Allow_Dups    ;                              /* WS2337 */
 char ACFFDR_Replace_Only  ;                              /* WS2337 */
 } ACFFDR_CFDE;

static ACFFDR_Global_Info   ginfo;
static UID_entry            uidtab[ACF2_UID_SIZE];
static ACFFDR_CFDE          *cfdetab = NULL;
static ADDINFO_KDTE_rec_ptr acf2kdt = NULL;               /* BS2509 */

 /****************** bs2607 definitions start *****************/
 typedef struct {        /* an element in date fields table */
  char *Date_Field_Name;
  } Date_Field_typ;

#define Date_Fields_Table dateflt /* external should be LE 8 chars */
static int date_table_is_ready = 0; /* first time, it is set to 1  */
/*#define MAX_DATE_FIELDS 20 /* acf2 6.5 has 5 date fields /* is0077 */
#define MAX_DATE_FIELDS 50   /* acf2 6.5 has 5 date fields /* BS2665 */
Date_Field_typ  Date_Fields_Table [MAX_DATE_FIELDS] =    /* is0077 */
 /* BS2665 */   { NULL }; /* init with one entry with one NULL_CHAR  */
 /* BS2665      { "" };  * init with one entry with one NULL_CHAR  */
 /****************** bs2607 definitions end *******************/


/* SAS2IBMT prototype changed for IBM C
void cts2fdr(char *,
             ACFFDR_Global_Info *,
             UID_entry   *,
             ACFFDR_CFDE *,
             long int *);                                            */
void cts2fdr();                                           /* SAS2IBMT */

/******************************************************************
 * Procedure Name: Get_Field_Information
 ******************************************************************
 * Description   : Gets ACF2/User Defined field attributes for specific
 *                 field.
 *
 * Input         : field_name  - requested field.
 *
 * Output        : field_type  - bit, char etc.
 *                 field_rw    - is field updatebale
 *                 field_length- field length in bytes
 *                 field_offset- in LID record
 *                 field_multi - Is field Multi Valued Y/N
 *                 field_mvmax - Max number of values if multi-valued
 *
 * Return Value  : ESA_RC
 *                 ESA_OK    - field_found
 *                 ESA_FATAL - field not found in dictionary
 ******************************************************************/
ESA_RC ACF2_Get_Field_Information(char *field_name,
                                  char *field_type,
                                  char *field_rw    ,
                                  int  *field_length,
                                  int  *field_offset,
                                  char *field_multi,      /* WS2337 */
                                  int  *field_mvmax)      /* WS2337 */
{
 ESA_RC rc = ESA_OK;
 int i;

 for (i=0;i LT ginfo.ACFFDR_Field_Count;i++)
  {
   if (strcmp(field_name,cfdetab[i].ACFFDR_Field_Name) EQ 0)
    {
     (*field_type) = cfdetab[i].ACFFDR_Field_Type;
     (*field_rw) = cfdetab[i].ACFFDR_Field_RW;
     (*field_length) = cfdetab[i].ACFFDR_Field_Length;
     (*field_offset) = cfdetab[i].ACFFDR_Field_Offset;
     (*field_multi) = cfdetab[i].ACFFDR_Multi_Value;      /* WS2337 */
     (*field_mvmax) = cfdetab[i].ACFFDR_Max_Values;       /* WS2337 */
     goto exit;
    };
  };

  rc = ESA_ERR;

  exit:;
  return rc;
}

/******************************************************************
 * Procedure Name: ACF2_Get_ACFFDR
 ******************************************************************
 * Description   : Get ACFFDR information (global, uid info)
 *
 * Input         : None
 *
 * Output        : ginfo (static)   - ACF2 global information
 *                 cfdetab (static) - fields table
 *
 * Return Value  : None
 ******************************************************************/
/* static void ACF2_Get_ACFFDR(void) add  admin_params     bs2607 */
static void ACF2_Get_ACFFDR(ADMIN_PARAMS_rec_typ  * admin_params)
{
 static char                func[]="ACF2_Get_ACFFDR";

 char   fn[]="ACF2_Get_ACFFDR";     /* shouldn't be static is0077 */
 int i      = 0;           /* change rc to rc1             bs2607 */
 long int rc1 = 0;           /* change rc1 to long int       sas750 */

 int n = 0;             /* counter of date fields in table bs2607 */
 Date_Field_typ   *df;  /* ptr of date field               bs2607 */
 CTSAMSG_HANDLE_rec_typ     * msgs;                      /*bs2607 */
 CTSAMSG_DEST_TABLE_rec_typ * dest;                      /*bs2607 */

 ESA_DIAG_enter(PLT_COMP_API_ACF2, DEBUG_SHOW_IMPORTANT, func);
 msgs = admin_params->ctsamsg_handle;                    /*bs2607*/
 dest = admin_params->ctsamsg_dest;                      /*bs2607*/
 ESA_DIAG_printf(PLT_COMP_API_ACF2,11,
 "old value CFDETAB @ %x",cfdetab);

 ACF2_Free_ACFFDR();  /* BS2509 */

 ESA_DIAG_printf(PLT_COMP_API_ACF2,11,
 "fre value CFDETAB @ %x",cfdetab);
 /* SAS2IBMT
 cts2fdr("GLOBAL  ",&ginfo, uidtab, cfdetab , &rc1);                 */
 (*(ASM_RTN_TYP *)&cts2fdr)                               /* SAS2IBMT */
        ("GLOBAL  ",&ginfo, uidtab, cfdetab , &rc1);

 cfdetab = (void *) calloc(sizeof(ACFFDR_CFDE) *
                   ginfo.ACFFDR_Field_Count, 1);
 ESA_DIAG_printf(PLT_COMP_API_ACF2,11,
 "allocated CFDETAB @ %x",cfdetab);

 /* SAS2IBMT
 cts2fdr("CFDE    ",&ginfo, uidtab, cfdetab, &rc1);                  */
 (*(ASM_RTN_TYP *)&cts2fdr)                               /* SAS2IBMT */
        ("CFDE    ",&ginfo, uidtab, cfdetab, &rc1);

 /************************** bs2607 ********************************
  date fields table used to be a pre-defined table, in ctsbsrv to be
  used by ACF2_Convert_Date_Fields routine.
  Since, user defined fields may be date type as well, table is now
  set dynamically, by setting all date fields from ACFFDR in table.
 /******************************************************************/

 df = Date_Fields_Table; /* set ptr on start of table */
 for (i=0;i LT ginfo.ACFFDR_Field_Count AND /* do it only once, on    */
          date_table_is_ready EQ 0      AND /* first time it's called */
          n LT MAX_DATE_FIELDS;i++)         /* date table is pre-alloc*/
   {
  /* following part is dropped by bs2607
   if (ESA_DIAG_get_debug_level(PLT_COMP_API_ACF2)
         GE DEBUG_SHOW_IMPORTANT)
    {
   for (i=0;i LT ginfo.ACFFDR_Field_Count;i++)
   {
   end of dropping by bs2607 */

    ESA_DIAG_printf(PLT_COMP_API_ACF2,11,
                    "Field (%s), l=(%d), t=(%c), r=(%c) offset=(%d)",
                    cfdetab[i].ACFFDR_Field_Name,
                    cfdetab[i].ACFFDR_Field_Length,
                    cfdetab[i].ACFFDR_Field_Type,
                    cfdetab[i].ACFFDR_Field_RW,
                    cfdetab[i].ACFFDR_Field_Offset);

    /* WS2337 - Additional debug message */
    ESA_DIAG_printf(PLT_COMP_API_ACF2,11,
                    "Field (%s), mdr=(%c%c%c) min=(%d) max=(%d)",
                    cfdetab[i].ACFFDR_Field_Name,
                    cfdetab[i].ACFFDR_Multi_Value,
                    cfdetab[i].ACFFDR_Allow_Dups,
                    cfdetab[i].ACFFDR_Replace_Only,
                    cfdetab[i].ACFFDR_Min_Values,
                    cfdetab[i].ACFFDR_Max_Values);        /* WS2337 */
 /********************** bs2607 continues ***************************/
 /* }        */

    if (cfdetab[i].ACFFDR_Field_Type EQ 'P') /* date field */
      {
                              /* space for new date field */
        df->Date_Field_Name =
                  (char *) malloc
                  (strlen(cfdetab[i].ACFFDR_Field_Name)+1);

        if (df->Date_Field_Name EQ NULL)
        {
          CTSAMSG_print(ERR_MALLOC, msgs, NULL, dest,
                       "DATE FIELD ENTRY",
                       strlen(cfdetab[i].ACFFDR_Field_Name)+1);
          goto exit;
        };

        strcpy(df->Date_Field_Name, /* set field name in table */
               cfdetab[i].ACFFDR_Field_Name);
 /* convert '-' to '_' , for comparing with "ess style" field-names*/
        while(strpbrk(df->Date_Field_Name,"-") NE NULL)
          *strpbrk(df->Date_Field_Name,"-") = '_';

        ESA_DIAG_printf(PLT_COMP_API_ACF2,11,
            "Date Field added (%s)",
            df->Date_Field_Name);
        n++;
        df++;
      } /* end of date field handling */
  }   /* end of for loop */

 if (date_table_is_ready EQ 0) /* first time activation */
   {
    date_table_is_ready = 1; /* date_table is ready now bs2607 */
    /* is0077 set NULL in table itself as last entry indication
    df->Date_Field_Name =  (char *) malloc(1);
    if (df->Date_Field_Name EQ NULL)
    {
      CTSAMSG_print(ERR_MALLOC, msgs, NULL, dest,
                   "DATE FIELD ENTRY",1);
      goto exit;
    }; end of is0077 */
    /* is0077 set NULL in pointer itself in table
    df->Date_Field_Name = NULL_CHAR; /* set null in last entry */
    df->Date_Field_Name = NULL; /* set null in last entry */
    ESA_DIAG_printf(PLT_COMP_API_ACF2,11,
            "set null as last date field indication");
    if (n EQ MAX_DATE_FIELDS)     /* no space in date table is0077 */
    {
      ESA_DIAG_printf(PLT_COMP_API_ACF2,0,
            "MAX_DATE_FIELDS is too small.");      /* BS2665 */
      CTSAMSG_print (ERR_CS_INVALID_NUMBER,
                   msgs, NULL, dest,
                   fn, "DATE FIELD ENTRY",
                   MAX_DATE_FIELDS,
                   MAX_DATE_FIELDS); /* is0077 test with max#=2...*/
      goto exit;
    }; /* end of is0077 */
 /********************** bs2607 ends ********************************/
   }
 exit:;                                                   /*bs2607*/

 ESA_DIAG_exit(PLT_COMP_API_ACF2, DEBUG_SHOW_IMPORTANT,func,ESA_OK);

}

/******************************************************************
 * Procedure Name: Get_ACFFDR_In_ESS_Format
 ******************************************************************
 * Description   : Get ACFFDR information in ESS format
 *
 * Input         : None
 *
 * Output        : ACFFDR in ESS Table Format
 *
 * Return Value  : None
 ******************************************************************/
/*void Get_ACFFDR_In_ESS_Format(char *field) add admin_params bs2607 */
 void  Get_ACFFDR_In_ESS_Format(char *field,               /* PS0321*/
   /* bs2607 */               ADMIN_PARAMS_rec_typ  * admin_params)
{
 static char                func[]="Get_ACFFDR_In_ESS_Format";
 int i;
 char temp[256]="";
 char subfield[2], entry[2];

 subfield[0]=ADDINFO_LIST_SUBFIELD;
 subfield[1]=NULL_CHAR;
 entry[0]=ADDINFO_LIST_ENTRY;
 entry[1]=NULL_CHAR;

 ESA_DIAG_enter(PLT_COMP_API_ACF2, DEBUG_SHOW_IMPORTANT, func);

 /* ACF2_Get_ACFFDR(); see below                              bs2607*/
 ACF2_Get_ACFFDR(admin_params);    /* add  admin_params bs2607*/

 field[0] = NULL_CHAR;
 for (i=0;i LT ginfo.ACFFDR_Field_Count;i++)
  {
   strcpy(temp,cfdetab[i].ACFFDR_Field_Name);
   if (strpbrk(temp," ") NE NULL)
    *strpbrk(temp," ") = NULL_CHAR;

   strcat(field,temp);
   strcat(field,subfield);

   temp[0]=cfdetab[i].ACFFDR_Field_Type;
   temp[1]=NULL_CHAR;
   strcat(field,temp);
   strcat(field,subfield);

   sprintf(temp,"%d",cfdetab[i].ACFFDR_Field_Length);
   strcat(field,temp);
   strcat(field,subfield);

   temp[0]=cfdetab[i].ACFFDR_Multi_Value;                 /* PS0321 */
   temp[1]=NULL_CHAR;
   strcat(field,temp);
   strcat(field,subfield);

   temp[0]=cfdetab[i].ACFFDR_Allow_Dups;                  /* PS0321 */
   temp[1]=NULL_CHAR;
   strcat(field,temp);
   strcat(field,subfield);

   sprintf(temp,"%d",cfdetab[i].ACFFDR_Min_Values);       /* WS2337 */
   strcat(field,temp);
   strcat(field,subfield);

   sprintf(temp,"%d",cfdetab[i].ACFFDR_Max_Values);       /* WS2337 */
   strcat(field,temp);
   strcat(field,entry);
  };
 field[strlen(field)-1]=NULL_CHAR;

 exit:; /* bs2607 */
 ESA_DIAG_exit(PLT_COMP_API_ACF2, DEBUG_SHOW_IMPORTANT,func,ESA_OK);
}

/******************************************************************
 * Procedure Name: ACF2_Get_UID_Info
 ******************************************************************
 * Description   : Get UID structure information
 *
 *                 This function is using UID information from acffdr
 *                 to get UID structure info. For each UID component
 *                 ACF2 keeps the component offset info LID and len.
 *
 *                 We compare the uid offsets with field offsets
 *                 (available from ACFFDR), find the fields and analyze
 *                 if only part of the field is used (field_offset).
 *
 * Input         : None
 *
 * Output        : UID_Description  - character description of UID
 *                 UID_Field_Count  - Number of UID Components
 *                 UID_Fields       - UID componets description
 *                 UID_Is_Multi     - UID Multi Y/N
 *
 * Return Value  : None
 ******************************************************************/
void ACF2_Get_UID_Info( char      *UID_Description, /*bs2607*/
                        int       *UID_Field_Count,
                        UID_Structure UID_Fields[ACF2_UID_SIZE],
                        char      *UID_Is_Multi,          /* PS0321 */
   /* bs2607 */         ADMIN_PARAMS_rec_typ  * admin_params)

{
 static char                func[]="ACF2_Get_UID_Info";
 int i, j, Begin_Field, End_Field;
 short Current_UID_Offset = 0;
 char *field_of_UID_p;       /*bs2497*/
 char field_of_UID[10] = ""; /*bs2497*/
 int  field_name_len = 0;    /*bs2497*/

 ESA_DIAG_enter(PLT_COMP_API_ACF2, DEBUG_SHOW_IMPORTANT, func);

 /* ACF2_Get_ACFFDR(); see below                              bs2607*/
 ACF2_Get_ACFFDR(admin_params); /* add rc & admin_params bs2607*/

 *UID_Is_Multi = 'N';                                     /* PS0321 */

/******************************************************************
 * Get UID Component count
 ******************************************************************/
 strcpy(UID_Description,ginfo.ACFFDR_UID_Description);
 (*UID_Field_Count) = ginfo.ACFFDR_UID_Field_Count;
 for (i=0;i LT ginfo.ACFFDR_UID_Field_Count;i++)
 {
    ESA_DIAG_printf(PLT_COMP_API_ACF2,9,
               "uidtab(%d):(%d)",
                i, uidtab[i].UID_Field_Offset);
 }    /*bs2497*/

/******************************************************************
 * For Each Component: Locate field definition connected to component
 *                     (via lid offset of component and field)
 ******************************************************************/
 for (i=0;i LT ginfo.ACFFDR_UID_Field_Count;i++)
 {
     /*--- bs2497 -------------------------------------------------
      * Per each field in UID string, extract the name, compare to
      * field name in cfde. if equals & multi-valued, bypass the
      * regular offset checking.
      * This is done because the value of the LIDREC offset is
      * dynamically modified by ACF2 at runtime, and we cannot
      * trust it to find the actual field in the cfde.
      *--- bs2497 ------------------------------------------------- */

  if (i EQ 0) field_of_UID_p = strtok(ginfo.ACFFDR_UID_Description,",");
     else     field_of_UID_p = strtok(NULL,",");

  field_name_len = strcspn(field_of_UID_p,",");
  memset(field_of_UID,0x00,sizeof(field_of_UID));
  strncpy(field_of_UID,field_of_UID_p,field_name_len);

  ESA_DIAG_printf(PLT_COMP_API_ACF2,9,
          "field of uid(%s)       name length(%d)",
           field_of_UID, field_name_len);

     /* bs2497 - end */

  for (j=0;j LT ginfo.ACFFDR_Field_Count;j++)
  {
  if ((strcmp(cfdetab[j].ACFFDR_Field_Name,field_of_UID) EQ 0)
      AND                                              /*bs2497*/
     (cfdetab[j].ACFFDR_Multi_Value EQ 'Y'))           /*bs2497*/
     {                                                 /*bs2497*/
       Begin_Field = uidtab[i].UID_Field_Offset;       /*bs2497*/
       End_Field   = uidtab[i].UID_Field_Offset +      /*bs2497*/
                     uidtab[i].UID_Field_Length - 1;   /*bs2497*/
     }                                                 /*bs2497*/
  else                                                 /*bs2497*/
  {                                                    /*bs2497*/
  Begin_Field = cfdetab[j].ACFFDR_Field_Offset;
  End_Field = cfdetab[j].ACFFDR_Field_Offset +
              cfdetab[j].ACFFDR_Field_Length - 1;
  }                                                    /*bs2497*/
  if ( (uidtab[i].UID_Field_Offset GE Begin_Field)
                                AND
       (uidtab[i].UID_Field_Offset LE End_Field) )
   {
   /******************************************************************
    * When field has been located, build UID table entry
    ******************************************************************/
    strcpy(UID_Fields[i].UID_Part_Field_Name,
           cfdetab[j].ACFFDR_Field_Name);
    UID_Fields[i].UID_Part_Offset = Current_UID_Offset;
    UID_Fields[i].UID_Field_Offset = uidtab[i].UID_Field_Offset -
                                     Begin_Field;
    UID_Fields[i].UID_Part_Length = uidtab[i].UID_Field_Length;

    UID_Fields[i].UID_Part_Multi = cfdetab[j].ACFFDR_Multi_Value;
                                                          /* PS0321 */
    if (cfdetab[j].ACFFDR_Multi_Value EQ 'Y')             /* PS0321 */
      *UID_Is_Multi = 'Y';                                /* PS0321 */

    Current_UID_Offset += uidtab[i].UID_Field_Length;
    break;
   }
  }
 }  /*bs2497*/
 exit:;                                                    /*bs2607*/
 ESA_DIAG_exit(PLT_COMP_API_ACF2, DEBUG_SHOW_IMPORTANT, func, ESA_OK);
}

/******************************************************************
 * Procedure Name: ACF2_Build_KDT_from_ACFFDR
 ******************************************************************
 * Description   : Build KDT strcuture from ACFFDR
 *
 *                 This function converts ACFFDR information to KDT. KDT
 *                 is used by the command line generator to analyze
 *                 ESS-sent fields and process field according to type
 *                 (flag or keyword).
 *
 *                 The Built is custimzed to type of processing:
 *
 *                 For Insert/Update only ReadWrite fields are required.
 *                 For Update only, the negative value of flag fields
 *                 should be set to "NOkeyword".
 *
 *
 * Input         : Get_Field_Type : Fields to retrieve (Update/Readonly,
 *                                  and if to set the negative value for
 *                                  flags)
 *                 KDT_Entries    : Number of entries in returned KDT
 *                 errmsg         : Error Message
 *
 * Return Value  : KDT pointer
 ******************************************************************/
ADDINFO_KDTE_rec_ptr  ACF2_build_KDT_from_ACFFDR(
                              ACF2_Get_Fields_Filter Get_Field_Type,
                              int                  *KDT_Entries,
   /* bs2607 */               ADMIN_PARAMS_rec_typ  * admin_params)
{
 static char                func[]="ACF2_build_KDT_from_ACFFDR";

 /* --------- */
 /* Variables */
 /* --------- */

 ADDINFO_KDTE_rec_ptr a = NULL;
 /* BS2509
 /* changed acf2kdt to static variable and placed in begining of source
 /* ADDINFO_KDTE_rec_ptr acf2kdt = NULL;                             */
 ACFFDR_CFDE *c = NULL;
 int i , Set_No_Flag = FALSE;

 static char *lpar = "(";
 static char *rpar = ")";

 /* --------- */
 /* Program   */
 /* --------- */

 ESA_DIAG_enter(PLT_COMP_API_ACF2, DEBUG_SHOW_IMPORTANT, func);

 /* ACF2_Get_ACFFDR(); see below                              bs2607*/
 ACF2_Get_ACFFDR(admin_params); /* add rc & admin_params bs2607*/

/******************************************************************
 * Set KDT Size                                                   *
 ******************************************************************/
 (*KDT_Entries) = ginfo.ACFFDR_Field_Count;

/******************************************************************
 * Allocate KDT                                                   *
 * BS2509 : changed acf2kdt to statuc and added check of NULL     *
 * value and free of old area                                     *
 ******************************************************************/
 /* start of BS2509 */
 ESA_DIAG_printf(PLT_COMP_API_ACF2, 11,
    "old value ACF2KDT @ %x",acf2kdt);
 if (acf2kdt NE NULL) {
    free(acf2kdt);
    acf2kdt = NULL;
 }
 ESA_DIAG_printf(PLT_COMP_API_ACF2,11,
    "post free ACF2KDT @ %x",acf2kdt);
 acf2kdt = (void *) calloc( sizeof(ADDINFO_KDTE_rec_typ) *
                  (ginfo.ACFFDR_Field_Count + 5), 1);

 ESA_DIAG_printf(PLT_COMP_API_ACF2,11,
    "allocated ACF2KDT @ %x",acf2kdt);
 /* end of BS2509 */
/******************************************************************
 * Scan ACFFDR Fields                                             *
 ******************************************************************/
 for(i=0, a = acf2kdt, c = cfdetab;
     i<ginfo.ACFFDR_Field_Count;
     c++, i++)
  {
   /******************************************************************
    * According to fields Required, either skip field or process it) *
    ******************************************************************/
   switch(Get_Field_Type)
    {
     case ACF2_Get_All_Fields:
         break;
     case ACF2_Get_ReadWrite_Fields_and_NoFlag:
         Set_No_Flag = TRUE;
     case ACF2_Get_ReadWrite_Fields:
         if (c->ACFFDR_Field_RW NE 'W')
           continue;
         break;

     case ACF2_Get_ReadOnly_Fields_and_NoFlag:
         Set_No_Flag = TRUE;
     case ACF2_Get_ReadOnly_Fields:
         if (c->ACFFDR_Field_RW NE 'R')
           continue;
         break;
     default:;
   };

   /******************************************************************
    * Build KDT Entry:                                               *
    *  field name                                                    *
    *  field type : FLAG or KEY                                      *
    *  field negative value : if required, "NoKeyword" (flags)       *
    *                                      "Keyword()" (keys)        *
    *                                      "Keyword(0)" (dates)      *
    *  left right envelop : for keywords use ( and )                 *
    *                                                                *
    *  remark: ACF2 supports blanks in keywords, so no qutes are req *
    ******************************************************************/
   strcpy(a->kwd,c->ACFFDR_Field_Name);
   switch(c->ACFFDR_Field_Type)
    {
     case 'B': a->type = KDT_FLG;
               if (Set_No_Flag EQ TRUE)
                 sprintf(a->neg_kwd,"NO%s",a->kwd);
               break;
     case 'E': ;                                          /* BS2372 */
     case 'H': ;                                          /* BS2372 */
     case 'C': if (Set_No_Flag EQ TRUE)
                 sprintf(a->neg_kwd,"%s()",a->kwd);

               /* PS0349 - KDT_KEYM for Multivalued fields */
               if (c->ACFFDR_Multi_Value EQ 'Y')          /* PS0349 */
                 a->type = KDT_KEYM;                      /* PS0349 */
               else
                 a->type = KDT_KEYG;                      /* BS2310 */

               a->txtl = lpar;
               a->txtr = rpar;
               break;
     case 'F': ;
     case 'T': ;
     case 'O': ;
     case 'P': if (Set_No_Flag EQ TRUE)
                 sprintf(a->neg_kwd,"%s(0)",a->kwd);
               a->type = KDT_KEYG;                        /* BS2310 */
               a->txtl = lpar;
               a->txtr = rpar;
               break;
     default:  a->type = KDT_KEYG;                        /* BS2310 */
               a->txtl = lpar;
               a->txtr = rpar;
               break;
    };
    a++;
   };

 exit:;                                                   /*bs2607*/
 ESA_DIAG_exit(PLT_COMP_API_ACF2, DEBUG_SHOW_IMPORTANT, func, ESA_OK);
 return acf2kdt;
}
/******************************************************************
 * BS2509
 * Procedure Name: ACF2_Free_ACFFDR
 ******************************************************************
 * Description   : Free areas used for ACFFDR.
 *
 * input         : ginfo (static)   - ACF2 global information
 *                 cfdetab (static) - fields table
 *
 * Output        : ginfo (static)   - ACF2 global information
 *                 cfdetab (static) - fields table
 *
 * Return Value  : None
 ******************************************************************/
void ACF2_Free_ACFFDR(void)
{
 static char                func[]="ACF2_Free_ACFFDR";

 ESA_DIAG_enter(PLT_COMP_API_ACF2, DEBUG_SHOW_IMPORTANT, func);

 ESA_DIAG_printf(PLT_COMP_API_ACF2,11,
    "old value CFDETAB @ %x",cfdetab);
 if (cfdetab NE NULL) {
    free(cfdetab);
    cfdetab = NULL;
    ESA_DIAG_printf(PLT_COMP_API_ACF2,11,
       "CFDETAB free");
 }

 ESA_DIAG_printf(PLT_COMP_API_ACF2,11,
     "new value CFDETAB @ %x",cfdetab);


 ESA_DIAG_exit(PLT_COMP_API_ACF2, DEBUG_SHOW_IMPORTANT, func, ESA_OK);
}
