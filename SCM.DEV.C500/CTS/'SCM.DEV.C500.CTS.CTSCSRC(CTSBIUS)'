 /**************************************************************
 *                                                             *
 * Title            : Add a user (ACF2)                        *
 *                                                             *
 * File Name        : ctsbius.c                                *
 *                                                             *
 * Author           : Yishay Yovel                             *
 *                                                             *
 * Creation Date    : 20/05/97                                 *
 *                                                             *
 * Description      : Insert Users into ACF2 Logonid Database  *
 *                                                             *
 * Assumptions and                                             *
 *   Considerations :                                          *
 *                                                             *
 * - The CHANGE command generated contains the object type:    *
 *   LID. This is not valid ACF2 command. It is intended to be *
 *   prepared by the command invocation REXX (ctsbcmd).        *
 **************************************************************/

 /***************************************************************
 * Mod.Id   Who      When     Description                       *
 * -------- -------- -------  --------------------------------  *
 * PS0364   Guy      24/12/98 Remove EMULATE stuff              *
 * PS0471   Michael  20/06/01 Support Revoke_type suspend/cancel*
 * ws2370   RamiK    01/01/02 add support for specific user     *
 *                            profiles                          *
 * WS10005  AvnerL   17/07/07 Compile with updated UP_kdts.     *
 * WS10007  AvnerL   16/08/07 Allow NOPSWD-EXP at INSERT user.  *
 * IS10016  AvnerL   29/04/08 Allow NOTSO at INSERT user.       *
 * BS10019  AvnerL  03DEC2009 Add user fails when no password.  *
 *                            NOTSO is always added by IS10016. *
 * BS10028  Nurity   23/02/12 Create Account fails after        *
 *                            upgrade to 3.2.02.                *
 * BS10029  Nurity   12/03/12 Copy from 3.2.02 in order to      *
 *                            apply BS10019 and BS10028         *
 * IS10147A SeligT   18/06/17 Add support for password phrase   *
 * IS10174  NuritY   15/01/18 Dynamic EXECOUT support.          *
 * BS10120  AvnerL   31/01/23 Support PWPHRASE per LU06571 PTF  *
 * WS10082  MauriC   07/11/22 Recompile for new ADDINFO macros  *
 ***************************************************************/

 #include   <globs.h>

 /*
  *   Standard include files
  */

 #include   STDLIB
 #include   STDIO
 #include   STRING

 /*
  *   ESA include files
  */

 #include ESA_DIAG
 #include ESA_API
 #include ESA_API_CODES

 #include MVS_OS_CLI
 #include MVS_COMP

 #include API_ADDINFO
 #include API_DATES

 #include ACF2_CODES
 #include ACF2

 /*
  *     MKT for Insert User
  *         (Mandatory Keywords Table)
  */

 static ADDINFO_MKTE_rec_typ mkt[] = {
    "" };      /* a null string indicate end-of-mkt */

 /*
  *     RKT for Inser User
  *         (Reserved Keywords Table)
  */

 static ADDINFO_RKTE_rec_typ rkt[] = {
    "PASSWORD",
    "PWPHRASE",                                          /* IS10147A */
    "SUSPEND",
    "CANCEL",
    "" };      /* a null string indicate end-of-rkt */


 /*
  *     KDT for Insert User Command
  *         (Keyword Decscription Table)
  *
  *     This table is partial since it is dynamically filled from actual
  *     ACF2 field definitions generated in the site
  */

 static ADDINFO_KDTE_rec_typ kdts[] =     {

  /*                                                            */
  /* keyword             type   negative       value delimiters */
  /*                             value                          */
  /* =================== ====== ============== ================ */

    {"@Identification" , KDT_IGN , ""           ,""    ,""    },
    {"@Priviliges"     , KDT_IGN , ""           ,""    ,""    },
    {"@Cancel_Suspend" , KDT_IGN , ""           ,""    ,""    },
    {"@Functions"      , KDT_IGN , ""           ,""    ,""    },
    {"@Facilities"     , KDT_IGN , ""           ,""    ,""    },
    {"@Access"         , KDT_IGN , ""           ,""    ,""    },
    {"@Password"       , KDT_IGN , ""           ,""    ,""    },
    {"@Pswd_History"   , KDT_IGN , ""           ,""    ,""    },
    {"@UADS_TSO"       , KDT_IGN , ""           ,""    ,""    },
    {"@CICS"           , KDT_IGN , ""           ,""    ,""    },
    {"@IDMS"           , KDT_IGN , ""           ,""    ,""    },
    {"@MUSASS"         , KDT_IGN , ""           ,""    ,""    },
    {"@Restrictions"   , KDT_IGN , ""           ,""    ,""    },
    {"@DFP"            , KDT_IGN , ""           ,""    ,""    },
    {"HOMENODE"        , KDT_IGN , ""           ,""    ,""    },
    {"SEC_VIO"         , KDT_IGN , ""           ,""    ,""    },
    {"UPD_TOD"         , KDT_IGN , ""           ,""    ,""    },
    {"REVOKE-TYPE"      , KDT_IGN , ""           ,""    ,""      },
    {"CICS-SWITCH"      , KDT_IGN , ""           ,""    ,""      },
    {"CICS.FORCE"       , KDT_IGN , ""           ,""    ,""      },
    {"CICS.OPCLASS"     , KDT_IGN , ""           ,""    ,""      },
    {"CICS.OPIDENT"     , KDT_IGN , ""           ,""    ,""      },
    {"CICS.OPPRTY"      , KDT_IGN , ""           ,""    ,""      },
    {"CICS.TIMEOUT"     , KDT_IGN , ""           ,""    ,""      },
    {"DCE-SWITCH"       , KDT_IGN , ""           ,""    ,""      },
    {"DCE.UUID"         , KDT_IGN , ""           ,""    ,""      },
    {"DCE.DCENAME"      , KDT_IGN , ""           ,""    ,""      },
    {"DCE.HOMEUUID"     , KDT_IGN , ""           ,""    ,""      },
    {"DCE.HOMECELL"     , KDT_IGN , ""           ,""    ,""      },
    {"DCE.AUTOLOG"      , KDT_IGN , ""           ,""    ,""      },
    {"KERB-SWITCH"      , KDT_IGN , ""           ,""    ,""      },
    {"KERB.KERBNAME"    , KDT_IGN , ""           ,""    ,""      },
    {"KERB.KERB-VIO"    , KDT_IGN , ""           ,""    ,""      },
    {"KERB.MAXTKTLF"    , KDT_IGN , ""           ,""    ,""      },
    {"KERBLINK-SWITCH"  , KDT_IGN , "",""    ,""      },/*WS10005*/
    {"KERBLINK.KBLKNAME", KDT_IGN , "",""    ,""      },/*WS10005*/
    {"LANGUAGE-SWITCH"  , KDT_IGN , ""           ,""    ,""      },
    {"LANGUAGE.PRIMARY" , KDT_IGN , ""           ,""    ,""      },
    {"LANGUAGE.SECONDRY", KDT_IGN , ""           ,""    ,""      },
    {"LANGUAGE.SECONDRY", KDT_IGN , ""           ,""    ,""      },
    {"LINUX-SWITCH"  , KDT_IGN , ""  ,""    ,""      }, /*WS10005*/
    {"LINUX.LINUXGRP" , KDT_IGN , "" ,""    ,""      }, /*WS10005*/
    {"LINUX.LINUXHOM" , KDT_IGN , "" ,""    ,""      }, /*WS10005*/
    {"LINUX.LINUXNAM" , KDT_IGN , "" ,""    ,""      }, /*WS10005*/
    {"LINUX.LINUXPGM" , KDT_IGN , "" ,""    ,""      }, /*WS10005*/
    {"LINUX.LINUXUID" , KDT_IGN , "" ,""    ,""      }, /*WS10005*/
    {"LNOTES-SWITCH"    , KDT_IGN , ""           ,""    ,""      },
    {"LNOTES.SNAME"     , KDT_IGN , ""           ,""    ,""      },
    {"NDS-SWITCH"       , KDT_IGN , ""           ,""    ,""      },
    {"NDS.UNAME"        , KDT_IGN , ""           ,""    ,""      },
    {"NETVIEW-SWITCH"   , KDT_IGN , ""           ,""    ,""      },
    {"NETVIEW.IC"       , KDT_IGN , ""           ,""    ,""      },
    {"NETVIEW.CONSNAME" , KDT_IGN , ""           ,""    ,""      },
    {"NETVIEW.SECCTL"   , KDT_IGN , ""           ,""    ,""      },
    {"NETVIEW.MSGRECVR" , KDT_IGN , ""           ,""    ,""      },
    {"NETVIEW.NGMFADMN" , KDT_IGN , ""           ,""    ,""      },
    {"NETVIEW.NTVCLASS" , KDT_IGN , ""           ,""    ,""      },
    {"NETVIEW.DOMAINS"  , KDT_IGN , ""           ,""    ,""      },
    {"OMVS-SWITCH"      , KDT_IGN , ""           ,""    ,""      },
    {"OMVS.UID"         , KDT_IGN , ""           ,""    ,""      },
    {"OMVS.HOME"        , KDT_IGN , ""           ,""    ,""      },
    {"OMVS.OMVSPGM"     , KDT_IGN , ""           ,""    ,""      },
    {"OMVS.CPUTIME"     , KDT_IGN , ""           ,""    ,""      },
    {"OMVS.ASSIZE"      , KDT_IGN , ""           ,""    ,""      },
    {"OMVS.FILEPROC"    , KDT_IGN , ""           ,""    ,""      },
    {"OMVS.MEMLIMIT"    , KDT_IGN , "" ,""    ,""      },/*WS10005*/
    {"OMVS.PROCUSER"    , KDT_IGN , ""           ,""    ,""      },
    {"OMVS.SHMEMMAX"    , KDT_IGN , "" ,""    ,""      },/*WS10005*/
    {"OMVS.THREADS"     , KDT_IGN , ""           ,""    ,""      },
    {"OMVS.MMAPAREA"    , KDT_IGN , ""           ,""    ,""      },
    {"OPERPARM-SWITCH"  , KDT_IGN , ""           ,""    ,""      },
    {"OPERPARM.STORAGE" , KDT_IGN , ""           ,""    ,""      },
    {"OPERPARM.AUTH"    , KDT_IGN , ""           ,""    ,""      },
    {"OPERPARM.AUTO"    , KDT_IGN , ""           ,""    ,""      },
    {"OPERPARM.MFORM"   , KDT_IGN , ""           ,""    ,""      },
    {"OPERPARM.MSGLEVEL", KDT_IGN , ""           ,""    ,""      },
    {"OPERPARM.MONITOR" , KDT_IGN , ""           ,""    ,""      },
    {"OPERPARM.ROUTCODE", KDT_IGN , ""           ,""    ,""      },
    {"OPERPARM.LOGCMD"  , KDT_IGN , ""           ,""    ,""      },
    {"OPERPARM.MIGID"   , KDT_IGN , ""           ,""    ,""      },
    {"OPERPARM.DOM"     , KDT_IGN , ""           ,""    ,""      },
    {"OPERPARM.UD"      , KDT_IGN , ""           ,""    ,""      },
    {"OPERPARM.KEY"     , KDT_IGN , ""           ,""    ,""      },
    {"OPERPARM.CMDSYS"  , KDT_IGN , ""           ,""    ,""      },
    {"OPERPARM.ALTGROUP", KDT_IGN , ""           ,""    ,""      },
    {"OPERPARM.OPERMSCP", KDT_IGN , ""           ,""    ,""      },
    {"WORKATTR-SWITCH"  , KDT_IGN , ""           ,""    ,""      },
    {"WORKATTR.WANAME"  , KDT_IGN , ""           ,""    ,""      },
    {"WORKATTR.WABLDG"  , KDT_IGN , ""           ,""    ,""      },
    {"WORKATTR.WADEPT"  , KDT_IGN , ""           ,""    ,""      },
    {"WORKATTR.WAROOM"  , KDT_IGN , ""           ,""    ,""      },
    {"WORKATTR.WAADDR1" , KDT_IGN , ""           ,""    ,""      },
    {"WORKATTR.WAADDR2" , KDT_IGN , ""           ,""    ,""      },
    {"WORKATTR.WAADDR3" , KDT_IGN , ""           ,""    ,""      },
    {"WORKATTR.WAADDR4" , KDT_IGN , ""           ,""    ,""      },
    {"WORKATTR.WAACCNT" , KDT_IGN , ""           ,""    ,""      },
    /* WS10007 - how to reset */
    {"EXPIRED"          , KDT_IGN , ""           ,""    ,""      },
    {"NOEXPIRED"        , KDT_IGN , ""           ,""    ,""      },
    /* WS10007 */
    /* IS10016 ru-locked & ru-suspended were forgotten with the     */
    /*        original fix and added here to prevent CTS3013E msgs. */
    /*        TSO is added to enable NOTSO when Create-like is used */
    /*        with InsertAccount.                                   */
    {"RU-LOCKED"          ,KDT_IGN ,""                   ,""  , " " },
    {"RU-SUSPENDED"       ,KDT_IGN ,""                   ,""  , " " },
    /* The following line prevents the following message:   IS10147A */
    /* CTS3013E Parameter PWPHRASE is ignored. It is not    IS10147A */
    /*          supported                                   IS10147A */
    {"PWPHRASE"           ,KDT_KEY ,""                   ,"(" , ")" },
    /* drop TSO as in ACF2 TSO's keywords do not enable TSO. BS10019
       Only TSO privilege enables logging on to TSO.
    {"TSO"              , KDT_FLG , "NOTSO"       ,""    ,""      },
     * IS10016 end */
    /* BS10028 - Add PSWD-EXP with its negative value because the
     *           KDT update service creates it with no negative value
     *           (because of the ACF2_Get_ReadWrite_Fields parameter).
     *           The KDT update service will not overide this entry
     *           because it is called with Acf2_KET_Merge parameter  */
    {"PSWD-EXP"        , KDT_FLG , "NOPSWD-EXP" ,""    ,""    },
    /* BS10028 - end */
    {"PWP-EXP"         , KDT_FLG , "NOPWP-EXP"  ,""    ,""    }, /*IS10147A*/
    {""                , KDT_FLG , ""           ,""     ,""   }
    };

 /*
  *     KDT for OMVS User profile Command
  *         (Keyword Description Table)
  */

 static char component[]="ADDUSER";

 /**************************************************************
 *                                                             *
 * PROCEDURE NAME : CTSAddUser                                 *
 *                                                             *
 * DESCRIPTION    : Create a ACF2 user                         *
 *                                                             *
 * INPUT          : User, addinfo, admin                       *
 *                                                             *
 * OUTPUT         : err                                        *
 *                                                             *
 * RETURN VALUE   : ESA_RC                                     *
 *                                                             *
 **************************************************************/

 ESA_RC CTSAddUser (USER_PARAMS_rec_typ  * user_params,
                    ADDINFO_rec_typ      * addinfo,
                    ADMIN_PARAMS_rec_typ * admin_params,
                    ERR_STRUCT_rec_typ   * err)
 {

  /*
   *   Static Variables
   */

   static char    func[]="CTSAddUser";
   static         ADDINFO_KDTE_rec_ptr kdt = NULL;

  /*
   *   Variables
   */

   ESA_RC                     rc = ESA_OK;
   ESA_RC                     check_rc, saved_rc;
   char                       cmd[MAX_API_ST];
   ADDINFO_rec_ptr            laddinfo = NULL;
   CTSAMSG_HANDLE_rec_ptr     msgs;
   CTSAMSG_DEST_TABLE_rec_ptr dest;
   ONE_FIELD_rec_ptr  pair;                               /* PS0471 */
   ADDINFO_rec_ptr            UP_addinfo = NULL;
   int                        i;
   char                       prefix[256] = "";
  /* BS10028 ACF2_PARAMS_rec_typ * params_ptr = NULL;     * WS10007 */

   ESA_DIAG_enter(ESA_COMP_ADDUSER, DEBUG_SHOW_IMPORTANT, func);

   msgs = admin_params->ctsamsg_handle;
   dest = admin_params->ctsamsg_dest;

  /*
   *   Update KDT Table with actual ACF2 user definitions
   *     (this also supports ACF2 user defined fields)
   */

   if (kdt EQ NULL)
     kdt = ACF2_Update_KDT(kdts,
                     ACF2_Get_ReadWrite_Fields,
                     ACF2_KDT_Merge,
                     admin_params);

   /* BS10028 - print the kdt content                                 */
   for(i=0; kdt[i].kwd[0] NE NULL_CHAR;i++)                  /*BS10028*/
   {                                                         /*BS10028*/
       ESA_DIAG_printf(ESA_COMP_ADDUSER, DEBUG_SHOW_REGULAR, /*BS10028*/
              "kwd=%s nkwd=%s",                              /*BS10028*/
              kdt[i].kwd, kdt[i].neg_kwd);                   /*BS10028*/
   }                                                         /*BS10028*/

   /* BS10028 - print the addinfo at entry                            */
   ESA_DIAG_printf(ESA_COMP_ADDUSER, DEBUG_SHOW_REGULAR,     /*BS10028*/
                  "addinfo dump at entry");                  /*BS10028*/
   if (ESA_DIAG_get_debug_level(ESA_COMP_ADDUSER) GE DEBUG_SHOW_REGULAR)
       ADDINFO_dump(addinfo,1);                              /*BS10028*/

  /*
   *   Check that Reserved Keywords were not used
   */

   if (ADDINFO_rkt_check(func,1,&addinfo,rkt, dest, msgs) NE ESA_OK)
    {
      rc = ESA_FATAL;
      goto exit;
     };

  /*
   *   Obtain a local addinfo buffer
   */

   if (ADDINFO_alloc(func,ACF2_ADDINFO,&laddinfo,dest,msgs) NE ESA_OK)
    {
      CTSAMSG_print(ERR_INTERNAL2,msgs, NULL, dest, component,func,
               "laddinfo alloc failed", 16,__LINE__);
      rc = ESA_FATAL;
      goto exit;
     };


   ADDINFO_copy(laddinfo, addinfo);

   if (ADDINFO_alloc(func,ACF2_ADDINFO,&UP_addinfo,dest,msgs) NE ESA_OK)
    {
      CTSAMSG_print(ERR_INTERNAL2,msgs, NULL, dest, component,func,
               "UP_addinfo alloc failed", 16,__LINE__);
      rc = ESA_FATAL;
      goto exit;
     };

  /*
   *   Add Password to local addinfo
   *   Drop it, as it is handled by CTSUpdPassword     WS10007

   ADDINFO_insert(TYPE_1A, "PASSWORD", user_params->passwd,
                  laddinfo, RCF_ADDINFO_KWD_LEN, ACF_ADDINFO_VAL_LEN,
                  UNIQUE);
                                                        /* PS0471 */
  /*
   * Revoke = SUSPEND or CANCEL in ACF2
   */

   if (user_params->rev_status EQ USER_STAT_REVOKED)
    {                                      /* Start PS0471 */
       pair = ADDINFO_search("REVOKE_TYPE", ACF_ADDINFO_KWD_LEN,
                             addinfo->pair,
                             addinfo->num_pairs);
       if (pair NE NULL)
       {
         ESA_DIAG_printf(ESA_COMP_ADDUSER, 3,
                   "Revoke type is %s", pair->value);
         if ( strcmp(pair->value,"SUSPEND") EQ 0 ||
              strcmp(pair->value,"BOTH") EQ 0 )
          ADDINFO_insert(TYPE_1A,"SUSPEND", KWD_FLAG_ON, laddinfo,
                         ACF_ADDINFO_KWD_LEN, ACF_ADDINFO_VAL_LEN,
                         UNIQUE);
         if ( strcmp(pair->value,"CANCEL") EQ 0 ||
              strcmp(pair->value,"BOTH") EQ 0 )
          ADDINFO_insert(TYPE_1A,"CANCEL", KWD_FLAG_ON, laddinfo,
                         ACF_ADDINFO_KWD_LEN, ACF_ADDINFO_VAL_LEN,
                         UNIQUE);
       }
       else /* default is SUSPEND */
       {
         ESA_DIAG_printf(ESA_COMP_ADDUSER, 3,
               "Revoke type not found. Default SUSPEND used");
          ADDINFO_insert(TYPE_1A,"SUSPEND", KWD_FLAG_ON, laddinfo,
                         ACF_ADDINFO_KWD_LEN, ACF_ADDINFO_VAL_LEN,
                         UNIQUE);
       }
                                         /* End PS0471 */
   };

   /*
    * Convert ESS dates to ACF2 Date format
    */

   ACF2_Convert_Date_Fields(laddinfo,
                     dest,
                     msgs);

   /*  BS10028 - no need to add the EXPIRE/NOEXPIRE parameters
    *            becasue the whole addinfo was copied to laddinfo.

    *
    * **************** WS10007 start ********************
    * Pass EXPIRED / NOEXPIRED keywords to CTSUpdPassword
    *
    pair = ADDINFO_search ( "EXPIRED", ACF_ADDINFO_KWD_LEN,
                           addinfo->pair,
                           addinfo->num_pairs );
    if ( pair NE NULL AND
       (strcmp(pair->value,KWD_FLAG_ON) EQ 0))
    {
       ESA_DIAG_printf(ESA_COMP_ADDUSER, 3,
                   "EXPIRED is Y");
       ADDINFO_insert(TYPE_1A,"EXPIRED", KWD_FLAG_ON, laddinfo,
                     ACF_ADDINFO_KWD_LEN, ACF_ADDINFO_VAL_LEN,
                     UNIQUE);
    }
    pair = ADDINFO_search ( "NOEXPIRED", ACF_ADDINFO_KWD_LEN,
                           addinfo->pair,
                           addinfo->num_pairs );
    if ( pair NE NULL AND
       (strcmp(pair->value,KWD_FLAG_ON) EQ 0))
    {
       ESA_DIAG_printf(ESA_COMP_ADDUSER, 3,
                   "NOEXPIRED is Y");
       ADDINFO_insert(TYPE_1A,"NOEXPIRED", KWD_FLAG_ON, laddinfo,
                     ACF_ADDINFO_KWD_LEN, ACF_ADDINFO_VAL_LEN,
                     UNIQUE);
    }
                                                  BS10028 - end   */

     ESA_DIAG_printf(ESA_COMP_ADDUSER, 3,            /*BS10019*/
      "strlen(user_params->passwd):%d",              /*BS10019*/
      strlen(user_params->passwd));                  /*BS10019*/

    /*  BS10028   - remove "insert" call to CTSUpdPassword
     *
     * Set InsertAccount indication for CTSUpdPassword WS10007 continue
     * Do it only when password keyword is supplied !  BS10019
     *
    if (strlen(user_params->passwd))                  *BS10019*
    {                                                 *BS10019*
      params_ptr = admin_params->apiinit_handle;
      params_ptr->Insert_Calls_CTSUpdPassword[0]='I';
      params_ptr->Insert_Calls_CTSUpdPassword[1]=NULL;
       *
       * Call CTSUpdPassword                       WS10007 continue *
       *
      ESA_DIAG_printf(ESA_COMP_ADDUSER, 3,
         "InsertUser calls CTSUpdPassword");
                                                   BS10028 - end    */

    if (strlen(user_params->passwd))          /* BS10019+BS10028 */
    {                                         /* BS10019+BS10028 */
      ADDINFO_insert(TYPE_1A,"CTSBUPS_RETURN_KEYWORDS", "A",  /*BS10028*/
                     laddinfo,                                /*BS10028*/
                     ACF_ADDINFO_KWD_LEN, ACF_ADDINFO_VAL_LEN,/*BS10028*/
                     UNIQUE);                                 /*BS10028*/
        /*indicate to CTSUpdPass the caller is CTSAddUser      BS10120*/
        ADDINFO_insert(TYPE_1A,"CTSBUPS_CALLER", "InsertUser",
                       laddinfo,
                       ACF_ADDINFO_KWD_LEN, ACF_ADDINFO_VAL_LEN,
                       UNIQUE);                              /*BS10120*/

      ESA_DIAG_printf(ESA_COMP_ADDUSER, 3,
             "Call CTSUpdPassword to get password keywords"); /*BS10028*/

      rc = CTSUpdPassword (user_params, laddinfo, admin_params, err);
      if (rc NE ESA_OK)
       {
         rc = ESA_FATAL;
         goto exit;
       };
      ADDINFO_delete(laddinfo, "CTSBUPS_RETURN_KEYWORDS");    /*BS10028*/
      ADDINFO_delete(laddinfo, "CTSBUPS_CALLER");             /*BS10120*/
    }                                /*BS10019*/

  /*  BS10028 - drop PSWD_EXP handling becasue it is handled
   *            by CTSUpdPassword. If CTSUpdPassword wasnot called
   *            because no password was specified, this keyword will
   *            remain, if pass from ess.
   *
   * Drop PSWD_EXP which is handled by CTSUpdPassword WS10007 continue
   *
   pair = ADDINFO_search ( "PSWD_EXP", ACF_ADDINFO_KWD_LEN,
                          laddinfo->pair,
                          laddinfo->num_pairs );
   if ( pair NE NULL)
   {
      ESA_DIAG_printf(ESA_COMP_UPDUSER, 3,
       "PSWD_EXP found in local addinfo and will be deleted.");
      ADDINFO_delete(laddinfo, "PSWD_EXP");
   }
                                                                     */

  /* BS10028 - no need for change command becasue CTSUpdPassword
   *           does not issue the INSERT command any more.
   *
   *   Build and issue ACF2 INSERT command
   *   INSERT is issued by CTSUpdPassword, use CHANGE instead WS10007
   *   Do it only when password keyword is supplied !         BS10019
   *
   if (strlen(user_params->passwd) == 0)                     *BS10019*
                                                                     */
     sprintf(cmd,"ACF2 LID INSERT %s ",user_params->user);  /*BS10019*
  /* BS10028 - no need for change command becasue CTSUpdPassword
   *           does not issue the INSERT command any more.
   else                                                      *BS10019*
   sprintf(cmd,"ACF2 LID CHANGE %s ",user_params->user);
                                                                     */
   /***************** end of WS10007 ************************/
   ESA_DIAG_printf(ESA_COMP_ADDUSER, 1,
                   "Command header prepared (%s)", cmd);

   /* BS10028 - print laddinfo passed to ACF2cmd                      */
   ESA_DIAG_printf(ESA_COMP_ADDUSER, DEBUG_SHOW_REGULAR,    /*BS10028*/
                      "laddinfo passed to ACF2cmd");        /*BS10028*/
   if (ESA_DIAG_get_debug_level(ESA_COMP_ADDUSER) GE DEBUG_SHOW_REGULAR)
       ADDINFO_dump(laddinfo,1);                            /*BS10028*/

   rc = ACF2cmd(func, EXECOUT_DDNAME, admin_params->admin_uname,
           cmd, MAX_OK_RC_0,
           1, &laddinfo, mkt, kdt, admin_params,         /* IS10174 */
           CMDOUT_YES, ACF2_YES);/*When no parms (addinfo is empty)==>
                                  *do NOT issue ACF2 CHANGE command.
                                  *CTSUpdPassword issues the INSERT
                                  *command.                  WS10007 */
           /* IS10174 1, &laddinfo, mkt, kdt, dest, msgs,    */
           /* WS10007 CMDOUT_YES, ACF2_NO); */

   /*-----------------------------------------------------------*/
   /* WS2370                                                    */
   /* if user creation was successful, create user profiles     */
   /*-----------------------------------------------------------*/
   if ( rc EQ ESA_OK) {
      saved_rc = rc;
      for(i=0; UP_kdts[i].UP_name[0] NE NULL_CHAR;i++)  {
         ESA_DIAG_printf(ESA_COMP_ADDUSER,DEBUG_SHOW_IMPORTANT,
              "adding profile %s", UP_kdts[i].UP_name);
         /* checking user profile (UP) switch */
         check_rc = ACF2_UP_switch_is_activated(UP_kdts[i].UP_name,
                                          laddinfo);
         if (check_rc EQ ESA_OK) {
            strcpy(prefix,UP_kdts[i].UP_name);
            strcat(prefix,".");

            ADDINFO_empty(UP_addinfo);
            ADDINFO_copy_by_prefix(prefix,
                    ACF_ADDINFO_KWD_LEN,
                    ACF_ADDINFO_VAL_LEN,
                    TRUE,
                    laddinfo,
                    UP_addinfo);

            sprintf(cmd,"ACF2 GEN-P(USER)-SYSID(%s) INSERT %s ",
                  UP_kdts[i].UP_name,user_params->user);
            ESA_DIAG_printf(ESA_COMP_ADDUSER, DEBUG_SHOW_REGULAR,
                   "Command header prepared (%s)", cmd);
            rc = ACF2cmd(func, EXECOUT_DDNAME,
                         admin_params->admin_uname,
                         cmd, MAX_OK_RC_0,
                         1, &UP_addinfo, mkt, UP_kdts[i].UP_kdt,
                         admin_params,                   /* IS10174 */
                         CMDOUT_YES, ACF2_NO);
             /* IS10174  dest, msgs, CMDOUT_YES, ACF2_NO);  */
            if (rc > saved_rc) {
               saved_rc = rc;
            }
         }
      };
      rc = saved_rc;
   } /* end user profile if */
   /* end ws2370 */
   /*-----------------------------------------------------------*/
   /* Finish ...                                                */
   /*-----------------------------------------------------------*/


   if (laddinfo NE NULL)
    ADDINFO_free(&laddinfo);

   if (UP_addinfo NE NULL)
    ADDINFO_free(&UP_addinfo);

   exit:

   ESA_DIAG_exit(ESA_COMP_ADDUSER, DEBUG_SHOW_IMPORTANT, func, rc);

   return rc;
 }
