/*
 * Version Information:
 * ====================
 * File name       : %name: acsrvcd.c %
 * Instance        : %instance: 1 %
 * Created by      : %created_by: leonid_s %
 * Created on      : %date_created: Thu May 15 09:12:19 2003 %
 * Current Version : %version: 4 %
 * Last Modified by: %derived_by: leonid_s %
 * Last Modified on: %date_modified: Thu May 15 09:12:19 2003 %
 */
 
/***********************************************
 * Mod.ID   Who      When         Description
 * =============================================
 * SAS2IBMA AvnerL   21-Dec-16    SAS/C to IBM C Conversion Project
 **********************************************/
 
#include "globs.h"
 
#include ESA_MSG
#include ESA_API
#include ESA_ADMIN
#include ESA_PROC
 
/****************************************************
 * Procedure Name: acsrvc
 * Description   : CD - services
 * Return Value  : ESA_RC
 * Comments      :
 * Scope         :
 ****************************************************
 *
 * DETAILED DESCRIPTION
 * ====================
 *
 * This function is the main dispatcher for all services that are
 * handeled by the CD process:
 * - UPDATE to a local RSS (from online/offline interceptor).
 * - INITIAL service ( = HANDSHAKE service) - to start the ESS <-> RSS
 *   communication on applicatoin layer.
 * - START INTERCEPTOR - to start the offline interceptor, initiated by
 *   the ESS operator (in addition to the automatic activation of that
 *   interceptor).
 * There is a function, with a similar name, that handles all CS
 * services.
 * Upon activation of the current function - the process has read and
 * analyzed a legal "START SERVICE" message - but it did not send any
 * response yet. The function sends "CONFIRMATION MESSAGE" ("CC") for
 * requests originated from the ESS (Hndshake and Start-interceptor)
 * and activate the relevant function to take care of each service
 * according to it's type.
 *********************************************************************/
 
ESA_RC acsrvc         (RSS_MSG_HDR_rec_typ * msg_hdr,
                       MSG_typ             * msg_ptr_read,
                       RSS_MSG_HDR_rec_typ * msg_hdr_cd)
{
  char                  fn[]="acsrvc";
  ESA_RC                rc= ESA_OK;
  ENVIRONMENT_rec_typ * envir_ptr;
 
  ESA_DIAG_enter  (ESA_COMP_ACSGPFM, DIAG_COMMON, fn);
  CS_get_envir_address (&envir_ptr);
 
  /*
    VERIFY that the input message service - is a CD lefgal service
  */
  if (msg_hdr->mhsid EQ START_INTERCEPTOR   OR
      msg_hdr->mhsid EQ UPDATE_ESS_SERVICE  OR
      msg_hdr->mhsid EQ ESS_INITIAL_SERVICE) {
 
    if (msg_hdr->mhsid NE UPDATE_ESS_SERVICE) {
 
      /*
        SEND CONFIRMATION message (to the start service message) for
        services that were initiated in the ESS.
      */
      rc = CS_confirm (msg_hdr);
 
      if (rc NE ESA_OK)
        goto cleanup;
    }
  }
  /* undefined services */
  else {
    rc=ESA_FATAL;
    CTSAMSG_print (ERR_CS_UNDEF_SERVICE,
                   envir_ptr->msg_admin_param.ctsamsg_handle, NULL,
                   envir_ptr->msg_admin_param.ctsamsg_dest, fn,
                   msg_hdr->mhsid);
    goto cleanup;
  }
  /*
    PROCESS each service according to it's type.
  */
  ESA_DIAG_printf (ESA_COMP_ACSGPFM, DIAG_BASIC," ");
  ESA_DIAG_printf (ESA_COMP_ACSGPFM, DIAG_BASIC," ");
  ESA_DIAG_printf (ESA_COMP_ACSGPFM, DIAG_BASIC,
			"          -------------------------------");
switch (msg_hdr->mhsid) {
    case UPDATE_ESS_SERVICE:
      ESA_DIAG_printf (ESA_COMP_ACSGPFM, DIAG_BASIC,
			"*****>... %c: Interception transaction started.", UPDATE_ESS_SERVICE);
      ESA_DIAG_printf (ESA_COMP_ACSGPFM, DIAG_BASIC,
			"          -------------------------------");
      rc= CS_update_rss_definitions (msg_ptr_read, msg_hdr_cd) ;
      break;
    case ESS_INITIAL_SERVICE:
      ESA_DIAG_printf (ESA_COMP_ACSGPFM, DIAG_BASIC,
			"*****>... %c: Initial transaction started.", ESS_INITIAL_SERVICE);
      ESA_DIAG_printf (ESA_COMP_ACSGPFM, DIAG_BASIC,
			"          -------------------------------");
      rc = CS_ess_initial_service (msg_ptr_read, msg_hdr_cd);
      break;
    case START_INTERCEPTOR:
      ESA_DIAG_printf (ESA_COMP_ACSGPFM, DIAG_BASIC,
			"*****>... %c: Start interceptor transaction started.", START_INTERCEPTOR);
      ESA_DIAG_printf (ESA_COMP_ACSGPFM, DIAG_BASIC,
			"          -------------------------------");
      rc = CS_interceptor_service (msg_ptr_read, msg_hdr_cd) ;
      break;
 
  }
 
  cleanup:
  ESA_DIAG_exit   (ESA_COMP_ACSGPFM, DIAG_COMMON, fn, rc);
  return (rc);
 
} /* END - acsrvc (CD) function */
