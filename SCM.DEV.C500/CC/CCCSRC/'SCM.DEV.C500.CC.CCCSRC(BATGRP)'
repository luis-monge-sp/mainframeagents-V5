/***********************************************************************
 * Mod.ID   Who     When         Description
 * =====================================================================
 * SAS2IBMT SeligT  16/11/16     SAS/C to IBM C Conversion Project and
 *                               re-design / re-write of BATxxxx rtns
 * BS10062  SeligT  30/08/17     Handle storage allocation errors -
 *                               compile only
 * IS10156  SeligT  13/09/17     Allocate ADDINFO Size Correctly
 * IS10157  SeligT  17/09/17     Allocate Several Arrays Correctly
 **********************************************************************/
#include "globs.h"
 
#include STDIO
#include STRING
#include STDLIB
 
#include ESA_API
#include ESA_ADMIN
#include ESA_CS_SINFO
#include ESA_INIT
#include ENC_API
 
#include "batutls.h"
 
static ESA_RC  rc1;
 
/****************************************************
 * Procedure Name: addgroup_rtn
 * Description   : Process the :ADDGROUP request.
 *               : Some details:
 *               :
 *               : We call the rpl_addinfo_loop routine to process
 *               : the RPL and addinfo lines.  When we return from the
 *               : routine (if there was no error) we prepare and call
 *               : the USA-API.  Then we leave this routine and we go
 *               : back up to req_rtn and we go back up to the main
 *               : loop.
 * Input         : array of request details
 * Output        : none
 * Input/Output  :
 * Return Value  : ESA_OK or ESA_FATAL
 * Side Effects  :
 * Scope         : Internal To API Test Program
 ***************************************************/
 
   ESA_RC addgroup_rtn (void) {
   ESA_RC                rc = ESA_OK;
   int                   opt, maxi;
   UG_typ                group;
   UG_PARAMS_rec_typ     ug_params;
   ADDINFO_rec_typ      *aip = NULL;
#ifdef UG_OPS_NEED_PARENT_UG
   UG_typ                par_grp;
#endif
   static char         func [] = "BATGRP_addgroup_rtn";
 
   ESA_DIAG_enter(ESA_COMP_BATCH, 1, func);
 
   printf (":ADDGROUP:\n");
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call rpl_addinfo_loop routine");
 
   rc = rpl_addinfo_loop();
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "rc from rpl_addinfo_loop routine = %d", rc);
 
   if (rc EQ ESA_FATAL) return rc;
 
   aip = NULL;
 
   strcpy (ug_params.group, req->groupid);
 
   ug_params.parent_group[0] = NULL_CHAR;
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call utl_obtain_addinfo_pairs routine");
 
   /* IS10156 remove first parameter of the following routine
   rc = utl_obtain_addinfo_pairs (MAX_KWDS, &aip, &maxi,             */
   rc = utl_obtain_addinfo_pairs (&aip, &maxi,
                                  in_kwd, in_val, in_i);
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "rc from utl_obtain_addinfo_pairs routine = %d", rc);
 
   if (rc EQ ESA_FATAL) return rc;
 
   /* Get the parent group */
 
#ifdef UG_OPS_NEED_PARENT_UG
   if (strlen (req->par_grp) GT 0)
       strcpy (ug_params.parent_group, req->par_grp);
#endif
   if (strlen (req->grp_par_oe) GT 0)
       strcpy (ug_params.parent_oe, req->grp_par_oe);
   else if (memcmp (xrss_type, "TSS", 3) EQ 0) {
       printf("GROUP.PARENT_CONTAINER not specified\n");
       rc = ESA_FATAL;
       goto exit;
   }
 
   printf(" Group       : %s\n", ug_params.group);
 
#ifdef UG_OPS_NEED_PARENT_UG
 
   printf(" Parent Group: %s\n", ug_params.parent_group);
   printf(" Parent          \n");
   printf("    Container: %s\n", ug_params.parent_oe);
 
#endif
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call utl_dump_addinfo routine");
 
   utl_dump_addinfo (aip);
 
   API_PROLOG;
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call USA-API addgroup routine");
 
   rc = (*func_struct.addug_ptr) (&ug_params,
                                  aip,
                                  admin_ptr,
                                  err_ptr);
   API_EPILOG;
 
   CK_RC(rc, ":ADDGROUP");
 
   exit:
   if (aip)
      free (aip);
 
   PR_MSG(rc);
 
   CLEAN_ERR;
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to leave addgroup_rtn with %d", rc);
 
   ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, rc);
 
   return rc;
 
   } /* addgroup_rtn */
 
 
 
/****************************************************
 * Procedure Name: updgroup_rtn
 * Description   : Process the :UPDGROUP request.
 *               : Some details:
 *               :
 *               : We call the rpl_addinfo_loop routine to process
 *               : the RPL and addinfo lines.  When we return from the
 *               : routine (if there was no error) we prepare and call
 *               : the USA-API.  Then we leave this routine and we go
 *               : back up to req_rtn and we go back up to the main
 *               : loop.
 * Input         : array of request details
 * Output        : none
 * Input/Output  :
 * Return Value  : ESA_OK or ESA_FATAL
 * Side Effects  :
 * Scope         : Internal To API Test Program
 ***************************************************/
 
   ESA_RC updgroup_rtn (void) {
   ESA_RC                rc = ESA_OK;
   int                   opt, maxi;
   UG_typ                group;
   UG_PARAMS_rec_typ     ug_params;
   ADDINFO_rec_typ      *aip = NULL;
#ifdef UG_OPS_NEED_PARENT_UG
   UG_typ                par_grp;
#endif
   static char         func [] = "BATGRP_updgroup_rtn";
 
   ESA_DIAG_enter(ESA_COMP_BATCH, 1, func);
 
   printf (":UPDGROUP:\n");
 
   rc = rpl_addinfo_loop();
 
   if (rc EQ ESA_FATAL) return rc;
 
   aip = NULL;
 
   strcpy (ug_params.group, req->groupid);
 
   ug_params.parent_group[0] = NULL_CHAR;
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call utl_obtain_addinfo_pairs routine");
 
   /* IS10156 remove first parameter of the following routine
   rc = utl_obtain_addinfo_pairs (MAX_KWDS, &aip, &maxi,             */
   rc = utl_obtain_addinfo_pairs (&aip, &maxi,
                                  in_kwd, in_val, in_i);
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "rc from utl_obtain_addinfo_pairs routine = %d", rc);
 
   if (rc EQ ESA_FATAL) return rc;
 
   /* Get the parent group */
 
#ifdef UG_OPS_NEED_PARENT_UG
 
   if (strlen (req->par_grp) GT 0)
       strcpy (ug_params.parent_group, req->par_grp);
 
#endif
   if (strlen (req->grp_par_oe) GT 0)
       strcpy (ug_params.parent_oe, req->grp_par_oe);
   else if (memcmp (xrss_type, "TSS", 3) EQ 0) {
       printf("GROUP.PARENT_CONTAINER not specified\n");
       rc = ESA_FATAL;
       goto exit;
   }
 
   printf(" Group       : %s\n", ug_params.group);
 
#ifdef UG_OPS_NEED_PARENT_UG
 
   printf(" Parent Group: %s\n", ug_params.parent_group);
   printf(" Parent          \n");
   printf("    Container: %s\n", ug_params.parent_oe);
 
#endif
 
   utl_dump_addinfo (aip);
 
   API_PROLOG;
 
   rc = (*func_struct.updug_ptr) (&ug_params,
                                  aip,
                                  admin_ptr,
                                  err_ptr);
 
   API_EPILOG;
 
   CK_RC(rc, ":UPDGROUP");
 
   exit:
   if (aip)
      free (aip);
 
   PR_MSG(rc);
 
   CLEAN_ERR;
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to leave updgroup_rtn with %d", rc);
 
   ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, rc);
 
   return rc;
 
   } /* updgroup_rtn */
 
 
 
/****************************************************
 * Procedure Name: delgroup_rtn
 * Description   : Process the :DELGROUP request.
 *               : Some details:
 *               :
 *               : We call the rpl_addinfo_loop routine to process
 *               : the RPL and addinfo lines.  When we return from the
 *               : routine (if there was no error) we prepare and call
 *               : the USA-API.  Then we leave this routine and we go
 *               : back up to req_rtn and we go back up to the main
 *               : loop.
 * Input         : array of request details
 * Output        : none
 * Input/Output  :
 * Return Value  : ESA_OK or ESA_FATAL
 * Side Effects  :
 * Scope         : Internal To API Test Program
 ***************************************************/
 
   ESA_RC delgroup_rtn (void) {
   ESA_RC                rc = ESA_OK;
   int                   opt, maxi;
   UG_typ                group;
   UG_PARAMS_rec_typ     ug_params;
   ADDINFO_rec_typ      *aip = NULL;
#ifdef UG_OPS_NEED_PARENT_UG
   UG_typ                par_grp;
#endif
   static char         func [] = "BATGRP_delgroup_rtn";
 
   ESA_DIAG_enter(ESA_COMP_BATCH, 1, func);
 
   printf (":DELGROUP:\n");
 
   rc = rpl_addinfo_loop();
 
   if (rc EQ ESA_FATAL) return rc;
 
   aip = NULL;
 
   strcpy (ug_params.group, req->groupid);
 
   ug_params.parent_group[0] = NULL_CHAR;
 
#ifdef UG_OPS_NEED_ADDINFO
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call utl_obtain_addinfo_pairs routine");
 
   /* IS10156 remove first parameter of the following routine
   rc = utl_obtain_addinfo_pairs (MAX_KWDS, &aip, &maxi,             */
   rc = utl_obtain_addinfo_pairs (&aip, &maxi,
                                  in_kwd, in_val, in_i);
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "rc from utl_obtain_addinfo_pairs routine = %d", rc);
 
   if (rc EQ ESA_FATAL) return rc;
 
#else
 
   ALLOC_DUMMY_ADDINFO(aip);
 
#endif
 
   printf(" Group       : %s\n", ug_params.group);
 
#ifdef UG_OPS_NEED_PARENT_UG
 
   printf(" Parent Group: %s\n", ug_params.parent_group);
 
#endif
 
#ifdef UG_OPS_NEED_ADDINFO
 
   utl_dump_addinfo (aip);
 
#endif
 
   API_PROLOG;
 
   rc = (*func_struct.delug_ptr) (&ug_params,
                                  aip,
                                  admin_ptr,
                                  err_ptr);
 
   API_EPILOG;
 
   CK_RC(rc, ":DELGROUP");
 
   if (aip)
      free (aip);
 
   PR_MSG(rc);
 
   CLEAN_ERR;
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to leave delgroup_rtn with %d", rc);
 
   ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, rc);
 
   return rc;
 
   } /* delgroup_rtn */
 
 
 
 
 
