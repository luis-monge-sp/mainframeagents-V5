/*
 * Version Information:
 * ====================
 * File name       : %name: acsrssx.c %
 * Instance        : %instance: 1 %
 * Created by      : %created_by: leonid_s %
 * Created on      : %date_created: Thu May 05 14:33:54 2005 %
 * Current Version : %version: 6 %
 * Last Modified by: %derived_by: leonid_s %
 * Last Modified on: %date_modified: Sun Jan 25 11:32:41 2004 %
 */
 
/***********************************************
 * Mod.ID  Who      When         Description
 * =============================================
 * IMH001  Ian H.   11-Jan-2004  ISAN000925
 * SAS2IBMA AvnerL  21-Dec-16    SAS/C to IBM C Conversion Project
 * SAS2IBMN NuritY  08-May-17    SAS/C to IBM C Conversion Project
 * WS10082K KailasP 16-Oct-23    Set Addinfo_max_val_len to 500K
 **********************************************/
 
#include   "globs.h"
 
#include ESA_INIT
#include ESA_PROC
#include ESA_RSSF
#include ESA_RSS
#include ESA_DIAG
#include ESA_API_CODES
#include ESA_CS_OS
#include STDARG
#include ESA_MSG
#include ESA_ADMIN
 
/**************************************************************
*                                                             *
* Procedure Name   : CS_attach_rss                            *
*                                                             *
* Description      : attach  and apiinit new RSS              *
*                                                             *
* Return Value     : ESA_RC                                   *
*                                                             *
**************************************************************/
 
ESA_RC CS_attach_rss (ADMIN_PARAMS_rec_typ * admin_params,
                      HOT_PATH_typ           attached_hot_path,
					  RSS_typ                rss_name,
                      RSS_typ                rss_type)
{
  char                  fn [] = "CS_attach_rss";
  ESA_RC                rc = ESA_OK, rc_tmp;
  ENVIRONMENT_rec_typ * envir_ptr;
  char                  limit_str[50];
  int                   rss_limit;
  int                   max_limit ;
  CS_get_envir_address (&envir_ptr);
 
  ESA_DIAG_enter (ESA_COMP_ACSCDCS, DIAG_COMMON, fn);
 
  rc_tmp= CS_detach_rss ();
 
  /*
   * ATTACH to new RSS API library (dynamic load)
   */
 
  memset (&envir_ptr->func_ptr, '\0', sizeof (FUNC_PTR_rec_typ));
 
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_OS,
    "...-> OS_CS_attach_rss: rss=%s type=%s.",
	rss_name, rss_type);
  rc = OS_CS_attach_rss (rss_name,
                         rss_type,
                         &envir_ptr->func_ptr,
                         &envir_ptr->rss_limits ,
                         &envir_ptr->msg_admin_param,
                         &envir_ptr->msg_err,
                         &envir_ptr->os_attach_handle);
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_OS,
	"...<- OS_CS_attach_rss: rc=%d (%s) attach_hndl=%p.",
			rc, (rc EQ ESA_OK) ? "OS==OK" : "OS##OK",
			envir_ptr->os_attach_handle);
 
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, 15,
             "RSS %s API library load, completed with return code:%s",
              rss_name, ESA_rc2str(rc));
 
  if (rc NE ESA_OK)
  {
     /* SAS2IBMN - start */
     /* MSG_printf (ERR_CS_FUNCTION, "OS_CS_attach_rss");  */
     CTSAMSG_print (ERR_CS_FUNCTION,
               envir_ptr->msg_admin_param.ctsamsg_handle,
               NULL,
               envir_ptr->msg_admin_param.ctsamsg_dest,
               "OS_CS_attach_rss");
     /* SAS2IBMN - end   */
     envir_ptr->detach_req= OPT_FALSE;
     ESA_DIAG_printf (ESA_COMP_ACSCDCS, 0,
             "RSS %s API library load, completed with return code:%s",
              rss_name, ESA_rc2str(rc));
     goto cleanup;
  }
 
  envir_ptr->hot_path=attached_hot_path;
  strcpy (envir_ptr->msg_admin_param.rss_name,
	                admin_params->rss_name);
  strcpy (envir_ptr->msg_admin_param.rss_type,
	                admin_params->rss_type);
  strcpy (envir_ptr->msg_admin_param.admin_uname,
	                admin_params->admin_uname);
  strcpy (envir_ptr->msg_admin_param.admin_gname,
	                admin_params->admin_gname);
 
  CS_attach_empty_to_unsupported (&envir_ptr->func_ptr);
 
 
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
     "Limmit AND Maximum field lengths: ----------------------");
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
     "   Password Lim. %d Max %d.",
     envir_ptr->rss_limits.max_pwd_len, MAX_RSS_PASSWD_LEN);
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
     "   RSS      Lim. %d Max %d.",
     envir_ptr->rss_limits.max_restype_len, MAX_RSS_RESTYPE_NAME_LEN);
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
     "   USER     Lim. %d Max %d (For ACE: Lim. %d Max %d.",
     envir_ptr->rss_limits.max_user_len, MAX_RSS_USER_NAME_LEN,
     envir_ptr->rss_limits.max_ace_user_len,MAX_RSS_ACE_USER_NAME_LEN);
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
     "   OE       Lim. %d Max %d (For ACE: Lim. %d Max %d.",
     envir_ptr->rss_limits.max_oe_len, MAX_RSS_OE_NAME_LEN,
     envir_ptr->rss_limits.max_ace_oe_len, MAX_RSS_ACE_OE_NAME_LEN);
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
     "   UG       Lim. %d Max %d (For ACE: Lim. %d Max %d.",
     envir_ptr->rss_limits.max_ug_len, MAX_RSS_UG_NAME_LEN,
     envir_ptr->rss_limits.max_ace_ug_len,MAX_RSS_ACE_UG_NAME_LEN);
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
     "   RESOURCE Lim. %d Max %d.",
     envir_ptr->rss_limits.max_resource_len,MAX_RSS_RESOURCE_NAME_LEN);
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
     "   ADDINFO  Keyword Lim. %d Max %d   Value Lim. %d Max %d.\n",
   envir_ptr->rss_limits.max_addinfo_kwd_len,MAX_RSS_RESOURCE_NAME_LEN,
   envir_ptr->rss_limits.max_addinfo_val_len, /*WS10082K*/
   ADDINFO_LARGE_VAL_LEN);                    /*WS10082K*/
   /* WS10082K*
   envir_ptr->rss_limits.max_addinfo_val_len,MAX_RSS_ADDINFO_VAL_LEN);*/
 
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
     "Func Pointers: ----------------------");
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
     "   apiinit_ptr=%p apiterm_ptr=%p strsprm_ptr=%p adduser_ptr=%p",
     envir_ptr->func_ptr.apiinit_ptr, envir_ptr->func_ptr.apiterm_ptr,
	 envir_ptr->func_ptr.strsprm_ptr, envir_ptr->func_ptr.adduser_ptr);
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
     "   upduser_ptr=%p deluser_ptr=%p revuser_ptr=%p updpass_ptr=%p",
     envir_ptr->func_ptr.upduser_ptr, envir_ptr->func_ptr.deluser_ptr,
	 envir_ptr->func_ptr.revuser_ptr, envir_ptr->func_ptr.updpass_ptr);
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
"   addug_ptr=%p updug_ptr=%p delug_ptr=%p rss_start_intercept_ptr=%p",
     envir_ptr->func_ptr.addug_ptr, envir_ptr->func_ptr.updug_ptr,
	 envir_ptr->func_ptr.delug_ptr,
	 envir_ptr->func_ptr.rss_start_intercept_ptr);
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
    "   updu2ug_ptr=%p delu2ug_ptr=%p addace_ptr=%p apiversion_ptr=%p",
    envir_ptr->func_ptr.updu2ug_ptr, envir_ptr->func_ptr.delu2ug_ptr,
  envir_ptr->func_ptr.addace_ptr, envir_ptr->func_ptr.apiversion_ptr);
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
     "   updace_ptr=%p addres_ptr=%p delres_ptr=%p updres_ptr=%p",
     envir_ptr->func_ptr.updace_ptr, envir_ptr->func_ptr.addres_ptr,
	 envir_ptr->func_ptr.delres_ptr, envir_ptr->func_ptr.updres_ptr);
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
     "   gtrsprm_ptr=%p gtusers_ptr=%p getugs_ptr=%p gtug2uc_ptr=%p",
     envir_ptr->func_ptr.gtrsprm_ptr, envir_ptr->func_ptr.gtusers_ptr,
	 envir_ptr->func_ptr.getugs_ptr,  envir_ptr->func_ptr.gtug2uc_ptr);
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
  "   getres_ptr=%p gtrsacl_ptr=%p rss_login_ptr=%p rss_logout_ptr=%p",
  envir_ptr->func_ptr.getres_ptr, envir_ptr->func_ptr.gtrsacl_ptr,
  envir_ptr->func_ptr.rss_login_ptr,envir_ptr->func_ptr.rss_logout_ptr);
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
     "   rss_check_ptr=%p addu2ug_ptr=%p addoe_ptr=%p updoe_ptr=%p",
     envir_ptr->func_ptr.rss_check_ptr, envir_ptr->func_ptr.addu2ug_ptr,
	 envir_ptr->func_ptr.addoe_ptr, envir_ptr->func_ptr.updoe_ptr);
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
     "   deloe_ptr=%p getoes_ptr=%p isuserinoe_ptr=%p isuginoe_ptr=%p",
  envir_ptr->func_ptr.deloe_ptr, envir_ptr->func_ptr.getoes_ptr,
  envir_ptr->func_ptr.isuserinoe_ptr, envir_ptr->func_ptr.isuginoe_ptr);
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
 "   isoeinoe_ptr=%p ismaskmatch_ptr=%p trnsevnt_ptr=%p delace_ptr=%p",
  envir_ptr->func_ptr.isoeinoe_ptr, envir_ptr->func_ptr.ismaskmatch_ptr,
  envir_ptr->func_ptr.trnsevnt_ptr, envir_ptr->func_ptr.delace_ptr);
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
     "----------------------");
 
  envir_ptr->detach_req= OPT_TRUE;
 
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
    		"    -> Call to CTSVersion USA-API.");
  rc= envir_ptr->func_ptr.apiversion_ptr (envir_ptr->api_version);
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
			"    <- CTSVersion USA-API completed with rc=%d (%s) ApiVersion=%s.",
			rc, (rc EQ ESA_OK) ? "UsaApi==OK" : "UsaApi##OK",
			envir_ptr->api_version);
  if (rc NE ESA_OK)
  {
     /* SAS2IBMN - start */
     /* MSG_printf (ERR_CS_FUNCTION, "CTSVersion");   */
     CTSAMSG_print (ERR_CS_FUNCTION,
               envir_ptr->msg_admin_param.ctsamsg_handle,
               NULL,
               envir_ptr->msg_admin_param.ctsamsg_dest,
               "CTSVersion");
     /* SAS2IBMN - end   */
     ESA_DIAG_printf (ESA_COMP_ACSCDCS, 0,
             "apiversion completed with return code:%s", ESA_rc2str(rc));
     goto cleanup;
  }
  else
     CTSAMSG_print (MSG_API_VERSION,
                       envir_ptr->msg_admin_param.ctsamsg_handle, NULL,
                       envir_ptr->msg_admin_param.ctsamsg_dest,
					   rss_name, envir_ptr->api_version);
 
   if (envir_ptr->rss_limits.max_pwd_len GT
       MAX_RSS_PASSWD_LEN)
   {
       strcpy (limit_str , "MAX_RSS_PASSWD_LEN");
       rss_limit = envir_ptr->rss_limits.max_pwd_len;
       max_limit = MAX_RSS_PASSWD_LEN;
   }
   else if (envir_ptr->rss_limits.max_restype_len GT
            MAX_RSS_RESTYPE_NAME_LEN)
   {
       strcpy (limit_str , "MAX_RSS_RESTYPE_NAME_LEN");
       rss_limit = envir_ptr->rss_limits.max_restype_len;
       max_limit = MAX_RSS_RESTYPE_NAME_LEN;
   }
   else if (envir_ptr->rss_limits.max_user_len GT
            MAX_RSS_USER_NAME_LEN)
   {
       strcpy (limit_str , "MAX_RSS_USER_NAME_LEN");
       rss_limit = envir_ptr->rss_limits.max_user_len;
       max_limit = MAX_RSS_USER_NAME_LEN;
   }
   else if (envir_ptr->rss_limits.max_ace_user_len GT
            MAX_RSS_ACE_USER_NAME_LEN)
   {
       strcpy (limit_str , "MAX_RSS_ACE_USER_NAME_LEN");
       rss_limit = envir_ptr->rss_limits.max_ace_user_len;
       max_limit = MAX_RSS_ACE_USER_NAME_LEN;
   }
   else if (envir_ptr->rss_limits.max_oe_len GT
            MAX_RSS_OE_NAME_LEN)
   {
       strcpy (limit_str , "MAX_RSS_OE_NAME_LEN");
       rss_limit = envir_ptr->rss_limits.max_oe_len;
       max_limit = MAX_RSS_OE_NAME_LEN;
   }
   else if (envir_ptr->rss_limits.max_ace_oe_len GT
            MAX_RSS_ACE_OE_NAME_LEN)
   {
       strcpy (limit_str , "MAX_RSS_ACE_OE_NAME_LEN");
       rss_limit = envir_ptr->rss_limits.max_ace_oe_len;
       max_limit = MAX_RSS_ACE_OE_NAME_LEN;
   }
   else if (envir_ptr->rss_limits.max_ug_len GT
            MAX_RSS_UG_NAME_LEN)
   {
       strcpy (limit_str , "MAX_RSS_UG_NAME_LEN");
       rss_limit = envir_ptr->rss_limits.max_ug_len;
       max_limit = MAX_RSS_UG_NAME_LEN;
   }
   else if (envir_ptr->rss_limits.max_ace_ug_len GT
            MAX_RSS_ACE_UG_NAME_LEN)
   {
       strcpy (limit_str , "MAX_RSS_ACE_UG_NAME_LEN");
       rss_limit = envir_ptr->rss_limits.max_ace_ug_len;
       max_limit = MAX_RSS_ACE_UG_NAME_LEN;
   }
   else if (envir_ptr->rss_limits.max_resource_len GT
            MAX_RSS_RESOURCE_NAME_LEN)
   {
       strcpy (limit_str , "MAX_RSS_RESOURCE_NAME_LEN");
       rss_limit = envir_ptr->rss_limits.max_resource_len;
       max_limit = MAX_RSS_RESOURCE_NAME_LEN;
   }
   else if (envir_ptr->rss_limits.max_addinfo_kwd_len GT
            MAX_RSS_ADDINFO_KWD_LEN)
   {
       strcpy (limit_str , "MAX_RSS_ADDINFO_KWD_LEN");
       rss_limit = envir_ptr->rss_limits.max_addinfo_kwd_len;
       max_limit = MAX_RSS_ADDINFO_KWD_LEN;
   }
   else if (envir_ptr->rss_limits.max_addinfo_val_len GT
               ADDINFO_LARGE_VAL_LEN)        /*WS10082K*/
   /*          MAX_RSS_ADDINFO_VAL_LEN)       *WS10082K*/
   {
       strcpy (limit_str , "MAX_RSS_ADDINFO_VAL_LEN");
       rss_limit = envir_ptr->rss_limits.max_addinfo_val_len;
       max_limit = ADDINFO_LARGE_VAL_LEN;    /*WS10082K*/
   /*  max_limit = MAX_RSS_ADDINFO_KWD_LEN;   *WS10082K*/
   }
 
   else if (envir_ptr->rss_limits.max_pwd_len GT
       envir_ptr->rss_limits.max_addinfo_val_len)
   {
       strcpy (limit_str , "MAX_RSS_PASSWD_LEN");
       rss_limit = envir_ptr->rss_limits.max_pwd_len;
       max_limit = envir_ptr->rss_limits.max_addinfo_val_len;
   }
   else if (envir_ptr->rss_limits.max_restype_len GT
            envir_ptr->rss_limits.max_addinfo_val_len)
   {
       strcpy (limit_str , "MAX_RSS_RESTYPE_NAME_LEN");
       rss_limit = envir_ptr->rss_limits.max_restype_len;
       max_limit = envir_ptr->rss_limits.max_addinfo_val_len;
   }
   else if (envir_ptr->rss_limits.max_user_len GT
            envir_ptr->rss_limits.max_addinfo_val_len)
   {
       strcpy (limit_str , "MAX_RSS_USER_NAME_LEN");
       rss_limit = envir_ptr->rss_limits.max_user_len;
       max_limit = envir_ptr->rss_limits.max_addinfo_val_len;
   }
   else if (envir_ptr->rss_limits.max_ace_user_len GT
            envir_ptr->rss_limits.max_addinfo_val_len)
   {
       strcpy (limit_str , "MAX_RSS_ACE_USER_NAME_LEN");
       rss_limit = envir_ptr->rss_limits.max_ace_user_len;
       max_limit = envir_ptr->rss_limits.max_addinfo_val_len;
   }
   else if (envir_ptr->rss_limits.max_oe_len GT
            envir_ptr->rss_limits.max_addinfo_val_len)
   {
       strcpy (limit_str , "MAX_RSS_OE_NAME_LEN");
       rss_limit = envir_ptr->rss_limits.max_oe_len;
       max_limit = envir_ptr->rss_limits.max_addinfo_val_len;
   }
   else if (envir_ptr->rss_limits.max_ace_oe_len GT
            envir_ptr->rss_limits.max_addinfo_val_len)
   {
       strcpy (limit_str , "MAX_RSS_ACE_OE_NAME_LEN");
       rss_limit = envir_ptr->rss_limits.max_ace_oe_len;
       max_limit = envir_ptr->rss_limits.max_addinfo_val_len;
   }
   else if (envir_ptr->rss_limits.max_ug_len GT
            envir_ptr->rss_limits.max_addinfo_val_len)
   {
       strcpy (limit_str , "MAX_RSS_UG_NAME_LEN");
       rss_limit = envir_ptr->rss_limits.max_ug_len;
       max_limit = envir_ptr->rss_limits.max_addinfo_val_len;
   }
   else if (envir_ptr->rss_limits.max_ace_ug_len GT
            envir_ptr->rss_limits.max_addinfo_val_len)
   {
       strcpy (limit_str , "MAX_RSS_ACE_UG_NAME_LEN");
       rss_limit = envir_ptr->rss_limits.max_ace_ug_len;
       max_limit = envir_ptr->rss_limits.max_addinfo_val_len;
   }
   else if (envir_ptr->rss_limits.max_resource_len GT
            envir_ptr->rss_limits.max_addinfo_val_len)
   {
       strcpy (limit_str , "MAX_RSS_RESOURCE_NAME_LEN");
       rss_limit = envir_ptr->rss_limits.max_resource_len;
       max_limit = envir_ptr->rss_limits.max_addinfo_val_len;
   }
   else
   {
       strcpy (limit_str , "");
       rss_limit = 0;
       max_limit = 0;
   }
 
   if (strlen (limit_str) GT 0)
   {
     CTSAMSG_print (ERR_LIMITS_OF_RSS,
                    envir_ptr->msg_admin_param.ctsamsg_handle, NULL,
                    envir_ptr->msg_admin_param.ctsamsg_dest,
                    limit_str ,
                    rss_limit ,
                    rss_name ,
                    max_limit);
     rc= ESA_ERR;
    /* envir_ptr->apiterm_req= OPT_FALSE; */
     goto cleanup;
  }
  /*WS10082A RSSADM file is not used in MF
  rc= ADM_fill_admin_changes (OPT_TRUE,
                                 OPT_TRUE);
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, 15,
             "ADM_fill_admin_changes completed with return code:%s",
              ESA_rc2str(rc));
  if (rc NE ESA_OK)
  {
    @* envir_ptr->apiterm_req= OPT_FALSE;*@
     goto cleanup;
  }
  end of WS10082A ************************/
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
    		"    -> Call to CTSAPIInit USA-API.");
  rc = envir_ptr->func_ptr.apiinit_ptr(&envir_ptr->msg_admin_param,
                                  &envir_ptr->msg_err);
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
			"    <- CTSAPIInit USA-API completed with rc=%d (%s) Hndl=%p.",
			rc, (rc EQ ESA_OK) ? "UsaApi==OK" : "UsaApi##OK",
			envir_ptr->msg_admin_param.apiinit_handle);
  envir_ptr->apiinit_handle= envir_ptr->msg_admin_param.apiinit_handle;
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, 15,
             "API initialization completed with return code:%s",
              ESA_rc2str(rc));
 
  admin_params->apiinit_handle =
	  envir_ptr->msg_admin_param.apiinit_handle;
  ESA_DIAG_printf(ESA_COMP_ACSCDCS, 15,
	  "apiinit_hande of attached RSS is %p",
	  admin_params->apiinit_handle);
 
	
  if (rc NE ESA_OK)
  {
     CTSAMSG_print (ERR_APIINIT,
                    envir_ptr->msg_admin_param.ctsamsg_handle, NULL,
                    envir_ptr->msg_admin_param.ctsamsg_dest,
                    rss_name,
                    rss_type);
     envir_ptr->apiterm_req= OPT_FALSE;
     goto cleanup;
  }
  envir_ptr->apiterm_req= OPT_TRUE;
 
  rc= CS_versions_compare (envir_ptr->api_version ,
                           rss_name ,
                           rss_type);
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_COMMON,
             "CS_versions_compare completed with return code:%s",
              ESA_rc2str(rc));
 
  if (rc NE ESA_OK)
      goto cleanup;
 
 cleanup:
  if (rc NE ESA_OK)
  {
     rc_tmp= CS_detach_rss ();
     /* SAS2IBMN - start */
     /* MSG_printf (ERR_CS_FUNCTION, fn);  */
     CTSAMSG_print (ERR_CS_FUNCTION,
               envir_ptr->msg_admin_param.ctsamsg_handle,
               NULL,
               envir_ptr->msg_admin_param.ctsamsg_dest,
               fn);
     /* SAS2IBMN - end   */
  }
  ESA_DIAG_exit (ESA_COMP_ACSCDCS, DIAG_COMMON, fn, rc);
  return (rc);
 
} /* CS_attach_rss */
 
/**************************************************************
*                                                             *
* Procedure Name   : CS_versions_compare                      *
*                                                             *
* Description      : Compare CTS version with API version     *
*                                                             *
* Return Value     : ESA_RC                                   *
*                                                             *
**************************************************************/
 
ESA_RC CS_versions_compare (RSS_vers_typ  api_version ,
                            RSS_typ       rss_name,
                            RSS_typ       rss_type)
{
  char                  fn[]= "CS_versions_compare";
  ESA_RC                rc        = ESA_OK;
 
  char                * api_v1= NULL, * api_v2= NULL, * api_v3= NULL;
  char                * csa_v1= NULL, * csa_v2= NULL, * csa_v3= NULL;
  char                * supp_v1= NULL, * supp_v2= NULL, * supp_v3= NULL;
  int                   Special_Supported_Version = FALSE;
                                                        /* IMH001 */
  RSS_vers_typ          wrk_csa_ver, wrk_api_ver, wrk_supp_ver;
  char                  tokens [] = ".";
  ENVIRONMENT_rec_typ * envir_ptr;
 
  CS_get_envir_address (&envir_ptr);
 
  ESA_DIAG_enter (ESA_COMP_ACSCDCS, DIAG_COMMON, fn);
 
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_DETAILES,"CSA version %s API version %s.",
                   CTSAgentVersion(), api_version);
 
  strncpy (wrk_api_ver,
           api_version,
           RSS_VERS_LEN);
 
  wrk_api_ver [RSS_VERS_LEN]= '\0';
 
  api_v1= strtok (wrk_api_ver, tokens);
  api_v2= strtok (NULL, tokens);
  api_v3= strtok (NULL, tokens);
 
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, 15,
            "API version %s %s %s.",
            (api_v1 EQ NULL) ? "NULL" : api_v1,
            (api_v2 EQ NULL) ? "NULL" : api_v2,
            (api_v3 EQ NULL) ? "NULL" : api_v3);
 
  strncpy (wrk_csa_ver,
           CTSAgentVersion(),
           RSS_VERS_LEN);
 
  wrk_csa_ver [RSS_VERS_LEN]= '\0';
 
  csa_v1= strtok (wrk_csa_ver, tokens);
  csa_v2= strtok (NULL, tokens);
  csa_v3= strtok (NULL, tokens);
 
  ESA_DIAG_printf (ESA_COMP_ACSCDCS, 15,
                   "CS version %s %s %s.",
                   (csa_v1 EQ NULL) ? "NULL" : csa_v1,
                   (csa_v2 EQ NULL) ? "NULL" : csa_v2,
                   (csa_v3 EQ NULL) ? "NULL" : csa_v3);
 
  /* Check API version not null*/
 
  if ((api_v1 EQ NULL) OR (api_v2 EQ NULL) OR (api_v3 EQ NULL)) {
     CTSAMSG_print (ERR_API_VERSION,
                    envir_ptr->msg_admin_param.ctsamsg_handle, NULL,
                    envir_ptr->msg_admin_param.ctsamsg_dest,
                    api_version ,
                    rss_name ,
                    rss_type);
     rc = ESA_ERR;
     goto cleanup;
  }
 
  /* Check CS version not null */
 
  if ((csa_v1 EQ NULL) OR (csa_v2 EQ NULL) OR (csa_v3 EQ NULL)) {
     CTSAMSG_print (ERR_CSA_VERSION,
                    envir_ptr->msg_admin_param.ctsamsg_handle, NULL,
                    envir_ptr->msg_admin_param.ctsamsg_dest,
                    CTSAgentVersion());
     rc = ESA_ERR;
     goto cleanup;
  }
 
/* IMH001 start */
 
  /* If RSSPARM parameter SUPPORTED_USA-API exists, compare it with  */
  /*    the version of the USA-API.  If the major and minor (1st and */
  /*    2nd) digits match, then we're o.k. - the common code and the */
  /*    USA-API are compatible. */
 
  rc = rssprm_get_opt (rss_name,
                       SUPPORTED_USA_API,
                       RSS_VERS_LEN,
                       wrk_supp_ver,
                       OPT_TRUE,
                       OPT_FALSE);
		
  if (rc EQ ESA_OK)
  {
      wrk_supp_ver [RSS_VERS_LEN]= '\0';
 
      supp_v1= strtok (wrk_supp_ver, tokens);
      supp_v2= strtok (NULL, tokens);
      supp_v3= strtok (NULL, tokens);
 
      ESA_DIAG_printf (ESA_COMP_ACSCDCS, 15,
                       "Special Supported API version %s %s %s.",
                       (supp_v1 EQ NULL) ? "NULL" : supp_v1,
                       (supp_v2 EQ NULL) ? "NULL" : supp_v2,
                       (supp_v3 EQ NULL) ? "NULL" : supp_v3);
 
 
      /* compare API version with special supported API version */
      if (
            (strcmp (supp_v1, api_v1) EQ 0)
             AND
            (strcmp (supp_v2, api_v2) EQ 0)
	 )
          Special_Supported_Version = TRUE;
  }
  else
      if (rc EQ ESA_KEY_NOT_FOUND)
          rc = ESA_OK;
 
/* IMH001 end */
 
  /* Compare versions - using string comparisons,
   * so versions in letters are also OK.
   */
 
  if (
         (strcmp (api_v1, csa_v1) NE 0)
          OR
         (strcmp (api_v2, csa_v2) NE 0)
       AND
         (NOT Special_Supported_Version)                 /* IMH001 */
     )
  {
     CTSAMSG_print (ERR_CSA_API_VERSION,
                    envir_ptr->msg_admin_param.ctsamsg_handle, NULL,
                    envir_ptr->msg_admin_param.ctsamsg_dest,
                    api_version,
                    rss_name,
                    rss_type,
                    CTSAgentVersion());
     rc = ESA_ERR;
     goto cleanup;
  }
 
/* following changes under "ifdef WINNT" only for V3.1.05*/
  if (  (strcmp(api_v1, "3") EQ 0)
      AND
        (strcmp(api_v2, "1") EQ 0)
      AND
        (strcmp(api_v3, "05") LT 0))
  {
	  CTSAMSG_print (ERR_CSA_API_VERSION,
                    envir_ptr->msg_admin_param.ctsamsg_handle, NULL,
                    envir_ptr->msg_admin_param.ctsamsg_dest,
                    api_version,
                    rss_name,
                    rss_type,
                    CTSAgentVersion());
     rc = ESA_ERR;
     goto cleanup;
  }
 
 cleanup:
 
  ESA_DIAG_exit (ESA_COMP_ACSCDCS, DIAG_COMMON, fn, rc);
  return (rc);
 
} /* CS_versions_compare */
 
 
 
/**************************************************************
*                                                             *
* Procedure Name   : CS_detach_rss                            *
*                                                             *
* Description      : apiterm and detach  old RSS              *
*                                                             *
* Return Value     : ESA_RC                                   *
*                                                             *
**************************************************************/
 
ESA_RC CS_detach_rss (void)
{
  ESA_RC                rc= ESA_OK, rc_tmp= ESA_OK;
  ENVIRONMENT_rec_typ * envir_ptr;
  char                  fn[]="CS_detach_rss";
 
  ESA_DIAG_enter (ESA_COMP_ACSCDCS, DIAG_COMMON, fn);
  CS_get_envir_address (&envir_ptr);
 
  if (envir_ptr->detach_req EQ OPT_TRUE)
  {
     if (envir_ptr->apiterm_req EQ OPT_TRUE)
	 {
 
        ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
    		"    -> Call to CTSAPITerm USA-API.");
		rc_tmp= envir_ptr->func_ptr.apiterm_ptr(
                                &envir_ptr->msg_admin_param,
                                &envir_ptr->msg_err);
        ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_BASIC,
			"    <- CTSAPITerm USA-API completed with rc=%d (%s).",
			rc_tmp, (rc_tmp EQ ESA_OK) ? "UsaApi==OK" : "UsaApi##OK");
        ESA_DIAG_printf (ESA_COMP_ACSCDCS, 5,
                      "API termination completed with return code:%s",
                      ESA_rc2str(rc_tmp));
        envir_ptr->apiinit_handle=
			       envir_ptr->msg_admin_param.apiinit_handle;
        if (envir_ptr->apiinit_handle NE NULL)
		{
           CTSAMSG_print (ERR_APIINIT_HANDLE,
                    envir_ptr->msg_admin_param.ctsamsg_handle, NULL,
                    envir_ptr->msg_admin_param.ctsamsg_dest,
                    fn,
                    envir_ptr->msg_admin_param.rss_name);
          envir_ptr->apiinit_handle = NULL;
		}
	 }
     /*
      * DETACH from the old RSS API library (dynamic load)
      */
 
     ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_OS,
       "...-> OS_CS_attach_rss: attach_hndl=%p.",
	    envir_ptr->os_attach_handle);
     rc= OS_CS_detach_rss (&envir_ptr->msg_admin_param,
                           &envir_ptr->msg_err,
                           &envir_ptr->os_attach_handle);
     ESA_DIAG_printf (ESA_COMP_ACSCDCS, DIAG_OS,
    	"...<- OS_CS_Detach_rss: rc=%d (%s).",
			rc, (rc EQ ESA_OK) ? "OS==OK" : "OS##OK");
 
  }
 
  envir_ptr->detach_req= OPT_FALSE;
  envir_ptr->apiterm_req = OPT_FALSE;
  envir_ptr->os_attach_handle = NULL;
  memset (&envir_ptr->func_ptr, '\0', sizeof (FUNC_PTR_rec_typ));
  envir_ptr->hot_path= HOT_PATH_OFF;
  envir_ptr->rss_num = envir_ptr->max_rss_num;
                                      /* Temporary set current RSS
                                      to illegal
                                      one so if function fail - new one
                                      will not be equal to old RSS. */
  if (rc EQ ESA_OK)
	  rc= rc_tmp;
 
  ESA_DIAG_exit (ESA_COMP_ACSCDCS, DIAG_COMMON, fn, rc);
  return (rc);
 
}
