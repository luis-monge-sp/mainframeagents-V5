/***********************************************************************
 * Mod.ID   Who     When         Description
 * =====================================================================
 * SAS2IBMT SeligT  16/11/16     SAS/C to IBM C Conversion Project and
 *                               re-design / re-write of BATxxxx rtns
 * BS10062  SeligT  30/08/17     Handle storage allocation errors -
 *                               compile only
 * IS10156  SeligT  13/09/17     Allocate ADDINFO Size Correctly
 * IS10157  SeligT  17/09/17     Allocate Several Arrays Correctly
 **********************************************************************/
#include "globs.h"
 
#include STDIO
#include STRING
#include STDLIB
 
#include ESA_API
#include ESA_ADMIN
#include ESA_CS_SINFO
#include ESA_INIT
#include ENC_API
 
#include "batutls.h"
 
static ESA_RC  rc1;
 
/****************************************************
 * Procedure Name: addconn_rtn
 * Description   : Process the :ADDCONN request.
 *               : Some details:
 *               :
 *               : We call the rpl_addinfo_loop routine to process
 *               : the RPL and addinfo lines.  When we return from the
 *               : routine (if there was no error) we prepare and call
 *               : the USA-API.  Then we leave this routine and we go
 *               : back up to req_rtn and we go back up to the main
 *               : loop.
 * Input         : array of request details
 * Output        : none
 * Input/Output  :
 * Return Value  : ESA_OK or ESA_FATAL
 * Side Effects  :
 * Scope         : Internal To API Test Program
 ***************************************************/
 
   ESA_RC addconn_rtn (void) {
   ESA_RC                rc = ESA_OK;
   int                   opt;
   USER_typ              user = "";
   UG_typ                group = "";
   U2UG_PARAMS_rec_typ   u2ug_data = {"", "",
                                      U2UG_ADM_IGNORED,
                                      U2UG_ATTR_IGNORED,
                                      ""};
   ADDINFO_rec_typ      *aip = NULL;
#ifdef CONN_OPS_NEED_ADDINFO
   int                   maxi;
#endif
   static char         func [] = "BATCONN_addconn_rtn";
 
   ESA_DIAG_enter(ESA_COMP_BATCH, 1, func);
 
   printf(":ADDCONN:\n");
 
   strcpy (u2ug_data.user,  req->userid);
   strcpy (u2ug_data.group, req->groupid);
 
   u2ug_data.u2ug_admin_data = U2UG_ADM_NONE;
   u2ug_data.u2ug_attr_data  = U2UG_ATTR_REGULAR;
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call rpl_addinfo_loop routine");
 
   rc = rpl_addinfo_loop();
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "rc from rpl_addinfo_loop routine = %d", rc);
 
   if (rc EQ ESA_FATAL) return rc;
 
   aip = NULL;
 
   if (req->u2ug_admin)
      u2ug_data.u2ug_admin_data = req->u2ug_admin;
 
#ifdef CONN_OPS_NEED_ADDINFO
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call utl_obtain_addinfo_pairs routine");
 
   /* IS10156 remove first parameter of the following routine
   rc = utl_obtain_addinfo_pairs (MAX_KWDS, &aip, &maxi,             */
   rc = utl_obtain_addinfo_pairs (&aip, &maxi,
                                  in_kwd, in_val, in_i);
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "rc from utl_obtain_addinfo_pairs routine = %d", rc);
 
   if (rc EQ ESA_FATAL) return rc;
 
#else
 
   ALLOC_DUMMY_ADDINFO(aip);
 
#endif
 
   printf("User    : %s\n", u2ug_data.user);
 
   printf("Group   : %s\n", u2ug_data.group);
 
   pr_u2ug_details (&u2ug_data);
 
#ifdef CONN_OPS_NEED_ADDINFO
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call utl_dump_addinfo routine");
 
   utl_dump_addinfo (aip);
 
#endif
 
   API_PROLOG;
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call USA-API addconn routine");
 
   rc = (*func_struct.addu2ug_ptr) (&u2ug_data,
                                    aip,
                                    admin_ptr,
                                    err_ptr);
 
   API_EPILOG;
 
   CK_RC(rc, ":ADDCONN");
 
   if (aip)
      free (aip);
 
   PR_MSG(rc);
 
   CLEAN_ERR;
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to leave addconn_rtn with %d", rc);
 
   ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, rc);
 
   return rc;
 
   } /* addconn_rtn */
 
 
 
/****************************************************
 * Procedure Name: updconn_rtn
 * Description   : Process the :UPDCONN request.
 *               : Some details:
 *               :
 *               : We call the rpl_addinfo_loop routine to process
 *               : the RPL and addinfo lines.  When we return from the
 *               : routine (if there was no error) we prepare and call
 *               : the USA-API.  Then we leave this routine and we go
 *               : back up to req_rtn and we go back up to the main
 *               : loop.
 * Input         : array of request details
 * Output        : none
 * Input/Output  :
 * Return Value  : ESA_OK or ESA_FATAL
 * Side Effects  :
 * Scope         : Internal To API Test Program
 ***************************************************/
 
   ESA_RC updconn_rtn (void) {
   ESA_RC                rc = ESA_OK;
   int                   opt;
   USER_typ              user = "";
   UG_typ                group = "";
   U2UG_PARAMS_rec_typ   u2ug_data = {"", "",
                                      U2UG_ADM_IGNORED,
                                      U2UG_ATTR_IGNORED,
                                      ""};
   ADDINFO_rec_typ      *aip = NULL;
#ifdef CONN_OPS_NEED_ADDINFO
   int                   maxi;
#endif
   static char         func [] = "BATCONN_updconn_rtn";
 
   ESA_DIAG_enter(ESA_COMP_BATCH, 1, func);
 
   printf(":UPDCONN:\n");
 
   strcpy (u2ug_data.user,  req->userid);
   strcpy (u2ug_data.group, req->groupid);
 
   u2ug_data.u2ug_admin_data = U2UG_ADM_IGNORED;
   u2ug_data.u2ug_attr_data  = U2UG_ATTR_REGULAR;
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call rpl_addinfo_loop routine");
 
   rc = rpl_addinfo_loop();
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "rc from rpl_addinfo_loop routine = %d", rc);
 
   if (rc EQ ESA_FATAL) return rc;
 
   aip = NULL;
 
   if (req->u2ug_admin)
      u2ug_data.u2ug_admin_data = req->u2ug_admin;
 
#ifdef CONN_OPS_NEED_ADDINFO
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call utl_obtain_addinfo_pairs routine");
 
   /* IS10156 remove first parameter of the following routine
   rc = utl_obtain_addinfo_pairs (MAX_KWDS, &aip, &maxi,             */
   rc = utl_obtain_addinfo_pairs (&aip, &maxi,
                                  in_kwd, in_val, in_i);
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "rc from utl_obtain_addinfo_pairs routine = %d", rc);
 
   if (rc EQ ESA_FATAL) return rc;
 
#else
 
   ALLOC_DUMMY_ADDINFO(aip);
 
#endif
 
   printf("User    : %s\n", u2ug_data.user);
 
   printf("Group   : %s\n", u2ug_data.group);
 
   pr_u2ug_details (&u2ug_data);
 
#ifdef CONN_OPS_NEED_ADDINFO
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call utl_dump_addinfo routine");
 
   utl_dump_addinfo (aip);
 
#endif
 
   API_PROLOG;
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call USA-API updconn routine");
 
   rc = (*func_struct.updu2ug_ptr) (&u2ug_data,
                                    aip,
                                    admin_ptr,
                                    err_ptr);
 
   API_EPILOG;
 
   CK_RC(rc, ":UPDCONN");
 
   if (aip)
      free (aip);
 
   PR_MSG(rc);
 
   CLEAN_ERR;
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to leave updconn_rtn with %d", rc);
 
   ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, rc);
 
   return rc;
 
   } /* updconn_rtn */
 
 
 
/****************************************************
 * Procedure Name: delconn_rtn
 * Description   : Process the :DELCONN request.
 *               : Some details:
 *               :
 *               : We call the rpl_addinfo_loop routine to process
 *               : the RPL and addinfo lines.  When we return from the
 *               : routine (if there was no error) we prepare and call
 *               : the USA-API.  Then we leave this routine and we go
 *               : back up to req_rtn and we go back up to the main
 *               : loop.
 * Input         : array of request details
 * Output        : none
 * Input/Output  :
 * Return Value  : ESA_OK or ESA_FATAL
 * Side Effects  :
 * Scope         : Internal To API Test Program
 ***************************************************/
 
   ESA_RC delconn_rtn (void) {
   ESA_RC                rc = ESA_OK;
   int                   opt;
   USER_typ              user = "";
   UG_typ                group = "";
   U2UG_PARAMS_rec_typ   u2ug_data = {"", "",
                                      U2UG_ADM_IGNORED,
                                      U2UG_ATTR_IGNORED,
                                      ""};
   ADDINFO_rec_typ      *aip = NULL;
#ifdef CONN_OPS_NEED_ADDINFO
   int                   maxi;
#endif
   static char         func [] = "BATCONN_delconn_rtn";
 
   ESA_DIAG_enter(ESA_COMP_BATCH, 1, func);
 
   printf(":DELCONN:\n");
 
   strcpy (u2ug_data.user,  req->userid);
   strcpy (u2ug_data.group, req->groupid);
 
   u2ug_data.u2ug_admin_data = U2UG_ADM_IGNORED;
   u2ug_data.u2ug_attr_data  = U2UG_ATTR_REGULAR;
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call rpl_addinfo_loop routine");
 
   rc = rpl_addinfo_loop();
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "rc from rpl_addinfo_loop routine = %d", rc);
 
   if (rc EQ ESA_FATAL) return rc;
 
   aip = NULL;
 
   if (req->u2ug_admin)
      u2ug_data.u2ug_admin_data = req->u2ug_admin;
 
#ifdef CONN_OPS_NEED_ADDINFO
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call utl_obtain_addinfo_pairs routine");
 
   /* IS10156 remove first parameter of the following routine
   rc = utl_obtain_addinfo_pairs (MAX_KWDS, &aip, &maxi,             */
   rc = utl_obtain_addinfo_pairs (&aip, &maxi,
                                  in_kwd, in_val, in_i);
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "rc from utl_obtain_addinfo_pairs routine = %d", rc);
 
   if (rc EQ ESA_FATAL) return rc;
 
#else
 
   ALLOC_DUMMY_ADDINFO(aip);
 
#endif
 
   printf("User    : %s\n", u2ug_data.user);
 
   printf("Group   : %s\n", u2ug_data.group);
 
   pr_u2ug_details (&u2ug_data);
 
#ifdef CONN_OPS_NEED_ADDINFO
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call utl_dump_addinfo routine");
 
   utl_dump_addinfo (aip);
 
#endif
 
   API_PROLOG;
 
   rc = (*func_struct.delu2ug_ptr) (&u2ug_data,
                                    aip,
                                    admin_ptr,
                                    err_ptr);
 
   API_EPILOG;
 
   CK_RC(rc, ":DELCONN");
 
   if (aip)
      free (aip);
 
   PR_MSG(rc);
 
   CLEAN_ERR;
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to leave delconn_rtn with %d", rc);
 
   ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, rc);
 
   return rc;
 
   } /* delconn_rtn */
 
 
 
/****************************************************
 * Procedure Name: pr_u2ug_details
 * Description   : Print details of user to ug connection.
 * Input         : u2ug_data
 * Output        :
 * Input/Output  :
 * Return Value  :
 * Side Effects  :
 * Scope         : local
 ***************************************************/
 
void pr_u2ug_details (U2UG_PARAMS_rec_typ * u2ug_data)
{
   printf("  Connection details   : ");
 
   switch (u2ug_data->u2ug_admin_data) {
     case U2UG_ADM_IGNORED:
         printf("<IGNORED> ");
         break;
     case U2UG_ADM_NONE:
         printf("None ");
         break;
     case U2UG_ADM_AUDIT:
         printf("Auditor ");
         break;
     case U2UG_ADM_ADMIN:
         printf("Administrator ");
         break;
     case U2UG_ADM_ALL:
         printf("All ");
         break;
     default:
         printf("<UNKNOWN> ");
   }
 
   printf("\n  Connection attributes: ");
 
   switch (u2ug_data->u2ug_attr_data) {
     case U2UG_ATTR_IGNORED:
         printf("<IGNORED> ");    /* AJK003 */
         break;
     case U2UG_ATTR_REGULAR:
         printf("None ");
         break;
     case U2UG_ATTR_DEFAULT_GROUP:
         printf("Default Group ");
         break;
     default:
         printf("<UNKNOWN> ");
   }
 
   printf("\n  Default group        : %s\n",
            u2ug_data->def_group);
 
} /* pr_u2ug_details */
 
