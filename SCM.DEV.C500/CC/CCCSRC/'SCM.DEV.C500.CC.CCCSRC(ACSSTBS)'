/*
 * Version Information:
 * ====================
 * File name       : %name: acsstbs.c %
 * Instance        : %instance: 1 %
 * Created by      : %created_by: leonid_s %
 * Created on      : %date_created: Tue May 13 12:55:32 2003 %
 * Current Version : %version: 11 %
 * Last Modified by: %derived_by: leonid_s %
 * Last Modified on: %date_modified: Tue May 13 12:55:32 2003 %
 */
 
/***********************************************
 * Mod.ID   Who      When         Description
 * =============================================
 * SAS2IBMA AvnerL   21-Dec-16    SAS/C to IBM C Conversion Project
 * CIQ#6    NuritY   08/05/2017   Account Aggregation now includes
 *                                Connections. To do this, we added
 *                                a new parameter to CTSGetUsers to
 *                                indicate whether new (will pass
 *                                back groups) or old (will not pass
 *                                back groups).
 **********************************************/
 
#include "globs.h"
 
#include ESA_API
#include ESA_MSG
#include ESA_OS_OFLI
#include ESA_RSS
 
#define CTSVersionUnsup           STBS001
#define CTSAPIInitUnsup           STBS002
#define CTSAPITermUnsup           STBS003
#define CTSSetRSSParamsUnsup      STBS004
#define CTSAddUserUnsup           STBS005
#define CTSDelUserUnsup           STBS006
#define CTSUpdUserUnsup           STBS007
#define CTSRevokeUserUnsup        STBS008
#define CTSUpdPasswordUnsup       STBS009
#define CTSAddUGUnsup             STBS010
#define CTSDelUGUnsup             STBS011
#define CTSUpdUGUnsup             STBS012
#define CTSAddUserToUGUnsup       STBS013
#define CTSDelUserFromUGUnsup     STBS014
#define CTSUpdUserToUGUnsup       STBS015
#define CTSAddACEUnsup            STBS016
#define CTSDelACEUnsup            STBS017
#define CTSUpdACEUnsup            STBS018
#define CTSAddResUnsup            STBS029
#define CTSDelResUnsup            STBS030
#define CTSUpdResUnsup            STBS031
#define CTSGetRSSParamsUnsup      STBS032
#define CTSGetUsersUnsup          STBS033
#define CTSGetUGsUnsup            STBS034
#define CTSGetConnsUnsup          STBS035
#define CTSGetResUnsup            STBS036
#define CTSGetResACLUnsup         STBS037
#define CTSRSSLoginUnsup          STBS039
#define CTSRSSLogoutUnsup         STBS040
#define CTSRSSCheckUnsup          STBS041
#define CTSInterceptorStartUnsup  STBS042
#define CTSAddOEUnsup             STBS043
#define CTSDelOEUnsup             STBS044
#define CTSUpdOEUnsup             STBS045
#define CTSGetOEsUnsup            STBS046
#define CTSIsUserInOEUnsup        STBS047
#define CTSIsUGInOEUnsup          STBS048
#define CTSIsOEInOEUnsup          STBS049
#define CTSIsMaskMatchUnsup       STBS050
#define CTSTransactionEventUnsup  STBS051
 
 
extern  APIVERSION_FUNC_TYP          CTSVersionUnsup;
extern  APIINIT_FUNC_TYP             CTSAPIInitUnsup;
extern  APITERM_FUNC_TYP             CTSAPITermUnsup;
extern  STRSPRM_FUNC_TYP             CTSSetRSSParamsUnsup;
extern  ADDUSER_FUNC_TYP             CTSAddUserUnsup;
extern  DELUSER_FUNC_TYP             CTSDelUserUnsup;
extern  UPDUSER_FUNC_TYP             CTSUpdUserUnsup;
extern  REVUSER_FUNC_TYP             CTSRevokeUserUnsup;
extern  UPDPASS_FUNC_TYP             CTSUpdPasswordUnsup;
extern  ADDUG_FUNC_TYP               CTSAddUGUnsup;
extern  DELUG_FUNC_TYP               CTSDelUGUnsup;
extern  UPDUG_FUNC_TYP               CTSUpdUGUnsup;
extern  ADDU2UG_FUNC_TYP             CTSAddUserToUGUnsup;
extern  DELU2UG_FUNC_TYP             CTSDelUserFromUGUnsup;
extern  UPDU2UG_FUNC_TYP             CTSUpdUserToUGUnsup;
extern  ADDACE_FUNC_TYP              CTSAddACEUnsup;
extern  DELACE_FUNC_TYP              CTSDelACEUnsup;
extern  UPDACE_FUNC_TYP              CTSUpdACEUnsup;
extern  ADDRES_FUNC_TYP              CTSAddResUnsup;
extern  DELRES_FUNC_TYP              CTSDelResUnsup;
extern  UPDRES_FUNC_TYP              CTSUpdResUnsup;
extern  GTRSPRM_FUNC_TYP             CTSGetRSSParamsUnsup;
extern  GTUSERS_FUNC_TYP             CTSGetUsersUnsup;
extern  GETUGS_FUNC_TYP              CTSGetUGsUnsup;
extern  GTUG2UC_FUNC_TYP             CTSGetConnsUnsup;
extern  GETRES_FUNC_TYP              CTSGetResUnsup;
extern  GTRSACL_FUNC_TYP             CTSGetResACLUnsup;
extern  RSS_LOGIN_FUNC_TYP           CTSRSSLoginUnsup;
extern  RSS_LOGOUT_FUNC_TYP          CTSRSSLogoutUnsup;
extern  RSS_CHECK_FUNC_TYP           CTSRSSCheckUnsup;
extern  RSS_START_INTERCEPT_FUNC_TYP CTSInterceptorStartUnsup;
extern  ADDOE_FUNC_TYP               CTSAddOEUnsup;
extern  DELOE_FUNC_TYP               CTSDelOEUnsup;
extern  UPDOE_FUNC_TYP               CTSUpdOEUnsup;
extern  GETOES_FUNC_TYP              CTSGetOEsUnsup;
extern  ISUSERINOE_FUNC_TYP          CTSIsUserInOEUnsup;
extern  ISUGINOE_FUNC_TYP            CTSIsUGInOEUnsup;
extern  ISOEINOE_FUNC_TYP            CTSIsOEInOEUnsup;
extern  ISMASKMATCH_FUNC_TYP         CTSIsMaskMatchUnsup;
extern  TRNSEVNT_FUNC_TYP            CTSTransactionEventUnsup;
/*extern  API_LOAD_FUNC_TYP   CTSAPILoadUnsup;      */
 
FUNC_PTR_rec_typ  FuncPtr;
 
/* ----------------------------------------------- */
/*                    Stubs                        */
/* ----------------------------------------------- */
 
ESA_RC CTSVersionUnsup (RSS_vers_typ  rss_version)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSVersionUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
 
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSAPIInitUnsup (ADMIN_PARAMS_rec_typ * admin_params,
                        ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSAPIInitUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
 
ESA_RC CTSAPITermUnsup (ADMIN_PARAMS_rec_typ * admin_params,
                        ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSAPITermUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSSetRSSParamsUnsup (RSS_PARAMS_rec_typ   * rss_params,
                             ADDINFO_rec_typ      * addinfo,
                             ADMIN_PARAMS_rec_typ * admin_params,
                             ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSSetRSSParamsUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
 
ESA_RC CTSAddUserUnsup (USER_PARAMS_rec_typ  * user_params,
                        ADDINFO_rec_typ      * addinfo,
                        ADMIN_PARAMS_rec_typ * admin_params,
                        ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSAddUserUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSDelUserUnsup (USER_PARAMS_rec_typ  * user_params,
                        ADDINFO_rec_typ      * addinfo,
                        ADMIN_PARAMS_rec_typ * admin_params,
                        ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSDelUserUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSUpdUserUnsup (USER_PARAMS_rec_typ  * user_params,
                        ADDINFO_rec_typ      * addinfo,
                        ADMIN_PARAMS_rec_typ * admin_params,
                        ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSUpdUserUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSRevokeUserUnsup (USER_PARAMS_rec_typ  * user_params,
                           ADDINFO_rec_typ      * addinfo,
                           ADMIN_PARAMS_rec_typ * admin_params,
                           ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSRevokeUserUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSUpdPasswordUnsup (USER_PARAMS_rec_typ  * user_params,
                            ADDINFO_rec_typ      * addinfo,
                            ADMIN_PARAMS_rec_typ * admin_params,
                            ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSUpdPasswordUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSAddUGUnsup (UG_PARAMS_rec_typ    * ug_params,
                      ADDINFO_rec_typ      * addinfo,
                      ADMIN_PARAMS_rec_typ * admin_params,
                      ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSAddUGUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSDelUGUnsup (UG_PARAMS_rec_typ    * ug_params,
                      ADDINFO_rec_typ      * addinfo,
                      ADMIN_PARAMS_rec_typ * admin_params,
                      ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSDelUGUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSUpdUGUnsup (UG_PARAMS_rec_typ    * ug_params,
                      ADDINFO_rec_typ      * addinfo,
                      ADMIN_PARAMS_rec_typ * admin_params,
                      ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSUpdUGUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSAddUserToUGUnsup (U2UG_PARAMS_rec_typ  * u2ug_data,
                            ADDINFO_rec_typ      * addinfo,
                            ADMIN_PARAMS_rec_typ * admin_params,
                            ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSAddUserToUGUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSDelUserFromUGUnsup (U2UG_PARAMS_rec_typ  * u2ug_data,
                              ADDINFO_rec_typ      * addinfo,
                              ADMIN_PARAMS_rec_typ * admin_params,
                              ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSDelUserFromUGUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSUpdUserToUGUnsup (U2UG_PARAMS_rec_typ  * u2ug_data,
                            ADDINFO_rec_typ      * addinfo,
                            ADMIN_PARAMS_rec_typ * admin_params,
                            ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSUpdUserToUGUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSAddACEUnsup (RES_PARAMS_rec_typ   * res_params,
                       ACE_rec_typ          * new_ace,
                       ADDINFO_rec_typ      * new_addinfo,
                       ACE_POS_typ            ace_pos,
                       ACE_rec_typ          * rel_ace,
                       ADDINFO_rec_typ      * rel_addinfo,
                       ADMIN_PARAMS_rec_typ * admin_params,
                       ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSAddACEUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSDelACEUnsup (RES_PARAMS_rec_typ   * res_params,
                       ACE_rec_typ          * ace,
                       ADDINFO_rec_typ      * addinfo,
                       ADMIN_PARAMS_rec_typ * admin_params,
                       ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSDelACEUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSUpdACEUnsup (RES_PARAMS_rec_typ   * res_params,
                       ACE_rec_typ          * new_ace,
                       ADDINFO_rec_typ      * new_addinfo,
                       ACE_rec_typ          * old_ace,
                       ADDINFO_rec_typ      * old_addinfo,
                       ADMIN_PARAMS_rec_typ * admin_params,
                       ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSUpdACEUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
 
ESA_RC CTSAddResUnsup (RES_PARAMS_rec_typ   * res_params,
                       ADDINFO_rec_typ      * addinfo_data,
                       ADMIN_PARAMS_rec_typ * admin_params,
                       ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSAddResUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSDelResUnsup (RES_PARAMS_rec_typ   * res_params,
                       ADDINFO_rec_typ      * addinfo_data,
                       ADMIN_PARAMS_rec_typ * admin_params,
                       ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSDelResUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSUpdResUnsup (RES_PARAMS_rec_typ   * res_params,
                       ADDINFO_rec_typ      * addinfo_data,
                       ADMIN_PARAMS_rec_typ * admin_params,
                       ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSUpdResUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSGetRSSParamsUnsup (RSS_PARAMS_rec_typ   * rss_params,
                             ADDINFO_rec_typ      * addinfo,
                             ADMIN_PARAMS_rec_typ * admin_params,
                             ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSGetRSSParamsUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSGetUsersUnsup (GET_USER_MODE          mode,
                         OE_typ                 oe,
                         short                  max_users,
                         short                * actual_num,
                         HAVE_MORE_typ        * have_more,
                         void                ** handle,
                         short                  num_users_in,
                         USER_PARAMS_rec_typ    user_params_in[1],
                         USER_PARAMS_rec_typ    user_params[1],
                         ADDINFO_rec_typ      * addinfo[1],
                         OBJ_EXISTS_typ         objs_exist[1],
                         ADMIN_PARAMS_rec_typ * admin_params,
                         ERR_STRUCT_rec_typ   * err,
                         char                   get_conn) /*CIQ#6*/
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSGetUsersUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
	*actual_num= 0;
	*have_more= NO_MORE;
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSGetUGsUnsup (GET_GROUP_MODE         mode,
                       OE_typ                 oe,
                       short                  max_ugs,
                       short                * actual_num,
                       HAVE_MORE_typ        * have_more,
                       void                ** handle,
                       short                  num_ugs_in,
                       UG_PARAMS_rec_typ      ug_params_in[1],
                       UG_PARAMS_rec_typ      ug_params[1],
                       ADDINFO_rec_typ      * addinfo[1],
                       OBJ_EXISTS_typ         objs_exist[1],
                       ADMIN_PARAMS_rec_typ * admin_params,
                       ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSGetUgsUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
	*actual_num= 0;
	*have_more= NO_MORE;
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSGetConnsUnsup (GET_CONN_MODE          mode,
                         short                  max_conns,
                         short                * actual_num,
                         HAVE_MORE_typ        * have_more,
                         void                ** handle,
                         short                  num_ugs_in,
                         short                  num_users_in,
                         UG_typ                 ugs_in[1],
                         USER_typ               users_in[1],
                         U2UG_PARAMS_rec_typ    u2ug_params[1],
                         ADDINFO_rec_typ      * addinfo[1],
                         OBJ_EXISTS_typ         objs_exist[1],
                         ADMIN_PARAMS_rec_typ * admin_params,
                         ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSGetConnsUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSGetResUnsup (GET_RESOURCE_MODE      mode,
                       OE_typ                 oe,
                       short                  max_ress,
                       short                * actual_num,
                       HAVE_MORE_typ        * have_more,
                       void                ** handle,
                       RES_PARAMS_rec_typ   * res_params_in,
                       ADDINFO_rec_typ      * addinfo_in,
                       RES_PARAMS_rec_typ     res_params[1],
                       ADDINFO_rec_typ      * addinfo_out[1],
                       ADMIN_PARAMS_rec_typ * admin_params,
                       ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSGetResUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
	*actual_num= 0;
	*have_more= NO_MORE;
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSGetResACLUnsup (GET_ACL_MODE            mode,
                          short                   max_aces,
                          short                 * actual_num,
                          HAVE_MORE_typ         * have_more,
                          void                 ** handle,
                          RES_PARAMS_rec_typ    * res_params,
                          ACE_rec_typ             ace_params[1],
                          ADDINFO_rec_typ       * addinfo[1],
                          ADMIN_PARAMS_rec_typ  * admin_params,
                          ERR_STRUCT_rec_typ    * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSGetResACLUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
	*actual_num= 0;
	*have_more= NO_MORE;
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
 
ESA_RC CTSRSSLoginUnsup (RSS_typ                rss_name,
                         USER_typ               admin,
                         UG_typ                 admin_group,
                         PASSWD_typ             admin_passwd,
                         LOGIN_MODE_typ         login_mode,
                         void                ** handle,
                         ADMIN_PARAMS_rec_typ * admin_params,
                         ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSRSSLoginUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSRSSLogoutUnsup (RSS_typ                rss_name,
                          USER_typ               admin,
                          UG_typ                 admin_group,
                          LOGIN_MODE_typ         login_mode,
                          void                ** handle,
                          ADMIN_PARAMS_rec_typ * admin_params,
                          ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSRSSLogoutUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSRSSCheckUnsup (RSS_typ                rss_name,
                         RSS_STATUS_typ       * status,
                         ADMIN_PARAMS_rec_typ * admin_params,
                         ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_OK;
    char            fn[]="CTSRSSCheckUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSInterceptorStartUnsup (RSS_typ                rss_name,
                                 char                 * host_name,
                                 ADMIN_PARAMS_rec_typ * admin_params,
                                 ERR_STRUCT_rec_typ   * err)
{
   ESA_RC          rc = ESA_OK;
    OS_pid_str_typ  PID;
    char            fn[]="CTSInterceptorStartUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
 
    ESA_DIAG_printf (ESA_COMP_ESAINIT, DIAG_BASIC,
           "...-> OS_PROC_run: PrmStr=%s exe=%s hndl=%p.",
		   rss_name, OFFLINE_EXE_NAME, admin_params->os_proc_handle);
    rc = OS_PROC_run (  OFFLINE_EXE_NAME,
                        NULL,
                        rss_name,
                        PID,
                        admin_params->os_proc_handle);
    ESA_DIAG_printf (ESA_COMP_ESAINIT, DIAG_BASIC,
     "...<- OS_PROC_run: rc=%d (%s) pid=%.*s.",
			rc, (rc EQ ESA_OK) ? "OS==OK" : "OS##OK",
			sizeof (OS_pid_str_typ), PID);
    if (rc EQ ESA_OK)
    {
        ESA_DIAG_printf (ESA_COMP_ESAINIT, 15, "Process %s started", PID);
    }
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
    return rc;
}
 
ESA_RC CTSAddOEUnsup (OE_PARAMS_rec_typ    * oe_params,
                      ADDINFO_rec_typ      * addinfo_data,
                      ADMIN_PARAMS_rec_typ * admin_params,
                      ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSAddOEUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSDelOEUnsup (OE_PARAMS_rec_typ    * oe_params,
                      ADDINFO_rec_typ      * addinfo_data,
                      ADMIN_PARAMS_rec_typ * admin_params,
                      ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSDelOEUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSUpdOEUnsup (OE_PARAMS_rec_typ    * oe_params,
                      ADDINFO_rec_typ      * addinfo_data,
                      ADMIN_PARAMS_rec_typ * admin_params,
                      ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSUpdOEUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSGetOEsUnsup (GET_OE_MODE            mode,
                       OE_typ                 oe,
                       short                  max_oe,
                       short                * actual_num,
                       HAVE_MORE_typ        * have_more,
                       void                ** handle,
                       short                  num_oe_in,
                       OE_PARAMS_rec_typ      oe_params_in[1],
                       OE_PARAMS_rec_typ      oe_params[1],
                       ADDINFO_rec_typ      * addinfo[1],
                       OBJ_EXISTS_typ         objs_exist[1],
                       ADMIN_PARAMS_rec_typ * admin_params,
                       ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSGetOEsUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
	*actual_num= 0;
	*have_more= NO_MORE;
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSIsUserInOEUnsup (USER_typ               user,
                           OE_typ                 oe_mask,
                           ADMIN_PARAMS_rec_typ * admin_params,
                           ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSIsUserInOEUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSIsUGInOEUnsup (UG_typ                 ug,
                         OE_typ                 oe_mask,
                         ADMIN_PARAMS_rec_typ * admin_params,
                         ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSIsUGInOEUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSIsOEInOEUnsup (OE_typ                 oe_name,
                         OE_typ                 oe,
                         ADMIN_PARAMS_rec_typ * admin_params,
                         ERR_STRUCT_rec_typ   * err)
{
    ESA_RC          rc= ESA_NOT_SUPP;
    char            fn[]="CTSIsOEInOEUnsup";
 
    ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
    ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
 
    return rc;
}
 
ESA_RC CTSIsMaskMatchUnsup (char                 *object,
                            char                 *mask,
                            OBJECT_TYPE_typ       object_type,
                            MASK_TYPE_typ         mask_type,
                            ADMIN_PARAMS_rec_typ *admin_params,
                            ERR_STRUCT_rec_typ   *err)
{
 
   ESA_RC          rc= ESA_OK;
   char            prm_value[RSSPRM_VALUE_LEN];
   USER_typ   tmp_object, tmp_mask;
   char            fn[]="CTSIsMaskMatchUnsup";
 
   ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
   rc= admin_params->cs_func.rssprm_get_opt_ptr (
                           admin_params->rss_name,
                           ADMIN_CASE_SENSITIVE,
                           1,
                           prm_value,
                           OPT_TRUE,
                           OPT_TRUE);
   if (rc NE ESA_OK)
   {
      strcpy (prm_value, ESS_YES_FLAG);
      rc= ESA_OK;
   }
 
 
   if (prm_value[0] EQ ESS_NOT_SIGN)
   {
      CSupper ((char *)object,
               (char *)tmp_object);
      CSupper ((char *)mask,
               (char *)tmp_mask);
   }
   else
   {
      strcpy (tmp_object, object);
      strcpy (tmp_mask,   mask);
   }
 
   switch ( mask_type )
   {
      case MASK_REGULAR :
         if ( strcmp(tmp_object, tmp_mask ) EQ 0 )
            rc = ESA_OK;
         else
            rc = ESA_EOF;
         break;
     /* Compare according wild mask */
     case MASK_WILD :
        if ( strlen(tmp_object) LT strlen(tmp_mask) )
           rc = ESA_EOF;
        else
        {
           if ( memcmp(tmp_object,
                tmp_mask,
                strlen(tmp_mask) ) EQ 0 )
              rc = ESA_OK;
           else
              rc = ESA_EOF;
        }
        break;
    default:
        rc = ESA_ERR;
   }
   ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
   return rc;
}
 
 
ESA_RC CTSTransactionEventUnsup  (INTERCEPT_obj_typ       object_type,
                                  OE_typ                  oe,
                                  USER_typ                user,
                                  UG_typ                  ug,
                                  TRNSEVNT_UPCON_FLAG_typ connflag,
                                  ADMIN_PARAMS_rec_typ  * admin_params,
                                  ERR_STRUCT_rec_typ    * err)
{
  ESA_RC                   rc= ESA_OK;
  char                     RssKwdValue[2];
  OS_OFLI_UPCON_FLAG_typ   conn_flag= OS_OFLI_UPDCONN_NO;
  char                     fn[]="CTSTransactionEventUnsup";
  ENVIRONMENT_rec_typ    * envir_ptr;
 
  CS_get_envir_address (&envir_ptr);
  ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
  ESA_DIAG_printf (ESA_COMP_ESAINIT, DIAG_BASIC,
	 "*****>... Start Offline Syncronization: RSS=%s %s ObjType=%d ConFlag=%s OE=%s Usr=%s UG=%s.",
	 admin_params->rss_name, admin_params->rss_type, (int)object_type,
	 (connflag EQ UPDCONN_NO) ? "UPDCONN_NO" : "UPDCONN_YES", oe, user, ug);
 
  rc= admin_params->cs_func.rssprm_get_opt_ptr (admin_params->rss_name,
         OFLI_INTERCEPT, 1, RssKwdValue, OPT_TRUE, OPT_TRUE);
  if (
        (rc NE ESA_OK)
       OR
        (RssKwdValue[0] EQ INTERCEPT_NOT_ACTIVE)
     )
     goto cleanup;
 
  admin_params->login_handle=envir_ptr->handle_def_login;/*BSAN101128*/
 
  if (connflag EQ UPDCONN_YES)
     conn_flag= OS_OFLI_UPDCONN_YES;
 
  if (object_type EQ INTERCEPT_CONTAINER)
  {
     ESA_DIAG_printf (ESA_COMP_ESAINIT, DIAG_OS,
    	 "Call to OS_OFLI_oe_upd (ObjType - INTERCEPT_CONTAINER).");
     rc= OS_OFLI_oe_upd (admin_params->rss_type, admin_params->rss_name,
                     oe, &FuncPtr, admin_params);
  }
  else if (object_type EQ INTERCEPT_USER)
  {
     ESA_DIAG_printf (ESA_COMP_ESAINIT, DIAG_OS,
    	 "Call to OS_OFLI_user_upd (ObjType - INTERCEPT_USER).");
     rc= OS_OFLI_user_upd (admin_params->rss_type, admin_params->rss_name,
                       user, conn_flag, &FuncPtr, admin_params);
  }
  else if (object_type EQ INTERCEPT_GROUP)
  {
     ESA_DIAG_printf (ESA_COMP_ESAINIT, DIAG_OS,
    	 "Call to OS_OFLI_ug_upd (ObjType - INTERCEPT_GROUP).");
     rc= OS_OFLI_ug_upd (admin_params->rss_type, admin_params->rss_name,
                     ug, conn_flag, &FuncPtr, admin_params);
  }
  else if (object_type EQ INTERCEPT_CONNECTION)
  {
     ESA_DIAG_printf (ESA_COMP_ESAINIT, DIAG_OS,
    	 "Call to OS_OFLI_conn_upd (ObjType - INTERCEPT_CONNECTION).");
     rc= OS_OFLI_conn_upd (admin_params->rss_type, admin_params->rss_name,
                       user, ug, &FuncPtr, admin_params);
  }
  else if (object_type EQ INTERCEPT_ALL)
  {
     ESA_DIAG_printf (ESA_COMP_ESAINIT, DIAG_OS,
    	 "Call to OS_OFLI_sync (ObjType - INTERCEPT_ALL).");
     OS_OFLI_sync (admin_params->rss_type, admin_params->rss_name,
                   &FuncPtr, admin_params);
  }
  else if (object_type EQ INTERCEPT_RSSPRM)
  {
     ESA_DIAG_printf (ESA_COMP_ESAINIT, DIAG_OS,
    	 "Call to OS_OFLI_rssprm_upd (ObjType - INTERCEPT_RSSPRM).");
     rc= OS_OFLI_rssprm_upd (admin_params->rss_type,admin_params->rss_name,
                         NULL, &FuncPtr, admin_params);
  }
  admin_params->login_handle= NULL;/*BSAN101128*/
 
cleanup:
  ESA_DIAG_printf (ESA_COMP_ESAINIT, DIAG_BASIC, "<*****... End Offline Syncronization");
  if (rc NE ESA_OK)
     ESA_DIAG_printf (ESA_COMP_ESAINIT, DIAG_OS,
	    "RSS=%s %s: Changes for OE=%s User=%s UG=%s didn't wrote to OSF files.",
	    admin_params->rss_name, admin_params->rss_type, oe, user, ug);
  ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, rc);
  return (ESA_OK);
 
}
 
/*
ESA_RC CTSAPILoadUnsup (RSS_typ        rss_name,
                                  FUNC_PTR_rec_typ     * func_ptr,
                                  RSS_LIMITS_rec_typ   * rss_limits_ptr,
                                  ADMIN_PARAMS_rec_typ * admin_params,
                                  ERR_STRUCT_rec_typ   * err)
{
   return ESA_NOT_SUPP;
}*/
 
/* ----------------------------------------------- */
/*                  Stub Usage                     */
/* ----------------------------------------------- */
 
void CS_attach_empty_to_unsupported (FUNC_PTR_rec_typ  * func_ptr)
{
   char fn[]="CS_attach_empty_to_unsupported";
 
   ESA_DIAG_enter  (ESA_COMP_ESAINIT, DIAG_COMMON, fn);
   if (NOT(func_ptr->apiversion_ptr))
       func_ptr->apiversion_ptr = &CTSVersionUnsup;
 
   if (NOT(func_ptr->apiinit_ptr))
       func_ptr->apiinit_ptr = &CTSAPIInitUnsup;
 
   if (NOT(func_ptr->apiterm_ptr))
       func_ptr->apiterm_ptr = &CTSAPITermUnsup;
 
   if (NOT(func_ptr->strsprm_ptr))
       func_ptr->strsprm_ptr = &CTSSetRSSParamsUnsup;
 
   if (NOT(func_ptr->adduser_ptr))
       func_ptr->adduser_ptr = &CTSAddUserUnsup;
 
   if (NOT(func_ptr->upduser_ptr))
       func_ptr->upduser_ptr = &CTSUpdUserUnsup;
 
   if (NOT(func_ptr->deluser_ptr))
       func_ptr->deluser_ptr = &CTSDelUserUnsup;
 
   if (NOT(func_ptr->revuser_ptr))
       func_ptr->revuser_ptr = &CTSRevokeUserUnsup;
 
   if (NOT(func_ptr->updpass_ptr))
       func_ptr->updpass_ptr = &CTSUpdPasswordUnsup;
 
   if (NOT(func_ptr->addug_ptr))
       func_ptr->addug_ptr = &CTSAddUGUnsup;
 
   if (NOT(func_ptr->updug_ptr))
       func_ptr->updug_ptr = &CTSUpdUGUnsup;
 
   if (NOT(func_ptr->delug_ptr))
       func_ptr->delug_ptr = &CTSDelUGUnsup;
 
   if (NOT(func_ptr->addu2ug_ptr))
       func_ptr->addu2ug_ptr = &CTSAddUserToUGUnsup;
 
   if (NOT(func_ptr->updu2ug_ptr))
       func_ptr->updu2ug_ptr = &CTSUpdUserToUGUnsup;
 
   if (NOT(func_ptr->delu2ug_ptr))
       func_ptr->delu2ug_ptr = &CTSDelUserFromUGUnsup;
 
   if (NOT(func_ptr->addace_ptr))
       func_ptr->addace_ptr = &CTSAddACEUnsup;
 
   if (NOT(func_ptr->delace_ptr))
       func_ptr->delace_ptr = &CTSDelACEUnsup;
 
   if (NOT(func_ptr->updace_ptr))
       func_ptr->updace_ptr = &CTSUpdACEUnsup;
 
   if (NOT(func_ptr->addres_ptr))
       func_ptr->addres_ptr = &CTSAddResUnsup;
 
   if (NOT(func_ptr->delres_ptr))
       func_ptr->delres_ptr = &CTSDelResUnsup;
 
   if (NOT(func_ptr->updres_ptr))
       func_ptr->updres_ptr = &CTSUpdResUnsup;
 
   if (NOT(func_ptr->gtrsprm_ptr))
       func_ptr->gtrsprm_ptr = &CTSGetRSSParamsUnsup;
 
   if (NOT(func_ptr->gtusers_ptr))
       func_ptr->gtusers_ptr = &CTSGetUsersUnsup;
 
   if (NOT(func_ptr->getugs_ptr))
       func_ptr->getugs_ptr = &CTSGetUGsUnsup;
 
   if (NOT(func_ptr->gtug2uc_ptr))
       func_ptr->gtug2uc_ptr = &CTSGetConnsUnsup;
 
   if (NOT(func_ptr->getres_ptr))
       func_ptr->getres_ptr = &CTSGetResUnsup;
 
   if (NOT(func_ptr->gtrsacl_ptr))
       func_ptr->gtrsacl_ptr = &CTSGetResACLUnsup;
 
   if (NOT(func_ptr->rss_login_ptr))
       func_ptr->rss_login_ptr = &CTSRSSLoginUnsup;
 
   if (NOT(func_ptr->rss_logout_ptr))
       func_ptr->rss_logout_ptr = &CTSRSSLogoutUnsup;
 
   if (NOT(func_ptr->rss_check_ptr))
       func_ptr->rss_check_ptr = &CTSRSSCheckUnsup;
 
   if (NOT(func_ptr->rss_start_intercept_ptr))
       func_ptr->rss_start_intercept_ptr = &CTSInterceptorStartUnsup;
 
   if (NOT(func_ptr->addoe_ptr))
       func_ptr->addoe_ptr = &CTSAddOEUnsup;
 
   if (NOT(func_ptr->updoe_ptr))
       func_ptr->updoe_ptr = &CTSUpdOEUnsup;
 
   if (NOT(func_ptr->deloe_ptr))
       func_ptr->deloe_ptr = &CTSDelOEUnsup;
 
   if (NOT(func_ptr->isuserinoe_ptr))
       func_ptr->isuserinoe_ptr = &CTSIsUserInOEUnsup;
 
   if (NOT(func_ptr->isuginoe_ptr))
       func_ptr->isuginoe_ptr = &CTSIsUGInOEUnsup;
 
   if (NOT(func_ptr->isoeinoe_ptr))
       func_ptr->isoeinoe_ptr = &CTSIsOEInOEUnsup;
 
   if (NOT(func_ptr->ismaskmatch_ptr))
       func_ptr->ismaskmatch_ptr = &CTSIsMaskMatchUnsup;
 
   if (NOT(func_ptr->getoes_ptr))
       func_ptr->getoes_ptr = &CTSGetOEsUnsup;
 
   if (NOT(func_ptr->trnsevnt_ptr))
       func_ptr->trnsevnt_ptr = &CTSTransactionEventUnsup;
 
 /*  if (NOT(apiload_func_ptr))
       apiload_func_ptr = &CTSAPILoadUnsup;*/
 
   memcpy (&FuncPtr , func_ptr , sizeof(FuncPtr));
 
  ESA_DIAG_exit   (ESA_COMP_ESAINIT, DIAG_COMMON, fn, ESA_RC_VOID);
} /* CS_attach_empty_to_unsupported */
 
 
