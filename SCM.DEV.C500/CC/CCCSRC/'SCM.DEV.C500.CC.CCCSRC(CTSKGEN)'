/****************************************************
* Title            : DES key generator for CONTROL-SA
* File Name        : ctskgen.c
* Author           : Avi W.
* Creation Date    : 21/11/1994
* Parameters       : The CTSKGEN utility requires the following
*                    parameters:
*                    1st parameter
*                    =============
*                    "SHOW"     - To display the contents of internal
*                                 or external file.
*                    "GENERATE" - Generate an automatic internal/
*                                 external random key.
*                    "SET"      - Set the value of the internal/
*                                 external key to the received value.
*                    2nd parameter
*                    =============
*                    "INT"    - To display/add internal DES key file.
*                    "EXT"    - To display/add external DES key file.
*                    3rd parameter - Valid only for "SET"
*                    ====================================
*                    The DES key represented by string of 16 hexa
*                    characters .
* Description      :
* Assumptions and
*   Considerations :
* $Author:   ajk  $
* $Workfile:   ctskgen.c  $
* $Revision:   1.6  $
* $Log:   L:/UTILS/src/ctskgen.c_v  $
 *
 *    Rev 1.6   Aug 17 1998 11:52:28   ajk
 * Fixed SCCSID for Unix 'what' command
 *
 *    Rev 1.5   Aug 04 1998 14:45:32   leonid_s
 *
 *
 *    Rev 1.4   Apr 20 1998 14:23:20   leonid_s
 *
 *
 *    Rev 1.3   Jan 21 1998 18:57:58   leonid_s
 * 300-Beta with AS400 & VMS changes
 *
 *    Rev 1.2   Jul 24 1997 08:48:08   leonid_s
 *     SCCSID("%Z%%M% \
 *
 *
 *    Rev 1.1   Jul 08 1997 18:35:32   avi_w
 *
*****************************************************/
 
/********************************************************************
* Mod.ID  Who            When         Description
* ===================================================================
* IMH001  Ian H.   17/9/03      Add support for CheckAndPrintVersion
* IMH002  Ian H.   16/11/03     Thread-safe code (ERRNO)
* SAS2IBMT SeligT  30/06/16     SAS/C to IBM C Conversion Project
********************************************************************/
#define     THIS_IS_MAIN
#include    "globs.h"
 
#include        ERRNO   /* IMH002 */
#include        STDIO
#include        STDLIB
#include        STRING
#include        CTYPE
 
#include        ENC_API
#include        AR_DES
 
#include        ESA_INIT
 
#include        ESA_CTSAMSG
#include        ESA_DIAG
#include        ESA_API_CODES
#include        ESA_VER
 
    SCCSID("@(#) ctskgen.c \
$Revision:   1.6  $\
$Date:   Aug 17 1998 11:52:28  $\
$Author:   ajk  $")
 
 
/****************************************************
 * main
 ***************************************************/
 
int main (int argc, char **argv)
{
  ESA_RC                 rc, result;
  ENC_BOOLEAN            internal, add_key;
  ENC_BOOLEAN            manual = ENC_TRUE;   /* AJK001 */
  char                   destr[17], chk;
  int                    num_keys;
  FILE                  *kf;
  char                  *fname;
  UNSBYTE                weak_rand_buf[ENC_MAX_RAND_BUF_LEN];
  int                    rand_len, i;
  char                   ddn_with[12]="";                 /* SAS2IBMT */
  ENC_STRNG_RNDBUF_typ   strong_rand_buf;
  ENVIRONMENT_rec_typ   * envir_ptr;
 
  result = ESA_ERR;
  rc = CG_prolog (ESA_KGEN_PROC, argc, argv);
 
  CS_get_envir_address (&envir_ptr);
 
  if (rc NE ESA_OK)  {
     printf ("\nCG_prolog failed - cannot load parameters !\n");
     goto exit;
  }
 
/* IMH001 start */
 
   rc = CheckAndPrintVersion (argc, argv);
   if (rc EQ ESA_OK)
   {
       result = ESA_OK;
       goto exit;
   }
 
    rc = ESA_OK;
/* IMH001 end */
 
  CTSAMSG_print (MSG_ENC_STARTED,
                 envir_ptr->ctsamsg_handle,
                 NULL,
                 envir_ptr->ctsamsg_dest,
                 (argc GE 2) ? argv[1] : "?",
                 (argc GE 3) ? argv[2] : "?",
                 (argc GE 4) ? "*******" : "?" );
 
  if (argc LT 2)
  {
     CTSAMSG_print (ERR_ENC_INVL_PRM,
                    envir_ptr->ctsamsg_handle,
                    NULL,
                    envir_ptr->ctsamsg_dest,
                    1,
                    "SHOW/GENERATE/SET");
     goto exit;
  }
 
  add_key = ENC_TRUE;
 
  if (strcmp("SHOW", argv[1]) EQ 0)
    add_key = ENC_FALSE;
 else
  if (strcmp ("GENERATE", argv[1]) EQ 0)
    manual = ENC_FALSE;
 else
  if (strcmp ("SET", argv[1]) EQ 0)
    manual = ENC_TRUE;
 else
  {
     CTSAMSG_print (ERR_ENC_INVL_PRM,
                    envir_ptr->ctsamsg_handle,
                    NULL,
                    envir_ptr->ctsamsg_dest,
                    1,
                    "SHOW/GENERATE/SET");
 
    goto exit;
  }
 
  if (argc LT 3)
  {
     CTSAMSG_print (ERR_ENC_INVL_PRM,
                    envir_ptr->ctsamsg_handle,
                    NULL,
                    envir_ptr->ctsamsg_dest,
                    2,
                    "EXT/INT");
     goto exit;
  }
 
  if (strcmp ("INT", argv[2]) EQ 0)
  {
     internal = ENC_TRUE;
     fname = envir_ptr->file_encrint;
     if (strlen (fname) EQ 0)
     {
        CTSAMSG_print (ERR_ENC_NODESFILE,
                       envir_ptr->ctsamsg_handle,
                       NULL,
                       envir_ptr->ctsamsg_dest,
                       "INTERNAL");
        goto exit;
     }
  }
 
  else
 
  if (strcmp ("EXT", argv[2]) EQ 0)
  {
    internal = ENC_FALSE;
    fname = envir_ptr->file_encrext;
    if (strlen (fname) EQ 0)
    {
        CTSAMSG_print (ERR_ENC_NODESFILE,
                       envir_ptr->ctsamsg_handle,
                       NULL,
                       envir_ptr->ctsamsg_dest,
                       "EXTERNAL");
        goto exit;
    }
  }
 else
  {
        CTSAMSG_print (ERR_ENC_INVL_PRM,
                       envir_ptr->ctsamsg_handle,
                       NULL,
                       envir_ptr->ctsamsg_dest,
                       2,
                       "INT/EXT");
        goto exit;
  }
 
  if (add_key EQ ENC_TRUE)
  {
     if (manual EQ ENC_TRUE)
     {
        if (argc LT 4)
        {
           CTSAMSG_print (ERR_ENC_NOMANKEY,
                          envir_ptr->ctsamsg_handle,
                          NULL,
                          envir_ptr->ctsamsg_dest);
           goto exit;
        }
 
        if (strlen (argv[3]) NE 16)
        {
           CTSAMSG_print (ERR_ENC_INVL_KEY,
                          envir_ptr->ctsamsg_handle,
                          NULL,
                          envir_ptr->ctsamsg_dest);
           goto exit;
        }
 
        for (i = 0; i LT 16; i++)
        {
           chk = argv[3][i];
           if (isxdigit(chk) EQ 0)
           {
              CTSAMSG_print (ERR_ENC_INVL_KEY,
                             envir_ptr->ctsamsg_handle,
                             NULL,
                             envir_ptr->ctsamsg_dest);
              goto exit;
           }
           destr[i] = toupper (argv[3][i]);
        }
 
     } /* END - MANUAL key */
    else
     {
        ENC_gtrnd (ENC_MIN_RAND_BUF_LEN,
                   ENC_MAX_RAND_BUF_LEN,
                   weak_rand_buf,
                   &rand_len,
                   ENC_FALSE);
 
        AR_make_random (weak_rand_buf,
                        rand_len,
                        strong_rand_buf);
        strcpy (destr, "");
 
        for (i = 0; i LT 8; i++)
           sprintf (destr, "%s%02X", destr, strong_rand_buf[i]);
 
     } /* END - AUTOMATIC KEY */
 
     strcpy(ddn_with,"DD:");                              /* SAS2IBMT */
     strcat(ddn_with, fname);                             /* SAS2IBMT */
 
     /* SAS2IBMT kf = fopen (fname, "w");                            */
     kf = fopen (ddn_with, "w,recfm=*");                  /* SAS2IBMT */
     if (kf EQ NULL)
     {
        CTSAMSG_print (ERR_FILE,
                       envir_ptr->ctsamsg_handle,
                       NULL,
                       envir_ptr->ctsamsg_dest,
                       "open",
                       "DES Key",
                       fname,
                       strerror(errno));
        goto exit;
     }
 
     num_keys = fwrite (destr,
                        16,
                        1,
                        kf);
 
     rc = fclose (kf);
     if (num_keys NE 1)
     {
        CTSAMSG_print (ERR_FILE,
                       envir_ptr->ctsamsg_handle,
                       NULL,
                       envir_ptr->ctsamsg_dest,
                       "write",
                       "DES Key",
                       fname,
                       strerror(errno));
        goto exit;
     }
 
     result = ESA_OK;
     goto exit;
 
  } /* END - add key */
 
  strcpy(ddn_with,"DD:");                                 /* SAS2IBMT */
  strcat(ddn_with, fname);                                /* SAS2IBMT */
 
  /* SAS2IBMT kf = fopen (fname, "r");                               */
  kf = fopen (ddn_with, "r");                             /* SAS2IBMT */
 
  if (kf EQ NULL)
  {
     CTSAMSG_print (ERR_FILE,
                    envir_ptr->ctsamsg_handle,
                    NULL,
                    envir_ptr->ctsamsg_dest,
                    "open",
                    "DES Key",
                    fname,
                    strerror(errno));
     goto exit;
  }
 
  num_keys = fread  (destr,
                     16,
                     1,
                     kf);
 
  rc = fclose (kf);
  if (num_keys NE 1)
  {
     CTSAMSG_print (ERR_FILE,
                    envir_ptr->ctsamsg_handle,
                    NULL,
                    envir_ptr->ctsamsg_dest,
                    "read",
                    "DES Key",
                    fname,
                    strerror(errno));
     goto exit;
  }
 
  printf ("\nThe DES key is : %.16s\n", destr);
  result = ESA_OK;
 
 exit:
 
  CG_epilog (result, 0);
 
  return ((result EQ ESA_OK) ? PLAT_OK_STAT : PLAT_FAIL_STAT);
 
}  /* END - ctskgen */
