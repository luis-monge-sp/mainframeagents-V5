/***********************************************************************
 * Mod.ID   Who     When         Description
 * =====================================================================
 * SAS2IBMT SeligT  16/11/16     SAS/C to IBM C Conversion Project and
 *                               re-design / re-write of BATxxxx rtns
 * BS10062  SeligT  30/08/17     Handle storage allocation errors -
 *                               compile only
 * IS10156  SeligT  13/09/17     Allocate ADDINFO Size Correctly
 * IS10157  SeligT  17/09/17     Allocate Several Arrays Correctly
 **********************************************************************/
#include "globs.h"
 
#include STDIO
#include STRING
#include STDLIB
 
#include ESA_API
#include ESA_ADMIN
#include ESA_CS_SINFO
#include ESA_INIT
#include ENC_API
 
#include "batutls.h"
 
static ESA_RC  rc1;
 
static const char dot [] = ".";
 
/****************************************************
 * Procedure Name: adduser_rtn
 * Description   : Process the :ADDUSER request.
 *               : Some details:
 *               :
 *               : We call the rpl_addinfo_loop routine to process
 *               : the RPL and addinfo lines.  When we return from the
 *               : routine (if there was no error) we prepare and call
 *               : the USA-API.  Then we leave this routine and we go
 *               : back up to req_rtn and we go back up to the main
 *               : loop.
 * Input         : array of request details
 * Output        : none
 * Input/Output  :
 * Return Value  : ESA_OK or ESA_FATAL
 * Side Effects  :
 * Scope         : Internal To API Test Program
 ***************************************************/
 
   ESA_RC adduser_rtn (void) {
   ESA_RC                rc = ESA_OK;
   int                   opt, maxi;
   int                   keep_on_looping = 1;
   ADDINFO_rec_typ     * aip = NULL;
   USER_PARAMS_rec_typ   user_params = {"", "", "", "",
                                        PASS_LIFE_IGNORED,
                                        USER_STAT_IGNORED,
                                        USER_ADM_IGNORED,
                                        OLD_DEF_UG_ACT_IGNORED};
   static char         func [] = "BATUSER_adduser_rtn";
 
   ESA_DIAG_enter(ESA_COMP_BATCH, 1, func);
 
   printf (":ADDUSER:\n");
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call rpl_addinfo_loop routine");
 
   rc = rpl_addinfo_loop();
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "rc from rpl_addinfo_loop routine = %d", rc);
 
   if (rc EQ ESA_FATAL) return rc;
 
   aip = NULL;
 
   strcpy (user_params.user, req->userid);
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call utl_obtain_addinfo_pairs routine");
 
   /* IS10156 remove first parameter of the following routine
   rc = utl_obtain_addinfo_pairs (MAX_KWDS, &aip, &maxi,             */
   rc = utl_obtain_addinfo_pairs (&aip, &maxi,
                                  in_kwd, in_val, in_i);
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "rc from utl_obtain_addinfo_pairs routine = %d", rc);
 
   if (rc EQ ESA_FATAL) return rc;
 
   /* Get the default group of the user */
 
   strcpy (user_params.def_group, req->dflt_grpname);
 
   /* Get the password */
 
   if (req->password) strcpy (user_params.passwd, req->password);
   else               strcpy (user_params.passwd, BACKSLASH_STR);
 
#ifdef NEED_PASSWD_LIFE
 
   user_params.passwd_life = req->passwd_life;
 
#else
 
   user_params.passwd_life = PASS_LIFE_PERMANENT;
 
#endif /* NEED_PASSWD_LIFE */
 
   user_params.rev_status = req->rev_status_dis;
 
   user_params.user_admin = req->user_admin;
 
   if (memcmp (xrss_type, "TSS", 3) EQ 0)
      strcpy (user_params.parent_oe, req->par_oe);
 
   printf (" User     : %s\n", user_params.user);
   printf (" Group    : %s\n", user_params.def_group);
   printf (" Password : %s\n", user_params.passwd);
   printf (" Status   : %s\n",
            user_stat_2_string (user_params.rev_status));
   printf (" Authority: %s\n",
            user_auth_2_str (user_params.user_admin));
   printf (" Password\n  life     : %s\n",
            pwd_stat_2_str (user_params.passwd_life));
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call utl_dump_addinfo routine");
 
   utl_dump_addinfo (aip);
 
   API_PROLOG;
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call USA-API adduser routine");
 
   rc = (*func_struct.adduser_ptr) (&user_params,
                                    aip,
                                    admin_ptr, err_ptr);
 
   API_EPILOG;
 
   CK_RC(rc, ":ADDUSER");
 
   if (aip)
      free (aip);
 
   PR_MSG(rc);
 
   CLEAN_ERR;
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to leave adduser_rtn with %d", rc);
 
   ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, rc);
 
   return rc;
 
   } /* adduser_rtn */
 
 
 
/****************************************************
 * Procedure Name: upduser_rtn
 * Description   : Process the :UPDUSER request.
 *               : Some details:
 *               :
 *               : We call the rpl_addinfo_loop routine to process
 *               : the RPL and addinfo lines.  When we return from the
 *               : routine (if there was no error) we prepare and call
 *               : the USA-API.  Then we leave this routine and we go
 *               : back up to req_rtn and we go back up to the main
 *               : loop.
 * Input         : array of request details
 * Output        : none
 * Input/Output  :
 * Return Value  : ESA_OK or ESA_FATAL
 * Side Effects  :
 * Scope         : Internal To API Test Program
 ***************************************************/
 
   ESA_RC upduser_rtn (void) {
   ESA_RC                rc = ESA_OK;
   int                   opt, maxi;
   int                   keep_on_looping = 1;
   ADDINFO_rec_typ     * aip = NULL;
   USER_PARAMS_rec_typ   user_params = {"", "", "", "",
                                        PASS_LIFE_IGNORED,
                                        USER_STAT_IGNORED,
                                        USER_ADM_IGNORED,
                                        OLD_DEF_UG_ACT_IGNORED};
   static char         func [] = "BATUSER_upduser_rtn";
 
   ESA_DIAG_enter(ESA_COMP_BATCH, 1, func);
 
   printf (":UPDUSER:\n");
 
   rc = rpl_addinfo_loop();
 
   if (rc EQ ESA_FATAL) return rc;
 
   aip = NULL;
 
   strcpy (user_params.user, req->userid);
 
   /* IS10156 remove first parameter of the following routine
   rc = utl_obtain_addinfo_pairs (MAX_KWDS, &aip, &maxi,             */
   rc = utl_obtain_addinfo_pairs (&aip, &maxi,
                                  in_kwd, in_val, in_i);
 
   /* Get the default group of the user - if it was specified */
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "The value of req->dflt_grpname in upduser_rtn = %s",
                   req->dflt_grpname);
 
   if (strcmp(req->dflt_grpname, NULL_CHAR) EQ 0) {
      strcpy (user_params.def_group, BACKSLASH_STR);
      ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                      "Setting user_params.def_group to backslash");
   }
   else {
      strcpy (user_params.def_group, req->dflt_grpname);
      ESA_DIAG_printf(ESA_COMP_BATCH, 1,
          "Copying req->dflt_grpname to user_params.def_group");
   }
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
       "The value of user_params.def_group in upduser_rtn = %s",
       user_params.def_group);
 
   /* Get the password - if it was specified */
 
   if (strcmp (req->password, "-") EQ 0)
      user_params.passwd[0] = NULL_CHAR;  /* if dash, clear it */
   else if (strcmp (req->password, NULL_CHAR) EQ 0)
      strcpy (user_params.passwd, BACKSLASH_STR);  /* leave as-is */
   else strcpy (user_params.passwd, req->password);
 
#ifdef NEED_PASSWD_LIFE
 
   if (req->passwd_life NE PASS_LIFE_IGNORED)
      user_params.passwd_life = req->passwd_life;
 
#else
 
   user_params.passwd_life = PASS_LIFE_PERMANENT;
 
#endif /* NEED_PASSWD_LIFE */
 
   if (req->rev_status_dis NE USER_STAT_IGNORED)
      user_params.rev_status = req->rev_status_dis;
 
   if (req->rev_status_ena NE USER_STAT_IGNORED)
      user_params.rev_status = req->rev_status_ena;
 
   if (req->user_admin NE USER_ADM_IGNORED)
      user_params.user_admin = req->user_admin;
 
   if (req->drop_keepold) {
      if (strcmp (req->drop_keepold, "DROPOLD") EQ 0)
         user_params.def_ug_action = OLD_DEF_UG_ACT_DROP;
      else if (strcmp (req->drop_keepold, "KEEPOLD") EQ 0)
         user_params.def_ug_action = OLD_DEF_UG_ACT_KEEP;
   }
   else user_params.def_ug_action = OLD_DEF_UG_ACT_IGNORED;
 
   if (memcmp (xrss_type, "TSS", 3) EQ 0)
      if (req->par_oe)
         strcpy (user_params.parent_oe, req->par_oe);
 
   printf (" User     : %s\n", user_params.user);
   printf (" Group    : %s\n", user_params.def_group);
   printf (" Password : %s\n", user_params.passwd);
   printf (" Status   : %s\n",
            user_stat_2_string (user_params.rev_status));
   printf (" Authority: %s\n",
            user_auth_2_str (user_params.user_admin));
   printf (" Password\n  life     : %s\n",
            pwd_stat_2_str (user_params.passwd_life));
   printf (" Old Def UG Action: %s\n",
            defug_act_2_str (user_params.def_ug_action));
 
   utl_dump_addinfo (aip);
 
   API_PROLOG;
 
   rc = (*func_struct.upduser_ptr) (&user_params,
                                    aip,
                                    admin_ptr, err_ptr);
 
   API_EPILOG;
 
   CK_RC(rc, ":UPDUSER");
 
   if (aip)
      free (aip);
 
   PR_MSG(rc);
 
   CLEAN_ERR;
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to leave upduser_rtn with %d", rc);
 
   ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, rc);
 
   return rc;
 
   } /* upduser_rtn */
 
 
 
/****************************************************
 * Procedure Name: deluser_rtn
 * Description   : Process the :DELUSER request.
 *               : Some details:
 *               :
 *               : We call the rpl_addinfo_loop routine to process
 *               : the RPL and addinfo lines.  When we return from the
 *               : routine (if there was no error) we prepare and call
 *               : the USA-API.  Then we leave this routine and we go
 *               : back up to req_rtn and we go back up to the main
 *               : loop.
 * Input         : array of request details
 * Output        : none
 * Input/Output  :
 * Return Value  : ESA_OK or ESA_FATAL
 * Side Effects  :
 * Scope         : Internal To API Test Program
 ***************************************************/
 
   ESA_RC deluser_rtn (void) {
   ESA_RC                rc = ESA_OK;
   int                   opt, maxi;
   int                   keep_on_looping = 1;
   ADDINFO_rec_typ     * aip = NULL;
   USER_PARAMS_rec_typ   user_params = {"", "", "", "",
                                        PASS_LIFE_IGNORED,
                                        USER_STAT_IGNORED,
                                        USER_ADM_IGNORED,
                                        OLD_DEF_UG_ACT_IGNORED};
   static char         func [] = "BATUSER_deluser_rtn";
 
   ESA_DIAG_enter(ESA_COMP_BATCH, 1, func);
 
   printf (":DELUSER:\n");
 
   rc = rpl_addinfo_loop();
 
   if (rc EQ ESA_FATAL) return rc;
 
   aip = NULL;
 
   strcpy (user_params.user, req->userid);
 
#ifdef USER_OPS_NEED_ADDINFO
 
   /* IS10156 remove first parameter of the following routine
   rc = utl_obtain_addinfo_pairs (MAX_KWDS, &aip, &maxi,             */
   rc = utl_obtain_addinfo_pairs (&aip, &maxi,
                                  in_kwd, in_val, in_i);
 
#else
 
   ALLOC_DUMMY_ADDINFO(aip);
 
#endif
 
   printf (" User    : %s\n", user_params.user);
 
#ifdef USER_OPS_NEED_ADDINFO
 
   utl_dump_addinfo (aip);
 
#endif
 
   API_PROLOG;
 
   rc = (*func_struct.deluser_ptr) (&user_params,
                                    aip,
                                    admin_ptr,
                                    err_ptr);
 
   API_EPILOG;
 
   CK_RC(rc, ":DELUSER");
 
   if (aip)
      free (aip);
 
   PR_MSG(rc);
 
   CLEAN_ERR;
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to leave deluser_rtn with %d", rc);
 
   ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, rc);
   return rc;
 
   } /* deluser_rtn */
 
 
 
/****************************************************
 * Procedure Name: disableuser_rtn
 * Description   : Process the :DISABLEUSER request.
 *               : Some details:
 *               :
 *               : We call the rpl_addinfo_loop routine to process
 *               : the RPL and addinfo lines.  When we return from the
 *               : routine (if there was no error) we prepare and call
 *               : the USA-API.  Then we leave this routine and we go
 *               : back up to req_rtn and we go back up to the main
 *               : loop.
 * Input         : array of request details
 * Output        : none
 * Input/Output  :
 * Return Value  : ESA_OK or ESA_FATAL
 * Side Effects  :
 * Scope         : Internal To API Test Program
 ***************************************************/
 
   ESA_RC disableuser_rtn (void) {
   ESA_RC                rc = ESA_OK;
   int                   opt, maxi;
   int                   keep_on_looping = 1;
   ADDINFO_rec_typ     * aip = NULL;
   USER_PARAMS_rec_typ   user_params = {"", "", "", "",
                                        PASS_LIFE_IGNORED,
                                        USER_STAT_IGNORED,
                                        USER_ADM_IGNORED,
                                        OLD_DEF_UG_ACT_IGNORED};
   static char         func [] = "BATUSER_disableuser_rtn";
 
   ESA_DIAG_enter(ESA_COMP_BATCH, 1, func);
 
   printf (":DISABLEUSER:\n");
 
   rc = rpl_addinfo_loop();
 
   if (rc EQ ESA_FATAL) return rc;
 
   aip = NULL;
 
   strcpy (user_params.user, req->userid);
 
   user_params.rev_status = USER_STAT_REVOKED;
 
#ifdef USER_OPS_NEED_ADDINFO
 
   /* IS10156 remove first parameter of the following routine
   rc = utl_obtain_addinfo_pairs (MAX_KWDS, &aip, &maxi,             */
   rc = utl_obtain_addinfo_pairs (&aip, &maxi,
                                  in_kwd, in_val, in_i);
 
#else
 
   ALLOC_DUMMY_ADDINFO(aip);
 
#endif
 
   printf (" User    : %s\n", user_params.user);
 
#ifdef USER_OPS_NEED_ADDINFO
 
/* utl_dump_addinfo (aip); */
 
#endif
   API_PROLOG;
 
   rc = (*func_struct.revuser_ptr) (&user_params,
                                    aip,
                                    admin_ptr,
                                    err_ptr);
 
   API_EPILOG;
 
   CK_RC (rc, ":DISABLEUSER");
 
   if (aip)
      free (aip);
 
   PR_MSG(rc);
 
   CLEAN_ERR;
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to leave disableuser_rtn with %d", rc);
 
   ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, rc);
 
   return rc;
 
   } /* disableuser_rtn */
 
 
 
/****************************************************
 * Procedure Name: enableuser_rtn
 * Description   : Process the :ENABLEUSER request.
 *               : Some details:
 *               :
 *               : We call the rpl_addinfo_loop routine to process
 *               : the RPL and addinfo lines.  When we return from the
 *               : routine (if there was no error) we prepare and call
 *               : the USA-API.  Then we leave this routine and we go
 *               : back up to req_rtn and we go back up to the main
 *               : loop.
 * Input         : array of request details
 * Output        : none
 * Input/Output  :
 * Return Value  : ESA_OK or ESA_FATAL
 * Side Effects  :
 * Scope         : Internal To API Test Program
 ***************************************************/
 
   ESA_RC enableuser_rtn (void) {
   ESA_RC                rc = ESA_OK;
   int                   opt, maxi;
   int                   keep_on_looping = 1;
   ADDINFO_rec_typ     * aip = NULL;
   USER_PARAMS_rec_typ   user_params = {"", "", "", "",
                                        PASS_LIFE_IGNORED,
                                        USER_STAT_IGNORED,
                                        USER_ADM_IGNORED,
                                        OLD_DEF_UG_ACT_IGNORED};
   static char         func [] = "BATUSER_enableuser_rtn";
 
   ESA_DIAG_enter(ESA_COMP_BATCH, 1, func);
 
   printf (":ENABLEUSER:\n");
 
   rc = rpl_addinfo_loop();
 
   if (rc EQ ESA_FATAL) return rc;
 
   aip = NULL;
 
   strcpy (user_params.user, req->userid);
 
#ifdef RESTORE_NEEDS_PASSWORD
 
   if (req->password) strcpy (user_params.passwd, req->password);
   else               strcpy (user_params.passwd, BACKSLASH_STR);
 
#else
 
   strcpy (user_params.passwd, BACKSLASH_STR);  /* ignore */
 
#endif
 
#ifdef USER_OPS_NEED_ADDINFO
 
   /* IS10156 remove first parameter of the following routine
   rc = utl_obtain_addinfo_pairs (MAX_KWDS, &aip, &maxi,             */
   rc = utl_obtain_addinfo_pairs (&aip, &maxi,
                                  in_kwd, in_val, in_i);
 
#else
 
   ALLOC_DUMMY_ADDINFO(aip);
 
#endif
 
   user_params.rev_status = USER_STAT_ACTIVE;
 
   printf (" User    : %s\n", user_params.user);
   printf (" Password: %s\n", user_params.passwd);
 
#ifdef USER_OPS_NEED_ADDINFO
 
/* utl_dump_addinfo (aip); */
 
#endif
 
   API_PROLOG;
 
   rc = (*func_struct.revuser_ptr) (&user_params,
                                    aip,
                                    admin_ptr,
                                    err_ptr);
 
   API_EPILOG;
 
   CK_RC(rc, ":ENABLEUSER");
 
   if (aip)
      free (aip);
 
   PR_MSG(rc);
 
   CLEAN_ERR;
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to leave enableuser_rtn with %d", rc);
 
   ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, rc);
 
   return rc;
 
   } /* enableuser_rtn */
 
 
 
/****************************************************
 * Procedure Name: chgpwd_rtn
 * Description   : Process the :CHGPWD request.
 *               : Some details:
 *               :
 *               : We call the rpl_addinfo_loop routine to process
 *               : the RPL and addinfo lines.  When we return from the
 *               : routine (if there was no error) we prepare and call
 *               : the USA-API.  Then we leave this routine and we go
 *               : back up to req_rtn and we go back up to the main
 *               : loop.
 * Input         : array of request details
 * Output        : none
 * Input/Output  :
 * Return Value  : ESA_OK or ESA_FATAL
 * Side Effects  :
 * Scope         : Internal To API Test Program
 * Notes         : In order to understand how the password life,
 *               : EXPIRED, and NOEXPIRED parameters interact and
 *               : affect the RACF command syntax, the following logic
 *               : is used in CTSRUPS:
 *               : if password_life is set to PERM, noexpired=RACF_YES
 *               : else,                            noexpired=RACF_NO
 *               : if EXPIRED ADDINFO exists and it's Y,
 *               :                                  noexpired=RACF_NO
 *               : if NOEXPIRED ADDINFO exists and it's Y,
 *               :                                  noexpired=RACF_YES
 *               : if noexpired=RACF_NO, call chg_pass_temp routine
 * RCF_EXPIRE_   : else, get RCF_EXPIRE_PASSCHG parameter from RSSPARMs
 * PASSCHG should:       if it's Y, call chg_pass_expireset routine
 * be set to N-->:       else, call chg_pass_perm26 routine
 ***************************************************/
 
   ESA_RC chgpwd_rtn (void) {
   ESA_RC                rc = ESA_OK;
   int                   maxi;
   char                  temp [32];
   USER_PARAMS_rec_typ   user_params;
   ADDINFO_rec_typ     * aip = NULL;
   static char         func [] = "BATUSER_chgpwd_rtn";
 
#ifdef NEED_PASSWD_LIFE
   int                   xt;
#endif
 
   ESA_DIAG_enter(ESA_COMP_BATCH, 1, func);
 
   printf (":CHGPWD:\n");
 
   rc = rpl_addinfo_loop();
 
   if (rc EQ ESA_FATAL) return rc;
 
   strcpy (user_params.user, req->userid);
 
   strcpy (user_params.def_group, BACKSLASH_STR);
   user_params.rev_status    = USER_STAT_IGNORED;
   user_params.user_admin    = USER_ADM_IGNORED;
   user_params.def_ug_action = OLD_DEF_UG_ACT_IGNORED;
 
   if (strcmp (req->password, "-") EQ 0)
      user_params.passwd[0] = NULL_CHAR; /* if dash, clear it */
   else strcpy (user_params.passwd, req->password);
 
#ifdef NEED_PASSWD_LIFE
   user_params.passwd_life = req->passwd_life;
#else
   user_params.passwd_life = PASS_LIFE_PERMANENT;
#endif /* NEED_PASSWD_LIFE */
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call utl_obtain_addinfo_pairs routine");
 
   /* IS10156 remove first parameter of the following routine
   rc = utl_obtain_addinfo_pairs (MAX_KWDS, &aip, &maxi,             */
   rc = utl_obtain_addinfo_pairs (&aip, &maxi,
                                  in_kwd, in_val, in_i);
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "rc from utl_obtain_addinfo_pairs routine = %d", rc);
 
   if (rc EQ ESA_FATAL) return rc;
 
   printf (" User     : %s\n", user_params.user);
   printf (" Password : %s\n", user_params.passwd);
   printf (" Password\n  life     : %s\n",
            pwd_stat_2_str (user_params.passwd_life));
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "about to call utl_dump_addinfo routine");
 
   utl_dump_addinfo (aip);
 
   API_PROLOG;
 
   rc = (*func_struct.updpass_ptr) (&user_params,
                                    aip,
                                    admin_ptr,
                                    err_ptr);
 
   API_EPILOG;
 
   CK_RC (rc, ":CHGPWD");
 
   PR_MSG (rc);
 
   CLEAN_ERR;
 
   if (aip)
      free (aip);
 
   ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, rc);
 
   return rc;
   }
 
 
 
 
 
   ESA_RC unlockuser_rtn (void) {
   ESA_RC                rc = ESA_OK;
   printf (":UNLOCKUSER:\n");
   } /* unlockuser_rtn */
 
 
 
 
 
