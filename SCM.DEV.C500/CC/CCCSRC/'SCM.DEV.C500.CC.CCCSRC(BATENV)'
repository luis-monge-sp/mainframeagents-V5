/****************************************************
 * Title           : API test - local EECS stuff
 * File Name       : batenv.c
 * Author          : AJK
 * Creation Date   : 29-May-94
 * Description     : Local EECS functions for API test program
 * Assumptions and
 *   Considerations:
* $Author:   amir  $
* $Workfile:   BATENV.C  $
* $Revision:   1.12  $
* $Log:   /mnt/eagle1/300/TEST/src/batenv.c_v  $
 *
 *    Rev 1.12   08 Jun 1999 17:42:46   amir
 * Cosmetics
 *
 *    Rev 1.11   08 Jun 1999 17:36:20   amir
 * Added OS_CS_term, added Tandem support
 *
 *    Rev 1.10   Aug 17 1998 11:52:16   ajk
 * Fixed SCCSID for Unix 'what' command
 *
 *    Rev 1.9   Aug 04 1998 14:46:00   leonid_s
 *
 *    Rev 1.8   Jul 26 1998 13:31:28   leonid_s
 * attach_handle= NULL
 *
 *    Rev 1.7   Apr 20 1998 15:57:14   ajk
 * removed TABs
 *
 *    Rev 1.6   Apr 20 1998 14:22:20   leonid_s
 *
 *
 *    Rev 1.5   Jul 24 1997 11:36:48   leonid_s
 *
 *    Rev 1.4   Jul 24 1997 09:00:18   leonid_s
 *     SCCSID("%Z%%M% \
 *
 *    Rev 1.2   Jul 15 1997 14:33:00   leonid_s
 *
 *  BSAN101379 - fix passing of CTSAMSG handle
 *
 *****************************************************/
/***********************************************************************
 * Mod.ID   Who     When         Description
 * =====================================================================
 * SAS2IBMT SeligT  16/11/16     SAS/C to IBM C Conversion Project and
 *                               re-design / re-write of BATxxxx rtns
 * BS10062 SeligT   30/08/17     Handle storage allocation errors
 * BS10067 SeligT   25/09/17     Change Batch Utility Message Hdr/Ftr:
 *                               recompile only
 **********************************************************************/
 
#include "globs.h"
 
#include STDIO
#include STRING
 
#include ESA_API
#include ESA_INIT
#include ESA_CS_OS
 
#include "batutls.h"
 
 
static int isPrologDone = FALSE; /* SS */
 
#if defined (NEED_OS_CS_INIT)
static int          isOSCSDone   = FALSE; /* Amir */
static void       * os_cs_handle = NULL;  /* Alex/Amir */
static const char   main_name[]  = "localinit";
#endif  /* NEED_OS_CS_INIT */
 
RSS_LIMITS_rec_typ          rss_lmts;
 
/****************************************************
 * Procedure Name: localinit
 * Description   : Initialize API
 * Input         : addinfo, admin
 * Output        : err
 * Input/Output  : None
 * Return Value  : ESA_RC
 * Side Effects  :
 * Scope         : Global
 * Comments      :
 ***************************************************/
 
ESA_RC localinit (int     argc_prm,
                  char ** argv_prm)
{
   ESA_RC                rc = ESA_OK;
   void                * attach_handle= NULL;
   ENVIRONMENT_rec_typ * envir_ptr;
 
   /* If have file names for STDIN/OUT, open file descriptor for
    * them (e.g. Novell), else use standard ones (others).
    */
 
   /* The following was already done in BATMAIN so it will be
    * removed from here.  We will however leave fderr = stderr;
 
   if (*tst_in) {
      fdin  = fopen (tst_in,  "r");
      if (NOT fdin) {
         perror ("Open IN file");
         rc = ESA_FATAL;
         goto cleanup;
      }
   }
   else
      fdin  = stdin;
 
   if (*tst_out) {
      fdout  = fopen (tst_out,  "w");
      if (NOT fdout) {
         perror ("Open OUT file");
         rc = ESA_FATAL;
         goto cleanup;
      }
   }
   else {
      fdout  = stdout;
      setbuf (stdout, NULL);    // for OS/2, but OK for others //
   }
    */
 
   fderr = stderr;
 
   isPrologDone = FALSE;
 
   rc = CG_prolog (ESA_TEST_PROC, argc_prm, argv_prm);
 
   CS_get_envir_address (&envir_ptr);
 
   if (rc NE ESA_OK)
      goto cleanup;
 
   isPrologDone = TRUE;
 
   admin_ptr = &envir_ptr->msg_admin_param;
   err_ptr   = &envir_ptr->msg_err;
 
   strcpy (admin_ptr->rss_name, rssname);
   strcpy (admin_ptr->rss_type, xrss_type);
 
#if defined (NEED_OS_CS_INIT)
   rc = OS_CS_init (main_name, &msg_paramst, &os_cs_handle);
 
   if (rc EQ ESA_OK)
      isOSCSDone = TRUE;
#endif  /* NEED_OS_CS_INIT */
 
   /* Clear func ptr array, in case attach fails */
 
   memset ((char *)&func_struct, 0, sizeof (func_struct));
 
   /* Attach to RSS, abort if fails */
 
   rc = OS_CS_attach_rss (rssname,
                          xrss_type,
                          &func_struct,
                          &rss_lmts,
                          admin_ptr,
                          err_ptr,
                          &attach_handle);
 
   if (rc NE ESA_OK)
      goto cleanup;
 
   /* Call APIINIT */
 
   rc = (func_struct.apiinit_ptr) (admin_ptr, err_ptr);   /* was * */
 
  cleanup:
   return rc;
} /* localinit */
 
/****************************************************
 * Procedure Name: localterm
 * Description   : API termination & clean-up
 * Input         : The usual
 * Output        : None
 * Input/Output  : None
 * Return Value  : ESA_RC
 * Side Effects  : Some files are deleted.
 * Scope         :
 ***************************************************/
 
ESA_RC localterm (int max_rc)         /* added the parameter BS10062 */
{
   ESA_RC rc = ESA_OK;
 
   /* Don't call APITERM if pointer not loaded */
 
   if (func_struct.apiterm_ptr)
      rc = (*func_struct.apiterm_ptr) (admin_ptr, err_ptr);
 
#if defined (NEED_OS_CS_INIT)
   /* Added by Amir as per Alex's request */
   if (isOSCSDone EQ TRUE) {
      OS_CS_term (main_name, &msg_paramst, &os_cs_handle);
   }
#endif  /* NEED_OS_CS_INIT */
 
   /* Don't call CG_epilog if CG_prolog never completed */
 
   if (isPrologDone EQ TRUE) {
       /* BS10062 CG_epilog (ESA_OK, 0); */
       CG_epilog (max_rc, 0);                       /* BS10062 */
   }
 
   if (*tst_in)
      fclose (fdin);
 
   if (*tst_out)
      fclose (fdout);
 
   return rc;
} /* localterm */
