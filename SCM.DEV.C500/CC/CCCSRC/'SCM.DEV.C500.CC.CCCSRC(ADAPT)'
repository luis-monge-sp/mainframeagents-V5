/*
 * Version Information:
 * ====================
 * File name       : %name: adapt.c %
 * Instance        : %instance: 1 %
 * Created by      : %created_by: ihoffma %
 * Created on      : %date_created: Wed Nov 19 19:06:08 2003 %
 * Current Version : %version: 2 %
 * Last Modified by: %derived_by: ihoffma %
 * Last Modified on: %date_modified: Wed Nov 19 19:06:09 2003 %
 */
 
/***********************************************
 * Mod.ID  Who      When         Description
 * =============================================
 * 1945    Leonid   7/5/01       BSAN100954
 * IMH001  Ian H.   19-Nov-03    WSAN101342 Thread-safe code (ERRNO)
 * SAS2IBMT SeligT  30/06/16     SAS/C to IBM C Conversion Project
 **********************************************/
 
#include   "globs.h"
 
#include   ERRNO
#define    ESA_ADAPT   "adapt.h"
#include   ESA_INIT
#include   ESA_CS_SINFO
#include   ESA_PROC
#include   ESA_RSS
#include   ESA_CS_OS
#include   ESA_OS_PROC
#include   ESA_OS_CONSOLE
#include   ESA_RSSF
#include   ENC_API
#include   ESA_ADAPT
 
/**************************************************************
 * Procedure Name   : cts_tbl_load
 *
 * Description      :
 * Return Value     : ESA_RC
 *                                                             *
 **************************************************************/
 
ESA_RC cts_tbl_load (int     tbl_code,
                     char *  tbl_name,
                     char ** tbl_space,
                     int  *  tbl_space_len,
                     int     tbl_row_len,
                     int  *  tbl_rows_num,
                     int  *  tbl_rows_removed)
{
  ESA_RC                rc = ESA_OK;
  FILE                * tbl_handle= NULL;
  char                  tbl_row[1024], * end_row;
  char                * tbl_row_ptr;
  int                   ii= 0, jj= 0, kk= 0;
  RSS_typ               rss_name, accept_rss_id, rss_type;
  char                  fn[]="cts_tbl_load";
  char                  ddn_with[12]="";                  /* SAS2IBMT */
  ENVIRONMENT_rec_typ * envir_ptr;
 
  CS_get_envir_address (&envir_ptr);
 
  ESA_DIAG_enter (ESA_COMP_ACSPROC, 1, fn);
 
  ESA_DIAG_printf(ESA_COMP_ACSPROC, 3,
                  "Input: tbl_name=%s tbl_row_len=%d.",
                  tbl_name,
                  tbl_row_len);
 
  strcpy(ddn_with,"DD:");                                 /* SAS2IBMT */
  strcat(ddn_with, tbl_name);                             /* SAS2IBMT */
  /* SAS2IBMT tbl_handle = fopen(tbl_name, "r");                     */
  tbl_handle = fopen(ddn_with, "r");                      /* SAS2IBMT */
  *tbl_rows_num= 0;
  *tbl_rows_removed= 0;
 
  if (tbl_handle EQ NULL)
  {
     if (tbl_code NE STRUC_RSSTBL)
        goto cleanup;
 
     /* SAS2IBMT tbl_handle = fopen(tbl_name, "w");                  */
     tbl_handle = fopen(ddn_with, "w,recfm=*");           /* SAS2IBMT */
     if (tbl_handle EQ NULL)
     {
        CTSAMSG_print (ERR_FILE,
                       envir_ptr->msg_admin_param.ctsamsg_handle, NULL,
                       envir_ptr->msg_admin_param.ctsamsg_dest,
                       "OPEN ",
                       "table:",
                       tbl_name,
                       strerror(errno));
        rc= ESA_FATAL;
        goto cleanup;
     }
     rc= CSA_fputs (tbl_name,
                    SKIP_RECORD,
                    tbl_handle);
     if (rc NE ESA_OK)
        goto cleanup;
  }
 
  fclose (tbl_handle);
 
  rc= CSA_open (tbl_name,
                fn,
                FILE_OPEN_FOR_UPDATE,
                &tbl_handle,
                SCOPE_REMOTE);
 
  ESA_DIAG_printf (ESA_COMP_ACSPROC, 3,
                   "Opened File %s with rc=%d.",
                   tbl_name,
                   (int)rc);
  if (rc NE ESA_OK)
    goto cleanup;
 
  for (* tbl_rows_num= 0,* tbl_rows_removed= 0, ii= 0; ; ii++)
  {
     memset (tbl_row,
             '\0',
             sizeof (tbl_row));
     rc= CSA_fgets (tbl_name, tbl_row, tbl_row_len, tbl_handle);
     if (rc NE ESA_OK)
     {
        if (rc EQ ESA_EOF)
            rc= ESA_OK;
        goto cleanup;
     }
     end_row= memchr (tbl_row, '\0', sizeof(tbl_row));
     if (end_row == NULL)
     {
        CTSAMSG_print (ERR_SCANDIR,
                     envir_ptr->msg_admin_param.ctsamsg_handle, NULL,
                     envir_ptr->msg_admin_param.ctsamsg_dest,
                     tbl_name);
        rc= ESA_ERR;
        goto cleanup;
 
     }
     ESA_DIAG_printf (ESA_COMP_ACSPROC, 6,
                      "Input %d record %s len %d.",
                      ii+1,
                      tbl_row,
                      strlen (tbl_row));
     if (
           (tbl_row[0] NE SKIP_SIGN)
          AND
           (strspn (tbl_row, WILDWHITECHARS) NE strlen (tbl_row))
        )
     {
 
        if (
              (tbl_code EQ STRUC_RSS_REC)
             OR
              (tbl_code EQ STRUC_RSSTBL)
			 OR
              (tbl_code EQ STRUC_OFLRSS_REC)
           )
        {
           memcpy (rss_name,
                   tbl_row,
                   sizeof (RSS_typ));
           strtok (rss_name, WHITECHARS);
        }
 
		/*DB_FIELDS_SEPARATOR_CHAR*/
        if (tbl_code EQ STRUC_OFLRSS_REC)
		   rss_name[strlen(rss_name)-1]= '\0';
 
        if (tbl_code EQ STRUC_KWD_REC)
        {
           memcpy (rss_type,
                   tbl_row,
                   sizeof (RSS_typ));
           strtok (rss_type, WHITECHARS);
        }
 
        if (tbl_code EQ STRUC_PRM_REC)
        {
           memcpy (rss_type,
                   tbl_row,
                   sizeof (RSS_typ));
           strtok (rss_type, WHITECHARS);
 
           jj= strspn (&tbl_row[strlen (rss_type)], WHITECHARS);
 
           memcpy (rss_name,
                   &tbl_row[strlen(rss_type)+ jj],
                   sizeof (RSS_typ));
           strtok (rss_name, WHITECHARS);
        }
 
        if (
              (tbl_code EQ STRUC_RSS_REC)
             OR
              (tbl_code EQ STRUC_RSSTBL)
           )
           rc= rssprm_get (rss_name,
                           RSS_TYPE,
                           RSS_NAME_LEN,
                           accept_rss_id);
 
        if (tbl_code EQ STRUC_KWD_REC)
           rc= rssprm_get_name (rss_type,
                                RSS_TYPE,
                                accept_rss_id);
        if (tbl_code EQ STRUC_PRM_REC)
        {
           if (rss_name[0] EQ '-')
              rc= ESA_OK;
           else
              rc= rssprm_get (rss_name,
                              RSS_TYPE,
                              RSS_NAME_LEN,
                              accept_rss_id);
        }
 
        if (rc EQ ESA_KEY_NOT_FOUND)
        {
           ESA_DIAG_printf (ESA_COMP_ACSPROC, 6,
                            "RSS ID unrefernced. Read record skipped");
           (* tbl_rows_removed)++;
           rc= ESA_OK;
           continue;
        }
     }
 
     if ((*tbl_space_len) LT (tbl_row_len * ((*tbl_rows_num)+ 1)))
     {
        kk= (*tbl_space_len) / sizeof(RSSTBL_rec_typ);
        kk += 20;
        (*tbl_space_len)= kk* sizeof(RSSTBL_rec_typ);
        rc= CSA_realloc (tbl_space,
                         0,
                         sizeof(RSSTBL_rec_typ),
                         kk);
        if (rc NE ESA_OK)
        {
           CTSAMSG_print (ERR_CS_MALLOC,
                   envir_ptr->ctsamsg_handle, NULL,
                          envir_ptr->ctsamsg_dest,
                          "Table space for CTSADAPT",
                              *tbl_space_len,
                              fn);
           rc = ESA_ERR;
           goto cleanup;
        }
        ESA_DIAG_printf (ESA_COMP_ACSPROC, 6,
                         "Table space reallocated to %d." ,
                         *tbl_space_len);
     }
 
     tbl_row_ptr= (*tbl_space) + (tbl_row_len* (*tbl_rows_num));
     memcpy (tbl_row_ptr,
             tbl_row,
             tbl_row_len);
     (*tbl_rows_num)++;
     ESA_DIAG_printf (ESA_COMP_ACSPROC, 6,
                      "Accepted=%d/%d record=%s len=%d." ,
                      (ii+ 1),
                      (*tbl_rows_num),
                      tbl_row_ptr,
                      strlen (tbl_row_ptr));
  } /* for */
 
  cleanup:
 
  if (tbl_handle)
     CSA_close (tbl_name, fn);
 
  if (rc NE ESA_OK)
    CTSAMSG_print (ERR_CS_FUNCTION,
                   envir_ptr->msg_admin_param.ctsamsg_handle, NULL,
                   envir_ptr->msg_admin_param.ctsamsg_dest, fn);
 
  ESA_DIAG_printf (ESA_COMP_ACSPROC, 4,
      "From %s table accepted %d removed=%d records from %d.",
      tbl_name,
      (*tbl_rows_num),
      (*tbl_rows_removed),
      ii);
 
  ESA_DIAG_exit (ESA_COMP_ACSPROC, 2, fn, rc);
  return rc;
}
 
 
ESA_RC cts_tbl_msg (ESA_RC   rc,
                    char   * tbl_name,
                    int      tbl_rows_num,
                    int      tbl_rows_added,
                    int      tbl_rows_removed,
                    int      tbl_rows_rss_renamed_num)
{
  char                    fn[]="cts_tbl_msg";
  ENVIRONMENT_rec_typ   * envir_ptr;
 
  CS_get_envir_address (&envir_ptr);
 
  ESA_DIAG_enter (ESA_COMP_ACSPROC, 1, fn);
 
  if (rc NE ESA_OK)
      CTSAMSG_print (ERR_SCANDIR,
                     envir_ptr->msg_admin_param.ctsamsg_handle, NULL,
                     envir_ptr->msg_admin_param.ctsamsg_dest,
                     tbl_name);
  else if (tbl_rows_num NE 0)
  {
     if (tbl_rows_removed NE 0)
         CTSAMSG_print (MSG_REMOVED_FROM_FILE,
                        envir_ptr->msg_admin_param.ctsamsg_handle,
                        NULL,
                        envir_ptr->msg_admin_param.ctsamsg_dest,
                        tbl_rows_removed,
                        tbl_name);
     if (tbl_rows_added)
        CTSAMSG_print (MSG_ADDED_TO_FILE,
                       envir_ptr->msg_admin_param.ctsamsg_handle, NULL,
                       envir_ptr->msg_admin_param.ctsamsg_dest,
                       tbl_rows_added,
                       tbl_name);
     if (tbl_rows_rss_renamed_num NE 0)
        CTSAMSG_print (MSG_CHANGED_IN_FILE,
                       envir_ptr->msg_admin_param.ctsamsg_handle, NULL,
                       envir_ptr->msg_admin_param.ctsamsg_dest,
                       tbl_rows_rss_renamed_num,
                       tbl_name);
 
     if (
           (tbl_rows_added EQ 0)
          AND
           (tbl_rows_removed EQ 0)
          AND
           (tbl_rows_rss_renamed_num EQ 0)
        )
         CTSAMSG_print (MSG_FILE_NOT_CHANGED,
                        envir_ptr->msg_admin_param.ctsamsg_handle,
                        NULL,
                        envir_ptr->msg_admin_param.ctsamsg_dest,
                        tbl_name);
  }
  ESA_DIAG_printf(ESA_COMP_ACSPROC, 5,
               "End adaptation: tbl_name=%s tbl_rows_num=%d rc=%d.",
                  envir_ptr->file_rssparm,
                  tbl_rows_num,
                  (int)rc );
  ESA_DIAG_exit (ESA_COMP_ACSPROC, 2, fn, rc);
 
  return rc;
 
}
