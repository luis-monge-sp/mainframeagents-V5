/*
 * Version Information:
 * ====================
 * File name       : %name: p_csacd.c %
 * Instance        : %instance: 1 %
 * Created by      : %created_by: leonid_s %
 * Created on      : %date_created: Thu Jan 15 16:49:35 2004 %
 * Current Version : %version: 4 %
 * Last Modified by: %derived_by: leonid_s %
 * Last Modified on: %date_modified: Thu Jan 15 16:49:35 2004 %
 */
 
/**********************************************************************
 * Mod.ID  Who      When         Description
 * ====================================================================
 * IMH001  Ian H.   17/9/03      Add support for CheckAndPrintVersion *
 * SAS2IBMT SeligT  05/9/16      SAS/C to IBM C Conversion Project    *
 * SAS2IBMN NuritY  01/01/2017   SAS/C to IBM C Conversion:
 *                               Remove signal processing because
 *                               it depends on the HANDLE_ABENDS
 *                               RSSPARM ALL_RSS parameter which
 *                               is always N. If/when recovery is
 *                               needed, the appropriate recovery
 *                               services will have to be used.
 **********************************************************************/
 
#define ESAMSG_OWNER
#define THIS_IS_MAIN
 
#include "globs.h"
 
#include ESA_ACSU
#include ESA_MSG
#include ESA_CS_DBPKG
#include ESA_CS_SINFO
#include ESA_CS_OS
#include ESA_OS_PROC
#include ESA_OS_CONSOLE
#include ESA_OS_MBX
#include ESA_RSSF
#include ESA_RSS
#include ENC_API
#include ESA_CAREUSR
#include ESA_VER
 
/****************************************************/
 
int main (int argc, char **argv)
{
  char                  fn[]="p_csacd";
  char                  failmsg [512];
  ESA_RC                rc= ESA_OK, rc_loop= ESA_OK;
  int                   diag_entered = 0;
 
  ENVIRONMENT_rec_typ * envir_ptr;
 
  /* CONTROL/SA common prolog   */
 
  rc= CG_prolog (ESA_ACD_PROC, argc, argv);
 
  if (rc NE ESA_OK)
    goto cleanup;
 
  CS_get_envir_address (&envir_ptr);
 
  diag_entered = 1;
  ESA_DIAG_enter (ESA_COMP_P_CSACD, DIAG_COMMON, fn);
 
  ESA_DIAG_printf (ESA_COMP_P_CSACD, 13,
                   "prolog completed with return code:%d", (int)rc);
  ESA_DIAG_printf (ESA_COMP_P_CSACD, 13,
                   "argc=%d argv: 0=%s 1=%s 2=%s.",
				   (int)argc, argv[0], argv[1], argv[2]);
 
/* IMH001 start */
 
   rc = CheckAndPrintVersion (argc, argv);
   if (rc EQ ESA_OK)
       goto cleanup;
 
    rc = ESA_OK;
/* IMH001 end */
 
  if (argc LT 3) {
    sprintf (failmsg,
        "%s: Number of arguments do not match to the required\n",
        ESA_CD);
    printf (failmsg);
    OS_CONSOLE_print (failmsg,
                      OS_CONS_ROLLABLE_YES,
                      OS_CONS_SEV_ERROR);
 
    goto cleanup;
  }
 
  rc= CS_init (argv[1], argv[2], &envir_ptr->os_cs_init_handle);
 
  if (rc NE ESA_OK)
    goto cleanup;
  /* SAS2IBMN - start  */
  /*
   * Signal processing is removed because it depends on the
   * HANDLE_ABENDS RSSPARM ALL_RSS parameter which is always N.
   * If/when recovery is needed, these routines will have to be
   * written using the appropriate IBM C or LE services.
   *
 
  ESA_DIAG_printf (ESA_COMP_P_CSACD, DIAG_BASIC,
                   "...-> OS_PROC_set_signal: os_proc_handle=%p.",
				   envir_ptr->os_proc_handle);
  rc= OS_PROC_set_signal ((&CS_signal),
                          envir_ptr->p_main_name,
                          envir_ptr->os_proc_handle);
  ESA_DIAG_printf (ESA_COMP_P_CSACD, DIAG_BASIC,
	"...<- OS_PROC_set_signal: rc=%d (%s).",
			rc, (rc EQ ESA_OK) ? "OS==OK" : "OS##OK");
  if (rc NE ESA_OK)
    ESA_DIAG_printf (ESA_COMP_P_CSACD, 11,
                   "Set signal failed. Return code:%d", (int)rc);
  */
  /* SAS2IBMN - end    */
 
 
  /* CD is ready*/
 
  /* start with CD process */
  rc_loop = CS_message_loop ();
 
  cleanup:
  /* Remove in/out mailboxes */
 
  if (rc NE ESA_OK)
    rc_loop= rc;
 
  CS_term (rc_loop, 0);
  if (diag_entered)
    ESA_DIAG_exit (ESA_COMP_P_CSACD, DIAG_COMMON, fn, 0);
 
  return(rc_loop EQ ESA_TERM_CTSA ?
            PLAT_OK_STAT
         :
            PLAT_FAIL_STAT);
} /* CD main */
 
