/****************************************************
 * Title           : API test - utilities
 * File Name       : batutls.c
 * Author          : AJK
 * Creation Date   : 16-Feb-94
 * Description     : Auxiliary functions for API test program
 * Assumptions and
 *   Considerations:
* $Author:   ajk  $
* $Workfile:   batutls.c  $
* $Revision:   1.11  $
* $Log:   L:/TEST/src/batutls.c_v  $
 *
 *    Rev 1.11   Aug 17 1998 11:52:22   ajk
 * Fixed SCCSID for Unix 'what' command
 *
 *    Rev 1.10   Aug 04 1998 14:46:04   leonid_s
 *
 *
 *    Rev 1.9   Jul 24 1997 11:37:12   leonid_s
 *
 *
 *    Rev 1.8   Jul 24 1997 09:02:08   leonid_s
 *     SCCSID("%Z%%M% \
 *
 *    Rev 1.7   Jul 23 1997 15:48:56   leonid_s
 * Some lines longer than 72 columns
 *
 *    Rev 1.5   Jul 22 1997 18:21:58   ajk
 * Typo
 *
 *    Rev 1.4   Jul 22 1997 18:19:10   ajk
 * Fixed compile warning on HP-UX
 *
 *    Rev 1.3   Jul 15 1997 15:12:14   leonid_s
 * Fix bug. Convert list's separators in printable form.
 *
 *    Rev 1.2   Jul 15 1997 14:33:18   leonid_s
 *****************************************************/
/***********************************************************************
 * Mod.ID   Who     When         Description
 * =====================================================================
 * SAS2IBMT SeligT  16/11/16     SAS/C to IBM C Conversion Project and
 *                               re-design / re-write of BATxxxx rtns
 * BS10062  SeligT  29/08/17     Handle storage allocation errors
 * IS10156  SeligT  13/09/17     Allocate ADDINFO Size Correctly
 * IS10157  SeligT  17/09/17     Allocate Several Arrays Correctly
 * WS10082  AvnerL  27/11/22     Update per ADDINFO new structure
 **********************************************************************/
 
#include "globs.h"
 
#include STDIO
#include STRING
#include STDLIB
#include ERRNO
 
#include ESA_API
#include ESA_ADMIN
#include ESA_CS_SINFO
#include ESA_INIT
#include ENC_API
#include ESA_ESAADI
 
#include "batutls.h"
 
static const char dot [] = ".";
 
 
 
/****************************************************
 * Procedure Name: utl_insert_addinfo
 * Description   : Insert keyword/value pair into addinfo struct
 * Input         : kwd (string), value, type
 * Input/Output  : num_pairs, pointer to pair
 * Output        : none
 * Return Value  : none
 * Side Effects  : f_ptr is incremented to point at next pair
 * Scope         : Internal to API test program
 ****************************************************/
 
void utl_insert_addinfo (const char        * kwd,
                         const char        * val,
                         ADDINFO_typ         the_type,
                         ONE_FIELD_rec_ptr * f_ptr,
                         short             * num_pairs)
{
    int  k, len;
    int  chop = 0;
    char buf [MAX_RSS_ADDINFO_VAL_LEN+1];
    static char         func [] = "BATUTLS_utl_insert_addinfo";
 
    ESA_DIAG_enter(ESA_COMP_BATCH, 1, func);
 
    (*f_ptr)->add_typ = the_type;
 
    strcpy (buf, val);
    len = strlen (buf);
 
    ESA_DIAG_printf(ESA_COMP_BATCH, 1,
        "utl_insert_addinfo call: kwd = |%s|  val = |%s|  val_len = %d",
        kwd, buf, len);
 
    /* If value is delimited in '' or "", remove them */
 
    if ((len GT 1) AND
        (((buf[0] EQ '\'') AND (buf[len-1] EQ '\'')) OR
         ((buf[0] EQ '"')  AND (buf[len-1] EQ '"')))) {
       chop = 1;
       buf[len-1] = NULL_CHAR;
    }
 
    (*f_ptr)->keylen = strlen (kwd);
    strcpy ((*f_ptr)->keyword, kwd);
 
    k = strlen (buf) - chop;  /* minus 1 for start delimiter */
 
    (*f_ptr)->vallen = k;
 
    if (k)
       strcpy ((*f_ptr)->value, &(buf[chop]));
    else
       (*f_ptr)->value[0] = NULL_CHAR;
 
    (*f_ptr)++;                    /*WS10082 - to be fixed */
    (*num_pairs)++;
 
    ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, ESA_OK);
 
} /* utl_insert_addinfo */
 
 
/* ASH001 */
/****************************************************
 * Procedure Name: UpdListVal
 * Description   : Convert List field separators to
 *                 addinfo list separators
 * Input         : list field value
 * Output        : list field value
 * Return Value  :
 * Side Effects  : none
 * Scope         : Internal for test programs.
 ****************************************************/
 
static void UpdListVal (char * val)
{
   char *p;
 
   for (p=val; *p; p++) {
      if (*p EQ TEST_ADDINFO_LIST_ENTRY)
         *p = ADDINFO_LIST_ENTRY;
      else if (*p EQ TEST_ADDINFO_LIST_SUBFIELD)
         *p = ADDINFO_LIST_SUBFIELD;
   }
} /* UpdListVal */
 
/****************************************************
 * Procedure Name: ConvertList
 * Description   : Convert addinfo list field separators to
 *                 test program list separators
 * Input/Output  : list field value
 * Side Effects  : Input is modified
 * Scope         : Internal for test programs.
 ****************************************************/
 
static char * ConvertList (char * value, ADDINFO_typ add_typ)
{
   char                     *p;
   static ONE_FIELD_rec_typ  pair;
 
   strcpy(pair.value, value);
   value = pair.value;
 
   if ((add_typ NE TYPE_2B) AND (add_typ NE TYPE_1B))
      return value;
 
   for (p=value; *p; p++) {
      if (*p EQ ADDINFO_LIST_ENTRY)
      /* *p = TEST_ADDINFO_LIST_ENTRY; */
         *p = ',';
      else if (*p EQ ADDINFO_LIST_SUBFIELD)
         *p = TEST_ADDINFO_LIST_SUBFIELD;
   }
 
   return value;
} /* ConvertList */
 
/****************************************************
 * Procedure Name: utl_obtain_addinfo_pairs
 * Description   : Obtain keywords and values from an array
 *                 and copy them to an ADDINFO structure.
 * Input         : Max # of keywords.
 * Output        : Pointer to addinfo_pointer.
 * Return Value  : ESA_RC
 * Side Effects  : addinfo struct is malloc'ed. Caller must free
 *                 when done with it.
 * Scope         : Internal for test programs.
 ****************************************************/
 
/* IS10156 remove first parameter of the following routine
ESA_RC utl_obtain_addinfo_pairs (int                max_pairs,       */
ESA_RC utl_obtain_addinfo_pairs (ADDINFO_rec_typ ** aip,
                                 int              * n_pairs,
                                 KEYWORD_typ      * kwd_arr,
                                 VALUE_typ        * val_arr,
                                 int                num_pairs)
{
    unsigned long     size;
    int               ctr = 0;
    int               max_pairs;                          /* IS10156 */
    ESA_RC            rc = 0;
    KEYWORD_typ       kwd;
    VALUE_typ         val;
    char              addtype[3];
    ONE_FIELD_rec_ptr f_ptr;
    ADDINFO_rec_typ  *bp;
    ADDINFO_typ       the_type;
    ENVIRONMENT_rec_typ        * envir_ptr;
    static char         func [] = "BATUTLS_utl_obtain_addinfo_pairs";
 
    ESA_DIAG_enter(ESA_COMP_BATCH, 1, func);
 
    CS_get_envir_address (&envir_ptr);
 
    max_pairs = num_pairs + 10;                           /* IS10156 */
 
    /* Allocate room for max_pairs+1 addinfo pairs (one is
     * part of the structure)
     */
 
    size = sizeof (ADDINFO_rec_typ) +
        max_pairs * sizeof (ONE_FIELD_rec_typ);
 
    ESA_DIAG_printf(ESA_COMP_BATCH, 1,                    /* IS10156 */
        "utl_obtain_addinfo_pairs - num_pairs=%d max_pairs=%d size=%d",
        num_pairs, max_pairs, size);
 
    bp = (ADDINFO_rec_typ  *)calloc (size, 1);
 
    if (NOT bp) {
       *aip = (ADDINFO_rec_typ *)NULL;
       /* * * * BS10062 start * * * */
       printf ("* * * * * * * * * * Fatal Error * * * * * * * * * *\n");
       printf ("Memory allocation failed for ADDINFO_rec_typ U1, size %d\n",
               size);
       printf ("* * * * * * * * * * Fatal Error * * * * * * * * * *\n");
       /* * * * BS10062 end * * * */
       return ESA_FATAL;
    }
 
    bp->num_pairs = 0;
    bp->max_pairs = max_pairs+1;
 
    f_ptr = &(bp->pair[0]);
 
    /* Loop on number of entries in array */
 
    while ((ctr LT max_pairs) AND (ctr LT num_pairs)) {
 
       strcpy (kwd, kwd_arr[ctr]);
       strcpy (val, val_arr[ctr]);
       memset (addtype, NULL_CHAR, sizeof (addtype));
 
       rc = get_addinfo_type (envir_ptr->keywrds,
                              envir_ptr->kwd_num,
                              kwd,
                              addtype,
                              &the_type);
 
       if (rc NE ESA_OK) {
          ESA_DIAG_printf(ESA_COMP_BATCH, 1,
              "addinfo type not found for %s = %s - using default 1A",
              kwd, val);
          strcpy (addtype, "1A");
          the_type = TYPE_1A;
       }
 
       if ((the_type EQ TYPE_2B) OR (the_type EQ TYPE_1B))
          UpdListVal (val);
 
       ctr++;
 
       ESA_DIAG_printf(ESA_COMP_BATCH, 1,
           "calling utl_insert_addinfo with |%s| = |%s| - type = %d",
           kwd, val, the_type);
 
       utl_insert_addinfo (kwd,
                           val,
                           the_type,
                           &f_ptr, &bp->num_pairs);
 
    } /* while */
 
    *n_pairs = bp->num_pairs;
    *aip     = bp;
 
    ESA_DIAG_printf(ESA_COMP_BATCH, 1,                    /* IS10156 */
        "utl_obtain_addinfo_pairs - act num_pairs=%d act max_pairs=%d",
        bp->num_pairs, bp->max_pairs);
 
    ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, ESA_OK);
    return ESA_OK;
 
} /* utl_obtain_addinfo_pairs */
 
/****************************************************
 * Procedure Name: utl_obtain_addinfo_kwds
 * Description   : Obtain keywords from an array and
 *                 copy them to an ADDINFO structure.
 * Input         : Max # of keywords.
 * Output        : Pointer to addinfo_pointer.
 * Return Value  : ESA_RC
 * Side Effects  : addinfo struct is malloc'ed. Caller must free
 *                 when done with it.
 * Scope         : Internal for test programs.
 ****************************************************/
 
/* IS10156 remove first parameter of the following routine
ESA_RC utl_obtain_addinfo_kwds (int                max_pairs,        */
ESA_RC utl_obtain_addinfo_kwds (ADDINFO_rec_typ ** aip,
                                int              * n_pairs,
                                KEYWORD_typ      * kwd_arr,
                                int                num_pairs)
{
    int                ctr = 0;
    int                max_pairs;                         /* IS10156 */
    ESA_RC             rc = 0;
    unsigned long      size;
    KEYWORD_typ        kwd;
    char               addtype[3];
    ONE_FIELD_rec_ptr  f_ptr;
    ADDINFO_rec_typ  * bp;
    ADDINFO_typ        the_type;
    ENVIRONMENT_rec_typ        * envir_ptr;
    static char         func [] = "BATUTLS_utl_obtain_addinfo_kwds";
 
    ESA_DIAG_enter(ESA_COMP_BATCH, 1, func);
 
    *n_pairs = 0;
 
    CS_get_envir_address (&envir_ptr);
 
    max_pairs = num_pairs + 10;                           /* IS10156 */
 
    /* Allocate room for max_pairs+1 addinfo pairs (one is
     * part of the structure)
     */
 
    size = sizeof (ADDINFO_rec_typ) +
        max_pairs * sizeof (ONE_FIELD_rec_typ);
 
    ESA_DIAG_printf(ESA_COMP_BATCH, 1,                    /* IS10156 */
        "utl_obtain_addinfo_kwds - num_pairs=%d max_pairs=%d size=%d",
        num_pairs, max_pairs, size);
 
    bp = (ADDINFO_rec_typ  *)calloc (size, 1);
 
    if (NOT bp) {
       *aip = (ADDINFO_rec_typ *)NULL;
       /* * * * BS10062 start * * * */
       printf ("* * * * * * * * * * Fatal Error * * * * * * * * * *\n");
       printf ("Memory allocation failed for ADDINFO_rec_typ U2, size %d\n",
               size);
       printf ("* * * * * * * * * * Fatal Error * * * * * * * * * *\n");
       /* * * * BS10062 end * * * */
       return ESA_FATAL;
    }
 
    bp->num_pairs = 0;
    bp->max_pairs = max_pairs+1;
 
    f_ptr = &(bp->pair[0]);
 
    /* Loop on number of entries in array */
 
 
    ctr = 0;
    ESA_DIAG_printf(ESA_COMP_BATCH, 1,
       "bp = <%8X> size=<%d> sizeofonefldrectyp=<%d> <%8X>",
       bp,size,sizeof(ONE_FIELD_rec_typ),sizeof(ONE_FIELD_rec_typ));
 
    while ((ctr LT max_pairs) AND (ctr LT num_pairs)) {
 
       ESA_DIAG_printf(ESA_COMP_BATCH, 1, "f_ptr=<%8X>",f_ptr);
       strcpy (kwd, kwd_arr[ctr]);
 
       ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                       "ctr = %d  kwd = |%s|",
                       ctr, kwd);
 
       rc = get_addinfo_type (envir_ptr->keywrds,
                              envir_ptr->kwd_num,
                              kwd,
                              addtype,
                              &the_type);
 
       if (rc NE ESA_OK) {
           ESA_DIAG_printf(ESA_COMP_BATCH, 1,
               "get_addinfo_type kwd = %s  rc = %d - skipping kwd",
               kwd, rc);
           ctr++;
           continue;
       }
 
       ctr++;
 
       ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                       "calling utl_insert_addinfo with %s - type = %d",
                       kwd, the_type);
 
       utl_insert_addinfo (kwd, "", the_type, &f_ptr, &bp->num_pairs);
 
    } /* while */
    if (ESA_DIAG_get_debug_level(ESA_COMP_BATCH) GE 1)
      ADDINFO_dump(bp,0);
 
    *n_pairs = bp->num_pairs;
    *aip     = bp;
 
    ESA_DIAG_printf(ESA_COMP_BATCH, 1,                    /* IS10156 */
        "utl_obtain_addinfo_kwds - act num_pairs=%d act max_pairs=%d",
        bp->num_pairs, bp->max_pairs);
 
    ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, ESA_OK);
    return ESA_OK;
 
} /* utl_obtain_addinfo_kwds */
 
/****************************************************
 * Procedure Name: type2asc
 * Description   : convert ADDINFO type to string
 * Input         : type
 * Output        : const char *
 * Input/Output  :
 * Return Value  :
 * Side Effects  :
 * Scope         : Local
 ***************************************************/
 
static const char * type2asc (ADDINFO_typ the_type)
{
   switch (the_type) {
     case TYPE_1A:
         return "1A";
     case TYPE_1B:
         return "1B";
     case TYPE_2A:
         return "2A";
     case TYPE_2B:
         return "2B";
     default:          /* for fussy compilers */
         return "1A";
   }
} /* type2asc */
 
/****************************************************
 * Procedure Name: utl_dump_addinfo
 * Description   : Dump contents of ADDINFO struct
 * Input         : Pointer to ADDINFO structure
 * Output        : None
 * Return Value  : None
 * Side Effects  : None
 * Scope         : Internal to API. For debugging.
 ****************************************************/
 
void utl_dump_addinfo (ADDINFO_rec_typ *bp)
{
   int               k;
   int               np = bp->num_pairs;
   ONE_FIELD_rec_ptr fp;
   static char         func [] = "BATUTLS_utl_dump_addinfo";
 
   ESA_DIAG_enter(ESA_COMP_BATCH, 1, func);
 
 
   if (NOT bp)
      printf ("  ADDINFO: <NONE>\n");
   else {
      printf ("  ADDINFO: TYPE    KEYWORD/VALUE\n");
      /*WS10082 for(k = 0,fp=&(bp->pair[0]);k LT np;k++,fp++){ */
      for (k = 0, fp = &(bp->pair[0]); k LT np; k++) { /*WS10082*/
         printf ("           %s:     %s = %s\n",
                  type2asc (fp->add_typ),
                  fp->keyword, ConvertList (fp->value, fp->add_typ));
         fp=ppair(fp);                                 /*WS10082*/
      }
   }
   ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, ESA_OK);
 
} /* utl_dump_addinfo */
 
/****************************************************
 * Procedure Name: utl_get_addinfo
 * Description   : Obtain ADDINFO keywords from an array, alloc
 *                 n_users arrays of addinfo, fill each with
 *                 keywords.
 * Input         : n_users
 * Output        :
 * Input/Output  : Pointer to addinfo_ptr_array
 * Return Value  : ESA_RC
 * Side Effects  : Memory (lots of) is allocated. Called should free.
 * Scope         :
 * Scope         : Internal To API Test Program
 ***************************************************/
 
ESA_RC utl_get_addinfo (int                n_users,
                        ADDINFO_rec_ptr ** addinfo_ptr_array)
{
    unsigned long      size;
    int                k, np;
    int                max_pairs;                         /* IS10156 */
    ESA_RC             rc;
    ADDINFO_rec_ptr  * apa;
    ENVIRONMENT_rec_typ * envir_ptr;                      /* BS10062 */
    static char        func [] = "BATUTLS_utl_get_addinfo";
 
    ESA_DIAG_enter(ESA_COMP_BATCH, 1, func);
 
    CS_get_envir_address (&envir_ptr);                    /* BS10062 */
 
    /* Alloc array of pointers */
 
    if (NOT(* addinfo_ptr_array))
      apa = (ADDINFO_rec_ptr *)calloc ((unsigned)n_users,
                                        sizeof (ADDINFO_rec_ptr));
    else
      apa = *addinfo_ptr_array;
 
    if (NOT apa)
       /* * * * BS10062 start * * * */
       {
       size = (unsigned)n_users * sizeof (ADDINFO_rec_ptr);
       printf ("* * * * * * * * * * Fatal Error * * * * * * * * * *\n");
       printf ("Memory allocation failed for ADDINFO_rec_ptr U3, size %d\n",
               size);
       printf ("* * * * * * * * * * Fatal Error * * * * * * * * * *\n");
       /* * * * BS10062 end * * * */
       return ESA_FATAL;
       }
 
    /* Now obtain keywords */
 
    /* IS10156 remove first parameter of the following routine
    rc = utl_obtain_addinfo_kwds (MAX_KWDS, &(apa[0]), &k,           */
    rc = utl_obtain_addinfo_kwds (&(apa[0]), &k,
                                            out_kwd, out_i);
    if (rc NE ESA_OK)
       goto cleanup;
 
    /* Calculate size of each addinfo structure. */
 
    /* * * * IS10156 start * * * */
    /* Despite the recent BS10062 fix, we realized that if a user    */
    /* adds hundreds and hundreds (i.e., more than MAX_KWDS (= 500)) */
    /* of attributes, the ADDINFO_alloc, allocating 500 entries per  */
    /* ADDINFO structure, may not be enough.  Therefore, we decided  */
    /* to allocate the precise number (+ 10) of RSSKWDS slots. This  */
    /* number has already been set in out_i so this is the number    */
    /* we will use.                                                  */
    /* * * * IS10156 end * * * */
 
    np = MAX (k, 1);
 
/*  size = sizeof (ADDINFO_rec_typ) +                                */
/*      (np-1) * sizeof (ONE_FIELD_rec_typ);                         */
/*  we are changing the following calculation - please see IS10156 above
    size = sizeof (ADDINFO_rec_typ) +           // see below BS10062 //
        MAX_KWDS * sizeof (ONE_FIELD_rec_typ);  // see below BS10062 */
    max_pairs = out_i + 10;                               /* IS10156 */
 
    size = sizeof (ADDINFO_rec_typ) +           /* see IS10156 above */
        max_pairs * sizeof (ONE_FIELD_rec_typ); /* see IS10156 above */
 
    ESA_DIAG_printf(ESA_COMP_BATCH, 1,                    /* IS10156 */
        "utl_get_addinfo - out_i=%d max_pairs=%d size=%d",
        out_i, max_pairs, size);
 
    /* Propagate the keywords to all addinfo structures */
 
    for (k = 1; k LT n_users; k++) {
       /* * * * BS10062 start * * * */
       /* This was an error.  We must build ADDINFO structures */
       /* with the correct MAX_KWDS size, not with the size of */
       /* k that we got back from utl_obtain_addinfo_kwds. The */
       /* reason for this is because we sometimes add entries  */
       /* to ADDINFO. Before this change, we clobbered some    */
       /* storage which caused an S0C4 and an LE error.        */
 
       /* please see IS10156 above - we are changing this call
       rc = ADDINFO_alloc(func, MAX_KWDS, &apa[k],                   */
       rc = ADDINFO_alloc(func, max_pairs+1, &apa[k],     /* IS10156 */
                    envir_ptr->msg_admin_param.ctsamsg_dest,
                    envir_ptr->msg_admin_param.ctsamsg_handle);
       if (rc NE ESA_OK)
/*     apa[k] = (ADDINFO_rec_typ *)malloc (size);                    */
/*     if (NOT apa[k])                                               */
          {
          printf ("* * * * * * * * * * Fatal Error * * * * * * * * * *\n");
          printf ("Memory allocation failed for ADDINFO_rec_typ U4, size %d\n",
                  size);
          printf ("* * * * * * * * * * Fatal Error * * * * * * * * * *\n");
          /* * * * BS10062 end * * * */
          goto cleanup;
          }
 
       memcpy ((char *)apa[k], (char *)apa[0], size);
    }
 
    /* Give caller the alloc'ed array of pointers */
 
    *addinfo_ptr_array = apa;
    ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, ESA_OK);
    return ESA_OK;
 
    cleanup:
    ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                    "cleanup rtn of utl_get_addinfo - rc = %d", rc);
 
    if (apa) {
       for (k = 0; k LT n_users; k++) {
          if (apa[k])
             free (apa[k]);
       }
 
       free (apa);
       *addinfo_ptr_array = NULL;
    }
 
    ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, ESA_FATAL);
    return ESA_FATAL;
 
} /* utl_get_addinfo */
 
/****************************************************
 * Procedure Name: nuke_addinfo_values
 * Description   : Clear values in all addinfo structs
 * Input         : array of addinfo pointers, # of pointers
 * Output        :
 * Input/Output  :
 * Return Value  : None
 * Side Effects  :
 * Scope         : Internal To API Test Program
 ***************************************************/
 
void nuke_addinfo_values (ADDINFO_rec_ptr * addinfo_ptr_array,
                          int               num_structs)
{
   int                k, m, np;
   ONE_FIELD_rec_ptr  fp;
 
 
   for (k = 0; k LT num_structs; k++) {
      np = addinfo_ptr_array[k]->num_pairs;
 
      for (m = 0, fp = &(addinfo_ptr_array[k]->pair[0]);
           m LT np;
           m++) {                                      /*WS10082*/
           /*WS10082 m++, fp++) {                               */
         fp->vallen   = 0;
         fp->value[0] = NULL_CHAR;
         fp=ppair(fp);                                 /*WS10082*/
      }
   }
 
} /* nuke_addinfo_values */
 
 
/****************************************************
 * Procedure Name: nuke_user_details
 * Description   : Clear values in user struct array
 * Input         : array of user params, # of elements
 * Output        :
 * Input/Output  :
 * Return Value  : None
 * Side Effects  :
 * Scope         : Internal To API Test Program
 ***************************************************/
 
void nuke_user_details (USER_PARAMS_rec_typ * user_params,
                        int                   num_elems)
{
   int  m;
 
 
   for (m = 0; m LT num_elems; m++) {
      user_params[m].user[0]      = NULL_CHAR;
      user_params[m].def_group[0] = NULL_CHAR;
      user_params[m].passwd[0]    = NULL_CHAR;
      user_params[m].rev_status   = USER_STAT_IGNORED;
      user_params[m].user_admin   = USER_ADM_IGNORED;
   }
} /* nuke_user_details */
 
/****************************************************
 * Procedure Name: nuke_ug_details
 * Description   : Clear values in ug struct array
 * Input         : array of ug params, # of elements
 * Output        :
 * Input/Output  :
 * Return Value  : None
 * Side Effects  :
 * Scope         : Internal To API Test Program
 ***************************************************/
 
void nuke_ug_details (UG_PARAMS_rec_typ * ug_params,
                      int                 num_elems)
{
   int  m;
 
 
   for (m = 0; m LT num_elems; m++) {
      ug_params[m].group[0]        = NULL_CHAR;
      ug_params[m].parent_group[0] = NULL_CHAR;
   }
} /* nuke_ug_details */
 
/****************************************************
 * Procedure Name: nuke_u2ug_details
 * Description   : Clear values in u2ug struct array
 * Input         : array of u2ug params, # of elements
 * Output        :
 * Input/Output  :
 * Return Value  : None
 * Side Effects  :
 * Scope         : Internal To API Test Program
 ***************************************************/
 
void nuke_u2ug_details (U2UG_PARAMS_rec_typ * u2ug_params,
                        int                   num_elems)
{
   int  m;
 
 
   for (m = 0; m LT num_elems; m++) {
      u2ug_params[m].u2ug_admin_data = U2UG_ADM_IGNORED;
      u2ug_params[m].u2ug_attr_data  = U2UG_ATTR_IGNORED;
   }
} /* nuke_u2ug_details */
 
/****************************************************
 * Procedure Name: nuke_res_params
 * Description   : Clear values in res_params struct array
 * Input         : array of res params, # of elements
 * Output        :
 * Input/Output  :
 * Return Value  : None
 * Side Effects  :
 * Scope         : Internal To API Test Program
 ***************************************************/
 
void nuke_res_params (RES_PARAMS_rec_typ * res_params,
                      int                  num_elems)
{
   int  m;
 
 
   for (m = 0; m LT num_elems; m++) {
      res_params[m].resource[0] = NULL_CHAR;
      res_params[m].restype[0]  = NULL_CHAR;
   }
} /* nuke_res_params */
 
 
 
 
/****************************************************
 * Procedure Name: user_stat_2_string
 * Description   : translate user statrus to string
 * Input         : Status
 * Output        :
 * Input/Output  :
 * Return Value  : string const
 * Side Effects  :
 * Scope         : local
 ***************************************************/
 
const char * user_stat_2_string (USER_STATUS_typ statx)
{
   switch (statx) {
     case USER_STAT_REVOKED:
         return "Suspended";
     case USER_STAT_ACTIVE:
         return "Normal";
     case USER_STAT_IGNORED:      /* fall thru to default */
     default:
         return "Ignored";
   }
} /* user_stat_2_string */
 
 
/****************************************************
 *
 * save all RSSKWDS keywords
 *
 ***************************************************/
 
static ESA_RC save_keywords (int  * kwds_cnt,
                             char * rss,
                             char * api_code,
                             char * kwd_type,
                             char * addinfo_type,
                             char * kwd_name)
{
   ESA_RC                  rc = ESA_OK;
   int                     size;
   int                     cnt;
   ENVIRONMENT_rec_typ   * envir_ptr;
   static char         func [] = "BATUTLS_save_keywords";
 
   ESA_DIAG_enter(ESA_COMP_BATCH, 1, func);
 
   CS_get_envir_address (&envir_ptr);
 
   cnt = *kwds_cnt;
 
   if ( envir_ptr->kwd_num EQ 0 ) {  /* First entry */
      size = sizeof(RSSAPI_KWD_rec_typ)  * 50;
 
      envir_ptr->keywrds = (RSSAPI_KWD_rec_typ *)malloc( size );
      if (envir_ptr->keywrds EQ NULL) {
         /* * * * BS10062 start * * * */
         printf ("* * * * * * * * * * Fatal Error * * * * * * * * * *\n");
         printf ("Memory allocation failed for RSSAPI_KWD_rec_typ 1, size %d\n",
                 size);
         printf ("* * * * * * * * * * Fatal Error * * * * * * * * * *\n");
         /* * * * BS10062 end * * * */
         rc = ESA_FATAL;
         goto cleanup;
      }
 
      envir_ptr->kwd_num = 50;
   }
 
   if ( cnt GE  envir_ptr->kwd_num  ) {
      envir_ptr->kwd_num +=  50;
      size = sizeof(RSSAPI_KWD_rec_typ)  *   envir_ptr->kwd_num;
 
      envir_ptr->keywrds =
          (RSSAPI_KWD_rec_typ *)realloc(envir_ptr->keywrds, size);
 
      if ( envir_ptr->keywrds EQ NULL ) {
         /* * * * BS10062 start * * * */
         printf ("* * * * * * * * * * Fatal Error * * * * * * * * * *\n");
         printf ("Memory allocation failed for RSSAPI_KWD_rec_typ 2, size %d\n",
                 size);
         printf ("* * * * * * * * * * Fatal Error * * * * * * * * * *\n");
         /* * * * BS10062 end * * * */
         rc = ESA_FATAL;
         goto cleanup;
      }
   }
 
   /* Save keywords */
 
   memset ((char *)&envir_ptr->keywrds[cnt], ' ',
          sizeof(RSSAPI_KWD_rec_typ) );
 
   strcpy ((char *)envir_ptr->keywrds[cnt].rss, rss );
 
   envir_ptr->keywrds[cnt].keyword_type = *kwd_type;
 
   memcpy (envir_ptr->keywrds[cnt].api, api_code, 2);
 
   memcpy (envir_ptr->keywrds[cnt].addtyp, addinfo_type, 2);
 
   strcpy (envir_ptr->keywrds[cnt].keyword, kwd_name);
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "keyword %s saved. cnt = %d",
                   envir_ptr->keywrds[cnt].keyword, cnt);
 
   cnt++;
   *kwds_cnt = cnt;
   rc = ESA_OK;
 
   cleanup :
   ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, rc);
 
   return rc;
 
} /* save_keywords */
 
/****************************************************
 *
 * parse the RSSKWDS line
 *
 ***************************************************/
 
static void parse_kwd_line (char    * kwd_line,
                            RSS_typ   rss,
                            char    * api_code,
                            char    * chksum_flg,
                            char    * addinfo_typ,
                            char    * kwd_name)
{
   char * token;
   int    i=0;
 
   /*
    *  Initialize output parameters
    */
 
   *rss         = NULL_CHAR;
   *api_code    = NULL_CHAR;
   *chksum_flg  = NULL_CHAR;
   *addinfo_typ = NULL_CHAR;
   *kwd_name    = NULL_CHAR;
 
   /*
    *  Separate line
    */
 
   token = strtok(kwd_line, " \n");
   while ( token AND ( i LT 5 ) ) {
      switch (i) {
        case 0:
            strcpy( rss, token);
            break;
        case 1:
            strcpy( api_code, token);
            break;
        case 2:
            strcpy( chksum_flg, token);
            break;
        case 3:
            strcpy( addinfo_typ, token);
            break;
        case 4:
            strcpy( kwd_name, token );
            break;
      }
      i++;
      token = strtok(NULL, " \n");
   }
} /* parse_kwd_line */
 
/****************************************************
 *
 * get and save the RSSKWDS keywords
 *
 ***************************************************/
 
ESA_RC get_keywords (void)
{
  RESOURCE_typ file_keywords;
  char         ddn_with[50]="";
  ESA_RC       rc = ESA_OK;
  char         kwd_line[1024];
  RSS_typ      rss;
  int          kwds_cnt = 0;
  char         api_code[10];
  char         chksum_flg[10];
  char         addinfo_typ[10];
  char         kwd_name[MAX_RSS_ADDINFO_KWD_LEN+1];
  FILE        *fkwds = NULL;
  ENVIRONMENT_rec_typ   * envir_ptr;
  static char         func [] = "BATUTLS_get_keywords";
 
  ESA_DIAG_enter(ESA_COMP_BATCH, 1, func);
 
  CS_get_envir_address (&envir_ptr);
 
  /*
   *   Open file keywords
   */
 
  strcpy( file_keywords,  envir_ptr->file_rsskwds);
  memset(ddn_with, 0, sizeof(ddn_with));
  strcpy(ddn_with,"DD:");
  strcat(ddn_with, file_keywords);
  ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                  "About to open fkwds file: %s", ddn_with);
  fkwds = fopen(ddn_with , "r");
 
  if ( !fkwds ) {
     printf("file %s/%s error %d/%s",
             file_keywords, "fopen", errno,
             strerror(errno));
     fprintf(stderr, "file %s/%s error %d/%s",
             file_keywords, "fopen", errno,
             strerror(errno));
     rc = ESA_FATAL;
     goto cleanup;
  }
 
  while ( fgets( kwd_line, sizeof(kwd_line), fkwds)) {
 
     if ( kwd_line[0] NE '*' ) {
 
        /*
         *     Make data a string
         */
 
         parse_kwd_line(kwd_line, rss, api_code,
                        chksum_flg, addinfo_typ, kwd_name );
 
         ESA_DIAG_printf(ESA_COMP_BATCH, 1,
             "rss=%s code=%s chksum=%s a/i_type=%s kwd_name=%s",
             rss, api_code, chksum_flg, addinfo_typ, kwd_name);
 
         rc = save_keywords(&kwds_cnt, rss, api_code, chksum_flg,
                            addinfo_typ, kwd_name);
         if ( rc NE ESA_OK )
            goto cleanup;
 
     }
  } /* loop on keywords */
 
  rc = ESA_OK;
 
  cleanup:
 
  envir_ptr->kwd_num = kwds_cnt;
 
  ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                  "the count of RSSKWDS is %d", kwds_cnt);
 
  if ( fkwds )
     fclose(fkwds);
 
  ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, rc);
 
  return rc;
 
} /* get_keywords */
 
/****************************************************
 *
 * return the ADDINFO type
 *
 ***************************************************/
 
ESA_RC get_addinfo_type (
        RSSAPI_KWD_rec_ptr          envir_keywrds,
        int                         envir_kwd_num,
        char                      * keyword,
        char                      * addtyp,
        ADDINFO_typ               * the_type)
{
 
   ESA_RC             rc = ESA_OK;
   int                i;
   static char         func [] = "BATUTLS_get_addinfo_type";
 
   ESA_DIAG_enter(ESA_COMP_BATCH, 1, func);
 
   /*
    *  Initialize
    */
 
   *addtyp = NULL_CHAR;
   *the_type = 0;
 
   /*
    *  Look for keyword passed via input parameter and, if found,
    *  pass back the ADDINFO type.
    */
 
   ESA_DIAG_printf(ESA_COMP_BATCH, 1,
                   "Just entered get_addinfo_type routine");
   for (i=0; i LT envir_kwd_num; i++) {
      if (strcmp (keyword, envir_keywrds[i].keyword) EQ 0) {
         if (strncmp (envir_keywrds[i].addtyp, "1A", 2) EQ 0) {
                strncpy (addtyp, envir_keywrds[i].addtyp, 2);
                *the_type = TYPE_1A;
                goto exit;
         }
         if (strncmp (envir_keywrds[i].addtyp, "1B", 2) EQ 0) {
                strncpy (addtyp, envir_keywrds[i].addtyp, 2);
                *the_type = TYPE_1B;
                goto exit;
         }
         if (strncmp (envir_keywrds[i].addtyp, "2A", 2) EQ 0) {
                strncpy (addtyp, envir_keywrds[i].addtyp, 2);
                *the_type = TYPE_2A;
                goto exit;
         }
         if (strncmp (envir_keywrds[i].addtyp, "2B", 2) EQ 0) {
                strncpy (addtyp, envir_keywrds[i].addtyp, 2);
                *the_type = TYPE_2B;
                goto exit;
         }
      }
   }
 
   ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, ESA_FATAL);
 
   return ESA_FATAL;
 
   exit:
   ESA_DIAG_exit(ESA_COMP_BATCH, 1, func, ESA_OK);
 
   return ESA_OK;
 
}
 
 
 
/****************************************************
 * Procedure Name: user_auth_2_str
 * Description   : Translate user admin status to string
 * Input         : enum
 * Output        :
 * Input/Output  :
 * Return Value  : const char *
 * Side Effects  :
 * Scope         : Global
 ***************************************************/
 
const char * user_auth_2_str (USER_ADMIN_typ ai)
{
   switch (ai) {
     case USER_ADM_IGNORED: return "Ignored";
     case USER_ADM_NONE:    return "Regular";
     case USER_ADM_AUDIT:   return "Auditor";
     case USER_ADM_ADMIN:   return "Administrator";
     case USER_ADM_ALL:     return "Administrator & Auditor";
     default:               return "<unknown>";
   }
} /* user_auth_2_str */
 
/****************************************************
 * Procedure Name: pwd_stat_2_str
 * Description   : Translate password life status to string
 * Input         : enum
 * Output        :
 * Input/Output  :
 * Return Value  : const char *
 * Side Effects  :
 * Scope         : Global
 ***************************************************/
 
const char * pwd_stat_2_str (PASSWD_LIFE_typ ai)
{
   switch (ai) {
     case PASS_LIFE_IGNORED:   return "Ignored";
     case PASS_LIFE_RESET:     return "Reset";
     case PASS_LIFE_PERMANENT: return "Permanent";
     default:                  return "<unknown>";
   }
} /* pwd_stat_2_str */
 
/****************************************************
 * Procedure Name: defug_act_2_str
 * Description   : Translate old default UG action to string
 * Input         : enum
 * Output        :
 * Input/Output  :
 * Return Value  : const char *
 * Side Effects  :
 * Scope         : Local
 ***************************************************/
 
const char * defug_act_2_str (OLD_DEF_UG_ACTION_typ act)
{
   switch (act) {
     case OLD_DEF_UG_ACT_IGNORED: return "Ignored";
     case OLD_DEF_UG_ACT_DROP:    return "Drop";
     case OLD_DEF_UG_ACT_KEEP:    return "Keep";
     default:                     return "<UNKNOWN>";
   }
} /* defug_act_2_str */
 
 
 
 /**************************************************************
 *                                                             *
 * PROCEDURE NAME : utl_error_print                            *
 *                                                             *
 * DESCRIPTION    : print error message buffer to stdout       *
 *                                                             *
 * INPUT          : err      - error buffer                    *
 *                                                             *
 * OUTPUT         : none                                       *
 *                                                             *
 * RETURN VALUE   : none                                       *
 *                                                             *
 **************************************************************/
 
void utl_error_print (ERR_STRUCT_rec_typ * errx)
{
   int  coff, cleft, clen;
 
   /* Error lines */
 
   coff  = 0;
   cleft = errx->length ;
   while (cleft GT 0) {
      clen = strlen (&(errx->err_msg_text[coff]))+1;
      fprintf (fderr, "%s", &(errx->err_msg_text[coff]));
      printf  (       "%s", &(errx->err_msg_text[coff]));
      cleft = cleft - clen;
      coff  = coff  + clen;
   } /* while */
 
} /* utl_error_print */
 
 
 
 
 /**************************************************************
 *                                                             *
 * PROCEDURE NAME : utl_request_details                        *
 *                                                             *
 * DESCRIPTION    : print request details                      *
 *                                                             *
 * INPUT          : none                                       *
 *                                                             *
 * OUTPUT         : none                                       *
 *                                                             *
 * RETURN VALUE   : none                                       *
 *                                                             *
 **************************************************************/
 
void utl_request_details (void)
{
 
   printf ("\n *** Error encountered while processing the %s request ***\n",
          req->request);
 
   if (req->userid)
      printf (" Userid             : %s\n", req->userid);
   if (req->groupid)
      printf (" Groupid            : %s\n", req->groupid);
   if (req->dflt_grpname)
      printf (" Default Group Name : %s\n", req->dflt_grpname);
      printf (" SYSIN_buffer       : %s\n", SYSIN_buffer);
 
} /* utl_request_details */
 
 
 
 
 
 
 
