/*
 * Version Information:
 * ====================
 * File name       : %name: esalist.c %
 * Instance        : %instance: 1 %
 * Created by      : %created_by: leonid_s %
 * Created on      : %date_created: Mon May 12 08:07:24 2003 %
 * Current Version : %version: 5 %
 * Last Modified by: %derived_by: leonid_s %
 * Last Modified on: %date_modified: Mon May 12 08:07:24 2003 %
 */
 
/***********************************************
 * Mod.ID   Who      When         Description
 * =============================================
 * SAS2IBMA AvnerL   21-Dec-16    SAS/C to IBM C Conversion Project
 **********************************************/
 
#include "globs.h"
 
#include STDLIB
#include STRING
#include ESA_ESALIST
 
static ESA_RC ESA_list_delete_ptr (ESALIST_handle_typ *list,
                                   ESALIST_entry_typ  *entry);
 
static ESA_RC ESA_list_insert_ptr (ESALIST_handle_typ *list,
                                   ESALIST_entry_typ  *after,
                                   void               *ptr,
                                   int                 size);
 
/*******************************************************************
 PROCEDURE NAME :
 DESCRIPTION    :
 INPUT   	:
 OUTPUT		:
 RETURN VALUE	:
*******************************************************************/
 
ESA_RC ESALIST_init (ESALIST_handle_typ  *list)
{
    if( list EQ NULL )  return ESA_FATAL;
    list->curr  = NULL;
    list->first = NULL;
    list->count = 0;
    return ESA_OK;
}
 
ESA_RC ESALIST_reset (ESALIST_handle_typ  *list)
{
    if( list EQ NULL )  return ESA_FATAL;
    list->curr = NULL;
    return ESA_OK;
}
 
ESA_RC ESALIST_next_ptr (ESALIST_handle_typ  *list,
                         void               **ptr,
                         int                 *size)
{
    ESA_RC		rc = ESA_OK;
 
    if( list EQ NULL )		/* no list */
    {
	rc = ESA_FATAL;
    }
    else if( list->curr EQ NULL ) /* no current */
    {
	if( list->first EQ NULL )
	{
	    rc = ESA_EOF;
	}
	else                     /* was before the first */
	{
	    list->curr = list->first;
	}
    }
    else  if( list->curr->next EQ NULL )  /* last record */
    {
	rc = ESA_EOF;
    }
    else               				  /* OK */
    {
	list->curr =  list->curr->next;
    }
 
    if (rc EQ ESA_OK)
    {
	if( list->curr->ptr EQ NULL )
	{
	    rc = ESA_FATAL; /* the data is not allocated */
	}
	else
	{
	    *ptr  = list->curr->ptr;
	    *size = list->curr->size;
	}
    }
    return rc;
}
 
ESA_RC ESALIST_next (ESALIST_handle_typ *list,
                     void               *ptr,
                     int                 in_size,
                     int                *out_size )
{
    ESA_RC	rc = ESA_OK;
    void   	*next_ptr;
 
    rc = ESALIST_next_ptr(list, &next_ptr, out_size );
    if (rc EQ ESA_OK)
    {
	if (*out_size GT in_size) rc = ESA_FATAL;
	else			  memcpy (ptr, next_ptr, *out_size);
    }
    return rc;
}
 
 
static ESA_RC ESA_list_delete_ptr (
			ESALIST_handle_typ	*list,
                        ESALIST_entry_typ	*entry)
{
    ESA_RC		rc = ESA_EOF;
    ESALIST_entry_typ 	*del = NULL;
 
    if( list EQ NULL )		/* no list */
	rc = ESA_FATAL;
    else if( list->first EQ NULL ) /* list is empty */
	rc = ESA_EOF;
    else
	del = list->first;
 
    while (del NE NULL)
    {
	if (del EQ entry)
	{
	    if (entry->prev EQ NULL )     /* the first */
	        list->first = entry->next;
	    else
		entry->prev->next = entry->next;
 
	    if (entry->next NE NULL )
	       entry->next->prev = entry->prev;
 
	    list->curr = entry->prev;   /* set current before */
	    if (list->count) list->count--;
 
	    free((char*)(del->ptr));
	    free((char*)(del));
            rc = ESA_OK;
	    break;
	}
	del = del->next;
    }
    return rc;
}
 
ESA_RC ESALIST_delete (ESALIST_handle_typ *list)
{
   return ESA_list_delete_ptr (list, list->curr);
}
 
ESA_RC ESALIST_clear (ESALIST_handle_typ *list)
{
    ESA_RC		rc = ESA_OK;
    ESALIST_entry_typ	*del, *next;
 
    if( list EQ NULL )		/* no list */
	rc = ESA_FATAL;
    else if( list->first EQ NULL ) /* list is empty */
	rc = ESA_EOF;
    else
    {
	del = list->first;
	list->count = 0;
	list->first = NULL;
	list->curr  = NULL;
 
	while( del NE NULL )
	{
	    next = del->next;
	    free((char*)(del->ptr));
	    free((char*)(del));
	    del = next;
	}
    }
    return rc;
}
 
static ESA_RC ESA_list_insert_ptr (
			ESALIST_handle_typ	*list,
                        ESALIST_entry_typ	*after,
                        void			*ptr,
                        int			size)
{
    ESA_RC		rc = ESA_FATAL;
    ESALIST_entry_typ  *new;
 
    if( list NE NULL )		/* list */
    {
	new = (ESALIST_entry_typ *) malloc (sizeof(ESALIST_entry_typ));
	if( new NE NULL )
	{
	    new->ptr = malloc (size);
	    if( new->ptr EQ NULL )
	    {
		free ((char*)(new));
	    }
	    else
	    {
		new->size = size;
		new->prev = NULL;
		new->next = NULL;
		memcpy (new->ptr, ptr, size);
		rc = ESA_OK;
 
		list->count++;
 
     		if (list->first EQ NULL ) /* list is empty */
     		{
		    list->first = new;
		}
		else if (after EQ NULL)  /* before the first*/
		{
		    list->first->prev 	= new;
		    new->next 		= list->first;
		    list->first 	= new;
		}
		else if (after->next EQ NULL) /* append */
		{
		    after->next 	= new;
		    new->next   	= NULL;
		    new->prev   	= after;
		}
		else
		{
		    after->next->prev 	= new;
		    new->next   	= after->next;
		    after->next 	= new;
		    new->prev   	= after;
		}
	    }
	}
    }
    return rc;
}
 
ESA_RC ESALIST_append( ESALIST_handle_typ *list,
                       void               *ptr,
                       int                 size )
{
    ESA_RC		rc = ESA_FATAL;
    ESALIST_entry_typ  *last;
 
    if( list NE NULL )		/* list */
    {
	last = list->first;
 
	while( last NE NULL )
	{
	    if (last->next EQ NULL) break;
	    last = last->next;
	}
	rc = ESA_list_insert_ptr( list, last, ptr, size );
    }
    return rc;
}
 
ESA_RC ESALIST_insert( ESALIST_handle_typ *list,
                       void               *ptr,
                       int                 size )
{
    ESA_RC		rc = ESA_FATAL;
 
    if( list NE NULL )		/* list */
    {
	rc = ESA_list_insert_ptr( list, list->curr, ptr, size );
    }
    return rc;
}
 
 
void * ESALIST_search (ESALIST_handle_typ *list,
                       void               *ptr,
                       int                 size )
{
	int  	found;
	void	*curr;
	int		curr_size;
	ESA_RC	rc = ESA_OK;
 
	found = FALSE;
	ESALIST_reset (list);
 
	rc = ESALIST_next_ptr (list, &curr,&curr_size );
	while (rc EQ ESA_OK)
	{
 
		if (memcmp(ptr,curr,size) EQ 0)
		{
			found = TRUE;
			break;
		}
		rc = ESALIST_next_ptr (list, &curr,&curr_size );
	}
 
	if (NOT found)
	{
		curr = 0;
	}
	return curr;
}
 
void * ESALIST_search_exact_match (ESALIST_handle_typ *list,
                                   void               *ptr,
                                   int                 size)
{
    void    *curr;
    int      curr_size;
    ESA_RC   rc = ESA_OK;
 
    ESALIST_reset (list);
 
    rc = ESALIST_next_ptr (list, &curr, &curr_size);
    while (rc EQ ESA_OK)
    {
       if ( (curr_size EQ size) AND (memcmp(ptr, curr, size) EQ 0) )
       {
          break;
       }
       rc = ESALIST_next_ptr (list, &curr, &curr_size);
    }
 
    if (rc NE ESA_OK)
    {
        curr = 0;
    }
 
    return curr;
}
