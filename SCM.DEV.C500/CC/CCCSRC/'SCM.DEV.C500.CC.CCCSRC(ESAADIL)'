/*
 * Version Information:
 * ====================
 * File name       : %name: esaadil.c %
 * Instance        : %instance: 1 %
 * Created by      : %created_by: leonid_s %
 * Created on      : %date_created: Tue Apr 20 09:10:53 2004 %
 * Current Version : %version: 2 %
 * Last Modified by: %derived_by: leonid_s %
 * Last Modified on: %date_modified: Mon May 12 08:07:22 2003 %
 */
 
/***********************************************
 * Mod.ID   Who      When         Description
 * =============================================
 * SAS2IBMA AvnerL   21-Dec-16    SAS/C to IBM C Conversion Project
 ***********************************************************
 *   CHNAGE IDs copied from CTSCADI
 * ps0161   Alex     27/07/97 Fix bug in function :
 *                            ADDINFO_convert_list_sep
 * SAS2IBMT SeligT   11/05/17 SAS/C to IBM C Conversion Project
 * WS10070  KailasP  13/03/17 Add ADDINFO_list_getnextvalue
 * WS10079  ThomaS   22/09/20 ADDINFO_list_match
 * BS10123  Vaibhav  30-MAR-23    Fix for loop issue for empty item
 *                                in ADDINFO_list_search routine
 * BS10124  Vaibhav  15/05/23 Fix bug in the function -
 *                            ADDINFO_list_search.
 ***********************************************************
 * WS10082  MauriC   10-OCT-22    Merge ADDINFO routines
 *          AvnerL   05-DEC-22    Remove ESAADIL & AIT
 * WS10082K KailasP  11-DEC-22    Update Addinfo routines
 **********************************************/
 
#include   "globs.h"
 
/*
 *   Standard include files
 */
 
#include   STDIO
#include   STDLIB
#include   STRING
#include   CTYPE
 
#include   MEMORY
 
/*
 *   ESA include files
 */
 
#include   ESA_DIAG
#include   ESA_API
#include   ESA_CTSAMSG
#include   ESA_API_CODES
 
#include   ESA_ESAADI
 
 
/* temporarily here */
 
#define MAX_SUBFIELD_SIZE 512
 
/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_list_search      adies24           *
*                                                             *
* DESCRIPTION    : Locate an item in addinfo list value       *
*                                                             *
* INPUT          : list     - list string (items spearted by  *
*                             commas)                         *
*                  item     - searched item                   *
*                  sep      - string of list seperators       *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : Pointer to list item or NULL               *
*                                                             *
**************************************************************/
 
char * ADDINFO_list_search (char *list, char *item, char  sep_c)
{
  static char func[] = "ADDINFO_list_search";
  char *loc, *before_loc;
  char sep[2];
  int  len;
 
 /*
  *    Initialize
  */
 
  ESA_DIAG_enter(ESA_COMP_API_ADDINFO, 11, func);
 
  BUILD_STRING_SEPARATOR( sep, sep_c)
 
  len = strlen(item);
  loc = strstr(list,item);
 
 /* BS10123 start */
  /* BS10124 if(loc EQ list)
  /@ If item is empty string, strstr() retunrs pointer to the list. No
    need to search item in list, set LOC to NULL, Return. BS10123 @/ */
 
  /*  If item is empty string, i.e. length of item is ZERO then
      no need to search item in list,set LOC= NULL and Return BS10124 */
  if ( len EQ 0 )                                          /* BS10124 */
    {
       loc = NULL ;
    }
  else {
 
 /* BS10123 end */
 /*
  *    Locate matching substrings
  */
 
    while ( loc NE NULL ) {
 
       /* substring found */
 
       before_loc = loc - 1 ;
       if ((loc[len] EQ NULL_CHAR) OR (strchr(sep,loc[len]) NE NULL))
 
            /* substring is a seperate item */
 
            if (loc EQ list)
               break;
            else if (strchr(sep,*before_loc) NE NULL)
                    break;
 
       /* try again */
       loc = strstr(loc+len,item);
 
    } /* while */
  } /* else           BS10123 */
 
 /*
  *   Finish
  */
 
  ESA_DIAG_printf(ESA_COMP_API_ADDINFO,11,
                  "Exiting with rc = %p.",loc);
  ESA_DIAG_exit(ESA_COMP_API_ADDINFO, 11, func, ESA_OK );
 
  return loc;
 
}
 
/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_list_diff      adies25             *
*                                                             *
* DESCRIPTION    : Build a list of items found in first       *
*                  string, but not in second string .         *
* WS10082K         The function can be used for lists values  *
*                  not longer than ADDINFO_LIST_MAX_ITEM(512) *
*                                                             *
* INPUT          : inlist1  - first list                      *
*                  inlist2  - second list                     *
*                  outlist  - list of added items             *
*                  insep    - string of list sperators        *
*                  outsep   - sepearator in output list       *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ESA_OK                                     *
*                                                             *
**************************************************************/
 
ESA_RC ADDINFO_list_diff (char *inlist1,
                          char *inlist2,
                          char *outlist,
                          char  insep_c,
                          char  outsep_c)
{
  static char  func[] = "ADDINFO_list_diff";
  char         item [ADDINFO_LIST_MAX_ITEM+1];
  ESA_RC       rc = ESA_OK;
  int          off;
  unsigned int len;
  int          max_off ;
  char         insep[2], outsep[2];
 
 /*
  *    Initialize
  */
 
  BUILD_STRING_SEPARATOR( insep,  insep_c)
  BUILD_STRING_SEPARATOR( outsep, outsep_c)
 
  ESA_DIAG_enter(ESA_COMP_API_ADDINFO, 11, func);
  ESA_DIAG_printf(ESA_COMP_API_ADDINFO,11,
                  "inlist1=%s inlist2=%s",inlist1,inlist2);
 
  max_off = strlen(inlist1);
  *outlist = NULL_CHAR;
 
  off = strspn(inlist1,insep);
 
 /*
  *    Loop on first input list keywords
  */
 
  while ( off LT max_off ) {
 
    len = strcspn(inlist1+off,insep);
    if (len GT 0) {
 
        /* if item not in second list, add it to output list */
 
       if (len GT sizeof(item)-1) {
         rc = ESA_ERR;
         goto exit;
       }
       strncpy(item,inlist1+off,len);
       item[len] = NULL_CHAR;
       if (ADDINFO_list_search(inlist2,item,insep_c) EQ NULL) {
          if ( *outlist NE NULL_CHAR )
             strcat(outlist,outsep);
          strcat(outlist,item);
       }
       off += len;
       ESA_DIAG_printf(ESA_COMP_API_ADDINFO,12,
                       "item=%s, outlist=%s",item,outlist);
    }
    off += strspn(inlist1+off,insep);
 
  } /* while */
 
 /*
  *   Finish
  */
 
  exit: ;
 
  ESA_DIAG_exit(ESA_COMP_API_ADDINFO, 11, func, rc);
 
  return rc;
 
}
 
 /**************************************************************
 *                                                             *
 * PROCEDURE NAME : ADDINFO_convert_list_sep     adies28       *
 *                                                             *
 * DESCRIPTION    : Convert string containing old seperators   *
 *                  to new seperators                          *
 *                                                             *
 * INPUT          : src_entry_sep - source entry sep           *
 *                  src_subf_sep  - source subfield  sep       *
 *                  trg_entry_sep - target entry sep           *
 *                  trg_subf_sep  - target subfield  sep       *
 *                                                             *
 * input/output   : buff    - string buffer                    *
 *                                                             *
 * RETURN VALUE   : ESA_RC                                     *
 *                                                             *
 **************************************************************/
 
EXT ESA_RC ADDINFO_convert_list_sep (char    * buff,
                                     char      src_entry_sep,
                                     char      src_subf_sep,
                                     char      trg_entry_sep,
                                     char      trg_subf_sep)
{
   static   char     func[] = "ADDINFO_convert_list_sep";
   ESA_RC            rc = ESA_OK;
   int               i, len;
 
   ESA_DIAG_enter(ESA_COMP_API_ADDINFO ,14,func);
 
   len = strlen(buff);
   for(i=0; i LT len; i++) {
     if (buff[i] EQ src_entry_sep)      /* Entry separator    */
        buff[i] = trg_entry_sep;
     else if (buff[i] EQ src_subf_sep)  /* Subfield separator */
        buff[i] = trg_subf_sep;
  /* WS10082K - Start                                          *
   *               Following code is removed originally from   *
   *               ps0161 as when isprint was called for '!'   *
   *               the results for unpredictable.              */
  /* else if ( isprint(buff[i]) EQ 0 )  /* Unprintable char    */
  /*    buff[i] = trg_entry_sep;                               */
  /* WS10082K - End */
   }
 
 
   ESA_DIAG_exit( ESA_COMP_API_ADDINFO ,14, func, rc );
 
   return rc;
 
 }
 
/* WS10082 - Move 2 ADDINFO_list_xxx functions from CTSCADI to here */
 
/********************************************************************
* Procedure Name: ADDINFO_list_getnextvalue      adies26            *
*                                                                   *
* Description : Get one value from list field.                      *
*               The routine can be used to get list values one      *
*               by one.                                             *
*               Note:                                               *
*               This routine does not handle sub-fields.            *
*                                                                   *
* Input :  pair - add_info pair to be parsed                        *
*          field_separator - delimiter to get field from list       *
*          lasts - lasts position to continue getting values        *
*                  lasts must be NULL when called for first time    *
* Output:                                                           *
*          token - A copy of the next value from the list-type      *
*                  value, NULL_CHAR when end of values.             *
*                  token should be defined by the caller as a       *
*                  string variable with length enough to get the    *
*                  longest expected value.                          *
*                                                                   *
* Return value: ESA_OK                                              *
*               ESA_EOF - If we reach to end of string              *
*                                                                   *
********************************************************************/
 
ESA_RC ADDINFO_list_getnextvalue(ONE_FIELD_rec_ptr pair,
                                char field_separator,
                                char *token,
                                char **lasts)
{
    static char func[] = "ADDINFO_list_getnextvalue";
    char *start_ptr, temp_char, *iterator;
    ESA_RC rc = ESA_OK;
    ESA_DIAG_enter(ESA_COMP_API_ADDINFO, 1, func);
 
 
    if ( *lasts NE NULL )
    {
        iterator = *lasts;
    }
    else
    {
        /*calling for first time */
    /*  iterator = pair->value;                      *WS10082K*/
        iterator = get_pair(pair,->value);          /*WS10082K*/
        *lasts = iterator;
    }
 
    if(iterator EQ NULL OR *iterator EQ NULL_CHAR )
    {
        ESA_DIAG_printf(ESA_COMP_API_ADDINFO, 10,
                    "iterator is NULL");
        *token = NULL_CHAR;
        rc = ESA_EOF;
        goto exit;
    }
 
    /* Check if first character is separator and not the end of   *
     * string. Move pointer to next character to read next token  */
 
 
    if ( (*iterator EQ field_separator) AND
         (*(iterator+1) NE NULL_CHAR)       )
    {
        iterator++;
    }
 
    start_ptr = iterator;
 
    while ( (*iterator NE NULL_CHAR)    AND
            (*iterator NE field_separator) )
    {
        ESA_DIAG_printf(ESA_COMP_API_ADDINFO, 99,
          "iterator_len - %d, iterator - %c", strlen(iterator)
           , *iterator);
 
        iterator++;
    }
 
    if( start_ptr NE iterator )
    {
        temp_char = *iterator;
        *iterator = NULL_CHAR;
        strcpy (token, start_ptr);
        *iterator = temp_char;
        *lasts = iterator;
    }
    else
        *token = NULL_CHAR;
 
    exit :
 
    ESA_DIAG_printf(ESA_COMP_API_ADDINFO, 5,
                        "Token: %s", token);
    ESA_DIAG_exit(ESA_COMP_API_ADDINFO, 1, func, ESA_OK);
 
    return rc;
}
 
/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_list_match     adies27             *
*                                                             *
* DESCRIPTION    : Build a list of items in the first string, *
*                  which also appear in the 2nd string        *
* WS10082K         The function can be used for lists values  *
*                  not longer than ADDINFO_LIST_MAX_ITEM(512) *
*                                                             *
* INPUT          : inlist1  - first list                      *
*                  inlist2  - second list                     *
*                  outlist  - pointer to area at least as     *
*                             large as inlist1                *
*                  insep_c  - char of input list seperator    *
*                  outsep-c - char of output list seperator   *
*                                                             *
* OUTPUT         : outlist  - list of common items            *
*                                                             *
* RETURN VALUE   : ESA_OK                                     *
*                                                             *
**************************************************************/
ESA_RC ADDINFO_list_match (char *inlist1, char *inlist2,
                          char *outlist, char insep_c, char outsep_c)
{
 
  static char func[] = "ADDINFO_list_match";
  char   item[ADDINFO_LIST_MAX_ITEM+1] = NULL_STRING;
  ESA_RC rc = ESA_OK;
  int    off = 0;
  int    len = 0;
  int    max_off = 0 ;
  char   insep[2] = NULL_STRING;
  char   outsep[2] = NULL_STRING;
 
 /*
  *    Initialize
  */
 
  BUILD_STRING_SEPARATOR( insep,  insep_c)
  BUILD_STRING_SEPARATOR( outsep, outsep_c)
 
  ESA_DIAG_enter(ESA_COMP_API_ADDINFO, 1, func);
  ESA_DIAG_printf(ESA_COMP_API_ADDINFO,1,
                  "inlist1=%s inlist2=%s",inlist1,inlist2);
 
  max_off = strlen(inlist1);
  *outlist = NULL_CHAR;
 
  off = strspn(inlist1,insep);
 
 /*
  *    Loop on first input list keywords
  */
 
  while ( off LT max_off ) {
 
    len = strcspn(inlist1+off,insep);
    if (len GT 0) {
 
        /* if item is in second list, add it to output list */
 
       if (len GT sizeof(item)-1) {
         rc = ESA_ERR;
         goto exit;
       }
       strncpy(item,inlist1+off,len);
       item[len] = NULL_CHAR;
       if (ADDINFO_list_search(inlist2,item,insep_c) NE NULL) {
          if ( *outlist NE NULL_CHAR )
             strcat(outlist,outsep);
          strcat(outlist,item);
       }
       off += len;
       ESA_DIAG_printf(ESA_COMP_API_ADDINFO,2,
                       "item=%s, outlist=%s",item,outlist);
    }
    off += strspn(inlist1+off,insep);
 
  } /* while */
 
 /*
  *   Finish
  */
 
  exit: ;
 
  ESA_DIAG_exit(ESA_COMP_API_ADDINFO, 1, func, rc);
 
  return rc;
 
}
 
 
/* WS10082 end */
/*** Remove ESAADIL_ functions which no one uses. WS10082 ***
 
@****************************************************************
 *                                                             	*
 * PROCEDURE NAME : ESAADIL_list_open                         	*
 *                                                             	*
 * DESCRIPTION    : Opens addinfo list, positions current row  	*
 *		    pointer befor the first record. So, to go	*
 *                  to the first one, the                       *
 *                  ESAADIL_list_go_next_entry                  *
 *		    has to be called after open			*
 * INPUT          : *pair   -  ptr to the addinfo list field    *
 *                  mode    -  ESAADI_LIST_MODE_NEW |           *
 *                             ESAADI_LIST_MODE_OLD             *
 *                                                             	*
 * OUTPUT         : *handle -  handle structure ptr		*
 *                                                             	*
 * RETURN VALUE   : ESA_OK if successful ESS_ERR or FATAL if not*
 *                                                             	*
 ***************************************************************@
 
ESA_RC ESAADIL_list_open (ONE_FIELD_rec_typ         *pair,
                          ESAADI_LIST_OPEN_MODE_typ  mode,
                          short                      max_list_length,
                          ESAADIL_LIST_HNDL_typ     *handle )
{
    ESA_RC  rc = ESA_FATAL;
 
    if (pair NE NULL)
    {
	handle->pair_ptr 	= pair;
	handle->offset 		= -1;
	handle->mode		= mode;
	handle->row_offset	= -1;
	handle->max_list_length = max_list_length;
	switch (mode)
	{
	    case ESAADI_LIST_MODE_NEW:
	    	rc = ESA_OK;
	    	handle->pair_cpy 		= *pair;
	    	handle->pair_cpy.vallen 	= 0;
	    	handle->pair_cpy.value[0] 	= NULL_CHAR;
	    	break;
 
	    case ESAADI_LIST_MODE_OLD:
	    	rc = ESA_OK;
	    	break;
    	}
    }
    return rc;
}
 
@****************************************************************
 *                                                              *
 * PROCEDURE NAME : ESAADIL_list_go_next_entry                  *
 *                                                              *
 * DESCRIPTION    : positions on the next row in list opend     *
 *		   in ESAADI_LIST_MODE_OLD mode                 *
 *                                                              *
 * INPUT          : *handle	-  	handle structure ptr	*
 *                                                              *
 * OUTPUT         : NONE     					*
 *                                                              *
 * RETURN VALUE   : ESA_OK if successful ESS_ERR or FATAL if not*
 *                                                              *
 ***************************************************************@
 
ESA_RC ESAADIL_list_go_next_entry (ESAADIL_LIST_HNDL_typ *handle)
{
    ESA_RC  rc = ESA_FATAL;
    int     shift, length;
    char   *value;
 
    if (handle->pair_ptr EQ NULL) return ESA_FATAL;
 
    if ( handle->mode EQ ESAADI_LIST_MODE_OLD )
    {
	rc = ESA_EOF; @* no more records *@
 
	handle->row_offset = 0;  @* first field in the row *@
 
	if( handle->offset LT 0 )
	{ @* just opened - do not search for separator*@
	    handle->offset = 0; @* first row *@
   	    if (handle->pair_ptr->vallen > 0)
            @* check if list is not empty *@
   	       rc = ESA_OK;
	}
	else  @* search for a row separator *@
	{
	    length = handle->pair_ptr->vallen - handle->offset;
            value  = handle->pair_ptr->value + handle->offset;
 
	    for (shift=0; shift < length; shift++)
	    {
	        if (value[shift] EQ ADDINFO_LIST_ENTRY)
	        {
		    rc = ESA_OK; @* there are some records *@
		    handle->offset += shift+1;
		    break;
	    	}
	    }
	}
    }
    return rc;
}
 
@****************************************************************
*                                                             	*
* PROCEDURE NAME : ESAADIL_list_append_entry                    *
*                                                             	*
* DESCRIPTION    : adds new row to the end of the list opened 	*
*		   in ESAADI_LIST_MODE_NEW mode			*
*                                                             	*
* INPUT          : *handle	-	handle structure ptr	*
*                                                             	*
* OUTPUT         : NONE                     		      	*
*                                                             	*
* RETURN VALUE   : ESA_OK if successful ESS_ERR or FATAL if not	*
*                                                             	*
*****************************************************************@
 
ESA_RC ESAADIL_list_append_entry (ESAADIL_LIST_HNDL_typ *handle)
{
    ESA_RC  		rc = ESA_FATAL;
    ONE_FIELD_rec_typ  *pair_ptr;
 
    if (handle->pair_ptr EQ NULL) return ESA_FATAL;
 
    if ( handle->mode EQ ESAADI_LIST_MODE_NEW )
    {
    	rc = ESA_EOF;
        pair_ptr = &(handle->pair_cpy);
 
	if ( pair_ptr->vallen+1 < handle->max_list_length)
	{
	    rc = ESA_OK;
	    if( handle->offset GE 0 ) @* not the first *@
	    {
	   	@* add row separator before*@
            	pair_ptr->value [pair_ptr->vallen] =  ADDINFO_LIST_ENTRY;
	    	pair_ptr->vallen++;
	    }
	    handle->offset = pair_ptr->vallen;
	    pair_ptr->value [pair_ptr->vallen] = NULL_CHAR;
	    handle->row_offset = -1;  @* start of the row *@
	}
    }
    return rc;
}
 
@****************************************************************
*                                                             	*
* PROCEDURE NAME : ESAADIL_list_get_next_subfield               *
*                                                             	*
* DESCRIPTION    : positions on the next row in list opend    	*
*		   in ESAADI_LIST_MODE_OLD mode			*
*                                                             	*
* INPUT          : *handle -  	handle structure ptr		*
*		   size  	max data length wich can 	*
				be accomodated 			*
*                                                             	*
* OUTPUT         : *field 	ptr to the character array 	*
				to accomodated  the value	*
*                                                              	*
* RETURN VALUE   : ESA_OK if successful ESS_ERR or FATAL if not	*
*                                                             	*
*****************************************************************@
 
ESA_RC ESAADIL_list_get_next_subfield (ESAADIL_LIST_HNDL_typ *handle,
                                       char                  *field,
                                       int                    size )
{
    ESA_RC  rc = ESA_FATAL;
    int     length, shift, data_len;
    char   *value;
 
    if (handle->pair_ptr EQ NULL) return ESA_FATAL;
 
    if ( handle->mode EQ ESAADI_LIST_MODE_OLD )
    {
	if( handle->offset GE 0 ) @* go_next_row was issued before *@
	{
	    rc = ESA_EOF; @* no more fields *@
 
            if (handle->row_offset GE 0)
            {
            	value  = handle->pair_ptr->value  + handle->offset +
                         handle->row_offset;
	    	length = handle->pair_ptr->vallen - handle->offset -
                         handle->row_offset;
 
	    	for (shift=0; shift LE length; shift++)
	    	{
		    switch (value[shift])
		    {
		    	case ADDINFO_LIST_ENTRY:
			    rc = ESA_OK;
			    @* set row_offset to -1 in order to receive EOF on next call *@
	    	    	    handle->row_offset = -1;
			    break;
 
		    	case ADDINFO_LIST_SUBFIELD:
			    rc = ESA_OK;
	    	    	    handle->row_offset += shift+1;
			    break;
 
		    	default:
		            if (shift EQ length)
		            {
	    	    	    	handle->row_offset = -1;
		            	rc = ESA_OK;
		            	break;
		            }
			    continue;
		    }
 
	    	    data_len = shift > size ? size : shift;
	    	    strncpy (field, value, data_len);
	    	    field[data_len] = NULL_CHAR;
		    break;  @* leave the loop *@
		}
	    }
	}
    }
    return rc;
}
 
@****************************************************************
*                                                             	*
* PROCEDURE NAME : ESAADIL_list_append_subfield			*
*                                                             	*
* DESCRIPTION    : positions on the next row in list opend    	*
*		   in ESAADI_LIST_MODE_OLD mode			*
*                                                             	*
* INPUT          : *handle  -  	handle structure ptr		*
*		   *field 	string containing the value	*
*		   size  	the significan data length	*
				(w/o null terminator)		*
*                                                             	*
* RETURN VALUE   : ESA_OK if successful ESS_ERR or FATAL if not	*
*                                                             	*
*****************************************************************@
 
ESA_RC ESAADIL_list_append_subfield (ESAADIL_LIST_HNDL_typ *handle,
                                     char                  *field )
{
    ESA_RC  	rc = ESA_FATAL;
    char   	*value;
    int 	size;
 
    if (handle->pair_ptr EQ NULL) return ESA_FATAL;
 
    if (handle->mode EQ ESAADI_LIST_MODE_NEW)
    {
       if (handle->offset GE 0)  @* new row was issued before *@
	   {
          rc = ESA_EOF;
          value = handle->pair_cpy.value + handle->offset;
          @*
             strip leading and trailing blanks
          *@
          while (field[0] EQ ' ') field++;
          size = strlen (field);
          while (size > 0 AND field [size-1] EQ ' ') size--;
          if (handle->offset + handle->row_offset + size + 1 <
              handle->max_list_length)
		  {
             if (handle->row_offset GE 0) @* new field was issued before *@
			 {
		        @* insert field separator before *@
		        value [handle->row_offset] = ADDINFO_LIST_SUBFIELD;
			 }
 
		     handle->row_offset++;
		     strncpy (value+handle->row_offset, field, size);
		     handle->row_offset += size;
		     value [handle->row_offset] = NULL_CHAR;
		     handle->pair_cpy.vallen = handle->offset + handle->row_offset;
		     rc = ESA_OK;
		  }
	      else  @* no space left, remove whole last entry *@
		  {
	         if (handle->offset GE 0) @* new field was issued before *@
			 {
	            if (handle->offset)
                    handle->offset--; @* not the first entry *@
	            value--;
	            value [0] = NULL_CHAR;
	            handle->pair_cpy.vallen = handle->offset;
			 }
		  }
	   }
    }
    return rc;
}
 
@****************************************************************
 *                                                              *
 * PROCEDURE NAME : ESAADIL_list_close                           *
 *                                                              *
 * DESCRIPTION    : Closes addinfo list, 			*
 *		    calculates value length if open in NEW mode	*
 *		    sets handle->pair_ptr to NULL, so the handle*
 *		    can not be used without ESAADIL_list_open	*
 * INPUT          : *handle     -  handle structure ptr	        *
 *                                                              *
 * OUTPUT         : none                                        *
 *                                                              *
 * RETURN VALUE   : ESA_OK if successful ESS_ERR or FATAL if not*
 *                                                              *
 ***************************************************************@
 
ESA_RC ESAADIL_list_close (ESAADIL_LIST_HNDL_typ *handle)
{
    ESA_RC  rc = ESA_OK;
 
    if (handle->pair_ptr EQ NULL) return ESA_FATAL;
 
    switch (handle->mode)
    {
	case ESAADI_LIST_MODE_NEW:
	@*
	    handle->pair_cpy.vallen = 0;
            if (handle->offset GT 0)
                handle->pair_cpy.vallen = handle->offset;
            if (handle->row_offset GT 0)
                handle->pair_cpy.vallen += handle->row_offset;
	 *@
	    handle->pair_cpy.value [handle->pair_cpy.vallen] = NULL_CHAR;
	    *(handle->pair_ptr) = handle->pair_cpy;
	    break;
 
	case ESAADI_LIST_MODE_OLD:
	    break;
    }
 
    handle->pair_ptr = NULL;
    return rc;
}
 
@****************************************************
 * Procedure Name: ESAADIL_list_to_string
 * Description   : Convert one-dimenional addinfo list (1 subfield
 *                 in each row) to a comma-separated string.
 * Input         : Addinfo pair, max output length
 * Output        : string
 * Input@Output  :
 * Return Value  :
 * Side Effects  :
 ***************************************************@
 
ESA_RC ESAADIL_list_to_string (ONE_FIELD_rec_ptr   fp,
                               char              * outval,
                               int                 outlen,
     						   char              * entry_separator,
							   char              * subfield_separator)
 
{
   ESA_RC                rc = ESA_OK;
   char                  entry_sp[2] , subf_sp[2];
   int          ii ;
 
   memset(outval , NULL_CHAR , outlen);
 
 
   if (entry_separator EQ NULL)
   {
#ifdef STRLIST_ENTRY_SEPARATOR
	   strcpy(entry_sp , STRLIST_ENTRY_SEPARATOR);
#else
	   strcpy(entry_sp , ",");
#endif
   }
   else
   {
	   entry_sp[0] = entry_separator[0];
   }
 
   entry_sp[1] = NULL_CHAR;
 
   if (subfield_separator EQ NULL)
   {
#ifdef STRLIST_SUBFIELD_SEPARATOR
	   strcpy(subf_sp , STRLIST_SUBFIELD_SEPARATOR);
#else
	   strcpy(subf_sp , ";");
#endif
   }
   else
   {
	   subf_sp[0] = subfield_separator[0];
   }
 
   subf_sp[1] = NULL_CHAR;
 
   for (ii = 0 ; (ii LT fp->vallen) AND (ii LT (outlen - 1)) ; ii++)
   {
       if (fp->value[ii] EQ ADDINFO_LIST_SUBFIELD)
	      outval[ii] = subf_sp[0];
	   else
       if (fp->value[ii] EQ ADDINFO_LIST_ENTRY)
	      outval[ii] = entry_sp[0];
	   else
	      outval[ii] = fp->value[ii];
   }
 
   outval[ii] = NULL_CHAR ;
 
    return rc;
 
} @* ESAADIL_list_to_string *@
 
@****************************************************
 * Procedure Name: ESAADIL_string_to_list
 * Description   : Convert comma-separated string to addinfo list
 * Input         : string
 * Output        : Addinfo pair
 * Input/Output  :
 * Return Value  :
 * Comments      :ver 2.0.1.1
 ***************************************************@
 
ESA_RC ESAADIL_string_to_list (char              * inval,
                               ONE_FIELD_rec_ptr   fp ,
     						   char              * entry_separator,
	    					   char              * subfield_separator)
 
{
   int                     ii;
   ESA_RC                  rc = ESA_OK;
   char                    entry_sp[2] , subf_sp[2];
 
 
   if (NOT inval)
      goto cleanup;
 
   memset(fp->value , NULL_CHAR , MAX_RSS_ADDINFO_VAL_LEN);
 
   if (entry_separator EQ NULL)
   {
#ifdef STRLIST_ENTRY_SEPARATOR
	   strcpy(entry_sp , STRLIST_ENTRY_SEPARATOR);
#else
	   strcpy(entry_sp , ",");
#endif
   }
   else
   {
	   entry_sp[0] = entry_separator[0];
   }
 
   entry_sp[1] = NULL_CHAR;
 
   if (subfield_separator EQ NULL)
   {
#ifdef STRLIST_SUBFIELD_SEPARATOR
	   strcpy(subf_sp , STRLIST_SUBFIELD_SEPARATOR);
#else
	   strcpy(subf_sp , ";");
#endif
   }
   else
   {
	   subf_sp[0] = subfield_separator[0];
   }
 
   subf_sp[1] = NULL_CHAR;
 
 
   for (ii = 0 ; ( (unsigned int)ii LT MAX_RSS_ADDINFO_VAL_LEN) AND
	       ((unsigned int)ii LT (strlen(inval))) ; ii++)
   {
       if (inval[ii] EQ subf_sp[0])
	      fp->value[ii] = ADDINFO_LIST_SUBFIELD;
	   else
       if (inval[ii] EQ entry_sp[0])
	      fp->value[ii] = ADDINFO_LIST_ENTRY;
	   else
	      fp->value[ii]= inval[ii] ;
   }
 
   fp->vallen = ii;
  cleanup:
 
   return rc;
 
} @* ESAADIL_string_to_list *@
**** end of ESAADIL removal                            WS10082 ***/
