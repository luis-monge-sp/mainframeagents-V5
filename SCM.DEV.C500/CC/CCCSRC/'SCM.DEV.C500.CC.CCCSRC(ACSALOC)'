/*
 * Version Information:
 * ====================
 * File name       : %name: acsaloc.c %
 * Instance        : %instance: 1 %
 * Created by      : %created_by: ihoffma %
 * Created on      : %date_created: Wed Nov 19 18:15:49 2003 %
 * Current Version : %version: 2 %
 * Last Modified by: %derived_by: ihoffma %
 * Last Modified on: %date_modified: Wed Nov 19 18:15:49 2003 %
 */
 
/**************************************************************
 * Mod.ID  Who      When         Description
 * ============================================================
 * IMH001  Ian H.   19-Nov-03    WSAN101342 Thread-safe code (ERRNO)
 * SAS2IBMA AvnerL  21-Dec-16    SAS/C to IBM C Conversion Project
 * BS10129  AvnerL  28-Dec-23    Recompile due to WS10078 ESAINIT
 * WS10082K KailasP 14-Mar-23    Add CSA_free_addinfo for ADDINFO
 *                               changes
 * WS10082N NuritY  13-Sep-23    support long addinfo value.
 *************************************************************/
 
#include "globs.h"
 
#include ERRNO
#include ESA_INIT
#include ESA_CS_SINFO
#include ESA_RSS
#include ESA_PROC
#include <ceeedcct.h>                                     /* WS10082N */
#include <leawi.h>                                        /* WS10082N */
 
 
 
/****************************************************
 * Procedure Name: CS_alloc
 * Description   : space allocate function
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/
 
#define TBL_ROWS_ALLOC  25
#define ALLOCATE        1
#define REALLOCATE      2
 
static void CSA_alloc_process (char        ** ptr,
                               short          ptr_type,
                               size_t         size,
                               int            num_elements,
                               int            alloc_type);
 
/* WS10082N - start */
static void CSA_free_addinfo (ALLOC_TBL_rec_typ * tbl_ent);
 
 
static void  CSA_alloc_addinfo(int                size,
                               int                allocate_typ,
                               ADDINFO_rec_ptr  * addinfo,
                               _INT4            * heap_id);
/* WS10082N - start */
 
/****************************************************
 * Procedure Name: CSA_alloc
 * Description   : allocate space
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/
ESA_RC CSA_alloc (char        ** ptr,
                  short          ptr_type,
                  size_t         size,
                  int            num_elements,
                  char         * func_name,
                  char const   * ptr_name)
 
{
  int                   ii;
  ESA_RC                rc= ESA_OK;
  void                * tmp_tbl = NULL;
  ENVIRONMENT_rec_typ * envir_ptr;
  char                  fn[]="CSA_alloc";
 
  ESA_DIAG_enter (ESA_COMP_ACSALOC, DIAG_COMMON, fn);
  CS_get_envir_address (&envir_ptr);
 
  if (envir_ptr->tbl_rows EQ 0) {
    ESA_DIAG_printf (ESA_COMP_ACSALOC, DIAG_DETAILES,
          "Tbl_rows=0 Alloc with element size %d, number elements %d",
          sizeof(ALLOC_TBL_rec_typ), TBL_ROWS_ALLOC);
    envir_ptr->tbl= (ALLOC_TBL_rec_typ *) calloc (sizeof(ALLOC_TBL_rec_typ), TBL_ROWS_ALLOC);
    if (envir_ptr->tbl EQ NULL) {
      CTSAMSG_print (ERR_CS_MALLOC,
                     envir_ptr->ctsamsg_handle, NULL,
                     envir_ptr->ctsamsg_dest,
                     "ALLOC_TBL",
                     sizeof(ALLOC_TBL_rec_typ)* TBL_ROWS_ALLOC,
                     fn);
      rc= ESA_ERR;
      goto cleanup;
    }
    memset ((char *)envir_ptr->tbl, '\0',
            sizeof(ALLOC_TBL_rec_typ)* TBL_ROWS_ALLOC);
    envir_ptr->tbl_rows= TBL_ROWS_ALLOC;
  }
 
  ESA_DIAG_printf (ESA_COMP_ACSALOC, DIAG_DETAILES,
     "Alloc pointer %s (func %s), addr = %p,size=%d,elemn=%d.Num rows=%d",
     ptr_name, func_name, envir_ptr->tbl, size , num_elements ,envir_ptr->tbl_rows);
 
  for (ii= 0; ii LT envir_ptr->tbl_rows; ii++ )
  {
     ESA_DIAG_printf (ESA_COMP_ACSALOC, 15,
             "Entry=%d, Pointer= %p" , ii ,
              envir_ptr->tbl[ii].ptr);
     if (envir_ptr->tbl[ii].ptr EQ NULL)
       break;
  }
 
  if (ii GE envir_ptr->tbl_rows)
  {
     ESA_DIAG_printf (ESA_COMP_ACSALOC, 15,
        "CS_alloc:realloc of tabl pointer %p (rows %d)",
                    envir_ptr->tbl, (int)envir_ptr->tbl_rows);
     tmp_tbl = envir_ptr->tbl ;
     envir_ptr->tbl= (ALLOC_TBL_rec_typ *)realloc(envir_ptr->tbl,
      sizeof(ALLOC_TBL_rec_typ)*(envir_ptr->tbl_rows+ TBL_ROWS_ALLOC));
     if (envir_ptr->tbl EQ NULL)
     {
       CTSAMSG_print (ERR_CS_REALLOC,
                      envir_ptr->ctsamsg_handle, NULL,
                      envir_ptr->ctsamsg_dest,
                      "ALLOC_TBL",
                      sizeof(ALLOC_TBL_rec_typ)*
                       (envir_ptr->tbl_rows+ TBL_ROWS_ALLOC),
                      fn);
       envir_ptr->tbl = tmp_tbl;
       rc= ESA_ERR;
       goto cleanup;
     }
 
     ESA_DIAG_printf (ESA_COMP_ACSALOC, 15,
       "CS_alloc:reallocet pointer %p (rows %d)",
                   envir_ptr->tbl, (int)envir_ptr->tbl_rows);
 
     memset ((char *)(envir_ptr->tbl+ envir_ptr->tbl_rows), '\0',
             sizeof(ALLOC_TBL_rec_typ)* TBL_ROWS_ALLOC);
     envir_ptr->tbl_rows += TBL_ROWS_ALLOC;
  }
 
  if (size EQ 0 OR num_elements EQ 0)
  {
    CTSAMSG_print (ERR_CS_MALLOC_ZERO,
                   envir_ptr->ctsamsg_handle,
                   NULL,
                   envir_ptr->ctsamsg_dest,
                   envir_ptr->tbl[ii].func_name,
                   envir_ptr->tbl[ii].ptr_name,
                   size,
                   num_elements,
                   func_name,
                   ptr_name);
    rc= ESA_ERR;
    goto cleanup;
  }
 
  CSA_alloc_process (ptr, ptr_type, size, num_elements, ALLOCATE);
 
  if (*ptr EQ NULL) {
    CTSAMSG_print (ERR_CS_MALLOC,
                   envir_ptr->ctsamsg_handle, NULL,
                   envir_ptr->ctsamsg_dest,
                   ptr_name,
                   size* num_elements,
                   func_name);
    rc= ESA_ERR;
    goto cleanup;
  }
 
  envir_ptr->tbl[ii].ptr=          *ptr;
  envir_ptr->tbl[ii].ptr_type=     ptr_type;
  envir_ptr->tbl[ii].size=         size;
  envir_ptr->tbl[ii].num_elements= num_elements;
  strncpy (envir_ptr->tbl[ii].func_name, func_name, FUNC_NAME_LEN);
  strncpy (envir_ptr->tbl[ii].ptr_name,  ptr_name, PTR_NAME_LEN);
 
  cleanup:
  if (rc NE ESA_OK)
    CTSAMSG_print (ERR_CS_FUNCTION,
                   envir_ptr->ctsamsg_handle, NULL,
                   envir_ptr->ctsamsg_dest, fn);
 
  CSA_print_alloc_tbl (ESA_COMP_ACSALOC, fn, FALSE);
  ESA_DIAG_exit (ESA_COMP_ACSALOC, DIAG_COMMON, fn, rc);
  return (rc);
}
/****************************************************
 * Procedure Name: CSA_realloc
 * Description   : reallocate space
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/
ESA_RC CSA_realloc (char       ** ptr,
                    short         ptr_type,
                    size_t        size,
                    int           num_elements)
 
{
  char                  fn[]="CSA_realloc";
  int                   ii;
  ESA_RC                rc= ESA_OK;
  ENVIRONMENT_rec_typ * envir_ptr;
 
  CS_get_envir_address (&envir_ptr);
  ESA_DIAG_enter (ESA_COMP_ACSALOC, DIAG_COMMON, fn);
 
  ESA_DIAG_printf (ESA_COMP_ACSALOC, DIAG_DETAILES,
         "ReAlloc pointer %p type=%d, size=%d,elemn=%d.",*ptr, ptr_type, size , num_elements);
 
  for (ii= 0; ii LT envir_ptr->tbl_rows; ii++ ) {
    if (envir_ptr->tbl[ii].ptr EQ *ptr)
      break;
  }
 
  if (ii GE envir_ptr->tbl_rows) {
    CTSAMSG_print (ERR_CS_REALLOC_NOTFND,
                   envir_ptr->ctsamsg_handle, NULL,
                   envir_ptr->ctsamsg_dest, fn);
    rc= ESA_ERR;
    goto cleanup;
  }
 
  ESA_DIAG_printf (ESA_COMP_ACSALOC, DIAG_DETAILES, "pointer %s (func %s)",
                   envir_ptr->tbl[ii].func_name, envir_ptr->tbl[ii].ptr_name);
 
  CSA_alloc_process (ptr, ptr_type, size, num_elements, REALLOCATE);
 
  if (*ptr EQ NULL) {
    CTSAMSG_print (ERR_CS_REALLOC,
                   envir_ptr->ctsamsg_handle, NULL,
                   envir_ptr->ctsamsg_dest,
                   envir_ptr->tbl[ii].ptr_name,
                   size* num_elements,
                   envir_ptr->tbl[ii].func_name);
    *ptr =   envir_ptr->tbl[ii].ptr ;
    rc= ESA_ERR;
    goto cleanup;
  }
 
  envir_ptr->tbl[ii].ptr=          *ptr;
  envir_ptr->tbl[ii].ptr_type=     ptr_type;
  envir_ptr->tbl[ii].size=         size;
  envir_ptr->tbl[ii].num_elements= num_elements;
 
  cleanup:
  if (rc NE ESA_OK)
    CTSAMSG_print (ERR_CS_FUNCTION,
                   envir_ptr->ctsamsg_handle, NULL,
                   envir_ptr->ctsamsg_dest, fn);
  CSA_print_alloc_tbl (ESA_COMP_ACSALOC, fn, FALSE);
  ESA_DIAG_exit (ESA_COMP_ACSALOC, DIAG_COMMON, fn, rc);
  return (rc);
}
 
/****************************************************
 * Procedure Name: CSA_print_alloc_tbl
 * Description   : Print  information about allocated
 *                  spce from ALLOC table
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/
void CSA_print_alloc_tbl (int comp, char * fn, int Diag)
{
 
  int                        ii, jj;
  unsigned long int          ss= 0;
  ENVIRONMENT_rec_typ      * envir_ptr;
  static unsigned long int   AllocSize= 0, AllocRows= 0;
  static                     DiagLevel= 0, InOut= 0;
  char                       func[]="CSA_print_alloc_tbl";
 
  ESA_DIAG_enter (ESA_COMP_ACSALOC, DIAG_COMMON+ 1, func);
  if (ESA_DIAG_get_debug_level(comp) LT (int)DIAG_BASIC)
		goto cleanup;
 
  if (Diag)
  {
     DiagLevel= DIAG_BASIC;
     InOut= 0;
  }
  else
      DiagLevel= DIAG_DETAILES+ 1;
 
  CS_get_envir_address (&envir_ptr);
 
  for (ii= 0, jj= 0; ii LT envir_ptr->tbl_rows; ii++ ) {
    if (envir_ptr->tbl[ii].ptr NE NULL) {
       ESA_DIAG_printf (comp, DiagLevel,
         "Alloc tbl: Row %d: func=%s ptr=%s type %d space %d(rows=%d)",
             ii+ 1, envir_ptr->tbl[ii].func_name,
             envir_ptr->tbl[ii].ptr_name,
             (int)envir_ptr->tbl[ii].ptr_type,
             envir_ptr->tbl[ii].size* envir_ptr->tbl[ii].num_elements,
             envir_ptr->tbl[ii].num_elements);
      jj++;
	  ss += (unsigned long int)
		  (envir_ptr->tbl[ii].size* envir_ptr->tbl[ii].num_elements);
    }
  }
 
  ESA_DIAG_printf (comp, (Diag) ? DIAG_BASIC : DIAG_DETAILES,
         "==== Size of Alloc Memomory equal to %u bytes ====", ss);
 
  if (Diag)
     goto cleanup;
  if (comp EQ ESA_COMP_ACSALOC)
     goto cleanup;
 
  if (InOut)
  {
     InOut= 0;
     if (AllocSize NE ss)
        ESA_DIAG_printf (comp, DIAG_BASIC,
	          "   %s: Allocated Size changes from %u to %u.",
		      fn, AllocSize, ss);
     if ((int)AllocRows NE envir_ptr->tbl_rows)
        ESA_DIAG_printf (comp, DIAG_BASIC,
	          "   %s: Allocated Rows changes from %u to %u.",
		      fn, AllocRows, envir_ptr->tbl_rows);
  }
  else
  {
     AllocRows= envir_ptr->tbl_rows;
     AllocSize= ss;
     InOut++;
  }
 
cleanup:
  ESA_DIAG_exit (ESA_COMP_ACSALOC, DIAG_COMMON+ 1, func, ESA_RC_VOID);
  return;
 
}
 
/****************************************************
 * Procedure Name: CSA_free_all
 * Description   : Clear all rows of the allocated table
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/
void  CSA_free_all (void)
 
{
  char                  fn[]="CSA_free_all";
  int                   ii;
  ENVIRONMENT_rec_typ * envir_ptr;
 
  ESA_DIAG_enter (ESA_COMP_ACSALOC, DIAG_COMMON, fn);
  CS_get_envir_address (&envir_ptr);
 
  ESA_DIAG_printf (ESA_COMP_ACSALOC, 15,
        "CS_free_all: Free  all spaces");
  if ((envir_ptr->tbl_rows EQ 0) OR (envir_ptr->tbl EQ NULL))
    goto cleanup;
 
  for (ii= 0; ii LT envir_ptr->tbl_rows; ii++ ) {
    if (envir_ptr->tbl[ii].ptr NE NULL) {
      CTSAMSG_print (ERR_CS_FREE_ALLOC,
                     envir_ptr->ctsamsg_handle, NULL,
                     envir_ptr->ctsamsg_dest,
                     fn, envir_ptr->tbl[ii].ptr_name,
                     envir_ptr->tbl[ii].func_name);
 
      /* WS10082N - start */
      if ( (envir_ptr->tbl[ii].ptr_type EQ STRUC_ADDINFO) OR
           (envir_ptr->tbl[ii].ptr_type EQ STRUC_RES_ADDINFO) )
        CSA_free_addinfo((ALLOC_TBL_rec_typ *)(&(envir_ptr->tbl[ii])));
      /* WS10082N - end   */
 
      free (envir_ptr->tbl[ii].ptr);
      ESA_DIAG_printf (ESA_COMP_ACSALOC, 16,
         "CS_free_all: Free address %p" ,envir_ptr->tbl[ii].ptr );
       envir_ptr->tbl[ii].ptr= NULL;
    }
  }
  free (envir_ptr->tbl);
  ESA_DIAG_printf (ESA_COMP_ACSALOC, 15,
                   "CS_free_all: Free TABLE address %p" ,
                   envir_ptr->tbl );
  envir_ptr->tbl= NULL;
  envir_ptr->tbl_rows= 0;
 
  cleanup:
  ESA_DIAG_exit (ESA_COMP_ACSALOC, DIAG_COMMON, fn, ESA_RC_VOID);
  return;
}
 
/* WS10082K+N - start */
/****************************************************
 * Procedure Name: CSA_free_addinfo
 * Description   : Discard the the heap containing the addinfo(s)
 *               : and all its/their long pairs.
 * Input         : -> tbl entry contining the addinfo(s) address.
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/
static void  CSA_free_addinfo (ALLOC_TBL_rec_typ * tbl_ent)
{
  char                  fn[]="CSA_free_addinfo";
  int                   ii=0, index=0;
  char                * charPtr=NULL;
  ADDINFO_rec_ptr       addinfo=NULL;
  ONE_FIELD_rec_ptr     pair=NULL;
  ENVIRONMENT_rec_typ * envir_ptr=NULL;
  _INT4                 heap_id = 0;
  _FEEDBACK             fdbk;
  char                  errstr[200] = "";
 
  ESA_DIAG_enter (ESA_COMP_ACSALOC, DIAG_BASIC, fn);
  CS_get_envir_address (&envir_ptr);
  ESA_DIAG_printf (ESA_COMP_ACSALOC, DIAG_BASIC,
                   "tlb_ent = %p,  ptr = %p,  type = %d, ,max_num = %d",
                   tbl_ent,
                   (tbl_ent EQ NULL) ? NULL : tbl_ent->ptr,
                   (tbl_ent EQ NULL) ? 0 : tbl_ent->ptr_type,
                   (tbl_ent EQ NULL) ? 0 : tbl_ent->num_elements);
 
  if (tbl_ent EQ NULL)
    goto exit;
 
  addinfo = (ADDINFO_rec_ptr)tbl_ent->ptr;
  if (addinfo EQ NULL)
    goto exit;
 
  heap_id = addinfo->heap_id;
  CEEDSHP (&heap_id, &fdbk);             /* Discard the heap */
  ESA_DIAG_printf(ESA_COMP_ACSALOC ,DIAG_ADDINFO,
        "Heap discard: hesp_id = %p  fdbk = %d",
        heap_id, fdbk.tok_msgno);
  if ( _FBCHECK ( fdbk , CEE000 ) NE 0 )
  {
    sprintf(errstr,
        "Heap discard for heap id <%p> failed.  CEEDSHP msg# = %d",
         heap_id, fdbk.tok_msgno);
    CTSAMSG_print (ERR_INTERNAL3,
                   envir_ptr->ctsamsg_handle, NULL,
                   envir_ptr->ctsamsg_dest,
                   errstr);
  }
 
  exit:;
    ESA_DIAG_exit (ESA_COMP_ACSALOC, DIAG_BASIC, fn, ESA_RC_VOID);
}
/* WS10082K - end */
 
/****************************************************
 * Procedure Name: CSA_free
 * Description   : Free allocated space
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/
void   CSA_free (char       ** ptr)
 
{
  char                  fn[]="CSA_free";
  int                   ii;
  ENVIRONMENT_rec_typ * envir_ptr;
 
  ESA_DIAG_enter (ESA_COMP_ACSALOC, DIAG_COMMON, fn);
  CS_get_envir_address (&envir_ptr);
 
  ESA_DIAG_printf (ESA_COMP_ACSALOC, 15,
                  "Entering CS_free with ptr = %p *ptr = %p" ,
                  ptr ,
                  (ptr EQ NULL) ? NULL : *ptr);
 
  if ((envir_ptr->tbl_rows EQ 0) OR (envir_ptr->tbl EQ NULL))
  {
    ESA_DIAG_printf (ESA_COMP_ACSALOC, 15,
                     "CS_free: ALLOC_TBL is empty");
    goto cleanup;
  }
 
  for (ii= 0; ii LT envir_ptr->tbl_rows; ii++ ) {
    ESA_DIAG_printf (ESA_COMP_ACSALOC, 32,
        "envir_ptr->tbl[%d].ptr=%p *ptr=%p.",
         ii, envir_ptr->tbl[ii].ptr, *ptr);
    if (envir_ptr->tbl[ii].ptr EQ *ptr)
      break;
  }
/*    If pointer in the alloc. table */
  if (ii LT envir_ptr->tbl_rows AND *ptr NE NULL) {
 
    /* WS10082N - start */
    if ( (envir_ptr->tbl[ii].ptr_type EQ STRUC_ADDINFO) OR
         (envir_ptr->tbl[ii].ptr_type EQ STRUC_RES_ADDINFO) )
      CSA_free_addinfo((ALLOC_TBL_rec_typ *)(&(envir_ptr->tbl[ii])));
    else
    /* WS10082N - end   */
      free (*ptr);
 
    ESA_DIAG_printf (ESA_COMP_ACSALOC, 16,
                     "CS_free: Free address %p" ,*ptr );
    *ptr= NULL;
    ESA_DIAG_printf (ESA_COMP_ACSALOC, DIAG_DETAILES,
        "CS_free: pointer %s (func %s)",
                     envir_ptr->tbl[ii].ptr_name,
                     envir_ptr->tbl[ii].func_name);
    memset ((char *)(&envir_ptr->tbl[ii]), '\0',
            sizeof(ALLOC_TBL_rec_typ));
  }
 
/*    If pointer is not in the alloc. table */
  if (ii GE envir_ptr->tbl_rows AND *ptr NE NULL)
    ESA_DIAG_printf (ESA_COMP_ACSALOC, 15,
        "CS_free: pointer is not in the ALLOC table");
 
  cleanup:
  CSA_print_alloc_tbl (ESA_COMP_ACSALOC, fn, FALSE);
  ESA_DIAG_exit (ESA_COMP_ACSALOC, DIAG_COMMON, fn, ESA_RC_VOID);
  return;
}
 
 
/****************************************************
 * Procedure Name: CSA_alloc
 * Description   : allocate space
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/
static void CSA_alloc_process (char        ** ptr,
                               short          ptr_type,
                               size_t         size,
                               int            num_elements,
                               int            allocate_typ)
 
{
  USER_PARAMS_rec_typ   * usr_ptr;
  OE_PARAMS_rec_typ     * oe_ptr;
  UG_PARAMS_rec_typ     * ug_ptr;
  U2UG_PARAMS_rec_typ   * u2ug_ptr;
  ADMIN_PARAMS_rec_typ  * admin_params;
  ADDINFO_rec_ptr         addinfo;
  RES_PARAMS_rec_typ    * res_ptr;
  RSSPRM_rec_typ        * rssprm_ptr;
  RSSAPI_PRM_rec_typ    * prm_ptr;
  RSSAPI_KWD_rec_typ    * kwd_ptr;
  OE_MEM_rec_typ        * oe_mem_ptr;
  UG_MEM_rec_typ        * ug_mem_ptr;
  U2UG_MEM_rec_typ      * u2ug_mem_ptr;
  USR_MEM_rec_typ       * usr_mem_ptr;
  LOCK_TBL_rec_typ      * lock_ptr;
  RSSTBL_rec_typ        * rsstbl_ptr;
  INTEREST_UG_rec_typ   * int_ug_ptr;
  INTEREST_OE_rec_typ   * int_oe_ptr;
  INTEREST_USER_rec_typ * int_usr_ptr;
  ADMINISTRATOR_rec_typ * int_adm_ptr;
  RSS_INTEREST_rec_typ  * interest_ptr;
  STARTLST_rec_typ      * startlst_ptr;
  void                  * sav_ptr;
  int                     jj;
  int                     ii, max_pairs=0;                 /*WS10082K*/
  int                     addinfo_size = 0;                /*WS10082K*/
  int                     addinfo_res_size = 0;            /*WS10082N*/
  _INT4                   heap_id = 0;                    /* WS10082N */
  ENVIRONMENT_rec_typ   * envir_ptr;
  DWORD                   errnmb;
  char                    descr[30] ,
                          errstr[200];
  char                  fn[]="CSA_alloc_process";
 
  ESA_DIAG_enter (ESA_COMP_ACSALOC, DIAG_COMMON, fn);
  CS_get_envir_address (&envir_ptr);
 
  ESA_DIAG_printf (ESA_COMP_ACSALOC, 15,
      "%s:%s of ptr type %d, inaddr = %p,Size=%d,Elmn=%d",
      fn,
      (allocate_typ EQ ALLOCATE) ? "calloc" : "realloc",
      (int)ptr_type,
      (ptr) ? *ptr : 0x0,     /* Amir, as per Insure's warning */
      size,
      num_elements);
 
 switch (ptr_type) {
    case STRUC_INT_UG_REC:
        strcpy (descr ,"STRUC_INT_UG_REC");
        if (allocate_typ EQ ALLOCATE)
          int_ug_ptr= (INTEREST_UG_rec_typ *)calloc
              (size, (unsigned)num_elements);
        else
          int_ug_ptr= (INTEREST_UG_rec_typ*)realloc
              (*ptr, size* num_elements);
        * ptr= (char *)int_ug_ptr;
        break;
    case STRUC_INT_OE_REC:
        strcpy (descr , "STRUC_INT_OE_REC");
        if (allocate_typ EQ ALLOCATE)
          int_oe_ptr= (INTEREST_OE_rec_typ *)calloc
              (size, (unsigned)num_elements);
        else
          int_oe_ptr= (INTEREST_OE_rec_typ*)realloc
              (*ptr, size* num_elements);
        * ptr= (char *)int_oe_ptr;
        break;
    case STRUC_ADM_REC:
        strcpy (descr , "STRUC_ADM_REC");
        if (allocate_typ EQ ALLOCATE)
          int_adm_ptr= (ADMINISTRATOR_rec_typ *)calloc
              (size, (unsigned)num_elements);
        else
          int_adm_ptr= (ADMINISTRATOR_rec_typ*)realloc
              (*ptr, size* num_elements);
        * ptr= (char *)int_adm_ptr;
        break;
    case STRUC_INT_USR_REC:
        strcpy (descr , "STRUC_INT_USR_REC");
        if (allocate_typ EQ ALLOCATE)
          int_usr_ptr= (INTEREST_USER_rec_typ *)calloc
              (size, (unsigned)num_elements);
        else
          int_usr_ptr= (INTEREST_USER_rec_typ*)realloc
              (*ptr, size* num_elements);
        * ptr= (char *)int_usr_ptr;
        break;
    case STRUC_LOCK_REC:
        strcpy (descr , "STRUC_LOCK_REC");
        if (allocate_typ EQ ALLOCATE)
          lock_ptr= (LOCK_TBL_rec_typ *)calloc
              (size, (unsigned)num_elements);
        else
          lock_ptr= (LOCK_TBL_rec_typ *)realloc
              (*ptr, size* num_elements);
        * ptr= (char *)lock_ptr;
        break;
    case STRUC_RSSPRM_REC:
        strcpy (descr , "STRUC_RSSPRM_REC");
        if (allocate_typ EQ ALLOCATE)
          rssprm_ptr= (RSSPRM_rec_typ *)calloc
              (size, (unsigned)num_elements);
        else
          rssprm_ptr= (RSSPRM_rec_typ *)realloc
              (*ptr, size* num_elements);
        * ptr= (char *)rssprm_ptr;
        break;
    case STRUC_INTEREST_REC:
        strcpy (descr , "STRUC_INTEREST_REC");
        if (allocate_typ EQ ALLOCATE)
          interest_ptr= (RSS_INTEREST_rec_typ *)calloc
              (size, (unsigned)num_elements);
        else
          interest_ptr= (RSS_INTEREST_rec_typ *)realloc
              (*ptr, size* num_elements);
        * ptr= (char *)interest_ptr;
        break;
    case STRUC_STARTLST_REC:
        strcpy (descr , "STRUC_STARTLIST_REC");
        if (allocate_typ EQ ALLOCATE)
          startlst_ptr= (STARTLST_rec_typ *)calloc
              (size, (unsigned)num_elements);
        else
          startlst_ptr= (STARTLST_rec_typ *)realloc
              (*ptr, size* num_elements);
        * ptr= (char *)startlst_ptr;
        break;
    case STRUC_KWD_REC:
        strcpy (descr , "STRUC_KWD_REC");
        if (allocate_typ EQ ALLOCATE)
          kwd_ptr= (RSSAPI_KWD_rec_typ *)calloc
              (size, (unsigned)num_elements);
        else
          kwd_ptr= (RSSAPI_KWD_rec_typ *)realloc
              (*ptr, size* num_elements);
        * ptr= (char *)kwd_ptr;
        break;
    case STRUC_PRM_REC:
        strcpy (descr , "STRUC_PRM_REC");
        if (allocate_typ EQ ALLOCATE)
          prm_ptr= (RSSAPI_PRM_rec_typ *)calloc
              (size, (unsigned)num_elements);
        else
          prm_ptr= (RSSAPI_PRM_rec_typ *)realloc
              (*ptr, size* num_elements);
        * ptr= (char *)prm_ptr;
        break;
    case STRUC_USER_CHECK_REC:
        strcpy (descr , "STRUC_USER_CHECK_REC");
        if (allocate_typ EQ ALLOCATE)
          usr_mem_ptr= (USR_MEM_rec_typ *)calloc
              (size, (unsigned)num_elements);
        else
          usr_mem_ptr= (USR_MEM_rec_typ *)realloc
              (*ptr, size* num_elements);
        * ptr= (char *)usr_mem_ptr;
        break;
    case STRUC_OE_CHECK_REC:
        strcpy (descr , "STRUC_OE_CHECK_REC");
        if (allocate_typ EQ ALLOCATE)
          oe_mem_ptr= (OE_MEM_rec_typ *)calloc
              (size, (unsigned)num_elements);
        else
          oe_mem_ptr= (OE_MEM_rec_typ *)realloc
              (*ptr, size* num_elements);
        * ptr= (char *)oe_mem_ptr;
        break;
    case STRUC_UG_CHECK_REC:
        strcpy (descr , "STRUC_UG_CHECK_REC");
        if (allocate_typ EQ ALLOCATE)
          ug_mem_ptr= (UG_MEM_rec_typ *)calloc
              (size, (unsigned)num_elements);
        else
          ug_mem_ptr= (UG_MEM_rec_typ *)realloc
              (*ptr, size* num_elements);
        * ptr= (char *)ug_mem_ptr;
        break;
    case STRUC_U2UG_CHECK_REC:
        strcpy (descr , "STRUC_U2UG_CHECK_REC");
        if (allocate_typ EQ ALLOCATE)
          u2ug_mem_ptr= (U2UG_MEM_rec_typ *)calloc
              (size, (unsigned)num_elements);
        else
          u2ug_mem_ptr= (U2UG_MEM_rec_typ *)realloc
              (*ptr, size* num_elements);
        * ptr= (char *)u2ug_mem_ptr;
        break;
    case STRUC_USER_REC:
        strcpy (descr , "STRUC_USER_REC");
        if (allocate_typ EQ ALLOCATE)
          usr_ptr= (USER_PARAMS_rec_typ *)calloc
              (size, (unsigned)num_elements);
        else
          usr_ptr= (USER_PARAMS_rec_typ *)realloc
              (*ptr, size* num_elements);
        * ptr= (char *)usr_ptr;
        break;
    case STRUC_OE_REC:
        strcpy (descr , "STRUC_OE_REC");
        if (allocate_typ EQ ALLOCATE)
          oe_ptr=  (OE_PARAMS_rec_typ *)calloc
              (size, (unsigned)num_elements);
        else
          oe_ptr=  (OE_PARAMS_rec_typ *)realloc
              (*ptr, size* num_elements);
        * ptr= (char *)oe_ptr;
        break;
    case STRUC_UG_REC:
        strcpy (descr , "STRUC_UG_REC");
        if (allocate_typ EQ ALLOCATE)
          ug_ptr=  (UG_PARAMS_rec_typ *)calloc
              (size, (unsigned)num_elements);
        else
          ug_ptr=  (UG_PARAMS_rec_typ *)realloc
              (*ptr, size* num_elements);
        * ptr= (char *)ug_ptr;
        break;
    case STRUC_U2UG_REC:
        strcpy (descr , "STRUC_U2UG_REC");
        if (allocate_typ EQ ALLOCATE)
          u2ug_ptr= (U2UG_PARAMS_rec_typ *)calloc
              (size, (unsigned)num_elements);
        else
          u2ug_ptr= (U2UG_PARAMS_rec_typ *)realloc
              (*ptr, size* num_elements);
        * ptr= (char *)u2ug_ptr;
        break;
    case STRUC_RES_REC:
        strcpy (descr , "STRUC_RES_REC");
        if (allocate_typ EQ ALLOCATE)
          res_ptr= (RES_PARAMS_rec_typ *)calloc
              (size, (unsigned)num_elements);
        else
          res_ptr= (RES_PARAMS_rec_typ *)realloc
              (*ptr, size* num_elements);
        * ptr= (char *)res_ptr;
        break;
    case STRUC_ADMIN_REC:
        strcpy (descr , "STRUC_ADMIN_REC");
        if (allocate_typ EQ ALLOCATE)
          admin_params= (ADMIN_PARAMS_rec_typ *)calloc
              (size, (unsigned)num_elements);
        else
          admin_params= (ADMIN_PARAMS_rec_typ *)realloc
              (*ptr, size* num_elements);
        * ptr= (char *)admin_params;
        break;
    case STRUC_RES_ADDINFO:
        strcpy (descr , "STRUC_RES_ADDINFO");
        /* WS10082K :For STRUC_RES_ADDINFO we pass number of    *
         *           keywords in size parameter instead of      *
         *           total size. The addinfo size is calculated *
         *           here before allocating memory.             */
        max_pairs =  size;                                 /*WS10082K*/
        addinfo_size = ADDINFO_SIZE(max_pairs);            /*WS10082K*/
 
        /* WS10082N - start */
        /*
        addinfo= (ADDINFO_rec_ptr )calloc
             (size, (unsigned)(num_elements+ 1))      */
        addinfo_res_size = addinfo_size * (unsigned)(num_elements);
        CSA_alloc_addinfo(addinfo_res_size, allocate_typ,
                          &addinfo, &heap_id);
        ESA_DIAG_printf(ESA_COMP_ACSALOC, DIAG_ADDINFO,    /*WS10082K*/
       "addinfo(%p), addinfo_size(%d * %d) max_pairs(%d)", /*WS10082K*/
         addinfo, addinfo_size, num_elements, max_pairs);  /*WS10082K*/
 
        /* WS10082N -  end    */
/*      ptr[0]= (char *)addinfo;                            *WS10082K*/
/*      for (jj= 1; jj LT num_elements; jj++ ) {            *WS10082K*/
        for (jj= 0; jj LT num_elements; jj++ ) {
          /* addinfo += size/sizeof(ADDINFO_rec_typ);       *WS10082K*/
             ptr[jj]= (char *)addinfo;
 
          /* WS10082K - Initialize the addingo.               */
           /* WS10082N - start */
           if (addinfo EQ NULL)
             continue;
 
           ADDINFO_INIT(addinfo, max_pairs, 0, heap_id,
                        ESA_COMP_ACSALOC);
           /* WS10082N - end */
 
           /*  WS10082K addinfo += size/sizeof(ADDINFO_rec_typ);      */
           addinfo = (ADDINFO_rec_typ *)                   /*WS10082K*/
                          ((char*)addinfo + addinfo_size); /*WS10082K*/
 
      }
      break;
    case STRUC_ADDINFO:
        strcpy (descr , "STRUC_ADDINFO");
        /* WS10082K: For STRUC_ADDINFO we pass number of keyword *
         *           in size attribute instead of the size of    *
         *           ADDINFO_rec_typ. The addinfo size to be     *
         *           allocated is calculated before allocating   *
         *           memory.                                     */
        max_pairs =  size;                                /*WS10082K*/
        addinfo_size = ADDINFO_SIZE(max_pairs);           /*WS10082K*/
        /* WS10082N - start */
        /*  This code is replaced by a call to CSA_alloc_addinfo
        if (allocate_typ EQ ALLOCATE)
          addinfo= (ADDINFO_rec_ptr )calloc
                (size, (unsigned)num_elements);
        else
          addinfo= (ADDINFO_rec_ptr )realloc
                (*ptr, size* num_elements);
        */
 
        CSA_alloc_addinfo(addinfo_size, allocate_typ,
                          &addinfo, &heap_id);
        if (addinfo NE NULL)
        {
          if (allocate_typ EQ ALLOCATE)
          {
            ADDINFO_INIT(addinfo, max_pairs, 0, heap_id,
                         ESA_COMP_ACSALOC);
          }
          else
          /* WS10082N - end   */
          {                                                 /*WS10082K*/
            /*WS10082K - Start
            /*Lets make sure the existing addinfo pairs are
            reinitialized and we dont overwrite existing values.
            The flow would be:
              1. We set the twin pair of existing addinfo. If realloc
                 moves the buffer then the twin of all pairs should be
                 updated. If current pair->twin has SLType 'L' it means
                 it has a Large pair hence address of twin of Large pair
                 should be updated. Else twin should point to itself.
              2. New buffer allocated is initialized. We want to
                 initialize the buffer from num_pairs.                */
 
            /* WS10082N for (ii=0; ii LT addinfo->max_pairs; ii++)  */
            for (ii=0; ii LT addinfo->num_pairs; ii++)    /* WS10082N */
            {
              if(addinfo->pair[ii].twin->SLType EQ 'L')
                 addinfo->pair[ii].twin->twin = &(addinfo->pair[ii]);
              else
                addinfo->pair[ii].twin = &(addinfo->pair[ii]);
            }
 
            /* ADDINFO_INIT initalizes the additional pairs and
               sets the new value for max_pairs.                  */
            ADDINFO_INIT(addinfo, max_pairs, addinfo->num_pairs,
                         heap_id,  ESA_COMP_ACSALOC);
          }
        }
        /*WS10082K - End */
        * ptr= (char *)addinfo;
        break;
    case STRUC_RSSTBL:
        strcpy (descr , "STRUC_RSSTBL");
        if (allocate_typ EQ ALLOCATE)
          rsstbl_ptr= (RSSTBL_rec_ptr )calloc
              (size, (unsigned)num_elements);
        else
          rsstbl_ptr= (RSSTBL_rec_ptr )realloc
              (*ptr, size* num_elements);
        * ptr= (char *)rsstbl_ptr;
        break;
    default:
        strcpy (descr , "Default struct type!");
        ESA_DIAG_printf (ESA_COMP_ACSALOC, 15,
              "%s:Selected default", fn);
        if (allocate_typ EQ ALLOCATE)
        {
           sav_ptr = malloc(size * (unsigned)num_elements);
           *ptr = (char *)sav_ptr;
           if (*ptr NE NULL)
              memset (*ptr , 0 , (size * (unsigned)num_elements));
        }
        else
        {
          sav_ptr = realloc(*ptr, size* num_elements);
          *ptr = (char *)sav_ptr;
        }
        break;
  }
 
  if (*ptr EQ NULL)
  {
 
 
        errnmb = errno;
 
 
     CTSAMSG_print (ERR_INTERNAL,
                    envir_ptr->ctsamsg_handle, NULL,
                    envir_ptr->ctsamsg_dest,
                    fn,
                    (allocate_typ EQ ALLOCATE) ? "CALLOC" : "REALLOC",
                    errnmb,
                    __LINE__);
 
     sprintf (errstr ,
      "Pointer type: %s (%d) , Size: %d , Elements: %d",
      descr,
      ptr_type ,
      size ,
      num_elements);
 
     CTSAMSG_print (ERR_UL_STRING,
                    envir_ptr->ctsamsg_handle, NULL,
                    envir_ptr->ctsamsg_dest,
                    errstr);
 
  }
 
  ESA_DIAG_printf (ESA_COMP_ACSALOC, 15,
       "%s:%s of pointer type %d , addr = %p",
       fn,
       (allocate_typ EQ ALLOCATE) ?
       "calloc"
      :
       "realloc" ,
       (int)ptr_type ,
       *ptr);
  ESA_DIAG_exit (ESA_COMP_ACSALOC, DIAG_COMMON, fn, ESA_RC_VOID);
}
 
 /* WS10082N - start */
/****************************************************
 * Procedure Name: CSA_alloc_addinfo
 * Description   : Create a private HEAP and allocate
 *                 space for the addinfo in it.
 * Input         : addinfo size
 *               : allocate_typ:  ALLOCATE, REALLOC
 * Output        : addinfo address
 *               : heap id.
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/
 
static void  CSA_alloc_addinfo(int                size,
                               int                allocate_typ,
                               ADDINFO_rec_ptr  * addinfo,
                               _INT4            * heap_id)
{
  char                  fn[]="CSA_alloc_addinfo";
  char                    errstr[200] = "";
 
  ENVIRONMENT_rec_typ   * envir_ptr;
 
  _INT4  heap_init_size = ADDINFO_HEAP_INIT_SIZE;
  _INT4  heap_incr_size = ADDINFO_HEAP_INCR_SIZE;
  _INT4  heap_opts      = ADDINFO_HEAP_OPT;
  _INT4  addinfo_heap = 0;
  _FEEDBACK  fdbk;
 
  ESA_DIAG_enter (ESA_COMP_ACSALOC, DIAG_COMMON, fn);
  CS_get_envir_address (&envir_ptr);
 
  ESA_DIAG_printf(ESA_COMP_ACSALOC ,DIAG_ADDINFO,
          "Input:  addinfo = %p   size = %d,  allocate_typ = %d",
           *addinfo, size, allocate_typ);
 
  *heap_id = 0;
 
  if (allocate_typ EQ ALLOCATE)
  {
    /*  Create the privaye HEAP  */
    CEECRHP (heap_id, &heap_init_size,
             &heap_incr_size, &heap_opts, &fdbk);
    ESA_DIAG_printf(ESA_COMP_ACSALOC, DIAG_ADDINFO,
                    "Heap create:  heap_id = %p   fdbk = %d",
                    *heap_id, fdbk.tok_msgno);
    if ( _FBCHECK ( fdbk, CEE000 ) EQ 0 )
    {
      /*  Get addinfo storage in the new heap */
      CEEGTST (heap_id, &size, (void **)addinfo, &fdbk);
      ESA_DIAG_printf(ESA_COMP_ACSALOC, DIAG_ADDINFO,
      "Heap getstor:  size = %d  heap_id = %p  addinfo = %p  fdbk = %d",
           size, *heap_id, *addinfo, fdbk.tok_msgno);
      if ( _FBCHECK ( fdbk , CEE000 ) NE 0 )
        sprintf(errstr,
  "ADDINFO alloc for <%d> bytes in heap <%p> failed. CEEGTST msg# = %d",
                size, *heap_id, fdbk.tok_msgno);
    }
    else
      sprintf(errstr, "Heap create failed.  CEECRHP msg# = %d",
               fdbk.tok_msgno);
  }
  else    /* Reallocate */
  {
    addinfo_heap = (*addinfo)->heap_id;
    /* Increase the area of the storage */
    CEECZST ((void **)addinfo, &size, &fdbk);
    ESA_DIAG_printf(ESA_COMP_ACSALOC, DIAG_ADDINFO,
          "addinfo realloc:  size = %d,  addinfo = %p  fdbk = %d",
           size, *addinfo, fdbk.tok_msgno);
    if ( _FBCHECK ( fdbk , CEE000 ) NE 0 )
    {
      sprintf(errstr,
"ADDINFO realloc for <%d> bytes in heap <%p> failed. CEECZST msg# = %d",
         size, addinfo_heap, fdbk.tok_msgno);
    }
  }
 
  /* If an error messgae was prepares, issue it and set NULL
   * in addinfo address.                                       */
  if (errstr[0] NE NULL_CHAR)
  {
    CTSAMSG_print (ERR_INTERNAL3,
                   envir_ptr->ctsamsg_handle, NULL,
                   envir_ptr->ctsamsg_dest,
                   errstr);
    *addinfo = NULL;
  }
 
  ESA_DIAG_printf(ESA_COMP_ACSALOC, DIAG_ADDINFO,
          "returned addinfo = %p", *addinfo);
 
  ESA_DIAG_exit (ESA_COMP_ACSALOC, DIAG_COMMON, fn, ESA_RC_VOID);
 
  return;
}
/* WS10082N - end  */
