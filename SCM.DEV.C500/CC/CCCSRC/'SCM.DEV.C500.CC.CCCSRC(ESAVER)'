/**********************************************************************
*
*	C Source:       esaver.c
*	Instance:       1
*	Description:    Print SA-Agent version number and FD number.
*	                Activated when executing any main
*	                program/utility with argument -V or /V
*	%created_by:    ihoffma %
*	%date_created:  Wed Feb 25 11:40:41 2004 %
*
**********************************************************************/
 
/*********************************************************************
* Mod.ID    Who        When         Description
* ====================================================================
* SAS2IBMN NuritY  07/11/16  Compile with IBM XL C/C++:
*                            1. Remove #if for __STDC__ and leave
*                            2. Change version hanglinf - no FD.
* WS10070 KailasP  16/04/18     Compile only due to change in
*                               SA_AGENT_VERSION.
* WS10078KGKailasP 04/05/20     Compile only due to change in
*                               SA_AGENT_VERSION.
* WS10079K KailasP 31/12/20     Compile only due to change in
*                               SA_AGENT_VERSION.
* WS10080  KailasP 05/07/21     Support MSGSIZE Greater than 32K
*                               ***only for compile***
**********************************************************************/
 
/* SAS2IBMN
#ifndef lint
static char *_csrc = "@(#) %filespec: esaver.c#3 %  (%full_filespec: esaver.c#3:csrc:1 %)";
#endif
*/
 
/* SAS2IBMN  #include  "esaver.h"         */
#include  "globs.h"                                     /* SAS2IBMN */
#include  "esainit.h"
#include  <ctype.h>
 
/***************************************************************
 * Procedure Name : CheckAndPrintVersion                       *
 * Input          : ArgC, ArgV (utility/main parameters)       *
 * Description    : Check if version number and FD number were *
 *                   requested, and if they were, print them.  *
 * Return Value   : ESA_RC                                     *
 *                                                             *
 ***************************************************************/
ESA_RC CheckAndPrintVersion (int ArgC, char ** ArgV)
{
  char                  fn[]="CheckAndPrintVersion";
  ESA_RC                rc= ESA_ERR;
  char                  ArgStr[80], VerFlagsStr[80], *CurrPtr, *NewPtr;
  int                   ii= 1, RequestVersion= FALSE, FlagLen= 0;
 
  ESA_DIAG_enter (ESA_COMP_ACSPROC, DIAG_COMMON, fn);
  ESA_DIAG_printf (ESA_COMP_ACSPROC, 11,
	  "ArgC=%d ArgV=%p VER_FLAGS_STR=%s.",ArgC, ArgV, VER_FLAGS_STR);
 
  if (ArgC LE 1)
     goto cleanup;
 
  Cvt2Upper (VER_FLAGS_STR, VerFlagsStr); /* something like "/V,-V" */
 
  /* loop on input arguments (flags) */
  while ((ii LT ArgC) AND (RequestVersion EQ FALSE))
  {
     ESA_DIAG_printf (ESA_COMP_ACSPROC, 11,
                      "%d: ArgV[ii]=%s.",
                      ii, ArgV[ii]);
		
     /* init. the pointers to the start of the flag string */
     CurrPtr= VerFlagsStr;
     NewPtr= VerFlagsStr;
 
     /* loop on recognized version flags in the flag string */
     while ((NewPtr NE NULL) AND (RequestVersion EQ FALSE))
     {
        NewPtr= strchr (CurrPtr, ',');
        if (NewPtr EQ NULL)
           FlagLen= strlen (CurrPtr);
        else
           FlagLen= NewPtr - CurrPtr;
	
        ESA_DIAG_printf (ESA_COMP_ACSPROC, 71,
                         "*DBG* FlagLen=%d",
                         FlagLen);	
		
	Cvt2Upper (ArgV[ii], ArgStr);
        /* compare input arg. with flag from flag string */
        if (memcmp (ArgStr, CurrPtr, FlagLen) EQ 0)
        {
           RequestVersion= TRUE;
           ESA_DIAG_printf (ESA_COMP_ACSPROC, 11,
                            "RequestVersion=TRUE (%d).",
                            RequestVersion);
        }
        if (NewPtr)
           CurrPtr= NewPtr + 1;     /* point to after comma */
     }
 
     ii++;
  }
 
  if (RequestVersion EQ TRUE)
  {
     /* SAS2IBMN - start
     printf ("%s  \t version %s, %s\n",ArgV[0], SA_AGENT_VERSION, SA_AGENT_FD);
     */
     printf ("%s  \t version %s\n",ArgV[0], SA_AGENT_VERSION);
     /* SAS2IBMN - end   */
     rc= ESA_OK;
  }
  else
      rc= ESA_WARN;
 
cleanup:
 
  ESA_DIAG_exit (ESA_COMP_ACSPROC, DIAG_COMMON, fn, rc);
 
  return (rc);
}
 
/*****************************************************************
* Procedure Name: Cvt2Upper
* Description   : Convert string to Uppercase string
* Input         : in_str,
* Output        : out_str
* Return Value  :
*****************************************************************/
 
void Cvt2Upper (char * in_str,
                char * out_str)
{
   while (*in_str)  {
      *out_str = toupper(*in_str);
      in_str++;
      out_str++;
   }
   *out_str = NULL_CHAR;    /* terminate the string with '\0' */
}
