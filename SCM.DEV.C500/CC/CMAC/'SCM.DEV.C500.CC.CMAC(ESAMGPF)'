/***********************************************
* Title:              ESAs-MESSAGE interface
* File Name:          esamgpf.h
* Author:             Yaniv Yassour
* Creation Date:      10-Feb-94
* Description:        Message protocol between ESS and CSA
* Assumptions and
*   Considerations:
* $Author:   leonid_s  $
* $Workfile:   esamgpf.h  $
* $Revision:   1.7  $
* $Log:   //eagle1/versions/300/inc/esamgpf.h_v  $
 *
 *    Rev 1.7   Jul 26 1998 13:37:08   leonid_s
 * Added 'CS_broadcast' function
 *
 *    Rev 1.6   Apr 01 1998 14:31:54   leonid_s
 * 300-Beta release of SA-Agent
 *
 *    Rev 1.5   Jan 21 1998 19:00:34   leonid_s
 * 300-Beta with AS400 & VMS changes
 *
 *    Rev 1.4   Oct 07 1997 13:04:32   leonid_s
 * INSURE++ changes
 *
 *    Rev 1.3   Aug 04 1997 12:50:52   leonid_s
 * Added parametres in CS_start_service and
 *                                  CS_get_admin_params  functions
 *
 *    Rev 1.2   Jul 24 1997 08:41:52   leonid_s
 *     SCCSID("%Z%%M% \
 *
 *
 *    Rev 1.1   Jul 08 1997 10:57:42   avi_w
 *
 * BS10100  KailasP 16/04/19  Add declaration for
 *                            CS_get_extended_params
 * IS10184  NuritY  31/08/21  Improve scripts performance
 *                            (add short mame for CS_get_extended_params
 *                            to prevent future issues).
*****************************************************/
/* SCCSID %Z%%M% */

#ifndef ESAMSG_GPF_H_INCLUDED
#define ESAMSG_GPF_H_INCLUDED

#include ESA_CS_SINFO
#include ESA_OS_EVENT


/* for MVS only */

#define CS_send_ug2uc_msg          CSGP808
#define CS_snd_rss_msg             CSGP809
#define CS_init                    CSGP836
#define CS_term                    CSGP837
#define CS_set_plat                CSGP887
#define CS_return_error            CSGP888
#define CS_send_end_of_dwnld_msg   CSGP890
#define CS_platform_detailes       CSGP891
#define CS_interceptor_service     CSGP892
#define CS_start_interceptor       CSGP893
#define CS_get_intercept_data      CSGP894
#define CS_send_end_of_sync_msg    CSGP896
#define CS_add_rs_msg              CSGP898
#define CS_reset_rs_msg            CSGP899
#define CS_queue_get               CSGP903
#define CS_send_msg                CSGP905
#define CS_pre_post_info_for_obj   CSGP906
#define CS_broadcast               CSGP907
#define CS_send_receive            CSGP908
#define CS_get_extended_params     CSGP909                 /* IS10184 */
 /* MVS */

/********************************************/
/* global purpose functions                 */
/********************************************/

/****************************************************
 * Procedure Name: CS_set_user
 * Description   : copy user structure to message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_set_user (MSG_typ             * buffer,
                              USER_PARAMS_rec_typ * usr_prm_out,
                              NUM_MSGS_typ        * msg_len);

/****************************************************
 * Procedure Name: CS_set_rsprm
 * Description   : copy rss_params structure to message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************
 * DETAILED DESCRIPTION
 * ====================
 * This function receives a rss_params structure - as received
 * from an API call, and builds in a rss_params structure as defined
 * in the ESS - CTSA protocol.
 *********************************************************************/

extern MSG_typ * CS_set_rsprm (MSG_typ             * buffer,
                               RSS_PARAMS_rec_typ  * rss_prm,
                               NUM_MSGS_typ        * msg_len);

/****************************************************
 * Procedure Name: CS_set_ug
 * Description   : copy ug structure to message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_set_ug  (MSG_typ             * buffer,
                             UG_PARAMS_rec_typ   * ug_prm_out,
                             NUM_MSGS_typ        * msg_len);

/****************************************************
 * Procedure Name: CS_set_oe
 * Description   : copy ug structure to message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_set_oe  (MSG_typ             * buffer,
                             OE_PARAMS_rec_typ   * oe_prm_out,
                             NUM_MSGS_typ        * msg_len);

/****************************************************
 * Procedure Name: CS_set_u2ug
 * Description   : copy u2ug structure to message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_set_u2ug  (MSG_typ             * buffer,
                               U2UG_PARAMS_rec_typ * u2ug_prm_out,
                               NUM_MSGS_typ        * msg_len);

/****************************************************
 * Procedure Name: CS_set_res
 * Description   : copy res structure to message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_set_res (MSG_typ             * buffer,
                             RES_PARAMS_rec_typ  * res_prm_out,
                             NUM_MSGS_typ        * msg_len);

/****************************************************
 * Procedure Name: CS_set_ace
 * Description   : copy ace structure to message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_set_ace (MSG_typ             * buffer,
                             ACE_rec_typ         * ace_prm_out,
                             NUM_MSGS_typ        * msg_len);

/****************************************************
 * Procedure Name: CS_snd_rss_msg
 * Description   : Send message to ESS about rss changes
 * Input         : rss
 *               : api
 *               : data (u2ug_data_rec_typ)
 *               : user_param,
 *               : ug_param
 *               : u2ug_param,
 *               : addinfo
 * Return Value  : ESA_RC
 ****************************************************/

ESA_RC CS_snd_rss_msg (RSS_MSG_HDR_rec_typ     * msg_hdr,
                       RSS_typ                   rss,
                       short                     api,
                       void                    * msg_struct,
                       ADDINFO_rec_typ         * addinfo);

/****************************************************
 * Procedure Name: CS_queue_get
 * Description   : queue get
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

ESA_RC CS_queue_get (int                  queue_name,
                     MSG_typ            * msg_ptr,
                     unsigned short     * msg_len);

/****************************************************
 * Procedure Name: CS_message_loop
 * Description   : main loop
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern ESA_RC CS_message_loop (void);

/****************************************************
 * Procedure Name: CS_get_next_msg
 * Description   : main loop
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern ESA_RC CS_get_next_msg (MSG_typ             * msg_ptr,
                               RSS_MSG_HDR_rec_typ * msg_hdr);

/****************************************************
 * Procedure Name: CS_get_msg_header
 * Description   : retrieve message header from
 *                 communication message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern ESA_RC CS_get_msg_header (MSG_typ             * msg_ptr,
                                 RSS_MSG_HDR_rec_typ * msg_hdr);

/****************************************************
 * Procedure Name: CS_get_srvcmsg
 * Description   : retrieve service structure from
 *                 start of service message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_get_admin_params (ADMIN_PARAMS_rec_typ * admin_par,
									  HOT_PATH_typ         * hot_path,
						 	          MSG_typ              * msg_ptr);

/* BS10100 - Start */
/*****************************************************
 * Procedure Name: CS_get_extended_params
 * Description   : Retrieve extra information received in
 *                 start of service message.
 * Input         :
 * Input/Output  :
 * Return Value  :
*****************************************************/

extern ESA_RC CS_get_extended_params (
                        EXTENDED_PARAMS_rec_typ  * extended_params,
                        ADMIN_PARAMS_rec_typ     * admin_params,
                        MSG_typ                  * msg_ptr,
                        RSS_MSG_HDR_rec_typ      * msg_hdr   );
/* BS10100 - Ends */
/****************************************************
 * Procedure Name: CS_start_service
 * Description   : start service function
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern ESA_RC  CS_start_service (ADMIN_PARAMS_rec_typ * admin_params,
								 HOT_PATH_typ           hot_path,
								 MSG_typ              * msg_ptr_read,
                                 RSS_MSG_HDR_rec_typ  * msg_hdr);

/****************************************************
 * Procedure Name: CS_queue_msgs
 * Description   : write the messages to cs queue
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern ESA_RC CS_queue_msgs (MSG_typ * msg_typ);


/****************************************************
 * Procedure Name: CS_get_fld
 * Description   : retrieve field from message
 *                 single message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_get_fld (void          * field,
                             MSG_typ       * msg_ptr,
                             unsigned long   max_nmb,
                             const char    * fld_name);

/****************************************************
 * Procedure Name: CS_get_enum_fld
 * Description   : retrieve enum field from message
 *                 single message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_get_enum_fld (int        * field,
                                  int          fld_nam,
                                  MSG_typ    * msg_ptr,
                                  const char * fld_name);

/****************************************************
 * Procedure Name: CS_get_user
 * Description   : retrieve user structure from
 *                 single message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_get_user (USER_PARAMS_rec_typ * usr_prm,
                              MSG_typ             * msg_ptr);

/****************************************************
 * Procedure Name: CS_get_ug
 * Description   : retrieve user group structure from
 *                 single message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_get_ug (UG_PARAMS_rec_typ * ug_prm,
                            MSG_typ           * msg_ptr);

/****************************************************
 * Procedure Name: CS_get_oe
 * Description   : retrieve container structure from
 *                 single message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_get_oe (OE_PARAMS_rec_typ * oe_prm,
                            MSG_typ           * msg_ptr);

/****************************************************
 * Procedure Name: CS_get_u2ug
 * Description   : retrieve user to group structure from
 *                 single message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_get_u2ug (U2UG_PARAMS_rec_typ * u2ug_prm,
                              MSG_typ             * msg_ptr);

/****************************************************
 * Procedure Name: CS_get_admin
 * Description   : fill admin structure base on
 *                 service structure
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern void CS_get_admin (ADMIN_PARAMS_rec_typ * adm_prm);

/****************************************************
 * Procedure Name: CS_get_res
 * Description   : retrieve resource structure from
 *                 single message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_get_res (RES_PARAMS_rec_typ * res_prm,
                             MSG_typ            * msg_ptr);

/****************************************************
 * Procedure Name: CS_get_rss
 * Description   : retrieve RSS structure from
 *                 single message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_get_rss (RSS_PARAMS_rec_typ * rss_prm,
                             MSG_typ            * msg_ptr);

/****************************************************
 * Procedure Name: CS_get_ace
 * Description   : retrieve ACE structure from single message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_get_ace (ACE_rec_typ * rss_prm,
                             MSG_typ     * msg_ptr);

/****************************************************
 * Procedure Name: CS_get_ace_place
 * Description   : retrieve ace place structure from
 *                 single message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_get_ace_place (ACE_POS_typ * ace_place,
                                   MSG_typ     * msg_ptr);

/****************************************************
 * Procedure Name: CS_get_cntrlsa_keys
 * Description   : retrieve control/sa keys from
 *                 single message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_get_cntrlsa_keys(RSSAPIKWD_rec_typ ** api_prm,
                                     MSG_typ            * msg_ptr);

/****************************************************
 * Procedure Name: CS_capi_to_api_id
 * Description   : convert comm api to api id
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_capi_to_api_id (short   * api,
                                    MSG_typ * msg_ptr);

/****************************************************
 * Procedure Name: CS_confirm
 * Description   : sends confirmation message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern ESA_RC CS_confirm (RSS_MSG_HDR_rec_typ * msg_hdr);

 /****************************************************
 * Procedure Name: CS_send_end_of_dwnld_msg
 * Description   : sends end of dwnld message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern ESA_RC CS_send_end_of_dwnld_msg (RSS_MSG_HDR_rec_typ * msg_hdr);

/****************************************************
 * Procedure Name: CS_error
 * Description   :
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern ESA_RC CS_error (RSS_MSG_HDR_rec_typ * msg_hdr,
						ESA_RC                rc_input);

/****************************************************
 * Procedure Name: CS_get_aplic_msg
 * Description   : retrive the aplication part of a message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_get_aplic_msg (MSG_typ * msg_ptr);

/****************************************************
 * Procedure Name: CS_get_rss_msg
 * Description   : retrieve the rss part of the message
 *                 from the aplication message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_get_rss_msg (NUM_MSGS_typ * num_msgs,
                                 MSG_typ      * msg_ptr);

/****************************************************
 * Procedure Name: CS_get_singl_msg
 * Description   : retrieve a single message from RSS message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_get_singl_msg (NUM_MSGS_typ * len_msg,
                                   TRAN_rec_typ * tran,
                                   MSG_typ      * msg_ptr);

/****************************************************
 * Procedure Name: CS_drop_all
 * Description   : drop all messages until end of service
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern ESA_RC CS_drop_all (MSG_typ * msg_ptr,
						   ESA_RC    rc);

/****************************************************
 * Procedure Name: CS_reset_cd_msg
 * Description   : use to reset cd message.
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_reset_cd_msg (NUM_MSGS_typ        * cd_msg_len,
                                  NUM_MSGS_typ        * cd_num_msgs,
                                  MSG_typ             * msg_cd,
                                  MSG_typ             * msg_cd_ptr,
                                  RSS_MSG_HDR_rec_typ * msg_hdr_cd);

/****************************************************
 * Procedure Name: CS_add_cs_msg
 * Description   : add entity to cs message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

MSG_typ * CS_add_cs_msg (NUM_MSGS_typ        * cs_msg_len,
                         NUM_MSGS_typ        * cs_num_msgs,
                         short                 func_name,
                         MSG_typ             * msg_cs,
                         MSG_typ             * msg_cs_ptr,
                         short                 actual_num,
                         short                 in_num,
                         USER_PARAMS_rec_typ * usr_prm_out,
                         OE_PARAMS_rec_typ   * oe_prm_out,
                         UG_PARAMS_rec_typ   * ug_prm_out,
                         U2UG_PARAMS_rec_typ * u2ug_prm_out,
                         RES_PARAMS_rec_typ  * res_prm_out,
                         ACE_rec_typ         * ace_prm_out,
                         RSS_PARAMS_rec_typ  * rss_prm_out,
                         ADDINFO_rec_ptr     * addinfo,
                         OBJ_EXISTS_typ      * obj_exists,
                         TRAN_rec_typ        * trana,
                         RSS_MSG_HDR_rec_typ * msg_hdr,
                         RSS_MSG_HDR_rec_typ * msg_hdr_cd,
                         int                   mode,
                         ESA_RC                rc_pre,
                         ESA_RC                rc_act,
                         ESA_RC                rc_pst,
                         ERR_STRUCT_rec_typ  * err_pre,
                         ERR_STRUCT_rec_typ  * err_act,
                         ERR_STRUCT_rec_typ  * err_pst,
                         ESA_RC              * write_mbx_rc);

/****************************************************
 * Procedure Name: CS_add_cd_msg
 * Description   : use to add buffer to existing
 *                 cd message.
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_add_cd_msg (NUM_MSGS_typ        * cd_msg_len,
                                NUM_MSGS_typ        * cd_num_msgs,
                                short                 func_name,
                                HOT_PATH_typ          hot_path,
                                OE_PARAMS_rec_typ   * oe_prm,
                                UG_PARAMS_rec_typ   * ug_prm,
                                USER_PARAMS_rec_typ * usr_prm,
                                U2UG_PARAMS_rec_typ * u2ug_prm,
                                RES_PARAMS_rec_typ  * res_prm,
                                RSS_PARAMS_rec_typ  * rss_prm,
                                char                * exists,
                                ADDINFO_rec_typ     * addinfo,
                                MSG_typ             * msg_cd,
                                MSG_typ             * msg_cd_ptr,
                                RSS_MSG_HDR_rec_typ * msg_hdr_cd,
                                ESA_RC                rc_pre,
                                ESA_RC                rc_act,
                                ESA_RC                rc_pst,
                                ERR_STRUCT_rec_typ  * err_pre,
                                ERR_STRUCT_rec_typ  * err_act,
                                ERR_STRUCT_rec_typ  * err_pst,
                                TRAN_rec_typ        * tran,
                                ESA_RC              * write_mbx_rc);

/****************************************************
 * Procedure Name: CS_send_end_of_srv_instance
 * Description   : send end of service message to CO
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern void CS_send_end_of_srv_instance (void);

/****************************************************
 * Procedure Name: CS_send_cd_msg
 * Description   : send message to CD queue
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern ESA_RC CS_send_cd_msg (NUM_MSGS_typ * cd_msg_len,
                              NUM_MSGS_typ * cd_num_msgs,
                              MSG_typ      * msg_cd_ptr);

/****************************************************
 * Procedure Name: CS_date
 * Description   : find the curent date
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern char * CS_date (void);

/****************************************************
 * Procedure Name: CS_esarc_tomesarc
 * Description   : convert esa rc to comm rc
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MESA_RC  CS_esarc_to_mesarc (ESA_RC rc);

/****************************************************
 * Procedure Name: CS_fill_in_user
 * Description   : fill user structure
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_fill_in_user (USER_PARAMS_rec_typ   usr_prm_in[1],
                                  MSG_typ             * msg_ptr,
                                  short               * act_num,
                                  short                 num_msgs,
                                  TRAN_rec_typ          tran[1],
                                  GET_USER_MODE       * mode);

/****************************************************
 * Procedure Name: CS_fill_in_ug
 * Description   : fill ug structure
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ *  CS_fill_in_ug (UG_PARAMS_rec_typ   ug_prm_in[1],
                                 MSG_typ           * msg_ptr,
                                 short             * act_num,
                                 short               num_msgs,
                                 TRAN_rec_typ        tran[1],
                                 GET_GROUP_MODE    * mode);


/****************************************************
 * Procedure Name: CS_fill_in_oe
 * Description   : fill oe structure
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ *  CS_fill_in_oe (OE_PARAMS_rec_typ   oe_prm_in[1],
                                 MSG_typ           * msg_ptr,
                                 short             * act_num,
                                 short               num_msgs,
                                 TRAN_rec_typ        tran[1],
                                 GET_OE_MODE       * mode);

/****************************************************
 * Procedure Name: CS_fill_u2ug
 * Description   : fill user to user group structure
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ *  CS_fill_in_u2ug (UG_typ          ug_in[1],
                                   USER_typ        user_in[1],
                                   MSG_typ       * msg_ptr,
                                   short         * act_num,
                                   short           num_msgs,
                                   TRAN_rec_typ    tran[1],
                                   GET_CONN_MODE * mode);

/****************************************************
 * Procedure Name: CS_reset_cs_msg
 * Description   : reset_cs_message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_reset_cs_msg (NUM_MSGS_typ        * cs_msg_len,
                                  NUM_MSGS_typ        * cs_num_msgs,
                                  RSS_MSG_HDR_rec_typ * msg_hdr,
                                  RSS_MSG_HDR_rec_typ * msg_hdr_cd,
                                  MSG_typ             * msg_cs,
                                  MSG_typ             * msg_cs_ptr);

/****************************************************
 * Procedure Name: CS_set_tran
 * Description   : copy transaction structure to message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_set_tran (MSG_typ       * buffer,
                              TRAN_rec_typ  * trana);

/****************************************************
 * Procedure Name: CS_set_tran_wild_user
 * Description   : set tarnsaction id for user wild cases
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

MSG_typ * CS_set_tran_wild_user (MSG_typ             * buffer,
                                 short                 in_num,
                                 USER_PARAMS_rec_typ * usr_prm_out,
                                 TRAN_rec_typ        * tran);

/****************************************************
 * Procedure Name: CS_set_tran_wild_u2ug
 * Description   : set tarnsaction id for u2ug wild cases
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

MSG_typ * CS_set_tran_wild_u2ug (MSG_typ             * buffer,
                                 short                 in_num,
                                 U2UG_PARAMS_rec_typ * u2ug_prm_out,
                                 TRAN_rec_typ        * tran,
                                 int                   mode);

/****************************************************
 * Procedure Name: CS_set_tmp_last_msg
 * Description   : copy tmp last message indication to message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern void CS_set_tmp_last_msg (MSG_typ * msg_ptr);

/****************************************************
 * Procedure Name: CS_set_not_last_msg
 * Description   : copy not last message indication to message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern void CS_set_not_last_msg (MSG_typ * msg_ptr);

/****************************************************
 * Procedure Name: CS_set_exist
 * Description   : copy exists indication to message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_set_exist (MSG_typ        * buffer,
                               OBJ_EXISTS_typ * obj_exist);

/****************************************************
 * Procedure Name: CS_add_sngl_to_msg
 * Description   : add single message to message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_add_sngl_to_msg (MSG_typ     * msg_cs,
                                     MSG_typ     * buffer_tmp,
                                     NUM_MSGS_typ  sngl_msg_len);

/******************************************************************
* Procedure Name   : CS_db_usr_open
* Description      : open db_ug_file
* Input            :
* Output           : ** handle
* Return Value     : ESA_OK or ESA_FATAL
*******************************************************************/

extern ESA_RC CS_db_usr_open (void                ** handle,
                              ADMIN_PARAMS_rec_typ * admin_param);

/******************************************************************
* Procedure Name   : CS_db_ug_open
* Description      : open db_ug_file
* Input            :
* Output           : ** handle
* Return Value     : ESA_OK or ESA_FATAL
*******************************************************************/

extern ESA_RC CS_db_ug_open (void                 ** handle,
                             ADMIN_PARAMS_rec_typ  * admin_param);

/******************************************************************
* Procedure Name   : CS_db_u2ug_open
* Description      : open db_u2ug_file
* Input            :
* Output           : ** handle
* Return Value     : ESA_OK or ESA_FATAL
*******************************************************************/

extern ESA_RC CS_db_u2ug_open (void                 ** handle,
                               ADMIN_PARAMS_rec_typ  * admin_param);

/****************************************************
 * Procedure Name: esuser
 * Description   : update or insert  user,group or user-group
 *                  record for spec. RSS to DB_user_file,
 *               :   DB_ug_file or DB_u2ug_file
 *               :  (user changes initiate by ESS)
 * Input         : rss,
 *               : api
 *               : user_param,
 *               : ug_param
 * Output        : checksum
 * Return Value  : ESA_RC
 ****************************************************/

extern ESA_RC CS_pre_post_info_for_obj(RSS_typ           rss,
                                       short             api,
                                       void            * account_str,
                                       ADDINFO_rec_ptr   addinfo[1],
                                       ADDINFO_rec_ptr   res_addinfo,
                                       HOT_PATH_typ      hot_path);

/****************************************************
 * Procedure Name: CS_return_error
 * Description   : use to add rc and error to buffer
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_return_error (MSG_typ            * buffer,
                                  ESA_RC               rc_pre,
                                  ESA_RC               rc_act,
                                  ESA_RC               rc_pst,
                                  ERR_STRUCT_rec_typ * err_pre,
                                  ERR_STRUCT_rec_typ * err_act,
                                  ERR_STRUCT_rec_typ * err_pst,
                                  NUM_MSGS_typ       * sngl_msg_len);


/****************************************************
 * Procedure Name: CS_ess_initial_service
 * Description   : Conversation with ESS to start CD (CS)
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern ESA_RC CS_ess_initial_service (MSG_typ             * msg_ptr,
                                      RSS_MSG_HDR_rec_typ * msg_hdr_cd);

/****************************************************
 * Procedure Name: CS_platform_detailes
 * Description   : Get version, max. message size, keyword's checksum
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern ESA_RC CS_platform_detailes (RSS_MSG_HDR_rec_typ * msg_hdr);

/****************************************************
 * Procedure Name: CS_interceptor_service
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern ESA_RC CS_interceptor_service (MSG_typ             * msg_ptr,
                                      RSS_MSG_HDR_rec_typ * msg_hdr_cd);

/****************************************************
 * Procedure Name: CS_get_intercept_data
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern ESA_RC CS_get_intercept_data (MSG_typ       * msg_ptr,
                                     TRAN_rec_typ  * tran);

/****************************************************
 * Procedure Name: CS_start_interceptor
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern ESA_RC CS_start_interceptor (TIME_RANGE_rec_typ * time_range);

 /****************************************************
 * Procedure Name: CS_send_end_of_sync_msg
 * Description   : sends end of sync message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern ESA_RC  CS_send_end_of_sync_msg (RSS_MSG_HDR_rec_typ * msg_hdr);

/****************************************************
 * Procedure Name: CS_add_rs_msg
 * Description   : use to add buffer to existing
 *                 rs message.
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_add_rs_msg (short                  api,
                                USER_PARAMS_rec_typ  * user_prm,
                                OE_PARAMS_rec_typ    * oe_prm,
                                UG_PARAMS_rec_typ    * ug_prm,
                                U2UG_PARAMS_rec_typ  * u2ug_prm,
                                ADDINFO_rec_typ      * addinfo,
                                NUM_MSGS_typ         * rs_msg_len,
                                NUM_MSGS_typ         * rs_num_msgs,
                                MSG_typ              * msg_rs,
                                MSG_typ              * msg_rs_ptr,
                                NUM_MSGS_typ         * rs_umsg_len,
                                NUM_MSGS_typ         * rs_num_umsgs,
                                MSG_typ              * umsg_rs,
                                MSG_typ              * umsg_rs_ptr,
                                NUM_MSGS_typ         * rs_amsg_len,
                                NUM_MSGS_typ         * rs_num_amsgs,
                                MSG_typ              * amsg_rs,
                                MSG_typ              * amsg_rs_ptr,
                                RSS_MSG_HDR_rec_typ  * msg_hdr_rs,
                                int                  * sw_user,
                                int                  * sw_upd,
                                ESA_RC               * write_mbx_rc);

/****************************************************
 * Procedure Name: CS_reset_rs_msg
 * Description   : use to reset cd message.
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_reset_rs_msg (NUM_MSGS_typ        * rs_len,
                                  NUM_MSGS_typ        * rs_num,
                                  MSG_typ             * rs,
                                  MSG_typ             * rs_ptr,
                                  RSS_MSG_HDR_rec_typ * msg_hdr,
                                  const char          * msg_code);


/****************************************************
 * Procedure Name: acsrvc
 * Description   : CD/CS - services
 * Return Value  : ESA_RC
 ****************************************************/

extern ESA_RC acsrvc (RSS_MSG_HDR_rec_typ * msg_hdr,
                      MSG_typ             * msg_ptr_read,
                      RSS_MSG_HDR_rec_typ * msg_hdr_cd);


/****************************************************
 * Procedure Name: CS_set_plat
 * Description   : copy platform structure to message
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern MSG_typ * CS_set_plat (MSG_typ                 * buffer,
                              PLATFORM_DETAIL_rec_typ * plat_prm,
                              NUM_MSGS_typ            * msg_len);

/****************************************************
 * Procedure Name: CS_init
 * Description   : Init environment parameters
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern ESA_RC CS_init (char  * arg1,
                       char  * arg2,
                       void ** os_cs_init_handle);

/****************************************************
 * Procedure Name: CS_term
 * Description   : Term. environment parameters
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern ESA_RC CS_term (ESA_RC exit_rc,
                       int    exit_signal);

/****************************************************
 * Procedure Name: CS_send_ug2uc_msg
 * Description   : Build message for GTUG2UC
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      : Message needs for HOT_PATH_U2UG
 ****************************************************/

extern ESA_RC CS_send_ug2uc_msg (RSS_MSG_HDR_rec_typ * msg_hdr,
                                 TRAN_rec_typ        * tran,
                                 char                * ug,
                                 char                * usr);

/****************************************************
 * Procedure Name: CS_send_msg
 * Description   :
 * Input         :
 * Input/Output  :
 * Return Value  :
 ****************************************************/

extern ESA_RC CS_send_msg (MSG_typ *  msg_ptr,
                           int        msg_length);


/***************************************************************
*                                                              *
* Procedure Name : CS_broadcast                               *
*                                                              *
* Description    : Broadcast file of administrators            *
* INPUT            msg_event_type                              *
*                  event_type                                  *
*   			                                               *
* Return Value   : ESA_RC                                      *
***************************************************************/

ESA_RC CS_broadcast (char          msg_event_type,
                     ESA_EVENT_typ event_type);

ESA_RC CS_send_receive (RSS_MSG_HDR_rec_typ * srvc_msg_hdr);

#endif   /* ifndef ESAMSG_GPF_H_INCLUDED */
