/**************************************************************
* Title            : Control-SA Queue OS functions header     *
* File Name        : esaqos.h                                 *
* Author           : Moshe Meiseles                           *
* Creation Date    : 26.07.94                                 *
* Description      : Queue package for Control-SA             *
* Assumptions and                                             *
*   Considerations : None.                                    *
* $Author:   doron  $
* $Workfile:   esaqos.h  $
* $Revision:   1.1  $
* $Log:   //netapp-nt1/versions/300/common/inc/esaqos.h_v  $
*
*   Rev 1.1   13 Apr 1999 15:21:38   doron
*Changes for Tandem
 *
 *    Rev 1.0   Aug 31 1998 19:02:06   avi_w
 *
 *
 *    Rev 1.7   Mar 04 1998 16:18:08   leonid_s
 * Syncronization with  AS400 changes
 *
 *    Rev 1.3   Jul 27 1997 10:32:40   Danko
 * converting_from_sccs
 *
 *    Rev 1.2   Jul 24 1997 08:30:04   leonid_s
 *     SCCSID("%Z%%M% \
 *
 *
 *    Rev 1.1   Jul 08 1997 10:09:02   avi_w
 *
 *    SAS2IBMN  Feb 19 2017  NuritY  SAS/C to IBM C conversion
 *
**************************************************************/
/* SCCSID %Z%%M% */

#ifndef ESAQOS_H_INCLUDED
#define ESAQOS_H_INCLUDED

#include   ESA_CTSAMSG
#include   ESA_DIAG

/**************************************************************
*                                                             *
*   function protptypes                                       *
*                                                             *
**************************************************************/

/* for MVS only */
#define OS_FILE_access                 osfaccs
#define OS_FILE_close                  osfclos
#define OS_FILE_flush                  osfflus
#define OS_FILE_format                 osformt
#define OS_FILE_open                   osfopen
#define OS_FILE_read                   osfread
#define OS_FILE_seek                   osfseek
#define OS_FILE_tell                   osftell
#define OS_FILE_get_blksize            osfgbsz           /* SAS2IBMN */
#define OS_FILE_write                  osfwrte
#define OS_FILE_getfh                  osfgtfh
 /* MVS */

/****************************************************
 * Procedure Name: OS_FILE_open
 * Description   : Open a file
 *
 * Input         : file name
 *                 open mode (same as for fopen)
 *                 message params
 *
 * Output        : pointer to handle
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 *
 * Note (!!!)   1. The file should be opened in such a way that the
 *                 sequence read/seek/read-again will notice changes.
 *                 This implies the use of: setbuf( NULL )
 *              2. The file should be opened for shared access
 *
 ****************************************************/

ESA_RC OS_FILE_open (const char             * filename,
                       const char             * mode,
                       void                  ** handle,
                       CTSAMSG_PARAMS_rec_typ * msg_params);

/****************************************************
 * Procedure Name: OS_FILE_close
 * Description   : Close a file
 *
 * Input         : handle
 *                 message params
 *
 * Output        : pointer to handle is cleared
 *                 (this function should free the handle)
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 *
 ****************************************************/

ESA_RC OS_FILE_close (void                  ** handle,
                      CTSAMSG_PARAMS_rec_typ * msg_params);

/****************************************************
 * Procedure Name: OS_FILE_access
 * Description   : check if a file exists and can be accessed
 *
 * Input         : file name
 *                 access mode
 *                 message params
 *
 * Output        : none
 *
 * Return Value  : ESA_OK     file exists and can be accessed
 *                 ESA_ERR    access denied
 *                 ESA_FATAL  file does not exist
 *
 ****************************************************/

ESA_RC OS_FILE_access (char                   * filename,
                       int                      mode,
                       CTSAMSG_PARAMS_rec_typ * msg_params);

/****************************************************
 * Procedure Name: OS_FILE_write
 * Description   : Write data to file.
 *
 * Input         : data buffer
 *                 buffer size
 *                 handle
 *                 message params
 *
 * Output        : none
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 *
 ****************************************************/

ESA_RC OS_FILE_write (const void             * buf,
                      size_t                   size,
                      void                   * handle,
                      CTSAMSG_PARAMS_rec_typ * msg_params);

/****************************************************
 * Procedure Name: OS_FILE_read
 * Description   : Read data from a file.
 *
 * Input         : length of data to read
 *                 handle
 *                 message params
 *
 * Output        : data in buffer
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 *
 ****************************************************/

ESA_RC OS_FILE_read (void                   * buf,
                     size_t                   size,
                     void                   * handle,
                     CTSAMSG_PARAMS_rec_typ * msg_params);

/****************************************************
 * Procedure Name: OS_FILE_tell
 * Description   : Return the current position in file (like ftell)
 *
 * Input         : handle
 *                 message params
 *
 * Output        : none
 *
 * Return Value  : current position in file
 *
 ****************************************************/

long int OS_FILE_tell (void                   * handle,
                       CTSAMSG_PARAMS_rec_typ * msg_params);

/* SAS2IBMN - start */
/****************************************************
* Procedure Name: OS_FILE_get_blksize
* Description   : Return the queue file block size.
*
* Input         : handle
*
* Output        : none
*
* Return Value  : Queue file blksize
*
****************************************************/

int OS_FILE_get_blksize (void                   * handle,
                         CTSAMSG_PARAMS_rec_typ * msg_params);
/* SAS2IBMN - end   */

/****************************************************
 * Procedure Name: OS_FILE_seek
 * Description   : Changes the position in file (like fseek)
 *
 * Input         : handle
 *                 offset - the position to seek
 *                 where  - defines the offset
 *                 message params
 *
 * Output        : none
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 *
 ****************************************************/

ESA_RC OS_FILE_seek (void                   * handle,
                     long int                 offset,
                     int                      where,
                     CTSAMSG_PARAMS_rec_typ * msg_params);

/****************************************************
 * Procedure Name: OS_FILE_flush
 * Description   : Flushes output buffers
 *
 * Input         : handle
 *                 message params
 *
 * Output        : none
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 *
 ****************************************************/

ESA_RC OS_FILE_flush (void                   * handle,
                      CTSAMSG_PARAMS_rec_typ * msg_params);

/****************************************************
 * Procedure Name: OS_FILE_format
 * Description   : Format Queue file.Return size of file in bytes
 *
 * Input         : queue file name
 *
 * Output        : size of file
 *
 * Return Value  : ESA_RC
 *
 ****************************************************/

ESA_RC OS_FILE_format (char                   * filename,
                       long                   * q_size,
                       CTSAMSG_PARAMS_rec_typ * msg_params);

/****************************************************
 * Procedure Name: OS_FILE_getfh
 * Description   : Retrieve file handle from OS_FILE_HANDLE
 *
 * Input         : handle
 *                 message params
 *
 * Output        : file handle
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 *
 ****************************************************/

ESA_RC OS_FILE_getfh (void                   * handle,
                      FILE                  ** fh,
                      CTSAMSG_PARAMS_rec_typ * msg_params);

#endif /* ESAQOS_H_INCLUDED */
