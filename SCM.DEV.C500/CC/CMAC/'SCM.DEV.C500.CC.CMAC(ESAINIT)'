/*
 * Version Information:
 * ====================
 * File name       : %name: esainit.h %
 * Instance        : %instance: 1 %
 * Created by      : %created_by: leonid_s %
 * Created on      : %date_created: Tue Jan 13 10:08:43 2004 %
 * Current Version : %version: 4 %
 * Last Modified by: %derived_by: leonid_s %
 * Last Modified on: %date_modified: Tue Jan 13 10:08:43 2004 %
 */

/***********************************************
 * Mod.ID  Who      When         Description
 * =============================================
 * 1776    Leonid   16/04/01     MAX_NUMBER_OF_MSGFILES from 100 to 60
 * SAS2IBMN NuritY  01/01/2017   SAS/C to IBM C Conversion:
 *                               Remove signal processing because
 *                               it depends on the HANDLE_ABENDS
 *                               RSSPARM ALL_RSS parameter which
 *                              is always N. If/when recovery is
 *                                needed, the appropriate recovery
 *                               services will have to be used.
 * AC001   Arun     17/01/17     CONELLIS#307-Queue full issue fix
 * AC001   ArunC    12/04/2017   CIQ#6-MF acct aggr with conns
 * BS10100 KailasP  22/04/2019   Add string for extended message
 *WS10078KG KailasP 23/04/2020   Add new type ROLE and XSGP
 * BS10108 KailasP  12/10/2020   Add function name for Role and Source
 * WS10080 KailasP  09/07/2021   Support MSGSIZE Greater than 32K
 **********************************************/

#ifndef MAIN_H_included
#define MAIN_H_included

#include ESA_API
#include ESA_CTSAMSG
#include ESA_QUEUE
#include ESA_DIAG
#include ESA_API_CODES
#include ENC_API
#include ESA_OS_PROC
#include STRING
#include STDLIB
#include TIME
#include STDIO
#include ESA_CS_OS

#define   DIAG_BASIC       2
#define   DIAG_OS          3
#define   DIAG_MSGHDR      4
#define   DIAG_ADDINFO     5
#define   DIAG_FULLMSG     6
#define   DIAG_DETAILES    7
#define   DIAG_MORE        8
#define   DIAG_COMMON      9


/* for MVS only */
#define CG_prolog2                  INIT000
#define CG_prolog                   INIT001
#define CG_prolog_kwrd              INIT002
#define CG_epilog                   INIT003
/* SAS2IBMN #define CS_signal                   INIT004 */
#define CS_time                     INIT017
#define CS_gensiid                  INIT018
#define CS_creat_cd_header          INIT019
#define CS_func_name_to_func_nmbr   INIT020
#define CSA_alloc                   INIT021
#define CSA_realloc                 INIT022
#define CSA_free                    INIT023
#define CSA_free_all                INIT024
#define CSA_print_alloc_tbl         INIT025
#define CS_scheduler                INIT026
#define CG_miss_keyword             INIT027
#define CSA_lock                    INIT028
#define CSA_unlock                  INIT030
#define CSA_print_lock_tbl          INIT032
#define CSA_close                   INIT033
#define CSA_close_all               INIT034
#define CSA_open                    INIT035
#define CG_name                     INIT036
#define CG_main_name                INIT037
#define My_memicmp                  INIT038
#define My_stricmp                  INIT039
#define CS_get_envir_address        INIT040
#define CSA_fgets                   INIT041
#define CSA_fputs                   INIT042
#define CTSAgentVersion             INIT043
#define CS_DIAG_RESACL_IN           INIT044
#define CS_DIAG_RESACL_OUT          INIT045
#define CS_DIAG_RESACL              INIT046
#define CS_DIAG_UG2UC_IN            INIT047
#define CS_DIAG_UG2UC_OUT           INIT048
#define CS_DIAG_UG2UC               INIT049
#define CS_DIAG_OE_IN               INIT050
#define CS_DIAG_OE_OUT              INIT051
#define CS_DIAG_OE                  INIT052
#define CS_DIAG_UG_IN               INIT053
#define CS_DIAG_UG_OUT              INIT054
#define CS_DIAG_UG                  INIT055
#define CS_DIAG_USER_IN             INIT056
#define CS_DIAG_USER_OUT            INIT057
#define CS_DIAG_USER                INIT058
#define CS_DIAG_ADDINFO             INIT059
#define CS_DAIG_RssAdmin            INIT060
#define CS_DIAG_MSG                 INIT061
#define CS_DIAG_SCRIPT_IN           INIT062
#define CS_DIAG_ADMINPRM            INIT063
 /*MVS*/

/* Error messages for prolog procedure */

#define PROLOG_FILE_NAME_ERROR \
 "SA-Agent %s: OS file name error.File %s. Return code:%s\n"
#define PROLOG_PROC_INIT_ERROR \
 "SA-Agent %s: PROCess init. error. Return code:%s\n"
#define PROLOG_MALLOC_ERROR \
 "SA-Agent %s: malloc error for %d line records\n"
#define PROLOG_NOT_SPACE_FOR_LINE \
 "SA-Agent %s: not space for line %s\n"
#define PROLOG_FILE_ERROR \
 "SA-Agent %s: load parameters error file:%s %s\n"
#define PROLOG_RECORD_ERROR \
 "SA-Agent %s: load parameters error file:%s on line:%d\n"
#define PROLOG_KEY_ERROR \
 "SA-Agent %s: load parameters error file:%s keyword not found \
in line %d\n"
#define PROLOG_VALUE_ERROR \
 "SA-Agent %s: load parameters error file:%s value not found for \
keyword:%s in line %d\n"
#define PROLOG_UNDEFKEY_ERROR \
 "SA-Agent %s: load parameters error file:%s undefined keyword:%s \
in line %d\n"
#define PROLOG_DIAG_ERROR \
 "SA-Agent %s: DIAG load error file:%s return code:%s\n"
#define PROLOG_INIT_ERROR \
 "SA-Agent %s: prolog completed with return code:%s\n"

#define FILE_NOTE_LINE "* Do not change this file !!! \n"

/* Keywords for initialization file */

#define PASSWORD_EXT \
         (((MAX_RSS_PASSWD_LEN + (int)sizeof(int)) % 16) EQ 0) \
           ? \
          (MAX_RSS_PASSWD_LEN + (int)sizeof(int))* 2 \
           : \
          (MAX_RSS_PASSWD_LEN + (int)sizeof(int) + \
           (16- ((MAX_RSS_PASSWD_LEN + (int)sizeof(int))% 16)))*2

#define FOR_EVERY_MAIN  "FOREVERY"

#define CONSOLE_DEST    'Y'
#define ACT_ENCR        'Y'
#define NOT_ACT_ENCR    'N'
#define DBG_ENCR        'D'

#define DIAG_LEVEL      "DIAG_LEVEL"
#define DIAG_OUT_1      "DIAG_OUT_1"
#define DIAG_OUT_2      "DIAG_OUT_2"
#define DIAG_STAMP      "DIAG_STAMP"

#define MSG_DEST_NUM    "MSG_DEST_NUM"
#define MSG_OUTPUT      "MSG_OUTPUT"
#define MSG_LOAD_F1     "MSG_LOAD_F1"
#define MSG_LOAD_F2     "MSG_LOAD_F2"
#define MSG_LOAD_F3     "MSG_LOAD_F3"
#define MSG_LOAD_F4     "MSG_LOAD_F4"
#define MSG_LOAD_F5     "MSG_LOAD_F5"
#define MSG_LOAD        "MSG_LOAD"

#define ENV_DCID        "ENV_DCID"

#define QUE_MAIN_FIL    "QUE_MAIN_FIL"
#define QUE_INTERVAL    "QUE_INTERVAL"
#define QUE_FILE        "QUE_FILE"
#define QUE_FILE_LEN    "QUE_FILE_LEN"
#define QUE_CHECK_SE    "QUE_CHECK_SE"
#define QUE_FREE_GET    "QUE_FREE_GET"
#define QUE_FREE_PUT    "QUE_FREE_PUT"
#define QUE_SUSPEND     "QUE_SUSPEND"

#define AGENT_EXE_PATH  "AGENT_EXE_PATH"
#define ALL_RSS         "ALL_RSS"

#define FILE_DOWNLOAD   "FILE_DOWNLOAD"
#define FILE_RSSKWDS    "FILE_RSSKWDS"
#define FILE_RSSAPI     "FILE_RSSAPI"
#define FILE_RSSADM     "FILE_RSSADM"
#define FILE_RSSADMD    "FILE_RSSADMD"
#define FILE_RSSPARM    "FILE_RSSPARM"
#define FILE_RSSOFLI    "FILE_RSSOFLI"
#define FILE_INTUSER    "FILE_INTUSER"
#define FILE_INTOE      "FILE_INTOE"
#define FILE_INTUG      "FILE_INTUG"
#define FILE_INTU2UG    "FILE_INTU2UG"
#define FILE_DIAGLVL    "FILE_DIAGLVL"
#define FILE_DIAGTXT    "FILE_DIAGTXT"
#define MINIMUM_FREE_DISK_SPACE "MINIMUM_FREE_DISK_SPACE"

#define FILE_QUEUE      "FILE_QUEUE"
#define PRINT_QUEUE     "PRINT_QUEUE"
#define QUEUE_SIZE      "QUEUE_SIZE"
#define WRITE_TO_QUEUE  "WRITE_TO_QUEUE" /*AC001-CONELLIS#307*/
#define MAX_MSG_SIZE    "MAX_MSG_SIZE"
#define ONE_MSG_SIZE    "ONE_MSG_SIZE"  /*WS10080*/
#define MAX_MBX_SIZE    "MAX_MBX_SIZE"  /* AVIW - 19/11/00*/
#define PORT            "PORT"
#define IN_PORT         "IN_PORT"      /*2471*/
#define OUT_PORT        "OUT_PORT"     /*2470*/
#define MIN_SERV        "MIN_SERV"     /*1*/
#define MAX_SERV        "MAX_SERV"     /*1*/
#define HOST_ID         "HOST_ID"      /* Host name - ip address */

#define FILE_ENCRINT    "FILE_ENCRINT"
#define FILE_ENCREXT    "FILE_ENCREXT"
#define ENCR_INT_ACT    "ENCR_INT_ACT"
#define ENCR_EXT_ACT    "ENCR_EXT_ACT"

#define IIQ_VER_MSGSIZE_SUPPORT    04   /*WS10080*/

#define FILE_AGENTPWD   "FILE_AGENTPWD"

#define FILE_CMNTCPA        "CMNTCPA"

#define KEEP_ALIVE_FLAG     "KEEP_ALIVE_FLAG"
#define TCP_KEEP_ALIVE_COUNT    "TCP_KEEP_ALIVE_COUNT"
#define TCP_KEEP_ALIVE_INTERVAL   "TCP_KEEP_ALIVE_INTERVAL"
#define TCP_KEEP_ALIVE_TIME     "TCP_KEEP_ALIVE_TIME"
#define DEFAULT_KEEP_ALIVE_COUNT    2
#define DEFAULT_KEEP_ALIVE_INTERVAL   30
#define DEFAULT_KEEP_ALIVE_TIME     30

#define DEFAULT_KEEP_ALIVE  'N'
#define KEEP_ALIVE_INTERV    "KEEP_ALIVE_INTERV"
#define DEFAULT_KA_INTERV    (1*60)

#define DEFAULT_IN_PORT      2471
#define DEFAULT_OUT_PORT     2470
#define DEFAULT_MIN_SERV     1
#define DEFAULT_MAX_SERV     1
#define HEXA_VALUE           "0123456789ABCDEF"
#define NEGATIVE_VALUE       " -0123456789"
#define POSITIVE_VALUE       "0123456789"

#define WHITECHARS           " \t\n\v\b\r\f\a"

#define STATIST_INTERVAL     500
#define STAT_CHKSUM_INTERVAL 5000
/* AC001 - CIQ#6 - Start */
#define DEFAULT_IIQ_VERSION_VALUE    0
/* AC001 - CIQ#6 - End */

/* Keywords for initialization file */

#define MAX_NUMB_OF_LINES      300

#define MAX_NUMBER_OF_MSGFILES 60

#define MAIN_CODE_LEN         7
#define SKIP_LINE             '*'

#define FLD_ADM_MODE             0
#define FLD_USER_STAT            1
#define FLD_ACE_TYP              2
#define FLD_ACE_PLACE            3
#define FLD_U2UG_CONN            4
#define FLD_U2UG_ATTR            5
#define FLD_ACE_ATTR             6
#define FLD_USER_ADMIN           7
#define FLD_USER_PASSWD_LIFE     8
#define FLD_SRVC_HOT_PATH        9
#define FLD_DEF_UG_ACTION       10
#define FLD_OE_ATTR             11
#define FLD_SEVERITY            12

/* Message header */

#define MH_MESSAGE_AID       'S'
#define MH_MESSAGE_WSLID     "01"
#define MH_MESSAGE_WSUID     "WSUSERID"
#define MH_MESSAGE_LAST      'L'
#define MH_MESSAGE_LAST_TMP  'T'
#define MH_MESSAGE_LAST_NOT  ' '

#define MH_ENCR_NEW          'T'
#define MH_ENCR_ON           'E'
#define MH_ENCR_OFF          '-'
#define MH_ENCR_CMP          'C'
#define MH_ENCR_BOTH         'B'
#define ENC_ADD_MAX_LEN       32

/* Message data */

#define MH_FIRST_MSG   "000001"
#define MH_SECOND_MSG  "000002"
#define MH_NMBR_MSGS   "001"
#define MH_TRANSACTION "000000000000" /* Application length & tran */
#define MH_TRN         "00000000"     /* Transaction*/
#define MH_RETURN_ERR  "000000000000"
#define MH_ERR         "000000000"
#define MH_NOT_SRVMSG  "000000"
#define MH_HOTPASOFF   "0012"

#define INIT_SERVICE_SENDED 'Y'
#define PROC_MAY_READ_QUE   'Y'
#define ADINF_NUM_PRS        3
#define ADINF_KEY_LEN        2
#define MSG_VAL_LEN          3
#define ADINF_VAL_LEN_S      3
#define ADINF_VAL_LEN_N      4
#define ADINF_TYP_LEN        2
#define STRUCT_LEN           3

#define M_ADDINFO_ENTITY    "00"
#define M_ADDINFO_1A        "1A"
#define M_ADDINFO_1B        "1B"
#define M_ADDINFO_2A        "2A"
#define M_ADDINFO_2B        "2B"
#define M_ADDINFO_3E        "3E"
#define M_ADDINFO_UD        "UD"

#define M_REVOKE            "1"
#define M_RESTORE           "2"
#define M_OP_IS_IGNOR       "3"

#define M_USER_IS_USER      "1"
#define M_USER_IS_AUDITOR   "2"
#define M_USER_IS_ADMIN     "3"
#define M_USER_IS_BOTH      "4"
#define M_USER_IS_IGNORED   "5"
/* AC001 - CIQ#6 - Start */
#define PE2_VERSION         "PE2V:"
#define AGENT_VERSION       "AGENTV:"
/* AC001 - CIQ#6 - End */

/* BS10100 - Start */
/* The START_EXTENDED_MSG defines starting point
 * where the extended message would start */
#define START_EXTENDED_MSG  "PE2EX:"
/* BS10100 - End */
/* ACE stuff */

#define M_ACE_IS_USER       "1"
#define M_ACE_IS_GROUP      "2"
#define M_ACE_IS_BOTH       "3"
#define M_ACE_IS_OE         "4"
#define M_ACE_IS_MASK       "5"
#define M_ACE_IS_OTHER      "6"
#define M_ACE_IS_UNDEFINED  "7"
#define M_ACE_IS_IGNORE     "8"

#define M_ACE_LOC_FIRST     "1"
#define M_ACE_LOC_LAST      "2"
#define M_ACE_LOC_BEFORE    "3"
#define M_ACE_LOC_AFTER     "4"
#define M_ACE_LOC_IGNORED   "5"

#define M_ACE_ATTR_IS_PERMANENT   "1"
#define M_ACE_ATTR_IS_REGULAR     "2"
#define M_ACE_ATTR_IGNORED        "3"

#define M_LOGEVENT          "0"
#define M_REGULARALERT      "1"
#define M_URGENTALERT       "2"
#define M_VERYURGENTALERT   "3"

/* OE stuff */
#define M_OE_ATTR_ACL        "1"
#define M_OE_ATTR_NO_ACL     "2"
#define M_OE_ATTR_IGNORED    "3"

/* User password life enums */

#define M_PASS_LIFE_PERMANENT "1"
#define M_PASS_LIFE_RESET     "2"
#define M_PASS_LIFE_IGNORED   "3"

#define M_NORMAL_MODE         "1"
#define M_SIMULATION_MODE     "2"
#define M_ADMIN_MODE_IGNORED  "3"

#define M_ACT_UNKNOWN         "1"
#define M_ACT_ADD             "2"
#define M_ACT_UPDATE          "3"
#define M_ACT_DELETE          "4"
#define M_ACT_REVOKE          "5"
#define M_ACT_PWD_UPD         "6"
#define M_ACT_CONN_UPD        "7"

#define M_OLD_DEF_UG_ACT_IGNORED "3"
#define M_OLD_DEF_UG_ACT_DROP    "2"
#define M_OLD_DEF_UG_ACT_KEEP    "1"

#define M_U2UG_CONN_NONE      "1"
#define M_U2UG_CONN_IS_ADMIN  "2"
#define M_U2UG_CONN_IS_AUDIT  "3"
#define M_U2UG_CONN_IS_BOTH   "4"
#define M_U2UG_CONN_IGNORE    "5"

#define M_U2UG_ATTR_UNDEFINED     "1"
#define M_U2UG_ATTR_DEFAULT_GROUP "2"
#define M_U2UG_ATTR_IGNORED       "3"

#define MSG_REC_TYPE_LEN     2
#define RSS_NUM_MSGS         3
#define RSS_MSG_LEN          4
#define RSS_MSG_LEN_L        5      /* WS10080 */

#define KEYWORD_TYPES_NUM    10

/**************************************************
 * Service type
 *************************************************/

#define ADMIN_SERVICE        'A'
#define DWNLD_SERVICE        'D'
#define DOWNLOAD_CSA_DEF     'F'
#define START_INTERCEPTOR    'I'
#define KEYWORDS_SERVICE     'K'
#define GLOBAL_SYNC_SERVICE  'P'
#define ESS_INITIAL_SERVICE  'S'
#define UPLOAD_ESS_DEF       'T'
#define UPDATE_ESS_SERVICE   'U'
#define UPLOAD_ESS_SPECSET   'M'

/* Message and record codes */

#define MSG_RSS_STATUS       "UQ"

#define MSG_USER_ADD         "AA"
#define MSG_USER_TO_ESS      "BA"
#define MSG_USER_DEL         "DA"
#define MSG_USER_GET         "IA"
#define MSG_PASSWRD_UPD      "PA"  /**/
#define MSG_USER_UPD         "UA"
#define MSG_USER_REVOKE      "VA"  /**/

#define MSG_UG_ADD           "AB"
#define MSG_UG_TO_ESS        "BB"
#define MSG_UG_DEL           "DB"
#define MSG_UG_GET           "IB"
#define MSG_UG_UPD           "UB"

#define MSG_UG2UC_ADD        "AC"
#define MSG_UG2UC_TO_ESS     "BC"
#define MSG_UG2UC_DEL        "DC"
#define MSG_UG2UC_GET        "IC"
#define MSG_UG2UC_UPD        "UC"

#define MSG_RES_ADD          "AD"
#define MSG_RES_DEL          "DD"
#define MSG_RES_GET          "ID"
#define MSG_RES_UPD          "UD"

#define MSG_OF_ERROR         "EE"

#define END_OF_SERVICE       "FF"
#define MSG_END_OF_DWNLD     "PF"

#define MSG_ACE_ADD          "AG"
#define MSG_ACE_DEL          "DG"
#define MSG_RSACL_GET        "IG"
#define MSG_ACE_UPD          "UG"

#define MSG_OE_ADD           "AH"
#define MSG_OE_TO_ESS        "BH"
#define MSG_OE_DEL           "DH"
#define MSG_OE_GET           "IH"
#define MSG_OE_UPD           "UH"

#define MSG_FULRES_GET       "IJ"

#define MSG_RSPRMMOD         "BK"
#define MSG_RSPRM_GET        "IK"
#define MSG_RSPRM_UPD        "UK"

#define MSG_LOGEVT_TO_ESS    "AL"
#define MSG_USER_FROM_ESS    "AM"
#define MSG_UG_FROM_ESS      "AN"
#define MSG_UG2UC_FROM_ESS   "AO"
#define MSG_OE_FROM_ESS      "AP"

#define MSG_RSSAPIKWD_ADD    "AR"

#define MSG_GLOBAL_SYNC      "GS"
#define MSG_START_INTERCEPT  "IS"
#define MSG_DWNLD            "PS"
#define START_OF_SERVICE     "RS"

#define MSG_ADMIN_ADD        "AT"
#define MSG_ADMIN_DEL        "DT"
#define MSG_ADMIN_UPD        "UT"

#define MSG_PLATFORM_DETAIL  "IV"

#define MSG_INTEREST_OE      "AW"
#define MSG_INTEREST_UG      "AZ"
#define MSG_INTEREST_USER    "AY"
#define MSG_INTEREST_UG2UC   "AX"

#define MSG_PARTIAL_OE       "BW"
#define MSG_PARTIAL_UG       "BZ"
#define MSG_PARTIAL_USER     "BY"
#define MSG_PARTIAL_UG2UC    "BX"

/* WS10078KG - Start */
#define MSG_XROL_ADD         "AI"
#define MSG_XSGP_ADD         "AU"
#define MSG_XROL_GET         "II"
#define MSG_XSGP_GET         "IU"
/* WS10078KG - End  */

/************************************************************/
/*  types of keywords for additional info and entity info   */
/************************************************************/

#define KWD_FOR_ADDINFO_1A       '1'
#define KWD_FOR_ADDINFO_1A_CHECK '2'
#define KWD_FOR_ADDINFO_1B       '3'
#define KWD_FOR_ADDINFO_1B_CHECK '4'
#define KWD_FOR_ENTITY_INFO      '5'
#define KWD_FOR_ENTITY_CHECK     '6'
#define KWD_FOR_ADDINFO_2A       '7'
#define KWD_FOR_ADDINFO_2A_CHECK '8'
#define KWD_FOR_ADDINFO_2B       '9'
#define KWD_FOR_ADDINFO_2B_CHECK 'A'

/***************************************************/
/* Defintions for functions with exact func. names */
/***************************************************/

#define FUNC_ADDUSER              3
#define FUNC_ADDUG                8
#define FUNC_ADDU2UG              11
#define FUNC_ADDACE               14
#define FUNC_ADDRES               28
#define FUNC_GTRSPRM              38
#define FUNC_ADDOE                58
/* WS10078KG - Start */
#define FUNC_ADDXROL              59
#define FUNC_ADDXSGP              60
#define FUNC_GETXROL              61
#define FUNC_GETXSGP              62
/* WS10078KG - End */

#define FUNC_DELUSER              1
#define FUNC_UPDUSER              2
#define FUNC_REVUSER              4
#define FUNC_USERCONN             5
#define FUNC_UPD_PASS             6
#define FUNC_GTUSERS              7
#define FUNC_DELUG                9
#define FUNC_UPDUG                10
#define FUNC_GETUGS               12
#define FUNC_DELU2UG              13
#define FUNC_UPDU2UG              15
#define FUNC_GTUG2UC              16
#define FUNC_GETRES               17
#define FUNC_DELRES               18
#define FUNC_UPDRES               19
#define FUNC_GTRSACL              20
#define FUNC_DELACE               21
#define FUNC_UPDACE               22
#define FUNC_STRSPRM              23
#define FUNC_RSPRMMOD             24
#define FUNC_RSUSDIS              25
#define FUNC_RSPWDMOD             26
#define FUNC_RSLOGEVT             27
#define FUNC_RSUSER               29
#define FUNC_RSUG                 30
#define FUNC_RSOE                 31
#define FUNC_RSU2UG               32
#define FUNC_RSS_CHECK            33
#define FUNC_DELOE                34
#define FUNC_UPDOE                35
#define FUNC_GETOES               36
#define FUNC_RSSKWD               37
#define FUNC_ADDADMIN             39
#define FUNC_UPDADMIN             40
#define FUNC_DELADMIN             41

#define RSS_CHECK_RSS             55

/**************************************************
 * CSA function codes
 *************************************************/

#define     FUNC_NAME_ADDUSER      "ADDUSER"
#define     FUNC_NAME_DELUSER      "DELUSER"
#define     FUNC_NAME_UPDUSER      "UPDUSER"
#define     FUNC_NAME_REVUSER      "REVUSER"
#define     FUNC_NAME_UPD_PASS     "UPD_PASS"
#define     FUNC_NAME_GTUSERS      "GTUSERS"
#define     FUNC_NAME_ADDUG        "ADDUG"
#define     FUNC_NAME_DELUG        "DELUG"
#define     FUNC_NAME_UPDUG        "UPDUG"
#define     FUNC_NAME_GETUGS       "GETUGS"
#define     FUNC_NAME_ADDOE        "ADDOE"
#define     FUNC_NAME_DELOE        "DELOE"
#define     FUNC_NAME_UPDOE        "UPDOE"
#define     FUNC_NAME_GETOES       "GETOES"
#define     FUNC_NAME_ADDU2UG      "ADDU2UG"
#define     FUNC_NAME_DELU2UG      "DELU2UG"
#define     FUNC_NAME_UPDU2UG      "UPDU2UG"
#define     FUNC_NAME_GTUG2UC      "GTUG2UC"
#define     FUNC_NAME_ADDACE       "ADDACE"
#define     FUNC_NAME_DELACE       "DELACE"
#define     FUNC_NAME_UPDACE       "UPDACE"
#define     FUNC_NAME_ADDRES       "ADDRES"
#define     FUNC_NAME_DELRES       "DELRES"
#define     FUNC_NAME_UPDRES       "UPDRES"
#define     FUNC_NAME_GETRES       "GETRES"
#define     FUNC_NAME_GTRSACL      "GTRSACL"
#define     FUNC_NAME_STRSPRM      "STRSPRM"
#define     FUNC_NAME_GTRSPRM      "GTRSPRM"
#define     FUNC_NAME_PLATF_DETAIL "PLAT_DETAIL"
#define     FUNC_UNDEFINED         "UNDEFINED"

/* BS10108 - start */
#define     FUNC_NAME_ADDXROL      "ADDXROL"
#define     FUNC_NAME_ADDXSGP      "ADDXSGP"
#define     FUNC_NAME_GETXROL      "GETXROL"
#define     FUNC_NAME_GETXSGP      "GETXSGP"
/* BS10108 - end */

#define     ACTION_SCRIPTPRE       "SCRIPTPRE"
#define     ACTION_SCRIPTPOST      "SCRIPTPOST"
#define     ACTION_UNDEFINED       "UNDEFINE"

#define FUNC_PLATFORM_DETAIL 1001
#define NUM_DIGITS_IN_INT    9

#define RSSPRM_NAME_LEN  25
#define RSSPRM_VALUE_LEN 256

#define FUNC_NAME_LEN   30
#define PTR_NAME_LEN    30
#define OPEN_CODE_LEN   3

#define ADD_NUM_INTERCEP_REC 10

typedef char         MSG_typ     ;
typedef unsigned int NUM_MSGS_typ;

typedef char MH_version  [12];
typedef char MH_sid          ;
typedef char MH_siid      [9];
typedef char MH_seq       [6];
typedef char MH_dcid      [2];
typedef char MH_aid          ;
typedef char MH_wslid     [2];
typedef char MH_wsuid     [8];
typedef char MH_ltl          ;
typedef char MH_cmrs         ;
typedef char MH_mtyp         ;
typedef char MH_rtyp         ;
typedef char MH_cos          ;

typedef char CS_TIME      [6];

#define LOG_ANY_MSG_VALUE           "ALL"
#define LOG_INTRST_MSG_VALUE        "ACCEPTED"
#define LOG_SKIPED_MSG_VALUE        "IGNORED"
#define DONTLOG_ANY_MSG_VALUE       "NONE"

/********************************************/
/*  Define time and date formats            */
/********************************************/

#define DATE_STR_LEN        10
#define TIME_STR_LEN         8

typedef char TIME_STR_typ [ TIME_STR_LEN + 1 ];  /* HH:MM:SS */
typedef char DATE_STR_typ [ DATE_STR_LEN + 1 ];  /* YYYY\MM\DD */

/************************************************/
/*  Typedef for log intercept message action    */
/************************************************/

typedef enum {LOG_ANY_MSG,
              LOG_INTRST_MSG,
              LOG_SKIPED_MSG,
              DONTLOG_ANY_MSG
} LOGMSG_typ;

/************************************************/
/*  Typedef for severity of the alert/logevent  */
/************************************************/

typedef enum {LOGEVENT,
              REGULARALERT,
              URGENTALERT,
              VERYURGENTALERT,
              UNDEFINED
} SEVERITY_typ;

/********************************************/
/*  typedefs for interesting objects        */
/********************************************/


typedef struct S_RSS_ADMINISTRATOR_STRUCT {
    RSS_typ    rss_name;
    char       admin_passwd[PASSWORD_EXT];
    char       blank1;
    char       passwd_len[3];
    char       blank2;
    char       auto_pwd_change;/*automatic password change: Y / N*/
    char       blank3;
    TIME_typ   change_interval;/* NNNNNN Min*/
    DATE_typ   last_changed_date;/* YYYYMMDD */
    TIME_typ   last_changed_time;/* HHMMSS   */
    USER_typ   admin_name;
    char       end_rec;
} ADMINISTRATOR_rec_typ, *ADMINISTRATOR_rec_ptr;

typedef struct S_MEMBER_ADM_STRUCT {
    char           admin_passwd[PASSWORD_EXT+ 1];
    unsigned short passwd_len;
    char           auto_pwd_change;
    unsigned long  change_interval;
    unsigned long  date_of_last_change;
    USER_typ       admin_name;
} MEMBER_ADM_rec_typ, *MEMBER_ADM_rec_ptr;

typedef struct S_MEMBER_USER_STRUCT {
    char      member_type;
    USER_typ  user;
} MEMBER_USER_rec_typ, *MEMBER_USER_rec_ptr;

typedef struct S_MEMBER_UG_STRUCT {
    char      member_type;
    UG_typ    ug;
} MEMBER_UG_rec_typ, *MEMBER_UG_rec_ptr;

typedef struct S_MEMBER_OE_STRUCT {
    char      member_type;
    OE_typ    oe;
} MEMBER_OE_rec_typ, *MEMBER_OE_rec_ptr;

typedef struct S_INTEREST_USR_STRUCT {
    RSS_typ   rss;
    char      member_type;
    char      blank1;
    USER_typ  user;
    char      end_rec;
} INTEREST_USER_rec_typ, *INTEREST_USR_rec_ptr;

typedef struct S_INTEREST_UG_STRUCT {
    RSS_typ   rss;
    char      member_type;
    char      blank1;
    UG_typ    ug;
    char      end_rec;
} INTEREST_UG_rec_typ, *INTEREST_UG_rec_ptr;

typedef struct S_INTEREST_OE_STRUCT {
    RSS_typ   rss;
    char      member_type;
    char      blank1;
    OE_typ    oe;
    char      end_rec;
} INTEREST_OE_rec_typ, *INTEREST_OE_rec_ptr;

/********************************************/
/*  typedefs for hotpath                    */
/********************************************/

typedef enum P_HOT_PATH_typ {
    HOT_PATH_ON,
    HOT_PATH_OFF,
    HOT_PATH_FULL
} HOT_PATH_typ;

typedef struct S_STARTLST_STRUCT {
    RSS_typ            rss;
    DATE_typ           date;
    TIME_typ           time;
    OS_host_name_typ   host;
    char               end_string;
} STARTLST_rec_typ, *STARTLST_rec_ptr;

/*********************************************/
/*  Typedef for communication message header */
/*********************************************/

typedef struct hdr_msg {
    MH_sid            mhsid;
    MH_siid           mhsiid;
    MH_seq            mhseq;
    MH_dcid           mhcid;
    MH_aid            mhaid;
    MH_wslid          mhwslid;
    MH_wsuid          mhwsuid;
    MH_ltl            mhltl;
    MH_cmrs           mhcmrs;
    MH_mtyp           mhmtyp;
    MH_rtyp           mhrtyp;
} RSS_MSG_HDR_rec_typ , * RSS_MSG_HDR_rec_ptr;

/*********************************************/
/*  Typedef for interesting users and groups */
/*********************************************/

typedef struct RSS_INTEREST_STRUCT {
  RSS_typ               rss;
  RSS_typ               rss_type ;
  int                   pre_num_adms;
  MEMBER_ADM_rec_typ  * pre_adms_ptr;
  int                   pre_num_oes;
  MEMBER_OE_rec_typ   * pre_oes_ptr;
  int                   pre_num_users;
  MEMBER_USER_rec_typ * pre_users_ptr;
  int                   pre_num_ugs;
  MEMBER_UG_rec_typ   * pre_ugs_ptr;
  int                   pre_num_u2ugs;
  MEMBER_UG_rec_typ   * pre_u2ugs_ptr;
  char                  dwnld_sync_method;
  char                  prev_dwnld_sync_method;
  int                   num_oe_kwds;
  int                   num_ug_kwds;
  int                   num_usr_kwds;
  int                   num_u2ug_kwds;
  int                   num_res_kwds;
  int                   num_ace_kwds;
  int                   num_rss_kwds;
  int                   num_entity_kwds;
  LOGMSG_typ            LogInterceptMsg;
  LOGMSG_typ            LogGetMsg;
  RESOURCE_typ          file_ofli_semaphore;
  RESOURCE_typ          file_onli_semaphore;
  RSS_STATUS_typ        rss_status;
  RSS_typ               ess_rss;
  RSS_typ               ess_rss_type;
  char                  ofli_activated;
  unsigned short        UpdChecksumKwd;
  ESA_RC                rc;
  ADDINFO_rec_typ     * RssPrmAddInfo;
  int                   num_xrol_kwds;   /* WS10078KG */
  int                   num_xsgp_kwds;   /* WS10078KG */
} RSS_INTEREST_rec_typ , * RSS_INTEREST_rec_ptr;

/********************************************/
/*  typedefs for entity names               */
/********************************************/

typedef struct rssapiprm {
   RSS_typ     type;
   RSS_typ     rss;
   short       api;
   short       script_kwd_num;
   char        pre;
   char        act;
   char        post;
   char        pre_prog [PROGRAM_NAME_LEN+ 1];
   char        post_prog[PROGRAM_NAME_LEN+ 1];
} RSSAPIPRM_rec_typ, *RSSAPIPRM_rec_ptr;

typedef struct kwd_len {
   char    keyword_type;
   short   keylen;
   char    addtyp [ADINF_TYP_LEN + 1];
   char    keyword[MAX_RSS_ADDINFO_KWD_LEN+1];
} KWD_rec_typ, *KWD_rec_ptr;

typedef struct rssapikwd {
   RSS_typ     rss;
   short       api;
   short       num_keywords;
   KWD_rec_typ kwd [1];
} RSSAPIKWD_rec_typ, *RSSAPIKWD_rec_ptr;

typedef struct rss_api_kwd {
   RSS_typ     rss;
   char        fil1;
   char        api[2];
   char        fil2;
   char        keyword_type;
   char        fil3;
   char        addtyp[ADINF_TYP_LEN];
   char        fil4;
   char        keyword[MAX_RSS_ADDINFO_KWD_LEN];
   char        end_row;
   char        end_string;
} RSSAPI_KWD_rec_typ, *RSSAPI_KWD_rec_ptr;

typedef struct rss_api_prm {
   RSS_typ     type;
   char        fil0;
   RSS_typ     rss;
   char        fil1;
   char        api[2];
   char        fil2;
   char        script_kwd_num[2];
   char        fil7;
   char        pre;
   char        fil3;
   char        act;
   char        fil4;
   char        post;
   char        fil5;
   char        pre_prog[PROGRAM_NAME_LEN];
   char        fil6;
   char        post_prog[PROGRAM_NAME_LEN];
   char        end_row;
   char        end_string;
} RSSAPI_PRM_rec_typ, *RSSAPI_PRM_rec_ptr;

typedef struct rssapi {
   RSS_typ     rss;
   short       api;
} RSSAPI_rec_typ, *RSSAPI_rec_ptr;

typedef struct rss_prm {
   char        fil0;
   RSS_typ     rss;
   char        fil1;
   char        rssprm_name[RSSPRM_NAME_LEN];
   char        fil2;
   char        rssprm_value[RSSPRM_VALUE_LEN];
   char        end_row;
   char        end_string;
} RSSPRM_rec_typ, *RSSPRM_rec_ptr;

typedef struct alloc_tbl {
  char         * ptr;
  short          ptr_type;
  size_t         size;
  int            num_elements;
  char           func_name[MAX_RSS_RESOURCE_NAME_LEN + 1];
  char           ptr_name[PTR_NAME_LEN+ 1];
} ALLOC_TBL_rec_typ;

typedef struct lock_tbl {
  short          sw_init;
  short          sw_lock;
  short          sw_open;
  char           open_code [OPEN_CODE_LEN+ 1];
  char           func_name[MAX_RSS_RESOURCE_NAME_LEN+ 1];
  char           file_name[MAX_RSS_RESOURCE_NAME_LEN+ 1];
  FILE         * open_handle;
  void         * file_handle;
  void         * lock_handle;
} LOCK_TBL_rec_typ;

typedef enum {
    DWNLD_SYNC_UNDEFINED,
    DWNLD_INITIAL,
    DWNLD_INCREMENT,
    SYNC_FULL,
    SYNC_PARTIAL
} DWNLD_SYNC_typ;

#define CTSAMSG_DEST_ERR    0
#define CTSAMSG_DEST_CNSL   1
#define CTSAMSG_DEST_CNSL2  2

/********************************************/
/*  Typedef for environment                 */
/********************************************/

typedef struct environment {
 /* Diag stuff */
 char                        diag_out_1     [RSSPRM_VALUE_LEN+ 1];
 char                        diag_out_2     [RSSPRM_VALUE_LEN+ 1];
 char                        diag_stamp     [RSSPRM_VALUE_LEN+ 1];
 void                      * diag_handle;
    /* CTSAMSG and error stuff */
 char                        msg_log_file_1 [RSSPRM_VALUE_LEN+ 1];
 char                        msg_log_file_2 [RSSPRM_VALUE_LEN+ 1];
 char                        msg_log_file_3 [RSSPRM_VALUE_LEN+ 1];
 ERR_STRUCT_rec_typ          msg_err;
 ADMIN_PARAMS_rec_typ        msg_admin_param;
 CTSAMSG_HANDLE_rec_typ      msg_handle;
 CTSAMSG_DEST_TABLE_rec_ptr  msg_dest;
 CTSAMSG_PARAMS_rec_typ      msg_params;
 CTSAMSG_HANDLE_rec_typ     *ctsamsg_handle;
 CTSAMSG_DEST_TABLE_rec_typ *ctsamsg_dest;
 /* OS events  */
 void                       *event_handle;
 char                        event_active ;
 /* Initial service  */
 char                        initial_service;
 char                        read_alternatives ;
 /* Communication header */
 MH_dcid                     dcid;
 MH_aid                      aid;
 MH_wslid                    wslid;
 MH_wsuid                    wsuid;
 MH_cmrs                     cmrs;
 /* Main program name ACS ACD */
 ESA_MAIN_NAME_typ           p_main_name;
 void                      * os_cs_init_handle;
 void                      * os_proc_handle ;
 void                      * os_attach_handle ;
 /* Mailbox stuff */
 MBX_QUE_HDL_D_typ           channel_i;
 MBX_QUE_HDL_D_typ           channel_o;
 unsigned int                max_msg_size;  /* AJK: unsigned */
 unsigned int                max_mbx_size;  /* AVIW 19/11/00 */
 /* SA-Agent Home dir */
 RESOURCE_typ                agent_exe_path;
 /* SA-Agent files */
 RESOURCE_typ                file_administrators;
 RESOURCE_typ                file_rsskwds;
 RESOURCE_typ                file_rssapi;
 RESOURCE_typ                file_rssofli;
 RESOURCE_typ                file_rssparm;
 RESOURCE_typ                file_intoe;
 RESOURCE_typ                file_intuser;
 RESOURCE_typ                file_intug;
 RESOURCE_typ                file_intu2ug;
 RESOURCE_typ                file_diaglvl;
 RESOURCE_typ                file_diagtxt;
 RESOURCE_typ                file_queue;
 RESOURCE_typ                print_queue;
 RESOURCE_typ                file_encrint;
 RESOURCE_typ                file_encrext;
 RESOURCE_typ                file_agentpwd;

/*  CE  */
 RESOURCE_typ                file_cmntcpa;
 MSG_typ                     keep_alive_flag;
 double                      keep_alive_interv;

 /* Queue stuff */
 Q_HANDLE                    q_handle;
 int                         q_wait;
 int                         queue_size;
     /* encryption stuff */
 ENC_BOOLEAN                 encryption_active_ext;
 void                      * enc_internal_handle;
 void                      * enc_external_handle;
 void                      * enc_external_key_handle;
 MSG_typ                     encr_int_act;
 MSG_typ                     encr_ext_act;
 MSG_typ                   * enc_ptr;
 ENC_ENCR_ALGRTM             encr_type;
 MSG_typ                   * msg_ptr  ;
 int                         msg_size;
 int                         lock_wait;
 RSS_typ                     login_rss;
 USER_typ                    login_admin;
 USER_typ                    login_def_admin;
 UG_typ                      login_group;
 LOGIN_MODE_typ              login_mode;
 void                      * handle_login;
 void                      * handle_def_login;
 int                         rss_num;
 int                         max_rss_num;
 RSS_INTEREST_rec_typ      * interest;
 /* Interesting keywords and parameteres */
 RSSAPI_PRM_rec_ptr          params;
 int                         prm_num;
 RSSAPI_KWD_rec_ptr          keywrds;
 int                         kwd_num;
 /* Increment users, groups and connections */
 long int                    num_oes;
 MEMBER_OE_rec_typ         * oes_ptr;
 long int                    num_users;
 MEMBER_USER_rec_typ       * users_ptr;
 long int                    num_ugs;
 MEMBER_UG_rec_typ         * ugs_ptr;
 long int                    num_u2ugs;
 MEMBER_UG_rec_typ         * u2ugs_ptr;
 /* Intercept scheduler */
 STARTLST_rec_typ          * startlst;
 FUNC_PTR_rec_typ            func_ptr;
 int                         num_of_rss;
 /* Rss parameteres data from RSSPARM file */
 RSSPRM_rec_ptr              rssprm;
 int                         rssprm_num;

 short                       last_siid;
 /* Rss name and type for interceptor */
 RSS_typ                     rss_type;
 RSS_typ                     rss_name;
 RSS_LIMITS_rec_typ          rss_limits ;

    /* Table for alloc. data */
 ALLOC_TBL_rec_typ         * tbl;
 int                         tbl_rows;
    /* Table for locked files */
 LOCK_TBL_rec_typ          * lock;
 int                         lock_rows;
    /* Number messages after request stop service confirmation */
 int                         stop_req_msgs;
 int                         num_entity_kwds;
 HOT_PATH_typ                hot_path ;
 ADDINFO_rec_typ           * entity_info;
 RSS_vers_typ                api_version;
 MEMBER_ADM_rec_typ          adm_member;
 MEMBER_ADM_rec_typ          def_adm_member;
 char                        siid[sizeof(MH_siid)+ 1];
 OE_typ                      empty_oe;
 UG_typ                      empty_ug;
 USER_typ                    empty_user;
 OPTION_typ                  apiterm_req;
 OPTION_typ                  detach_req;
 RSS_typ                     all_rss;
 void                      * apiinit_handle ;
 DATE_typ                    rss_status_date;/* YYYYMMDD */
 TIME_typ                    rss_status_time;/* HHMMSS   */
 RSS_rec_typ               * rss_rec;
 int                         argc;
 char                     ** argv;
 int                         alloc_num_intercept_rec;
 int                         num_intercept_rec;
 INTERCEPT_rec_typ         * intercept_rec;
 DWNLD_SYNC_typ              dwnld_sync_type;
 int                         min_serv;
 int                         max_serv;
 int                         in_port;
 int                         out_port;
 int                         addinfo_val_len;
 OS_host_name_typ            host_name;
 RESOURCE_typ                file_dummyadmins;
 int                         rssprm_row;

 /* FD4671 Aviw 12/12/01 move temporary to end of envir
    in order to support exe files of 3.1.01 original */

 int                         keep_alive_count;
 int                         keep_alive_interval;
 int                         keep_alive_time;

 /* FD4671 Aviw 12/12/01 - end */

 /*   in order to support download messages to file */
 RESOURCE_typ                file_download;
 FILE                      * download_hndl;
 void                      * reserv_ptr1;
 void                      * reserv_ptr2;
 void                      * reserv_ptr3;
 /* CTSPARM values */
 char                        write_to_queue; /*AC001-CONELLIS#307*/
 int                         iiq_version;  /* AC001 - CIQ#6 */
 int                         iiq_ver_interceptor; /*WS10080*/
 int                         one_msg_size;        /*WS10080*/

} ENVIRONMENT_rec_typ, *ENVIRONMENT_rec_ptr;

/********************************************/

/********************************************/
/* Typedef for SRVICE structure             */
/********************************************/

typedef char SRVC_typ;

typedef char KWD_typ [KEYWORD_TYPES_NUM];

/****************************************************
 * Procedure Name: CG_prolog
 * Description   : main prolog
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 ****************************************************/

EXT ESA_RC CG_prolog (ESA_MAIN_NAME_typ    p_main_name,
                      int                  argc_prm,
                      char              ** argv_prm);

/****************************************************
 * Procedure Name: CG_prolog_kwrd
 * Description   : main prolog
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 ****************************************************/

EXT ESA_RC CG_prolog_kwrd (char         * keyword,
                           char         * value,
                           short          private_param,
                           short        * was_dest_private,
                           short        * was_load_private,
                           int          * msgfiles_num,
                           RESOURCE_typ   msgfiles[1]);

/****************************************************
 * Procedure Name: CG_epilog
 * Description   : main epilog
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 ****************************************************/

EXT void CG_epilog (ESA_RC exit_rc , int exit_signal);

/****************************************************
 * Procedure Name: CS_func_name_to_func_nmbr
 * Description   : convert  string to api
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 ****************************************************/

short CS_func_name_to_func_nmbr (char *func_name);

/****************************************************
 * Procedure Name: CS_creat_cd_header
 * Description   : used to creat rss message header on
 *                 the begining of every service
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 ****************************************************/

extern void CS_creat_cd_header (RSS_MSG_HDR_rec_typ * msg_hdr_cd);

/****************************************************
 * Procedure Name: CS_time
 * Description   : find the curent time
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 ****************************************************/

extern char * CS_time (void);

/****************************************************
 * Procedure Name: CS_gensiid
 * Description   :
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 ****************************************************/

char * CS_gensiid (void);

/****************************************************
 * Procedure Name: CSA_alloc
 * Description   : allocate space
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 ****************************************************/

ESA_RC CSA_alloc (char       ** ptr,
                  short          ptr_type,
                  size_t         size,
                  int            num_elements,
                  char         * func_name,
                  char const   * ptr_name);

/****************************************************
 * Procedure Name: CSA_alloc
 * Description   : allocate space
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 ****************************************************/

ESA_RC CSA_realloc (char        ** ptr,
                    short          ptr_type,
                    size_t         size,
                    int            num_elements);

/****************************************************
 * Procedure Name: CSA_free
 * Description   : Free allocated space
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 ****************************************************/

void   CSA_free (char ** ptr);

/****************************************************
 * Procedure Name: CSA_free
 * Description   : Free allocated space
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 ****************************************************/

void CSA_free_all (void);

/****************************************************
 * Procedure Name: CSA_print_alloc_tbl
 * Description   : Print  information about allocated
 *                  spce from ALLOC table
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 ****************************************************/

void CSA_print_alloc_tbl (int comp, char * fn, int Diag);

/****************************************************
 * Procedure Name: CS_scheduler
 * Description   : Call to intercept scheduler
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 ****************************************************/

ESA_RC CS_scheduler (int SwScheduler);

/****************************************************
 * Procedure Name: CG_miss_keyword
 * Description   : Check if any keyword is missing
 * Input         :
 * Return Value  :
 * Comments      :
 ****************************************************/

ESA_RC CG_miss_keyword (void);

/****************************************************
 * Procedure Name: CSA_unlock
 * Description   : Unlock file
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 ****************************************************/

ESA_RC CSA_unlock (char       * file_name,
                   char       * func_name);

/****************************************************
 * Procedure Name: CSA_print_lock_tbl
 * Description   : Print  information about locked files
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 ****************************************************/

void CSA_print_lock_tbl (void);

/****************************************************
 * Procedure Name: CSA_lock
 * Description   : lock file
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 ****************************************************/

ESA_RC CSA_lock (char           * file_name,
                 char           * func_name,
                 LOCK_SCOPE_typ   lock_scope);

/* SAS2IBMN - Remove signal processing
 ****************************************************
 * Procedure Name: CSA_lock
 * Description   : lock file
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 ****************************************************

void CS_signal (int  signal_code);
*/

/****************************************************
 * Procedure Name: CSA_open
 * Description   : open file
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 ****************************************************/

ESA_RC CSA_open (char            * file_name,
                 char            * func_name,
                 char const      * open_code,
                 FILE           ** open_handle,
                 LOCK_SCOPE_typ    lock_scope);

/****************************************************
 * Procedure Name: CSA_close
 * Description   : close file
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 ****************************************************/

ESA_RC CSA_close (char      * file_name,
                  char      * func_name);

/****************************************************
 * Procedure Name: CSA_close_all
 * Description   : Close all opened files
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 ****************************************************/

void  CSA_close_all (void);

/****************************************************
 * Procedure Name: CG_name
 * Description   : Get full name of main
 * Input         :
 * Return Value  :
 * Comments      :
 ****************************************************/

const char * CG_name (ESA_MAIN_NAME_typ p_main_name);

/****************************************************
 * Procedure Name: CG_main_name
 * Description   : Get brief name of main
 * Input         :
 * Return Value  :
 * Comments      :
 ****************************************************/

const char * CG_main_name (ESA_MAIN_NAME_typ p_main_name);

/*****************************************************************
* Procedure Name: CSupper
* Description   : Convert string to Uppercase string
* Input         : in_str,
* Output        : out_str
* Return Value  : ESA_RC
* Side Effects  :
* Scope         :
*****************************************************************/

void CSupper (char * in_str,
              char * out_str);

/****************************************************
 * Procedure Name: LogEvent
 * Description   : Prepare data and call to RSLogAlert
 * Input         : msgid
 *               : Logevt_str
 * Input/Output  :
 * Return Value  : ESA_RC
 ***************************************************/

ESA_RC LogEvent (const char             * msgid,
                 LOGENT_typ               logevt_str);

/*****************************************************************
* Procedure Name: My_stricmp
* Description   : Insencitive MString Compare
* Input         : str1,
*               : str2
* Return Value  : ESA_RC
* Side Effects  :
* Scope         :
*****************************************************************/

ESA_RC My_stricmp (char * str1,
                   char * str2);

/*****************************************************************
* Procedure Name: My_memicmp
* Description   : Insencitive Memory Compare
* Input         : str1,
*               : str2,
*                 length
* Return Value  : ESA_RC
* Side Effects  :
* Scope         :
*****************************************************************/

ESA_RC My_memicmp (char         * str1,
                   char         * str2,
                   unsigned int   length);

/****************************************************
 * Procedure Name: CS_get_envir_address
 * Description   : Get envir address
 ****************************************************/

void CS_get_envir_address (ENVIRONMENT_rec_typ ** envir_ptr);

/****************************************************
 * Procedure Name: CSA_fgets
 * Description   : Read table row
 * Input         : tbl_name
 *                 tbl_row_len
 *                 tbl_handle
 * Output        : tbl_row
 * Return Value  : rc   ESA_EOF if end of file
 *                      ESA_OK  if readed row
 *                      ESA_ERR other case
 * Comments      :
 * Scope         :
 ****************************************************/

ESA_RC CSA_fgets (char         * tbl_name,
                  char         * tbl_row,
                  int            tbl_row_max_len,
                  FILE         * tbl_handle);

/****************************************************
 * Procedure Name: CSA_fgets
 * Description   : Read table row
 * Input         : tbl_name
 *                 tbl_row_len
 *                 tbl_handle
 * Output        : tbl_row
 * Return Value  : rc   ESA_EOF if end of file
 *                      ESA_OK  if readed row
 *                      ESA_ERR other case
 * Comments      :
 * Scope         :
 ****************************************************/

ESA_RC CSA_fgets (char         * tbl_name,
                  char         * tbl_row,
                  int            tbl_row_max_len,
                  FILE         * tbl_handle);

/****************************************************
 * Procedure Name: CSA_fputs
 * Description   : Write table row
 * Input         : tbl_name
 *                 tbl_handle
 * Return Value  : rc   ESA_OK  if readed row
 *                      ESA_ERR other case
 * Comments      :
 * Scope         :
 ****************************************************/

ESA_RC CSA_fputs (char         * tbl_name,
                  char         * tbl_row,
                  FILE         * tbl_handle);


/****************************************************
 * Procedure Name: CG_prolog2
 * Description   : New main prolog
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 ****************************************************/
ESA_RC CG_prolog2 (char               * ProgName,
                   char               * ProgMain,
                   int                  argc_prm,
                   char              ** argv_prm);

char * CTSAgentVersion (void);


void CS_DIAG_ADMINPRM (unsigned int comp,
					   unsigned int level,
					   unsigned int run);

void CS_DIAG_MSG (unsigned int    comp,
				  ESA_RC          rc,
			      char          * buf,
			      unsigned int    MsgSize,
				  int             header);

void CS_DAIG_RssAdmin (long int                all_num_adms,
                       ADMINISTRATOR_rec_typ * all_adms_ptr);

void CS_DIAG_SCRIPT_IN (unsigned int        comp,
				        SCRIPT_NAME_typ     script_dir,
                        SCRIPT_ACTION_typ   action,
                        RSSAPIPRM_rec_typ * apiprm,
                        ADDINFO_rec_typ   * set_addinfo,
                        ADDINFO_rec_typ   * cur_info);

void CS_DIAG_RESACL_IN  (unsigned int        comp,
				      int                    mode,
                      OE_typ                 oe,
                      short                  max_num,
                      RES_PARAMS_rec_typ   * res_prm_in,
                      ACE_rec_typ          * ace_prm,
                      ADDINFO_rec_typ      * addinfo_in,
                      void                 * handle,
                      ADDINFO_rec_typ     ** addinfo);

void CS_DIAG_RESACL_OUT  (unsigned int        comp,
				       OE_typ                 oe,
                       short                  actual_num,
                       HAVE_MORE_typ          have_more,
                       RES_PARAMS_rec_typ   * res_prm_out,
                       ACE_rec_typ          * ace_prm,
                       OBJ_EXISTS_typ       * objs_exist,
                       void                 * handle,
                       ADDINFO_rec_typ     ** addinfo);

void CS_DIAG_RESACL  (unsigned int        comp,
				   short                  num_res,
                   ADDINFO_rec_typ      * addinfo_in,
				   RES_PARAMS_rec_typ   * res_prm_in,
                   ACE_rec_typ          * ace_prm,
                   ADDINFO_rec_typ     ** addinfo,
                   OBJ_EXISTS_typ       * objs_exist,
				   int                    AddInfoFull,
                   ACE_rec_typ          * old_ace_prm,
				   unsigned int           level,
				   ACE_POS_typ            ace_place);

void CS_DIAG_UG2UC_IN (unsigned int           comp,
				       GET_CONN_MODE          mode ,
                       short                  max_num,
                       short                  in_num_ug,
                       short                  in_num_user,
                       UG_typ               * ug_in,
                       USER_typ             * user_in,
                       void                 * handle,
                       ADDINFO_rec_typ     ** addinfo);

void CS_DIAG_UG2UC_OUT (unsigned int          comp,
				       short                  actual_num,
                       HAVE_MORE_typ          have_more,
                       U2UG_PARAMS_rec_typ  * u2ug_params,
                       OBJ_EXISTS_typ       * objs_exist,
                       void                 * handle,
                       ADDINFO_rec_typ     ** addinfo);

void CS_DIAG_UG2UC (unsigned int           comp,
				    GET_CONN_MODE          mode ,
					short                  NumConn,
				    UG_typ               * ug_in,
				    USER_typ             * user_in,
                    U2UG_PARAMS_rec_typ  * u2ug_params,
                    ADDINFO_rec_typ     ** addinfo,
                    OBJ_EXISTS_typ       * objs_exist,
                    unsigned int           level,
				    int                    AddInfoFull);

void CS_DIAG_OE_IN   (unsigned int           comp,
				      GET_OE_MODE            mode,
                      OE_typ                 oe,
                      short                  max_oes,
                      short                  num_oes_in,
                      OE_PARAMS_rec_typ    * oe_params_in,
                      void                 * handle,
                      ADDINFO_rec_typ     ** addinfo);

void CS_DIAG_OE_OUT   (unsigned int           comp,
				       OE_typ                 oe,
                       short                  actual_num,
                       HAVE_MORE_typ          have_more,
                       OE_PARAMS_rec_typ    * oe_params,
                       OBJ_EXISTS_typ       * objs_exist,
                       void                 * handle,
                       ADDINFO_rec_typ     ** addinfo);

void CS_DIAG_OE   (unsigned int           comp,
				   short                  num_oes_in,
				   OE_PARAMS_rec_typ    * oe_params_in,
                   ADDINFO_rec_typ     ** addinfo,
                   OBJ_EXISTS_typ       * objs_exist,
				   unsigned int           level,
				   int                    AddInfoFull);

void CS_DIAG_UG_IN   (unsigned int           comp,
				      GET_GROUP_MODE         mode,
                      OE_typ                 oe,
                      short                  max_ugs,
                      short                  num_ugs_in,
                      UG_PARAMS_rec_typ    * ug_params_in,
                      void                 * handle,
                      ADDINFO_rec_typ     ** addinfo);

void CS_DIAG_UG_OUT   (unsigned int           comp,
				       OE_typ                 oe,
                       short                  actual_num,
                       HAVE_MORE_typ          have_more,
                       UG_PARAMS_rec_typ    * ug_params,
                       OBJ_EXISTS_typ       * objs_exist,
                       void                 * handle,
                       ADDINFO_rec_typ     ** addinfo);

void CS_DIAG_UG   (unsigned int           comp,
				   short                  num_ugs_in,
				   UG_PARAMS_rec_typ    * ug_params_in,
                   ADDINFO_rec_typ     ** addinfo,
                   OBJ_EXISTS_typ       * objs_exist,
				   unsigned int           level,
				   int                    AddInfoFull);

void CS_DIAG_USER_IN (unsigned int           comp,
				      GET_USER_MODE          mode,
                      OE_typ                 oe,
                      short                  max_users,
                      short                  num_users_in,
                      USER_PARAMS_rec_typ  * user_params_in,
                      void                 * handle,
                      ADDINFO_rec_typ     ** addinfo);

void CS_DIAG_USER_OUT (unsigned int           comp,
				       OE_typ                 oe,
                       short                  actual_num,
                       HAVE_MORE_typ          have_more,
                       USER_PARAMS_rec_typ  * user_params,
                       OBJ_EXISTS_typ       * objs_exist,
                       void                 * handle,
                       ADDINFO_rec_typ     ** addinfo);

void CS_DIAG_USER (unsigned int           comp,
				   short                  num_users_in,
				   USER_PARAMS_rec_typ  * user_params_in,
                   ADDINFO_rec_typ     ** addinfo,
                   OBJ_EXISTS_typ       * objs_exist,
				   unsigned int           level,
                   int                    AddInfoFull);

void CS_DIAG_ADDINFO (unsigned int      comp,
				      ADDINFO_rec_typ * AddInfo,
                      unsigned int      level,
					  int               AddInfoFull);


#endif /* MAIN_H_included */
