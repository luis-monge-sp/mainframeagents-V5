/**********************************************************************
*
*	H Source:		esaapi.h
*	Description:	ESA-API interface
*	%date_created:	Fri May 09 18:17:41 2003 %
*   %full_filespec: esaapi.h#19:incl:1 %
*	%created_by:	leonid_s %
*
**********************************************************************/
/*******************************************************************
* Mod.ID  Who      When         Description
* =============================================
* SAS2IBMN NuritY  05/02/2017   Change MSG_print_ptr to point
*                               directly to CTSAMGG_print_direct.
*                               This change is required because we
*                               have no way to pass the va_list
*                               arguments as parameters from
*                               CTSAMSG_print in CTSCSRV to
*                               MSG_printf.
* CIQ#6    SeligT  15/03/2017   Account Aggregation now includes
*                               Connections. To do this, we added
*                               a new parameter to CTSGetUsers to
*                               indicate whether new (will pass
*                               back groups) or old (will not pass
*                               back groups).
* IS10147A SeligT  29/05/2017   Add support for password phrase
* addinfol AvnerL  25/06/2017   500+ groups cause CTS3210E msgs.
* BS10061  SeligT  24/08/2017   Resolving full aggregation
*                               performance problem
* WS10064  MeirS   04/10/2017   Support PassPhrase.
* IS10174  NuritY  25/12/2017   Admins list support (for dynamic
*                               EXECOUT)
* WS10073  SeligT  08/07/2018   Update Logon Statistics When
*                               Verifying MS Administrator
* WS10074  NuritY  07/10/2018   Login to userid for change pwd
* BS10100  NuritY  10/04/2019   Handle security violation.
* BS10100  KailasP 15/04/2019   Read Application Admin credentials
* IS10182  NuritY  17/07/19     S0C4/S0C1 due 2 DIAG vsprintf
* BS10102  KailasP 31/07/19     Add short name for init_allowed_admins
*WS10078KG KailasP 23/04/20     Add new type ROLE and SOURCE
* BS10111  NuritY  26/11/20     Support RUOB above the bar.
* IS10184  NuritY  02/09/21     Improve scripts performance
* WS10082  MauriC  05/12/22     updates for ADDINFO changes
* WS10082K Kailas  05/12/22     Set ADDINFO macros and ADDINFO_SHORT
*                               and ADDINFO_LONG values.
* WS10082M MauriC  21/02/22     updates for ADDINFO changes
* WS10082N NuritY  06/12/23     Use a private heap for the addinfo
********************************************************************/

#ifndef ESAAPI_H_INCLUDED
#define ESAAPI_H_INCLUDED

#include "esaglobs.h"

#include ESA_DIAG
#include ESA_CTSAMSG

/* WS10082K - Start: Add macro definitions */
#define ppair(pr)        \
        (pr)->SLType EQ 'L' ? (((pr)->twin)+1)->twin : ((pr)+1)->twin

#define  ppairi(pr, i, ...)              \
   (pr)->SLType EQ 'L' ?  (((pr)->twin)+i)->twin## __VA_ARGS__ : \
                           ((pr)+i)->twin## __VA_ARGS__

#define  get_pair(pr, ...)   /* get real pair */          \
    ((pr)->SLType EQ 'S') ? (pr)->twin## __VA_ARGS__ :    \
                             (pr)## __VA_ARGS__

#define get_pairi(pr, ...)     /*get real pair*/ \
        get_pair(&(pr), ## __VA_ARGS__)

#define  get_orig_pair(pr, ...)       \
         ((pr)->SLType EQ 'L') ? (pr)->twin## __VA_ARGS__ :  \
         (pr)## __VA_ARGS__

#define  get_orig_pairi(pr, ...)    /* get orig pair */ \
         get_orig_pair(&(pr), ## __VA_ARGS__)

#define ADDINFO_empty(_ai)         \
  if (_ai NE NULL) {               \
     ADDINFO_clear(_ai);           \
     _ai->num_pairs = 0;           \
  }
/* WS10082K - End */
/****************************************************
 * Define short function names for MVS compiler
 ***************************************************/

/* for MVS only */

#define rsslist_get          rsslist
#define rssprm_get           rsspget
#define rsskwd_typ           rssktyp
#define rssprm_get_opt       rsspgop
#define MSG_printf           msgprnt
#define DIAG_printf          diagprt
#define DIAG_enter           diagent
#define DIAG_exit            diagext
#define LOG_event            logevnt
#define DIAG_get_debug_level diadbgl
#define DIAG_refresh         diafrsh
#define RssTblGet            rsstblg
#define RssTblSet            rsstbls
#define CTSApiProcTerm       Apiptrm
#define CTSApiProcInit       Apipini
#define Init_Allowed_Admins  Alwdadm                      /* BS10102 */

 /* MVS */

/********************************************/
/*  Typedefs for RSS status check           */
/********************************************/

typedef enum {
    RSS_UP,
    RSS_DOWN
} RSS_STATUS_typ;

/********************************************/
/*  Define time and date formats            */
/********************************************/

#define DATE_LEN             8
#define TIME_LEN             6

typedef char TIME_typ [ TIME_LEN + 1 ];  /* HHMMSS   */
typedef char DATE_typ [ DATE_LEN + 1 ];  /* YYYYMMDD */

/********************************************/
/*  Length values for entity names          */
/********************************************/

#define RSS_NAME_LEN         32
#define LOGENT_LEN         2560
#define RSS_VERS_LEN         12

/********************************************/
/* ESAAPI Limits                 		    */
/********************************************/

#define MAX_RSS_OE_NAME_LEN			256
#define MAX_RSS_ACE_OE_NAME_LEN		256
#define MAX_RSS_USER_NAME_LEN		256
#define MAX_RSS_ACE_USER_NAME_LEN	MAX_RSS_USER_NAME_LEN + HOST_NAME_LENGTH + 3
#define MAX_RSS_UG_NAME_LEN			256
#define MAX_RSS_ACE_UG_NAME_LEN		256 + HOST_NAME_LENGTH + 3
#define MAX_RSS_RESOURCE_NAME_LEN	256 + 4
#define MAX_RSS_RESTYPE_NAME_LEN	20
#define MAX_RSS_PASSWD_LEN			256
/* IS10147A start */
#define MIN_RSS_PSWDPHRS_LEN      9
#define MAX_RSS_PSWDPHRS_LEN    100
/* IS10147A end */

#define MAX_RSS_ADDINFO_KWD_LEN		64


/* #define MAX_RSS_ADDINFO_VAL_LEN   4096   * Aviw - 6/5/01 */
/*#define MAX_RSS_ADDINFO_VAL_LEN   16384   /* addinfol 25/06/2017 */
/*WS10082K - Start */
#define MAX_API_ST              4096
#define MAX_RSS_ADDINFO_VAL_LEN 1024 /*regular length is 1K*/
#define ADDINFO_LARGE_VAL_LEN   512000  /*Large val is 500K*/
#define ADDINFO_SHORT_VAL_LEN   MAX_RSS_ADDINFO_VAL_LEN
#define ADDINFO_16K_VAL_LEN   16384   /*16K Addinfo vallen*/
#define ADDINFO_LARGE_PAIR_SIZE                            \
    sizeof (ONE_FIELD_rec_typ) +                           \
        (ADDINFO_LARGE_VAL_LEN  - ADDINFO_SHORT_VAL_LEN)   \
/*WS10082K - End */

/* WS10082N - start */
#define  ADDINFO_HEAP_INIT_SIZE   64
#define  ADDINFO_HEAP_INCR_SIZE   64
#define  ADDINFO_HEAP_OPT         72    /* HEAP(,,ANYWHERE,FREE) */
/* WS10082N - end   */

/********************************************/
/*  typedefs for entity names               */
/********************************************/

typedef char OE_typ           [ MAX_RSS_OE_NAME_LEN + 1       ];
typedef char ACE_OE_typ       [ MAX_RSS_ACE_OE_NAME_LEN + 1   ];
typedef char RSS_typ          [ RSS_NAME_LEN + 1              ];
typedef char USER_typ         [ MAX_RSS_USER_NAME_LEN + 1     ];
typedef char ACE_USER_typ     [ MAX_RSS_ACE_USER_NAME_LEN + 1 ];
typedef char UG_typ           [ MAX_RSS_UG_NAME_LEN + 1       ];
typedef char ACE_UG_typ       [ MAX_RSS_ACE_UG_NAME_LEN + 1   ];
typedef char RESOURCE_typ     [ MAX_RSS_RESOURCE_NAME_LEN + 1 ];
typedef char RESTYPE_typ      [ MAX_RSS_RESTYPE_NAME_LEN + 1  ];
typedef char LOGENT_typ       [ LOGENT_LEN + 1                ];
typedef char RSS_vers_typ     [ RSS_VERS_LEN + 1              ];
typedef char PASSWD_typ       [ MAX_RSS_PASSWD_LEN + 1        ];

/********************************************/
/*  Typedefs for OE objects                 */
/********************************************/

typedef enum {
    TYPE_IGNORE = 1,
    TYPE_USER,
    TYPE_GROUP,
    TYPE_CONTAINER,
    TYPE_CONNECTION,
    TYPE_RESOURCE,
    TYPE_ACL,
    TYPE_RSS,
    TYPE_END
} OBJECT_TYPE_typ;

typedef enum {
    MASK_REGULAR = 0,
    MASK_WILD
} MASK_TYPE_typ;

typedef enum {
    OE_ATTR_IGNORED,
    OE_ATTR_ACL,         /* OE allowed in ACL */
    OE_ATTR_NO_ACL       /* OE not allowed in ACL */
} OE_ATTR_typ;

typedef struct S_OE_PARAMS {
    OE_typ      oe;
    OE_typ      parent;
    OE_ATTR_typ attr;
} OE_PARAMS_rec_typ, * OE_PARAMS_rec_ptr;

/********************************************/
/*  Typedefs for RSS_PARAMS data            */
/********************************************/

typedef short MPL_typ;   /* Minimum Password Length              */
typedef short MPE_typ;   /* Maximum days for Password Expiration */
typedef short MLA_typ;   /* Maximum # of bad Login Allowed       */

typedef struct S_RSS_PARAMS_rec_typ {
    MPL_typ   min_pass_len;
    MPE_typ   max_expire;
    MLA_typ   max_logins;
} RSS_PARAMS_rec_typ, * RSS_PARAMS_rec_ptr;

/********************************************/
/*  Typedefs for Additional Info data       */
/********************************************/

typedef enum {TYPE_AI_IGNORED= 0,
              TYPE_1A,
              TYPE_1B,
              TYPE_2A,
              TYPE_2B
} ADDINFO_typ;


/********************************************/
/*  Typedefs for addinfo pair structure     */
/*                                          */
/* Pair is an entry in addinfo containing   */
/* a keyword with its value.                */
/*                                          */
/* Using the ffu field:                     */
/* When there is a need to use the ffu      */
/* field, its definition should be reaplced */
/* with the required fields. If less than   */
/* 8 bytes are needed, add a new ffu field  */
/* for the remaining bytes.                 */
/*                                          */
/* For exmaple:                             */
/*    #pragma pack(packed)                  */
/*      struct  {                           */
/*         short num;                       */
/*         char  c;                         */
/*         char  ffu[5];                    */
/*       };                                 */
/*    #pragma pack(reset)                   */
/*                                          */
/* The #pragma pack statements tells the C  */
/* compiler not to align fields. With this  */
/* any changes in the fields inside the     */
/* structure do not effect the offset of    */
/* structure inside the pair, the offset    */
/* of the fields following the pair, and    */
/* there is no 'loss' of bytes inside       */
/* the structure because of alignment.      */
/*                                          */
/********************************************/
typedef struct S_ONE_FIELD_rec_typ {
   short       index;        /* WS10082 */
   struct S_ONE_FIELD_rec_typ *twin; /*WS10082 */
   ADDINFO_typ add_typ;     /* WS10082 */
   char        SLType;      /* WS10082 */
   char        secret;      /* WS10082 */
   char        addval_msg;  /* WS10082N */
 #pragma pack(packed)                                    /* WS10082N */
   struct  {         /* 8-bytes structure for future use    WS10082N */
      char  ffu[8];  /* see instructons above  */        /* WS10082K */
    };                                                   /* WS10082N */
 #pragma pack(reset)                                     /* WS10082N */
   short       keylen;                      /* field len w/o null*/
   char        keyword [MAX_RSS_ADDINFO_KWD_LEN+1];/* Null-term.str.*/
/* WS10082 short       vallen;        /@ field len w/o null@@/  */
   int         vallen;        /* field len w/o null*//*WS10082K*/
   char       value   [MAX_RSS_ADDINFO_VAL_LEN+1];/*Null-term.str*/
} ONE_FIELD_rec_typ, * ONE_FIELD_rec_ptr;

/********************************************/
/*  Typedefs for addinfo structue           */
/*                                          */
/* Using the ffu field:                     */
/* Follow the guidelines specified for      */
/* S_ONE_FIELD_rec_typ above.               */
/*                                          */
/********************************************/
typedef  struct  S_ADDINFO {
   short              num_pairs;
   short              max_pairs;
   int                heap_id;     /* private heap_id */ /* WS10082N */
 #pragma pack(packed)                                    /* WS10082N */
   struct  {         /* 8-bytes structure for future use    WS10082N */
      char  ffu[8];  /* see instructons above  */        /* WS10082K */
    };                                                   /* WS10082N */
 #pragma pack(reset)                                     /* WS10082N */
   ONE_FIELD_rec_typ  pair [1];   /* actually pair [num_pairs] */
} ADDINFO_rec_typ, * ADDINFO_rec_ptr;

/********************************************/
/*  Typedef for common error structure      */
/********************************************/

typedef  struct S_ERR_STRUCT {
  short    length;
  char     err_msg_text [ERR_MSG_TEXT_LEN]; /* LEN in platform.h */
} ERR_STRUCT_rec_typ, * ERR_STRUCT_rec_ptr;

/********************************************/
/*  Typedefs for RSS-related data           */
/********************************************/

typedef enum {ADMIN_MODE_IGNORED,
              ADMIN_MODE_NORMAL,
              ADMIN_MODE_SIMULATION
} ADMIN_MODE_typ;

/********************************************/
/*  Typedefs for INTERCEPTION data          */
/********************************************/

typedef enum {
    INTERCEPT_NONE,      /* Not interception required            */
    INTERCEPT_SPECIFIC,  /* Intercept specific object            */
    INTERCEPT_FULL,      /* Intercept object and its connections */
    INTERCEPT_SUBTREE    /* Intercept subtree of container       */
} INTERCEPT_typ;

typedef enum {
    INTERCEPT_CONTAINER,    /* Valid only for SPECIFIC & SUBTREE type*/
    INTERCEPT_USER,         /* Valid for any type but SUBTREE        */
    INTERCEPT_GROUP,        /* Valid for any type but SUBTREE        */
    INTERCEPT_CONNECTION ,  /* Valid for SPECIFIC type               */
    INTERCEPT_RSSPRM,       /* Valid for NONE type                   */
    INTERCEPT_ALL           /* Valid for NONE and SUBTREE type       */
} INTERCEPT_obj_typ;

typedef struct S_INTERCEPT_rec_typ {
    INTERCEPT_typ          type;
    INTERCEPT_obj_typ      obj_type;
    OE_typ                 oe;
    USER_typ               user;
    UG_typ                 ug;
} INTERCEPT_rec_typ, * INTERCEPT_rec_ptr;

typedef enum {
    UPDCONN_NO,
    UPDCONN_YES
} TRNSEVNT_UPCON_FLAG_typ;

typedef enum {
    OPT_FALSE,
    OPT_TRUE,
    OPT_UNDEFINED
} OPTION_typ;

typedef struct S_RSS_rec_typ {
    RSS_typ                rss_name;
    RSS_typ                rss_type;
    RSS_STATUS_typ         rss_status;
} RSS_rec_typ, * RSS_rec_ptr;

/*    WS10082 start - definitions copied from CTSCADI  */

/* Keyword types for KDT */
typedef enum {
 KDT_KEY, KDT_FLG, KDT_IGN ,
 KDT_KEYG,  /* spr125 */
 KDT_KEYM   /* PS0349 */
 } ADDINFO_KWD_typ;

/*
 *  MKTE - Mandatory Keywords Table Entry definition
 */
typedef struct { /* this is the correct def from CTSCADI --- WS10082*/
   char kwd[MAX_RSS_ADDINFO_KWD_LEN+1];
 } ADDINFO_MKTE_rec_typ, *ADDINFO_MKTE_rec_ptr;

/*
 *  RKTE - Forbiddeb Keywords Table Entry definition
 */
typedef struct {
   char kwd[MAX_RSS_ADDINFO_KWD_LEN+1];
} ADDINFO_RKTE_rec_typ, *ADDINFO_RKTE_rec_ptr;

/*
 *  KDTE - Keyword Description Entry definition
 */
typedef struct {
   char                  kwd[MAX_RSS_ADDINFO_KWD_LEN+1];
   ADDINFO_KWD_typ       type;
   char                  neg_kwd[MAX_RSS_ADDINFO_KWD_LEN+1];
   char                  *txtl;
   char                  *txtr;
 } ADDINFO_KDTE_rec_typ, *ADDINFO_KDTE_rec_ptr;

/*
 *  PKB  - Primary Keyword Buffer definition
 */
typedef struct {
    int     no_pkb;
    char    name [MAX_RSS_ADDINFO_KWD_LEN+1];
    char  * buff;
    short   size;
} ADDINFO_PKB_rec_typ, *ADDINFO_PKB_rec_ptr;

typedef enum {
 ADDINFO_masupd_Merge,
 ADDINFO_masupd_NoMerge
} ADDINFO_masupd_mode;

typedef enum {
    UNIQUE, MULTIPLE
} ADDINFO_DUPLICATE;
                      /*   WS10082 - end of copied definitions */


/****************************************************
 * Procedure Name: rsstbl_get
 * Description   : Get data from RSSOFLI for specific rss
 * Return Value  : ESA_OK             upon success
 *                 ESA_KEY_NOT_FOUND  on any other situation
 ****************************************************/

typedef ESA_RC RSSTBL_GET_DATA_FUNC_TYP (DATE_typ        TblDate,
                                         TIME_typ        TblTime,
                                         unsigned long * RecNum);

extern  RSSTBL_GET_DATA_FUNC_TYP   RssTblGet;

typedef RSSTBL_GET_DATA_FUNC_TYP * RSSTBL_GET_DATA_FUNC_PTR;


/****************************************************
 * Procedure Name: rsstbl_set
 * Description   : Set data from RSSOFLI for specific rss
 * Return Value  : ESA_OK             upon success
 *                 ESA_KEY_NOT_FOUND  on any other situation
 ****************************************************/

typedef ESA_RC RSSTBL_SET_DATA_FUNC_TYP (DATE_typ        TblDate,
                                         TIME_typ        TblTime,
                                         unsigned long   RecNum);

extern  RSSTBL_SET_DATA_FUNC_TYP   RssTblSet;

typedef RSSTBL_SET_DATA_FUNC_TYP * RSSTBL_SET_DATA_FUNC_PTR;


/****************************************************
 * Procedure Name: DIAG_refresh
 * Description   : Read levels from file, set debug level for
 *                 all components
 * Return Value  : ESA_RC
 * Side Effects  : Static array is modified
 * Scope         : Global
 * Re-entrant    : No
 ****************************************************/

typedef ESA_RC DIAG_REFRESH_FUNC_TYP (void);

extern  DIAG_REFRESH_FUNC_TYP DIAG_refresh;

typedef DIAG_REFRESH_FUNC_TYP * DIAG_REFRESH_FUNC_PTR;

/**************************************************************
* Procedure Name   : MSG_print                                *
* Description      : Issue a message to the requested         *
*                    destinations when only msgid is          *
*                    available.                               *
* Input            : 1) msgid   - msgid to be printed         *
*                    2) ...     - arguments for message       *
* Return Value     : ESA_RC                                   *
* Comments         : The function process the arg list and    *
*                    calls CTSAMSG_print                      *
**************************************************************/

/* SAS2IBMN - start */
/*
typedef ESA_RC MSG_PRINT_FUNC_TYP (const char * msgid , ... );

extern  MSG_PRINT_FUNC_TYP MSG_printf;

typedef MSG_PRINT_FUNC_TYP * MSG_PRINT_FUNC_PTR ;
*/
extern  MSG_printf (const char * msgid , ... );

typedef CTSAMSG_PRINT_DIRECT_FUNC_TYPE *  MSG_PRINT_FUNC_PTR ;
/* SAS2IBMN - end   */


/****************************************************
 * Procedure Name: DIAG_printf
 * Description   : printf-like diagnostics
 * Input         : Component, level, format, arguments
 * Output        :
 * Return Value  :
 * Side Effects  : VARARGS is used
 * Scope         : Global
 * Re-entrant    : No
 ****************************************************/

typedef void DIAG_PRINTF_FUNC_TYP (ESA_DIAG_COMP_typ    comp,
                                   ESA_DIAG_LEVEL_typ   level,
                    /* IS10182     const char         * format, ... );*/
                    /* IS10182 */  const char         * format,
                    /* IS10182 */  va_list              arg_list);

extern  DIAG_PRINTF_FUNC_TYP DIAG_printf;

typedef DIAG_PRINTF_FUNC_TYP * DIAG_PRINTF_FUNC_PTR;

/****************************************************
 * Procedure Name: DIAG_get_debug_level
 * Description   : return diag level of a component
 * Input         : Component
 * Output        : None
 * Return Value  : Level
 * Re-entrant    : No
 ****************************************************/

typedef ESA_DIAG_LEVEL_typ DIAG_GET_DEBUG_LEVEL_FUNC_TYP (
                                          ESA_DIAG_COMP_typ  comp);

extern DIAG_GET_DEBUG_LEVEL_FUNC_TYP DIAG_get_debug_level;

typedef DIAG_GET_DEBUG_LEVEL_FUNC_TYP * DIAG_GET_DEBUG_LEVEL_FUNC_PTR;

/****************************************************
 * Procedure Name: DIAG_enter
 * Description   : Push calling func name on stack, print message
 * Input         : component, level, func name
 * Output        :
 * Return Value  :
 * Side Effects  :
 * Scope         : Global
 * Re-entrant    : No
 ****************************************************/

typedef void DIAG_ENTER_FUNC_TYP (ESA_DIAG_COMP_typ    comp,
                                  ESA_DIAG_LEVEL_typ   level,
                                  const char         * funcname);

extern  DIAG_ENTER_FUNC_TYP DIAG_enter;           /* act function */

typedef DIAG_ENTER_FUNC_TYP * DIAG_ENTER_FUNC_PTR;/* pntr to func */

/****************************************************
 * Procedure Name: DIAG_exit
 * Description   : Pop function stack, print message
 * Input         : Component, level, function name, RC
 * Output        :
 * Return Value  :
 * Side Effects  :
 * Scope         : Global
 * Re-entrant    : No
 ****************************************************/

typedef void DIAG_EXIT_FUNC_TYP (ESA_DIAG_COMP_typ   comp,
                                 ESA_DIAG_LEVEL_typ  level,
                                 const char        * funcname,
                                 ESA_RC              rc_ret);

extern  DIAG_EXIT_FUNC_TYP DIAG_exit;            /* act function */

typedef DIAG_EXIT_FUNC_TYP * DIAG_EXIT_FUNC_PTR; /* pntr to func */

/****************************************************
 * Procedure Name: rsslist_get
 * Description   : Get list of rsses from CONTROL-SA global parameter
 *                 file for a specific RSS.
 * Output        : rss_num
 *                 rss_rec
 * Return Value  : ESA_OK             upon success
 *                 ESA_KEY_NOT_FOUND  on any other situation
 ****************************************************/

typedef ESA_RC RSSLIST_GET_FUNC_TYP (unsigned int  * rss_num,
                                     RSS_rec_typ  ** rss_rec);

extern  RSSLIST_GET_FUNC_TYP    rsslist_get;    /* actual function */

typedef RSSLIST_GET_FUNC_TYP * RSSLIST_GET_FUNC_PTR;/*pointer to func*/

/****************************************************
 * Procedure Name: rssprm_get
 * Description   : Get a parameter from CONTROL-SA global parameter
 *                 file for a specific RSS.
 * Input         : RSS name
 *                 parameter name
 *                 maximum value length
 * Output        : parameter value
 * Return Value  : ESA_OK             upon success
 *                 ESA_KEY_NOT_FOUND  on any other situation
 ****************************************************/

typedef ESA_RC RSSPRM_GET_FUNC_TYP (RSS_typ const   rss,
                                    char const    * param_name,
                                    unsigned int    max_value_len,
                                    char          * param_value);

extern  RSSPRM_GET_FUNC_TYP    rssprm_get;         /* actual function */

typedef RSSPRM_GET_FUNC_TYP * RSSPRM_GET_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: rssprm_get_opt
 * Description   : Get a parameter from CONTROL-SA global parameter
 *                 file for a specific RSS.
 * Input         : RSS name
 *                 parameter name
 *                 maximum value length
 *                 optional_prm    TRUE  - The parameter is optional
 *                                 FALSE - The parameter must exist
 *                 optional_value  TRUE  - The parameter value may
 *                                         empty.
 *                                 FALSE - The parameter value may
 *                                         not be empty
 * Output        : parameter value
 * Return Value  : ESA_OK             upon success
 *                 ESA_KEY_NOT_FOUND  on any other situation
 ****************************************************/

typedef ESA_RC RSSPRM_GET_OPT_FUNC_TYP (RSS_typ const  rss,
                                        char const   * param_name,
                                        unsigned int   max_value_len,
                                        char         * param_value,
                                        OPTION_typ     optional_prm,
                                        OPTION_typ     optional_value);

extern  RSSPRM_GET_OPT_FUNC_TYP    rssprm_get_opt; /* actual function */

typedef RSSPRM_GET_OPT_FUNC_TYP * RSSPRM_GET_OPT_FUNC_PTR;/*ptr to fnc*/

/****************************************************
 * Procedure Name: rsskwd_typ
 * Description   : Get a keyword type from CONTROL-SA global keywords
 *                 file for a specific RSS.
 * Input         : RSS name
 *                 func_code
 *                 keyword
 * Output        : keyword type
 * Return Value  : ESA_OK             upon success
 ****************************************************/

typedef ESA_RC RSSKWD_TYP_FUNC_TYP (RSS_typ           rss,
                                    int               func_code,
                                    char            * keyword,
                                    ADDINFO_typ     * keyword_type);

extern  RSSKWD_TYP_FUNC_TYP  rsskwd_typ;   /* actual function */

typedef RSSKWD_TYP_FUNC_TYP * RSSKWD_TYP_FUNC_PTR;

/*****************************************************************
* Procedure Name: intercept_set
* Description   : Accept request for interception
* Input         : interc. type, obj_type, OE, user, ug
* Output        : intercept_record
* Input/Output  : num_intercept_rec
* Return Value  : ESA_RC
*****************************************************************/

typedef ESA_RC INTERCEPT_SET_FUNC_TYP (
        INTERCEPT_typ        type,
        INTERCEPT_obj_typ    obj_type,
        OE_typ               oe,
        USER_typ             user,
        UG_typ               ug);

extern  INTERCEPT_SET_FUNC_TYP intercept_set;   /* actual function */

typedef INTERCEPT_SET_FUNC_TYP * INTERCEPT_SET_FUNC_PTR;
                                                /* pointer to func */
/****************************************************
 * Procedure Name: CTSLogEvent
 * Description   : RSS log event has occured
 * Input         : rss_type - Mandatory information.
 *                 rss_name - RSS name when available.
 *                            NULL if not available
 *                 handle   - initialization information
 *                            (e.g. queue file handle)
 *                 msgid    - Message code from message code file.
 *                 ...      - Message parameters list.
 * Output        :
 * Input/Output  : CTSAMSG params
 * Return Value  : ESA_RC
 ***************************************************/

typedef ESA_RC RSLOGEVT_FUNC_TYP (RSS_typ                  rss_type,
                                  RSS_typ                  rss_name,
                                  void                   * handle,
                                  const char             * msgid,
                                  ...);

extern  RSLOGEVT_FUNC_TYP   CTSLogEvent;       /* actual function */

typedef RSLOGEVT_FUNC_TYP * RSLOGEVT_FUNC_PTR; /* pointer to func */


/****************************************************
 * Procedure Name: LOG_event
 * Description   : RSS log event has occured
 * Input           msgid    - Message code from message code file.
 *                 ...      - Message parameters list.
 * Output        :
 * Return Value  : ESA_RC
 ***************************************************/

typedef ESA_RC LOGEVT_FUNC_TYP (const char * msgid,
                                ...);

extern  LOGEVT_FUNC_TYP   LOG_event;       /* actual function */

typedef LOGEVT_FUNC_TYP * LOGEVT_FUNC_PTR; /* pointer to func */


/* ws10082 start create function ptrs for cc ADDINFO routines
   please note fuctions are listed in redefined name mvs name
   order adies01 thru adies41.                               */

/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_search    adies01                  *
*                                                             *
* DESCRIPTION    : Search a keyword in additional info        *
*                                                             *
* INPUT          : kwd              -  keyword                *
*                  pair             -  entry to start search  *
*                  limit            -  max entries to search  *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ONE_FIELD_rec_ptr (or NULL if not found)   *
*                                                             *
**************************************************************/

typedef ONE_FIELD_rec_ptr ADDINFO_search_FUNC_TYP (char * p_kwd,
                                      int max_kwdlen,
                                      ONE_FIELD_rec_ptr p_pair,
                                      short p_limit);

typedef ADDINFO_search_FUNC_TYP *ADDINFO_search_FUNC_PTR;


/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_insert  adies02                    *
*                                                             *
* DESCRIPTION    : Insert a keyword in additional info        *
*                                                             *
* INPUT          : type             -  addinfo type           *
*                  kwd              -  keyword                *
*                  value            -  value                  *
*                  addinfo          -  additional info        *
*                  dupflag          -  allow duplicate flag   *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ESA_RC                                     *
*                                                             *
**************************************************************/
typedef ESA_RC ADDINFO_insert_FUNC_TYP (ADDINFO_typ      type,
                           char              * kwd,
                           char              * val,
                           ADDINFO_rec_ptr     addinfo,
                           int                 max_kwdlen,
                           int                 max_vallen,
                           ADDINFO_DUPLICATE   dupflag);


typedef ADDINFO_insert_FUNC_TYP *ADDINFO_insert_FUNC_PTR;

/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_updval adies03                     *
*                                                             *
* DESCRIPTION    : Update a value of an exiting entry         *
*                                                             *
* INPUT          : value     - Value to be added              *
*                  pair      - Addinto entry                  *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ESA_RC                                     *
*                                                             *
**************************************************************/

typedef ESA_RC ADDINFO_updval_FUNC_TYP (char   * addval,
                           int                 max_vallen,
                           ONE_FIELD_rec_ptr   pair);


typedef ADDINFO_updval_FUNC_TYP *ADDINFO_updval_FUNC_PTR;

/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_dump adies04                       *
*                                                             *
* DESCRIPTION    : Dump Additional info area                  *
*                                                             *
* INPUT          : addinfo          -  additional info        *
*                  print_empty      -  1 print in any case    *
*                                   -  0 print only if value  *
*                                        length > 0           *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ESA_RC                                     *
*                                                             *
**************************************************************/

typedef ESA_RC ADDINFO_dump_FUNC_TYP (ADDINFO_rec_ptr p_addinfo,
                                 int               print_empty);


typedef ADDINFO_dump_FUNC_TYP *ADDINFO_dump_FUNC_PTR;


/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_alloc adies05                      *
*                                                             *
* DESCRIPTION    : Allocate addtional info area               *
*                                                             *
* INPUT          : max_pairs        -  max_pairs              *
*                : addinfo_ptr      -  additional info pointer*
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ESA_RC                                     *
*                                                             *
**************************************************************/

typedef ESA_RC ADDINFO_alloc_FUNC_TYP (char                  * func,
                          short                       max_pairs,
                          ADDINFO_rec_typ          ** addinfo_ptr,
                          CTSAMSG_DEST_TABLE_rec_ptr  dest,
                          CTSAMSG_HANDLE_rec_ptr      msgs);


typedef ADDINFO_alloc_FUNC_TYP *ADDINFO_alloc_FUNC_PTR;


/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_free adies06                       *
*                                                             *
* DESCRIPTION    : Free addtional info area                   *
*                                                             *
* INPUT          : addinfo_ptr      -  additional info pointer*
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ESA_RC                                     *
*                                                             *
**************************************************************/

typedef ESA_RC ADDINFO_free_FUNC_TYP (ADDINFO_rec_ptr * addinfo_ptr);


typedef ADDINFO_free_FUNC_TYP *ADDINFO_free_FUNC_PTR;


/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_clear_value adies07                *
*                                                             *
* DESCRIPTION    : Clear value of entering pair               *
*                                                             *
* INPUT          : pair      - Addinto entry                  *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ESA_RC                                     *
*                                                             *
**************************************************************/

typedef ESA_RC ADDINFO_clear_value_FUNC_TYP(
                                    ONE_FIELD_rec_ptr * pair);


typedef ADDINFO_clear_value_FUNC_TYP
                                *ADDINFO_clear_value_FUNC_PTR;


/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_clear adies08                      *
*                                                             *
* DESCRIPTION    : Clear Addtional info area                  *
*                                                             *
* INPUT          : Addinfo          -  additional info        *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ESA_RC                                     *
*                                                             *
**************************************************************/

typedef ESA_RC ADDINFO_clear_FUNC_TYP (ADDINFO_rec_ptr addinfo);


typedef ADDINFO_clear_FUNC_TYP *ADDINFO_clear_FUNC_PTR;


/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_addval adies09                     *
*                                                             *
* DESCRIPTION    : Conactenate a value to an exiting one      *
*                                                             *
* INPUT          : addval    - Value to be added              *
*                  addsep    - Sperator between value list    *
*                  pair      - Addinto entry                  *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ESA_RC                                     *
*                                                             *
**************************************************************/

typedef ESA_RC ADDINFO_addval_FUNC_TYP (char         * addval,
                           int                         max_vallen,
                           char                        addsep,
                           ONE_FIELD_rec_ptr           pair,
                           CTSAMSG_DEST_TABLE_rec_ptr  dest,
                           CTSAMSG_HANDLE_rec_ptr      msgs);


typedef ADDINFO_addval_FUNC_TYP *ADDINFO_addval_FUNC_PTR;


/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_delete adies10                     *
*                                                             *
* DESCRIPTION    : Delete from addtional info area            *
*                  and compress                               *
*                                                             *
* INPUT          : Addinfo          -  additional info        *
*                  keyword          -  keyword                *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ESA_RC                                     *
*                                                             *
**************************************************************/

typedef ESA_RC ADDINFO_delete_FUNC_TYP (ADDINFO_rec_ptr   addinfo,
                       char            * keyword);


typedef ADDINFO_delete_FUNC_TYP *ADDINFO_delete_FUNC_PTR;


 /**************************************************************
 *                                                             *
 * Procedure Name : ADDINFO_dup_check adies11                  *
 *                                                             *
 * Description    : Check duplicate keywords in ADDINFO        *
 *                                                             *
 * Input          : addinfo                                    *
 *                  keyword                                    *
 *                                                             *
 * Output         : ptr to found record                        *
 *                                                             *
 * Input/Output   :                                            *
 *                                                             *
 * Return Value   : ESA_RC, ESA_FATAL - Duplicate keywords     *
 *                                                             *
 * Side Effects   :                                            *
 *                                                             *
 * Comments       :                                            *
 *                                                             *
 **************************************************************/

typedef ESA_RC ADDINFO_dup_check_FUNC_TYP
                         (ADDINFO_rec_typ           * addinfo,
                          char                      * kwd,
                          int                         max_kwdlen,
                          int                  exists_when_empty,
                          ONE_FIELD_rec_ptr         * pair,
                          CTSAMSG_DEST_TABLE_rec_ptr  dest,
                          CTSAMSG_HANDLE_rec_ptr      msgs);



typedef ADDINFO_dup_check_FUNC_TYP *ADDINFO_dup_check_FUNC_PTR;

/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_prefix_search adies12              *
*                                                             *
* DESCRIPTION    : Search a keyword in additional info        *
*                                                             *
* INPUT          : kwd              -  keyword prefix         *
*                  pair             -  entry to start search  *
*                  limit            -  max entries to search  *
*                                                             *
* OUTPUT         : None                                       *
*                                                             *
* RETURN VALUE   : ONE_FIELD_rec_ptr (or NULL if not found)   *
*                                                             *
**************************************************************/

typedef ONE_FIELD_rec_ptr ADDINFO_prefix_search_FUNC_TYP
                                        (char             * kwd,
                                         int                max_kwdlen,
                                         int   exists_when_empty,
                                         ONE_FIELD_rec_ptr  p_pair,
                                         short              p_limit);


typedef ADDINFO_prefix_search_FUNC_TYP
                               *ADDINFO_prefix_search_FUNC_PTR;


/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_insert_cond adies13                *
*                                                             *
* DESCRIPTION    : Search a kwd1 with val1 in addinfo1        *
*                  and if it matches, add kwd2 with val2      *
*                  to addinfo2 .                              *
*                                                             *
* INPUT          : kwd1                                       *
*                  val1                                       *
*                  addinfo1                                   *
*                  kwd2                                       *
*                  val2                                       *
*                                                             *
* OUTPUT         : addinfo2                                   *
*                                                             *
* RETURN VALUE   : none                                       *
*                                                             *
**************************************************************/

typedef void ADDINFO_insert_cond_FUNC_TYP (char * kwd1,
                              char              * val1,
                              ADDINFO_rec_typ   * addinfo1,
                              char              * kwd2,
                              char              * val2,
                              int                 max_kwdlen,
                              int                 max_vallen,
                              ADDINFO_rec_typ   * addinfo2 );


typedef ADDINFO_insert_cond_FUNC_TYP
                             *ADDINFO_insert_cond_FUNC_PTR;

/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_copy adies14                       *
*                                                             *
* DESCRIPTION    : Copy additional info area                  *
*                                                             *
* INPUT          : to               -  additional info        *
*                  from             -  additional info        *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ESA_RC                                     *
*                                                             *
**************************************************************/

typedef ESA_RC ADDINFO_copy_FUNC_TYP (ADDINFO_rec_ptr to,
                         ADDINFO_rec_ptr from);


typedef ADDINFO_copy_FUNC_TYP *ADDINFO_copy_FUNC_PTR; /* pointer to func */

/* WS10082K - Removed the function   ***
 /**************************************************************
 *                                                             *
 * PROCEDURE NAME : ADDINFO_get_value adies15                  *
 *                                                             *
 * DESCRIPTION    : Get parameter from ADDINFO                 *
 *                                                             *
 * INPUT          : addinfo                                    *
 *                  parameter_name                             *
 *                                                             *
 * OUTPUT         : parameter_value                            *
 *                                                             *
 * RETURN VALUE   : ESA_RC                                     *
 *                                                             *
 *************************************************************@/

typedef ESA_RC ADDINFO_get_value_FUNC_TYP (ADDINFO_rec_typ * addinfo,
                              char               * parameter_name,
                              char               * parameter_val,
                              int                  max_kwdlen,
                              int                  max_vallen);


typedef ADDINFO_get_value_FUNC_TYP *ADDINFO_get_value_FUNC_PTR;
*/

 /**************************************************************
 *                                                             *
 * PROCEDURE NAME : ADDINFO_strip_prefix adies16               *
 *                                                             *
 * DESCRIPTION    : Copy prefix keyword from source addinfo    *
 *                  to target addinfo with removing prefix from*
 *                  from keyword                               *
 *                                                             *
 * INPUT          : addinfo                                    *
 *                  keyword                                    *
 *                                                             *
 * OUTPUT         : laddinfo                                   *
 *                                                             *
 * RETURN VALUE   : ESA_RC                                     *
 *                                                             *
 **************************************************************/
typedef ESA_RC ADDINFO_strip_prefix_FUNC_TYP
                                 (char              * keyword,
                                 int                  max_kwdlen,
                                 int                  max_vallen,
                                 ADDINFO_rec_typ    * addinfo,
                                 ADDINFO_rec_typ    * laddinfo);


typedef ADDINFO_strip_prefix_FUNC_TYP *ADDINFO_strip_prefix_FUNC_PTR;



/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_get_next adies17                   *
*                                                             *
* DESCRIPTION    :     Get next item from ADDINFO             *
*                                                             *
* INPUT          : pair             -  entry to start loop    *
*                                                             *
* OUTPUT         : None                                       *
*                                                             *
* RETURN VALUE   : ONE_FIELD_rec_ptr (or NULL if finished)    *
*                                                             *
**************************************************************/

typedef ONE_FIELD_rec_ptr ADDINFO_get_next_FUNC_TYP
                                        (ADDINFO_rec_typ * addinfo,
                                        ONE_FIELD_rec_ptr  p_pair);


typedef ADDINFO_get_next_FUNC_TYP *ADDINFO_get_next_FUNC_PTR;


/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_copy_by_prefix adies18             *
*                                                             *
* DESCRIPTION    : Copy ADDINFO pairs by prefix               *
*                                                             *
* INPUT          : addinfo_in                                 *
*                  prefix                                     *
*                                                             *
* OUTPUT         : addinfo_out                                *
*                                                             *
* RETURN VALUE   : ONE_FIELD_rec_ptr (or NULL if finished)    *
*                                                             *
**************************************************************/

typedef ESA_RC ADDINFO_copy_by_prefix_FUNC_TYP
                              (char             * prefix,
                               int                max_kwdlen,
                               int                max_vallen,
                               int                drop_prefix,
                               ADDINFO_rec_typ  * addinfo_in,
                               ADDINFO_rec_typ  * addinfo_out);


typedef ADDINFO_copy_by_prefix_FUNC_TYP
                         *ADDINFO_copy_by_prefix_FUNC_PTR;



/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_kdt_search adies19                 *
*                                                             *
* DESCRIPTION    : Locate a keyword in KDT (Keyword           *
*                  Description Table )                        *
*                                                             *
* INPUT          : p_kwd            - keyword to be searched  *
*                  p_desc           - KDTE to start search    *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ADDINFO_KDTE_rec_ptr                       *
*                                                             *
**************************************************************/

typedef ADDINFO_KDTE_rec_ptr ADDINFO_kdt_search_FUNC_TYP
                          (char                  *kwd,
                           ADDINFO_KDTE_rec_ptr   p_kdte);

typedef ADDINFO_kdt_search_FUNC_TYP *ADDINFO_kdt_search_FUNC_PTR;

/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_kdt_modify adies20                 *
*                                                             *
* DESCRIPTION    : Modify the textl, tetxr for specified      *
*                  entry in KDT table                         *
*                                                             *
* INPUT          : kwd              - keyword                 *
*                  p_kdte           - KDTE table              *
*                  char             - text left               *
*                  char             - text right              *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ESA_OK, ESA_ERR - specified keyword        *
*                                    not found                *
*                                                             *
**************************************************************@

typedef ESA_RC ADDINFO_kdt_modify_FUNC_TYP
                          (char                 * kwd,
                           ADDINFO_KDTE_rec_ptr   p_kdte,
                           char                 * txtl,
                           char                 * txtr);

typedef ADDINFO_kdt_modify_FUNC_TYP *ADDINFO_kdt_modify_FUNC_PTR;

/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_mkt_check adies21                  *
*                                                             *
* DESCRIPTION    : Check that all mandatory keywords were     *
*                  specified                                  *
*                                                             *
* INPUT          : p_func        - function name              *
*                  p_numaddi     - number of addinfo buffers  *
*                  p_addinfo     - pointer to addinfo vector  *
*                  p_mkte        - MKTE to start with         *
*                  p_kdt         - KDT for commnad            *
*                  p_dest        - Vector of error msg dests  *
*                  p_msgs        - Error messages buffer      *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ESA_RC                                     *
*                                                             *
**************************************************************/

typedef ESA_RC ADDINFO_mkt_check_FUNC_TYP
                             (char                      * p_func,
                              short                       p_numaddi,
                              ADDINFO_rec_ptr           * p_addinfo,
                              ADDINFO_MKTE_rec_ptr        p_mkte,
                              ADDINFO_KDTE_rec_ptr        p_kdt,
                              CTSAMSG_DEST_TABLE_rec_ptr  p_dest,
                              CTSAMSG_HANDLE_rec_ptr      p_msgs);

typedef ADDINFO_mkt_check_FUNC_TYP *ADDINFO_mkt_check_FUNC_PTR;



/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_rkt_check adies22                  *
*                                                             *
* DESCRIPTION    : verify that no reserved keywords are used  *
*                                                             *
* INPUT          : func          - function name              *
*                  numaddi       - addinfo buffer             *
*                  addinfo       - addinfo vector pointer     *
*                  rkte          - RKTE to start with         *
*                  p_dest        - Vector of error msg dests  *
*                  p_msgs        - Error messages buffer      *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ESA_RC                                     *
*                                                             *
**************************************************************/

typedef ESA_RC ADDINFO_rkt_check_FUNC_TYP
                             (char                      * p_func,
                              short                       p_numaddi,
                              ADDINFO_rec_ptr           * p_addinfo,
                              ADDINFO_RKTE_rec_ptr        p_rkte,
                              CTSAMSG_DEST_TABLE_rec_ptr  p_dest,
                              CTSAMSG_HANDLE_rec_ptr      p_msgs);


typedef ADDINFO_rkt_check_FUNC_TYP *ADDINFO_rkt_check_FUNC_PTR;


/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_concat adies23                     *
*                                                             *
* DESCRIPTION    : Concatenate Additional Info buffers to     *
*                  command buffer                             *
*                                                             *
* INPUT          :                                            *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ESA_RC                                     *
*                                                             *
**************************************************************/

typedef ESA_RC ADDINFO_concat_FUNC_TYP
                          (char                      * p_func,
                           char                      * p_cmd,
                           short                       p_numaddi,
                           ADDINFO_rec_ptr           * p_addinfo,
                           ADDINFO_KDTE_rec_ptr        p_kdt,
                           CTSAMSG_DEST_TABLE_rec_ptr  p_dest,
                           CTSAMSG_HANDLE_rec_ptr      p_msgs);

typedef ADDINFO_concat_FUNC_TYP *ADDINFO_concat_FUNC_PTR;

/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_list_search adies24                *
*                                                             *
* DESCRIPTION    : Locate an item in addinfo list value       *
*                                                             *
* INPUT          : list     - list string (items spearted by  *
*                             commas)                         *
*                  item     - searched item                   *
*                  sep      - string of list seperators       *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : Pointer to list item or NULL               *
*                                                             *
**************************************************************/

typedef char * ADDINFO_list_search_FUNC_TYP (char * list,
                                char * item,
                                char   sep);


typedef ADDINFO_list_search_FUNC_TYP
                             *ADDINFO_list_search_FUNC_PTR;


/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_list_diff adies25                  *
*                                                             *
* DESCRIPTION    : Build list of items found in first         *
*                  list, but not in second list .             *
*                                                             *
* INPUT          : inlist1  - first list                      *
*                  inlist2  - second list                     *
*                  outlist  - list of added items             *
*                  insep    - string of list sperators        *
*                  outsep   - sepearator in output list       *
*                                                             *
* OUTPUT         : outlist  - list of added items             *
*                                                             *
*                  is a preallocated output buffer in the size*
*                  of the first input list.                   *
*                                                             *
* RETURN VALUE   : ESA_OK                                     *
*                                                             *
**************************************************************/

typedef ESA_RC ADDINFO_list_diff_FUNC_TYP (char * inlist1,
                              char * inlist2,
                              char * outlist,
                              char   insep,
                              char   outsep);


typedef ADDINFO_list_diff_FUNC_TYP
                             *ADDINFO_list_diff_FUNC_PTR;


/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_list_getnextvalue adies26          *
*                                                             *
* DESCRIPTION    : Get one value from list field.             *
*                  The routine can be used to get list values *
*                  one by one                                 *
*                  Note:                                      *
*                  This routine does not handle sub-fields.   *
*                                                             *
*                                                             *
* INPUT          : pair - add_info pair to be parsed          *
*                  field_separator - delimiter to get field   *
*                                    from list                *
*                  lasts - lasts position to continue getting *
*                          values lasts must be NULL          *
*                          when called for first time         *
*                                                             *
* OUTPUT         : token - A copy of the next value from the  *
*                          list-type value, NULL_CHAR when    *
*                          end of values. Token should be     *
*                          defined by the caller as a string  *
*                          variable with length enough to get *
*                          the longest expected value.        *
*                                                             *
* RETURN VALUE   : ESA_OK                                     *
*                                                             *
**************************************************************/
typedef ESA_RC ADDINFO_list_getnextvalue_FUNC_TYP
                                (ONE_FIELD_rec_ptr pair,
                                char field_separator,
                                char *token,
                                char **lasts);

typedef ADDINFO_list_getnextvalue_FUNC_TYP
                             *ADDINFO_list_getnextvalue_FUNC_PTR;


/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_list_match adies27                 *
*                                                             *
* DESCRIPTION    : Build a list of items in the first string, *
*                  which also appear in the 2nd string        *
*                                                             *
* INPUT          : inlist1  - first list                      *
*                  inlist2  - second list                     *
*                  outlist  - pointer to area at least as     *
*                             large as inlist1                *
*                  insep_c  - char of input list seperator    *
*                  outsep-c - char of output list seperator   *
*                                                             *
* OUTPUT         : outlist  - list of common items            *
*                                                             *
* RETURN VALUE   : ESA_OK                                     *
*                                                             *
**************************************************************/

typedef ESA_RC ADDINFO_list_match_FUNC_TYP (char *inlist1,
                           char     *inlist2,
                           char     *outlist,
                           char      insep_c,
                           char      outsep_c);

typedef ADDINFO_list_match_FUNC_TYP
                             *ADDINFO_list_match_FUNC_PTR;



 /**************************************************************
 *                                                             *
 * PROCEDURE NAME : ADDINFO_convert_list_sep adies28           *
 *                                                             *
 * DESCRIPTION    : Convert string containing old seperators   *
 *                  to new seperators                          *
 *                                                             *
 * INPUT          : src_entry_sep - source entry sep           *
 *                  src_subf_sep  - source subfield  sep       *
 *                  trg_entry_sep - target entry sep           *
 *                  trg_subf_sep  - target subfield  sep       *
 *                                                             *
 * input/output   : buff    - string buffer                    *
 *                                                             *
 * RETURN VALUE   : ESA_RC                                     *
 *                                                             *
 **************************************************************/

typedef ESA_RC ADDINFO_convert_list_sep_FUNC_TYP
                                     (char * buff,
                                     char   src_entry_sep,
                                     char   src_subf_sep,
                                     char   trg_entry_sep,
                                     char   trg_subf_sep);


typedef ADDINFO_convert_list_sep_FUNC_TYP
                             *ADDINFO_convert_list_sep_FUNC_PTR;


 /**************************************************************
 *                                                             *
 * PROCEDURE NAME : ADDINFO_masupd     adies29                 *
 *                                                             *
 * DESCRIPTION    : Massive updates of field in addinfo_to by  *
 *                  values of same_name fields in addinfo_from *
 *                                                             *
 * RETURN VALUE   : NONE                                       *
 *                                                             *
 **************************************************************/
typedef void ADDINFO_masupd_FUNC_TYP
                        (ADDINFO_rec_ptr             addinfo_to,
                        ADDINFO_rec_ptr              addinfo_from,
                        ADDINFO_masupd_mode          mode,
                        CTSAMSG_DEST_TABLE_rec_typ * dest,
                        CTSAMSG_HANDLE_rec_typ     * msgs);

typedef ADDINFO_masupd_FUNC_TYP *ADDINFO_masupd_FUNC_PTR;


 /**************************************************************
 *                                                             *
 * PROCEDURE NAME : ADDINFO_expand_from_buffer     adies30     *
 *                                                             *
 * DESCRIPTION    : build addinfo object from a buffer of      *
 *                  null-terminated pairs (kwd,type,value).    *
 *                                                             *
 * RETURN VALUE   : NONE                                       *
 *                                                             *
 **************************************************************/

typedef ESA_RC ADDINFO_expand_from_buffer_FUNC_TYP
                                   (char *buffer,
                                   int  buffer_length,
                                   ADDINFO_rec_ptr addinfo);

typedef ADDINFO_expand_from_buffer_FUNC_TYP
                             *ADDINFO_expand_from_buffer_FUNC_PTR;

 /**************************************************************
 *                                                             *
 * PROCEDURE NAME : ADDINFO_pack_to_buffer     adies31         *
 *                                                             *
 * DESCRIPTION    : build a buffer of null-terminated strings  *
 *                  from addinfo object.                       *
 *                                                             *
 * RETURN VALUE   : NONE                                       *
 *                                                             *
 **************************************************************/
typedef ESA_RC ADDINFO_pack_to_buffer_FUNC_TYP
                              (char *buffer,
                              int  buffer_length,
                              ADDINFO_rec_ptr addinfo,
                              int *actual_buffer_length);

typedef ADDINFO_pack_to_buffer_FUNC_TYP
                             *ADDINFO_pack_to_buffer_FUNC_PTR;

/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_insert_nonstr  adies32             *
*                                                             *
* DESCRIPTION    : Insert a keyword in additional info        *
*                  with non-string data.                      *
*                  previously called _dgt.                    *
*                                                             *
* INPUT          : type             -  addinfo type           *
*                  kwd              -  keyword                *
*                  value            -  value                  *
*                  addinfo          -  additional info        *
*                  dupflag          -  allow duplicate flag   *
*                  add_term         -  add string terminator  *
*                                      (Y/N)                  *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ESA_RC                                     *
*                                                             *
**************************************************************/
typedef ESA_RC ADDINFO_insert_nonstr_FUNC_TYP
                            (ADDINFO_typ       type,
                            char               *kwd,
                            char               *val,
                            int                vallen,
                            ADDINFO_rec_ptr    addinfo,
                            int                max_kwdlen,
                            int                max_vallen,
                            ADDINFO_DUPLICATE   dupflag,
                            int                 add_term);  /*WS10082N*/

typedef ADDINFO_insert_nonstr_FUNC_TYP
                             *ADDINFO_insert_nonstr_FUNC_PTR;

/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_updval_nonstr  adies33             *
*                                                             *
* DESCRIPTION    : Update a value of an exiting entry         *
*                  with non-string data.                      *
*                  previously called _dgt.                    *
*                                                             *
* INPUT          : value     - Value to be updated            *
*                  pair      - Addinto entry                  *
*                  add_term  -  add string terminator (Y/N)   *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ESA_RC                                     *
*                                                             *
**************************************************************/
typedef ESA_RC ADDINFO_updval_nonstr_FUNC_TYP
                           (char             *addval,
                           int                vallen,
                           int                max_vallen,
                           ONE_FIELD_rec_ptr  pair,
                           int                add_term); /*WS10082N*/

typedef ADDINFO_updval_nonstr_FUNC_TYP
                             *ADDINFO_updval_nonstr_FUNC_PTR;

/**** WS10082K - Removed the function ***
/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_value_addval     adies35           *
*                                                             *
* DESCRIPTION    : Conactenate a value to an value string     *
*                  and update string length                   *
*                                                             *
* INPUT          : addval    - Subfield / Entry to be added   *
*                  addval_len - Added string length           *
*                  current_val - Addinfo value string         *
*                  current_val_len - Addinfo value string len *
*                  ( passed by address for update )           *
*                  max_vallen - Max value string length       *
*                  addsep_c  - Sufield / List entry seperator *
*                                                             *
* OUTPUT         : none                                       *
*                                                             *
* RETURN VALUE   : ESA_RC                                     *
*                                                             *
*************************************************************@/
typedef ESA_RC ADDINFO_value_addval_FUNC_TYP
                             (char                 *addval,
                             int                    addval_len,
                             char                  *current_val,
                             int                   *current_val_len,
                             int                    max_vallen,
                             char                   addsep_c);

typedef ADDINFO_value_addval_FUNC_TYP
                             *ADDINFO_value_addval_FUNC_PTR;
****   WS10082K ***/


/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_split_by_prefix adies36            *
*                                                             *
* DESCRIPTION    : split the addinfo to 2 or more addinfos:   *
*                  - entries matching the prefix are copied   *
*                    to to_prefix.                            *
*                  - all other entries are copied to          *
*                    to_general.                              *
*                                                             *
* INPUT          : from - input addinfo.                      *
*                  to_prefix_num - number of addinfos in      *
*                                  to_prefix vector.          *
*                  prefix - prefix for split.                 *
*                                                             *
* OUTPUT         : to_general - addinfo for non-prefix        *
*                               entries.                      *
*                  to_prefix - vector of pointers to addinfos *
*                              for prefix entries.            *
*                                                             *
* RETURN VALUE   : ESA_OK - when all OK.                      *
*                  ESA_ERR - when output overflow.            *
*                                                             *
*                                                             *
**************************************************************/
typedef ESA_RC ADDINFO_split_by_prefix_FUNC_TYP
                                (ADDINFO_rec_ptr from,
                                ADDINFO_rec_ptr  to_general,
                                ADDINFO_rec_ptr *to_prefix,
                                int              to_prefix_num,
                                char            *prefix);

typedef ADDINFO_split_by_prefix_FUNC_TYP
                             *ADDINFO_split_by_prefix_FUNC_PTR;

/**************************************************************
*                                                             *
* PROCEDURE NAME : ADDINFO_count_by_prefix adies37            *
*                                                             *
* DESCRIPTION    : Count the number of entries with a         *
*                  specific prefix.                           *
*                                                             *
* INPUT          : addinfo - ut addinfo.                      *
*                  prefix - prefix for count.                 *
*                  prefix_with_data - count only pairs with   *
*                                     data (TRUE) or all      *
*                                     (FALSE).                *
*                  other_with_data - count only pairs with    *
*                                    data (TRUE) or all       *
*                                    (FALSE).                 *
*                                                             *
* OUTPUT         : prefix_num - number of entries with        *
*                               prefix.                       *
*                  other_num - number of other entries.       *
*                                                             *
* RETURN VALUE   :                                            *
*                                                             *
**************************************************************/
typedef void ADDINFO_count_by_prefix_FUNC_TYP
                              (ADDINFO_rec_ptr  addinfo,
                              char            *prefix,
                              int             *prefix_num,
                              int             *other_num,
                              int              prefix_with_data,
                              int              other_with_data);

typedef ADDINFO_count_by_prefix_FUNC_TYP
                             *ADDINFO_count_by_prefix_FUNC_PTR;


/********************************************/
/*  ADDINFO function pointers structure     */
/********************************************/

typedef  struct  S_AD_FUNC_ptr {

  ADDINFO_search_FUNC_PTR       ADDINFO_search_ptr;     /*adies01*/
  ADDINFO_insert_FUNC_PTR       ADDINFO_insert_ptr;     /*adies02*/
  ADDINFO_updval_FUNC_PTR       ADDINFO_updval_ptr;     /*adies03*/
  ADDINFO_dump_FUNC_PTR         ADDINFO_dump_ptr;       /*adies04*/
  ADDINFO_alloc_FUNC_PTR        ADDINFO_alloc_ptr;      /*adies05*/
  ADDINFO_free_FUNC_PTR         ADDINFO_free_ptr;       /*adies06*/
  ADDINFO_clear_value_FUNC_PTR
                         ADDINFO_clear_value_ptr;       /*adies07*/
  ADDINFO_clear_FUNC_PTR        ADDINFO_clear_ptr;      /*adies08*/
  ADDINFO_addval_FUNC_PTR       ADDINFO_addval_ptr;     /*adies09*/
  ADDINFO_delete_FUNC_PTR       ADDINFO_delete_ptr;     /*adies10*/
  ADDINFO_dup_check_FUNC_PTR
                         ADDINFO_dup_check_ptr;         /*adies11*/
  ADDINFO_prefix_search_FUNC_PTR
                         ADDINFO_prefix_search_ptr;     /*adies12*/
  ADDINFO_insert_cond_FUNC_PTR
                         ADDINFO_insert_cond_ptr;       /*adies13*/
  ADDINFO_copy_FUNC_PTR         ADDINFO_copy_ptr;       /*adies14*/
  /* WS10082K - function removed.
  ADDINFO_get_value_FUNC_PTR
                         ADDINFO_get_value_ptr;         /@adies15@/ */
  ADDINFO_strip_prefix_FUNC_PTR
                         ADDINFO_strip_prefix_ptr;      /*adies16*/
  ADDINFO_get_next_FUNC_PTR
                         ADDINFO_get_next_ptr;          /*adies17*/
  ADDINFO_copy_by_prefix_FUNC_PTR                       /*adies18*/
                         ADDINFO_copy_by_prefix_ptr;
  ADDINFO_kdt_search_FUNC_PTR
                         ADDINFO_kdt_search_ptr;        /*adies19*/
  /*WS10082A ADDINFO_kdt_modify_FUNC_PTR
                         ADDINFO_kdt_modify_ptr;         *adies20*/
  ADDINFO_mkt_check_FUNC_PTR
                         ADDINFO_mkt_check_ptr;         /*adies21*/
  ADDINFO_rkt_check_FUNC_PTR
                         ADDINFO_rkt_check_ptr;         /*adies22*/
  ADDINFO_concat_FUNC_PTR       ADDINFO_concat_ptr;     /*adies23*/
  /* list functions */
  ADDINFO_list_search_FUNC_PTR
                         ADDINFO_list_search_ptr;       /*adies24*/
  ADDINFO_list_diff_FUNC_PTR
                         ADDINFO_list_diff_ptr;         /*adies25*/
  ADDINFO_list_getnextvalue_FUNC_PTR                    /*adies26*/
                         ADDINFO_list_getnextvalue_ptr;
  ADDINFO_list_match_FUNC_PTR
                         ADDINFO_list_match_ptr;        /*adies27*/
  ADDINFO_convert_list_sep_FUNC_PTR                     /*adies28*/
                         ADDINFO_convert_list_sep_ptr;
  ADDINFO_masupd_FUNC_PTR       ADDINFO_masupd_ptr;     /*adies29*/
  ADDINFO_expand_from_buffer_FUNC_PTR                   /*adies30*/
                         ADDINFO_expand_from_buffer_ptr;
  ADDINFO_pack_to_buffer_FUNC_PTR                       /*adies31*/
                         ADDINFO_pack_to_buffer_ptr;
  ADDINFO_insert_nonstr_FUNC_PTR
                         ADDINFO_insert_nonstr_ptr;     /*adies32*/
  ADDINFO_updval_nonstr_FUNC_PTR
                         ADDINFO_updval_nonstr_ptr;     /*adies33*/
  /*WS10082K*
  ADDINFO_value_addval_FUNC_PTR
                         ADDINFO_value_addval_ptr;      /*adies35*/
  ADDINFO_split_by_prefix_FUNC_PTR                      /*adies36*/
                         ADDINFO_split_by_prefix_ptr;
  ADDINFO_count_by_prefix_FUNC_PTR                      /*adies37*/
                         ADDINFO_count_by_prefix_ptr;

} AD_FUNC_PTR_rec_typ,  * AD_FUNC_PTR_rec_ptr;

/* ws10082 end */

/********************************************/
/*  CSA function pointers structure         */
/********************************************/

typedef  struct  S_CS_FUNC_PTR {

  RSSLIST_GET_FUNC_PTR          rsslist_get_ptr;
  RSSPRM_GET_FUNC_PTR           rssprm_get_ptr;
  RSSKWD_TYP_FUNC_PTR           rsskwd_typ_ptr;
  INTERCEPT_SET_FUNC_PTR        intercept_set_ptr;
  RSSPRM_GET_OPT_FUNC_PTR       rssprm_get_opt_ptr;
  LOGEVT_FUNC_PTR               LOG_event_ptr;
  MSG_PRINT_FUNC_PTR            MSG_printf_ptr;
  DIAG_PRINTF_FUNC_PTR          DIAG_printf_ptr;
  DIAG_GET_DEBUG_LEVEL_FUNC_PTR DIAG_get_debug_level_ptr;
  DIAG_ENTER_FUNC_PTR           DIAG_enter_ptr;
  DIAG_EXIT_FUNC_PTR            DIAG_exit_ptr;
  /* DIAG_REFRESH_FUNC_PTR         DIAG_refresh_ptr; hijacked ws10082 */
  AD_FUNC_PTR_rec_typ          *ADDINFO_func_ptr; /* by this ws10082 */
  RSSTBL_GET_DATA_FUNC_PTR      RssTblGet_ptr;
  RSSTBL_SET_DATA_FUNC_PTR      RssTblSet_ptr;
} CS_FUNC_PTR_rec_typ,  * CS_FUNC_PTR_rec_ptr;

typedef  struct  S_ADMIN_PARAMS {
    RSS_typ                      rss_name;
    RSS_typ                      rss_type;
    USER_typ                     admin_uname;
    UG_typ                       admin_gname;
    RSS_vers_typ                 rss_version;
    ADMIN_MODE_typ               mode;
    void                       * os_proc_handle;
    void                       * login_handle;
    void                       * esadiag_handle;
    void                       * apiinit_handle;
    CTSAMSG_HANDLE_rec_typ     * ctsamsg_handle;
    CTSAMSG_DEST_TABLE_rec_typ * ctsamsg_dest;
    CS_FUNC_PTR_rec_typ          cs_func;
    PASSWD_typ                   admin_passwd;
    USER_typ                     def_admin;
    PASSWD_typ                   def_admin_passwd;
    const char                 * program_name;
}  ADMIN_PARAMS_rec_typ, * ADMIN_PARAMS_rec_ptr;


/* BS10100 - Start */
/* Define structure to read extra parameters in RS message. With  *
 * current implementation the application admin credentials are   *
 * read in extended params structure                              */
typedef  struct  S_EXTENDED_PARAMS {
    USER_typ                     app_admin_uname;
    PASSWD_typ                   app_admin_passwd;
} EXTENDED_PARAMS_rec_typ, * EXTENDED_PARAMS_rec_ptr;
/* BS10100 - End */

/* IS10184 - start */

/**************************************************************/
/*                                                            */
/*  Program pointers structure.                               */
/*                                                            */
/*  This structure contains pointers to programs which are    */
/*  loaded when the common params structure is created.       */
/*                                                            */
/*                                                            */
/*  Callers of these programs should take the address from    */
/*  this table instead of activating them using               */
/*  OS_DYNAM_call which calls CTSALDC to LINK to the          */
/*  program.                                                  */
/*                                                            */
/*                                                            */
/*  The programs in ths tabl should be written as reentrant   */
/*  or reusable, depending on the way they are used, and      */
/*  link-edited accordingly.                                  */
/*                                                            */
/*                                                            */
/*  CTSCVAR and CTSCGRO are exceptions from this rule. They   */
/*  are written as reusable but there is no need to           */
/*  link-edit them as such becasue they are called by our     */
/*  code (CTSAVAR) using BASSM. Their pointers here are for   */
/*  "documentary" purposes only and are not use for doing     */
/*  the call. CTSAVAR uses system tools to find them in       */
/*  storage.                                                  */
/*                                                            */
/**************************************************************/

/*  Program entry structure */
typedef struct _COMMON_PROG_ENT {
               char     prog_name[9];
               void   * prog_ep;
} COMMON_PROGS_ENT_rec_typ, * COMMON_PROGS_ENT_rec_ptr;

/*  Programs list structure                                   */
/*                                                            */
/*  The union definition allows accessing the list in 2 ways: */
/*  - as an array of COMMON_PROGS_ENT_rec_typ entries.        */
/*  - a specific entry by its name.                           */
/*                                                            */
typedef struct _COMMON_PROGS_LIST {
   union {
      COMMON_PROGS_ENT_rec_typ   program;
      struct  {
           char           CTSATSO[9];
           ASM_RTN_TYP  * p_ctsatso;
           char           CTSAVAR[9];
           ASM_RTN_TYP  * p_ctsavar;
           char           CTSCVAR[9];
           void         * p_ctscvar;
           char           CTSCGRO[9];
           void         * p_ctscgro;
           char           CTSAEXC[9];
           ASM_RTN_TYP  * p_ctsaexc;
           char           CTSARUH[9];
           ASM_RTN_TYP  * p_ctsaruh;
           char           LAST[9];      /* last entry with empty name */
           void         * p_last;
       };
   };
}  COMMON_PROGS_LIST_rec_typ, * COMMON_PROGS_LIST_rec_ptr;

/*  The programs list                                         */
/*                                                            */
/*  When common_params is created, the programs will be       */
/*  loaded and their addresses will be put in this list.      */
/*                                                            */
/*  This list will be pointed to by p_commonn_programs in     */
/*  COMMON_PARAMS.                                            */
/*                                                            */
static COMMON_PROGS_LIST_rec_typ  common_programs =
        {
          .CTSATSO = "CTSATSO ", .p_ctsatso = NULL,
          .CTSAVAR = "CTSAVAR ", .p_ctsavar = NULL,
          .CTSCVAR = "CTSCVAR ", .p_ctscvar = NULL,
          .CTSCGRO = "CTSCGRO ", .p_ctscgro = NULL,
          .CTSAEXC = "CTSAEXC ", .p_ctsaexc = NULL,
          .CTSARUH = "CTSARUH ", .p_ctsaruh = NULL,
          .LAST    = ""        , .p_last    = NULL
        };
/* IS10184 - end */

/* IS10174 - start */
/********************************************/
/*  Common params structures                */
/********************************************/

/* _COMMON_PARAMS is an area pointed by xxx_params (where xxx is
 * RACF, TSS or ACF2). This area should hold data required by all
 * 3 products.
 *
 * This area should be allocated by the CTSxINI routines called
 * during USAAPI initialization. All routines looking for it should
 * be able to work when this area does not exist (environments in
 * which USAAPI initialization is done partially or not at all).
 *
 * With IS10184 is created also by OS_CS_Init, and pointed by
 * DUMMY_PARAMS, which is a "place-holder" for the product_params
 * so that CC code can use the addresses/services in common_params.
 * We have routines which serve both the SPI and CC (CTS and ALL)
 * which will now use common_params pointers. Preparing the
 * common_params early in the process enbale replacing the old
 * code instead of leavng it to be used when common_params does
 * not exist.
 *
 * The dummy_params created by OS_CS_init will be replaced by
 * the appropriate xxx_params during SPI initialization. The
 * SPI initialization process will replace the dummy_params
 * with its own xxx_params and will point to the already existing
 * common_params.
 *
 */

/* IS10184 #define  COMMON_PARAMS_EYEC    "CMNPARM"  */
#define  COMMON_PARAMS_EYEC    "CMNPRM"                    /* IS10184 */
/*  List of COMMON_PARAMS "owners.                         /* IS10184 */
/*  The COMMON_PARAMS can be created by common code or        IS10184 */
/*  or by SPI initialization, whoever is called first.        IS10184 */
/*  Accordingly, it should be freed by the same termination   IS10184 */
/*  process.                                                  IS10184 */
/*  The iniitalization will set itself as the "owner" in      IS10184 */
/*  order to "mark" which termination process should free it. IS10184 */
#define  COMMON_PARAMS_OWNER_SPI    'S'                    /* IS10184 */
#define  COMMON_PARAMS_OWNER_COMMON 'C'                    /* IS10184 */
#define  COMMON_PARAMS_OWNER_ONLINE 'O'                    /* IS10184 */
#define  PARAMS_TYPE_DUMMY  'D'                            /* IS10184 */

typedef  struct _COMMON_PARAMS{
  /* IS10184 char   commp_eyec[8];   */
  char   commp_eyec[6];                                    /* IS10184 */
  char   commp_owner;     /* owner = who allocated            IS10184 */
  char   PARAMS_type;     /* type of params block pointing    IS10184 */
                          /* to this common_params block.     IS10184 */
  char   rssparm_VERIFY_PASS_LOGIN[2]; /*VERIFY_PASSWORD_BY_LOGIN val */
  void * RSS_Admins_list;       /* -> RSS_ADMINS_LIST_rec_typ */
  char   rssparm_UPDATE_LOGON_STATS[2];
                                   /*UPDATE_LOGON_STATS value WS10073 */

  /* Security violation handling                              BS10100 */
  char   rssparm_ALLOW_ADMIN_WITHOUT_PSWD[2];  /* Y / N       BS10100 */
  char   rssparm_APPL_NAME[9];      /*  APPL name.            BS10100 */
  char   is_APPL_OK;          /* Y / N - if APPL is defined   BS10100 */
  /* Security violation handling - end                        BS10100 */
  /* IS10184 replace ctsaruh address with the porgrams list address
  ASM_RTN_TYP * p_ctsaruh;    /@ -> CTSARUH routine.          BS10111 */
  COMMON_PROGS_LIST_rec_typ  * p_common_programs; /* prog lst IS10184 */
  int    ruob_utkn;           /* user token for ruob alloc.   BS10111 */
  union {                                                  /* IS10184 */
    char   script_libname[45];  /* scripts library name.      IS10184 */
          /* we do not use SCRIPT_NAME_typ because any change IS10184 */
          /* in its length will shift the next fields      /* IS10184 */
    struct  {                                              /* IS10184 */
              char   script_lib_error;  /* x'ff' - error *//* IS10184 */
              char   script_lib_error_code[9];             /* IS10184 */
    };                                                     /* IS10184 */
  };                                                       /* IS10184 */
  /* For Future Use                                           BS10100 */
  char    FFU[175];                 /* max length is 256   /* BS10111 */
} COMMON_PARAMS_rec_typ, * COMMON_PARAMS_rec_ptr;

/* _DUMMY_PARAMS is structure used by common routines to access the
 * COMMON _PARAMS without the need to get the specific product _params
 * structure. All product _params structures point to the
 * _COMMON_PARAMS from their first 4 bytes. So, this is actually a
 * "dummy" struscture that defines the field shared by all product
 * _params structures.
 *
 *  --- Start of IS10184
 *  This structure is not "dummy" any more.  With IS10184 COMMON_PARAMS
 *  will be created earlier in the process, sometimes before SPI
 *  initialization. In this case, dummy_params will be allocated and
 *  chained on admin_params and will be used to access COMMON_PARAMS
 *  until it will be replaces by the xxx_params by SPI initialization.
 *  --- End of IS10184
 *
 */
typedef  struct _DUMMY_PARAMS{
   COMMON_PARAMS_rec_typ   * common_params;
   char      ffu[996];
} DUMMY_PARAMS_rec_typ, * DUMMY_PARAMS_rec_ptr;
/* IS10174 - end   */

/* IS10184 - start */
/****************************************************
 *                                                  *
 *   Get Common_params address                      *
 *                                                  *
 *   Parameters:                                    *
 *   ap   - -> admin_params                         *
 *   cmn  - common_params address (I/O)             *
 *   gcprc - return code field.                     *
 *   msg   - 1 - issue error messgae                *
 *           0 - do not issue error messgae.        *
 *                                                  *
 ****************************************************/
/*   original - delete when new works ok
#define GET_P_CMNPRMS(ap, cmn, gcprc, msg)                            \
  (gcprc) = ESA_OK;                                                   \
  if ((cmn) EQ NULL)        /@ Need to retrieve common params addr @/ \
  {                                                                   \
    if ( ((ap) NE NULL)   AND                                         \
         ((ap)->apiinit_handle NE NULL) )                             \
      (cmn) = ((DUMMY_PARAMS_rec_typ *)(ap)->apiinit_handle)->        \
                                                       common_params; \
                                                                      \
    if ((cmn) EQ NULL)                                                \
    {                                                                 \
      (gcprc) = ESA_FATAL ;   /@ when no params or common params @/   \
      if ((msg))                                                      \
        CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest,                \
                      component, func,                                \
                      "common_params does not exist",                 \
                      16, __LINE__);                                  \
    }                                                                 \
    else                      /@ Check common_params validity  @/     \
      if ( strncmp((cmn)->commp_eyec, COMMON_PARAMS_EYEC,             \
                                 strlen(COMMON_PARAMS_EYEC)) NE 0 )   \
      {                                                               \
        (gcprc) = ESA_FATAL ;   /@ when invalid eyec  @/              \
        if ((msg))                                                    \
          CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest,              \
                        component, func,                              \
                        "common_params eye-catcher is incorrect",     \
                        16, __LINE__);                                \
      };                                                              \
  };   */

#define GET_P_CMNPRMS(ap, cmn, gcprc, msg)                            \
  (gcprc) = ESA_OK;                                                   \
  if ((cmn) EQ NULL)        /* Need to retrieve common params addr */ \
  {                                                                   \
    if ( ((ap) NE NULL)   AND                                         \
         ((ap)->apiinit_handle NE NULL) )                             \
      (cmn) = ((DUMMY_PARAMS_rec_typ *)(ap)->apiinit_handle)->        \
                                                       common_params; \
                                                                      \
    if ((cmn) EQ NULL)                                                \
    {                                                                 \
      (gcprc) = ESA_FATAL ;   /* when no params or common params */   \
      snprintf((msg), sizeof((msg)),                                  \
                      "common_params does not exist (%p -> %p)",      \
                      (ap), (ap)->apiinit_handle);                    \
    }                                                                 \
    else                      /* Check common_params validity  */     \
      if ( strncmp((cmn)->commp_eyec, COMMON_PARAMS_EYEC,             \
                                 strlen(COMMON_PARAMS_EYEC)) NE 0 )   \
      {                                                               \
        (gcprc) = ESA_FATAL ;   /* when invalid eyec  */              \
        snprintf((msg), sizeof((msg)),                                \
              "common_params eye-catcher is incorrect (%p -> %.*s)",  \
              (cmn), sizeof((cmn)->commp_eyec),                       \
              (cmn)->commp_eyec);                                     \
      };                                                              \
  };

/****************************************************
 *                                                  *
 *   Get the address of a program from the          *
 *   common params programs list.                   *
 *                                                  *
 *   Parameters:                                    *
 *   ap   - -> admin_params                         *
 *   cmn  - common_params address (I/O)             *
 *   prog - program to retrieve. This is the name   *
 *          of the program address field as defined *
 *          in the programs list structure          *
 *          (COMMON_PROGS_LIST_rec_typ). For        *
 *          example, if ctsatso address has to be   *
 *          retrieved, this arameter will be        *
 *          p_ctsatso                               *
 *   p    - field for program address (O)           *
 *   gpprc - return code field.                     *
 *   msg   - 1 - issue error messgae                *
 *           0 - do not issue error messgae.        *
 *                                                  *
 ****************************************************/
/* original
#define GET_CMNPRMS_PROG(ap, cmn, prog, p, gpprc, msg)                \
  (gpprc) = ESA_OK;                                                   \
  GET_P_CMNPRMS((ap), (cmn), (gpprc), (msg))                          \
  if ((gpprc) EQ ESA_OK)                                              \
  {                                                                   \
    (p) = NULL;                                                       \
    if ((cmn)->p_common_programs NE NULL)   /@ progras list exists @/ \
      (p) = (__typeof__((p)))(cmn)->p_common_programs->prog;          \
                                                                      \
    if ((p) EQ NULL)   /@ If no address, some init was not done @/    \
    {                                                                 \
      if ((msg))                                                      \
        CTSAMSG_print(ERR_INTERNAL2, msgs, NULL, dest,                \
                      component, func,                                \
                      "common_params was not initialized",            \
                      16, __LINE__);                                  \
      (gpprc) = ESA_FATAL ;                                           \
    };                                                                \
  }; */
#define GET_CMNPRMS_PROG(ap, cmn, prog, p, gpprc, msg)                \
  (gpprc) = ESA_OK;                                                   \
  GET_P_CMNPRMS((ap), (cmn), (gpprc), (msg))                          \
  if ((gpprc) EQ ESA_OK)                                              \
  {                                                                   \
    (p) = NULL;                                                       \
    if ((cmn)->p_common_programs NE NULL)   /* progras list exists */ \
      (p) = (__typeof__((p)))(cmn)->p_common_programs->prog;          \
                                                                      \
    if ((p) EQ NULL)   /* If no address, some init was not done */    \
    {                                                                 \
      snprintf((msg), sizeof((msg)),                                  \
                      "common_params was not initialized");           \
      (gpprc) = ESA_FATAL ;                                           \
    };                                                                \
  };
/* IS10184 - end */

/********************************************/
/*  Typedefs for user data                  */
/********************************************/

typedef enum {
    USER_STAT_IGNORED,
    USER_STAT_REVOKED,
    USER_STAT_ACTIVE
} USER_STATUS_typ;

typedef enum {
    USER_ADM_IGNORED,
    USER_ADM_NONE,
    USER_ADM_AUDIT,
    USER_ADM_ADMIN,
    USER_ADM_ALL
} USER_ADMIN_typ;

typedef enum {
    PASS_LIFE_IGNORED,
    PASS_LIFE_PERMANENT,
    PASS_LIFE_RESET
} PASSWD_LIFE_typ;

typedef enum {
    OLD_DEF_UG_ACT_IGNORED,
    OLD_DEF_UG_ACT_DROP,    /* delete old connection */
    OLD_DEF_UG_ACT_KEEP     /* keep old connection as non-default */
} OLD_DEF_UG_ACTION_typ;

typedef  struct  S_USER_PARAMS {
    USER_typ              user;
    OE_typ                parent_oe;
    UG_typ                def_group;
    PASSWD_typ            passwd;
    PASSWD_LIFE_typ       passwd_life;
    USER_STATUS_typ       rev_status;
    USER_ADMIN_typ        user_admin;
    OLD_DEF_UG_ACTION_typ def_ug_action;
}  USER_PARAMS_rec_typ, * USER_PARAMS_rec_ptr;

/********************************************/
/*  Typedefs for UG data                    */
/********************************************/

typedef  struct  S_UG_PARAMS {
    UG_typ          group;
    OE_typ          parent_oe;
    UG_typ          parent_group;
} UG_PARAMS_rec_typ, * UG_PARAMS_rec_ptr;

/********************************************/
/*  Typedefs for USER-to-UG connection      */
/********************************************/

typedef enum {U2UG_ADM_IGNORED,
              U2UG_ADM_NONE,
              U2UG_ADM_AUDIT,
              U2UG_ADM_ADMIN,
              U2UG_ADM_ALL
} U2UG_ADMIN_typ;

typedef enum {U2UG_ATTR_IGNORED,
              U2UG_ATTR_REGULAR,
              U2UG_ATTR_DEFAULT_GROUP
} U2UG_ATTR_typ;

typedef  struct  S_U2UG_PARAMS {
    USER_typ        user;
    UG_typ          group;
    U2UG_ADMIN_typ  u2ug_admin_data;
    U2UG_ATTR_typ   u2ug_attr_data;
    UG_typ          def_group;
} U2UG_PARAMS_rec_typ;

/********************************************/
/*  Typedefs for RESOURCE data              */
/********************************************/

typedef  struct  S_RES_PARAMS {
  RESOURCE_typ    resource;
  RESTYPE_typ     restype;
  OE_typ          parent_oe;
} RES_PARAMS_rec_typ, * RES_PARAMS_rec_ptr;


/********************************************/
/*  Typedef for exist/not exist array       */
/********************************************/

typedef enum {OBJ_IGNORED,
              OBJ_EXIST,
              OBJ_NOT_EXIST,
              OBJ_ERR
} OBJ_EXISTS_typ;

/********************************************/
/*  Typedefs for time range                 */
/********************************************/

typedef  struct  S_TIME_RANGE {
    DATE_typ      from_date;
    TIME_typ      from_time;
    DATE_typ      end_date;
    TIME_typ      end_time;
} TIME_RANGE_rec_typ, * TIME_RANGE_rec_ptr;

/********************************************/
/*  Typedef for intercept type              */
/********************************************/

typedef enum {INTERCEPT_OFFLINE,
              INTERCEPT_ONLINE,
              INTERCEPT_SOI
} INTERCEPTOR_typ;

/********************************************/
/*  Typedef for logi/logout mode            */
/********************************************/

typedef enum {LOGIN_MODE_FIRST = 1,
              LOGIN_MODE,
              LOGOUT_MODE,
              LOGOUT_MODE_LAST,
              LOGIN_MODE_FIRST_USER                        /* WS10074 */
} LOGIN_MODE_typ;

/**********************************************/
/*  Typedefs for ACE operations (add/del/upd) */
/**********************************************/

typedef enum {
    ACE_TYPE_IGNORED,
    ACE_TYPE_UNDEFINED,
    ACE_TYPE_USER,
    ACE_TYPE_GROUP,
    ACE_TYPE_USER_AND_GROUP,
    ACE_TYPE_WORLD,
    ACE_TYPE_MASK,
    ACE_TYPE_OE
} ACE_TYPE_typ;

typedef enum {ACE_POS_IGNORED,
              ACE_POS_FIRST,
              ACE_POS_LAST,
              ACE_POS_BEFORE,
              ACE_POS_AFTER
} ACE_POS_typ;

typedef enum {ACE_ATTR_IGNORED,
              ACE_ATTR_REGULAR,
              ACE_ATTR_PERMANENT
} ACE_ATTR_typ;

typedef struct S_ACE_STRUCT {
    ACE_TYPE_typ         ace_type;
    ACE_USER_typ         user_name;
    ACE_UG_typ           ug_name;
    ACE_OE_typ           oe_name;
    ACE_ATTR_typ         ace_attrs;
} ACE_rec_typ, * ACE_rec_ptr;

/*****************************************************
 *
 * Typedefs for Get functions
 *
 ****************************************************/

typedef enum {
    NO_MORE,
    HAVE_MORE
} HAVE_MORE_typ;

typedef enum {
    GET_ALL_USERS,
    GET_MANY_USERS,
    GET_WILD_USERS,         /* Let's all get wild */
    GET_SUBTREE_USERS,      /* For OE objects     */
    GET_FREE_HANDLE_USERS   /* free *handle       */
} GET_USER_MODE;

typedef enum {
    GET_ALL_GROUPS,
    GET_MANY_GROUPS,
    GET_SUBTREE_GROUPS,      /* For OE objects  */
    GET_FREE_HANDLE_GROUPS,  /* free *handle    */
    GET_ALL_ROLES,           /* WS10078KG */
    GET_ALL_SOURCES,         /* WS10078KG */
    GET_MANY_ROLES,          /* WS10078KG */
    GET_MANY_SOURCES         /* WS10078KG */
} GET_GROUP_MODE;

typedef enum {
    GET_ALL_OES,
    GET_MANY_OES,
    GET_SUBTREE_OES,      /* For OE objects  */
    GET_FREE_HANDLE_OES   /* free *handle    */
} GET_OE_MODE;

typedef enum {
    GET_MANY_RESOURCES,
    GET_FREE_HANDLE_RESOURCES   /* free *handle */
} GET_RESOURCE_MODE;

typedef enum {
    GET_RESOURCE_ACL,     /* Get all ACLs of specified resource */
    GET_FREE_HANDLE_ACL   /* free *handle                       */
} GET_ACL_MODE;

typedef enum {
    GET_ALL_CONNS,
    GET_GROUPS_CONNS,     /* Get all connections for spec. groups*/
    GET_USERS_CONNS,      /* Get all connections for spec. users */
    GET_MANY_CONNS,       /* Get specified connections           */
    GET_FREE_HANDLE_CONNS,/* free *handle                        */
    GET_USERS_CONNS_FAST  /* Same as GET_USERS_CONNS but faster
                                                         BS10061 */
} GET_CONN_MODE;

typedef enum {
    GET_ALL_GRP_RES,          /* resource groups */
    GET_FREE_HANDLE_GRP_RES   /* free *handle    */
} GET_GRP_RES_MODE;

/*********************************************************
 *  typedef for action:                                  *
 *  unknown, add, update, delete, revoke, passwd_updated *
 ********************************************************/

typedef enum {
    ACT_UNKNOWN,
    ACT_ADD,
    ACT_UPDATE,
    ACT_DELETE,
    ACT_REVOKE,    /* DXC001 */
    ACT_PWD_UPD,   /* DXC001 */
    ACT_CONN_UPD,  /* AJKxxx */
    ACT_LOGIN,     /* WS10064 */
    ACT_PWPH_UPD   /* WS10064 */
} ACTION_typ;

/*****************************************************
 *
 * Non-RSS functions
 *
 ****************************************************/

/****************************************************
 * Procedure Name : CTSVersion
 * Description    : API version from API_VERSION
 * Input          :
 * Output         : api_version
 * Return Value   : ESA_RC
 * Comments       : Platform-dependent operations to be performed
 *                  prior to any API call.
 ***************************************************/

typedef ESA_RC APIVERSION_FUNC_TYP (RSS_vers_typ  version);

extern  APIVERSION_FUNC_TYP   CTSVersion;    /* actual function */

typedef APIVERSION_FUNC_TYP * APIVERSION_FUNC_PTR;/*pointer to func */


/****************************************************
 * Procedure Name : CTSAPIInit
 * Description    : API initialization
 * Input          :
 * Output         :
 * Input/Output   : admin, err
 * Return Value   : ESA_RC
 * Comments       : Platform-dependent operations to be performed
 *                  prior to any API call.
 ***************************************************/

typedef ESA_RC APIINIT_FUNC_TYP (ADMIN_PARAMS_rec_typ * admin_params,
                                 ERR_STRUCT_rec_typ   * err);

extern  APIINIT_FUNC_TYP   CTSAPIInit;       /* actual function */

typedef APIINIT_FUNC_TYP * APIINIT_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name : CTSAPITerm
 * Description    : API termination & cleanup
 * Input          :
 * Output         :
 * Input/Output   : admin, err
 * Return Value   : ESA_RC
 * Comments       : Platform-dependent operations to be performed
 *                  when API is no longer needed.
 ***************************************************/

typedef ESA_RC APITERM_FUNC_TYP (ADMIN_PARAMS_rec_typ * admin_params,
                                 ERR_STRUCT_rec_typ   * err);

extern  APITERM_FUNC_TYP   CTSAPITerm;       /* actual function */

typedef APITERM_FUNC_TYP * APITERM_FUNC_PTR; /* pointer to func */

/***************************************************************
 *
 * Services that enable ESA to administer security on the RSS
 *
 **************************************************************/

/****************************************************
 * Procedure Name : CTSSetRSSParams
 * Description    : Set RSS parameters
 * Input          : rss_params, admin
 * Output         : err
 * Input/Output   : addinfo
 * Return Value   : ESA_RC
 * Comments       : RSS-dependent operations to modify
 *                  global RSS parameters.
 ***************************************************/

typedef ESA_RC STRSPRM_FUNC_TYP (RSS_PARAMS_rec_typ   * rss_params,
                                 ADDINFO_rec_typ      * addinfo,
                                 ADMIN_PARAMS_rec_typ * admin_params,
                                 ERR_STRUCT_rec_typ   * err);

extern  STRSPRM_FUNC_TYP   CTSSetRSSParams;  /* actual function */

typedef STRSPRM_FUNC_TYP * STRSPRM_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name : CTSAddUser
 * Description    : Add a new user
 * Input          : User data, addinfo, admin
 * Output         : err
 * Input/Output   :
 * Return Value   : ESA_RC
 ***************************************************/

typedef ESA_RC ADDUSER_FUNC_TYP (USER_PARAMS_rec_typ  * user_params,
                                 ADDINFO_rec_typ      * addinfo,
                                 ADMIN_PARAMS_rec_typ * admin_params,
                                 ERR_STRUCT_rec_typ   * err);

extern  ADDUSER_FUNC_TYP   CTSAddUser;       /* actual function */

typedef ADDUSER_FUNC_TYP * ADDUSER_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name : CTSDelUser
 * Description    : Delete a user
 * Input          : user data, addinfo, admin
 * Output         : err
 * Input/Output   :
 * Return Value   : ESA_RC
 ***************************************************/

typedef ESA_RC DELUSER_FUNC_TYP (USER_PARAMS_rec_typ  * user_params,
                                 ADDINFO_rec_typ      * addinfo,
                                 ADMIN_PARAMS_rec_typ * admin_params,
                                 ERR_STRUCT_rec_typ   * err);

extern  DELUSER_FUNC_TYP   CTSDelUser;       /* actual function */

typedef DELUSER_FUNC_TYP * DELUSER_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name : CTSUpdUser
 * Description    : Update user details
 * Input          : user data, addinfo, admin
 * Output         : err
 * Input/Output   :
 * Return Value   : ESA_RC
 ***************************************************/

typedef ESA_RC UPDUSER_FUNC_TYP (USER_PARAMS_rec_typ  * user_params,
                                 ADDINFO_rec_typ      * addinfo,
                                 ADMIN_PARAMS_rec_typ * admin_params,
                                 ERR_STRUCT_rec_typ   * err);

extern  UPDUSER_FUNC_TYP   CTSUpdUser;    /* actual function */

typedef UPDUSER_FUNC_TYP * UPDUSER_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name : CTSRevokeUser
 * Description    : Revoke or restore a user
 * Input          : user data, addinfo, admin
 * Output         : err
 * Input/Output   : addinfo
 * Return Value   : ESA_RC
 * Comments       : opcode (Revoke or RESTORE) is in the
 *                  user_params structure
 ***************************************************/

typedef ESA_RC REVUSER_FUNC_TYP (USER_PARAMS_rec_typ  * user_params,
                                 ADDINFO_rec_typ      * addinfo,
                                 ADMIN_PARAMS_rec_typ * admin_params,
                                 ERR_STRUCT_rec_typ   * err);

extern  REVUSER_FUNC_TYP   CTSRevokeUser;    /* actual function */

typedef REVUSER_FUNC_TYP * REVUSER_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name : CTSUpdPassword
 * Description    : Update password and its parameters
 * Input          : user struct, addinfo, admin
 * Output         : err
 * Input/Output   :
 * Return Value   : ESA_RC
 ***************************************************/

typedef ESA_RC UPDPASS_FUNC_TYP (USER_PARAMS_rec_typ  * user_params,
                                 ADDINFO_rec_typ      * addinfo,
                                 ADMIN_PARAMS_rec_typ * admin_params,
                                 ERR_STRUCT_rec_typ   * err);

extern  UPDPASS_FUNC_TYP   CTSUpdPassword;/* actual function */

typedef UPDPASS_FUNC_TYP * UPDPASS_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name : CTSAddUG
 * Description    : Add a user group
 * Input          : ug, addinfo, admin
 * Output         : err
 * Input/Output   :
 * Return Value   : ESA_RC
 * Comments       : No users are initally connected to the group.
 ***************************************************/

typedef ESA_RC ADDUG_FUNC_TYP (UG_PARAMS_rec_typ    * ug_params,
                               ADDINFO_rec_typ      * addinfo,
                               ADMIN_PARAMS_rec_typ * admin_params,
                               ERR_STRUCT_rec_typ   * err);

extern  ADDUG_FUNC_TYP   CTSAddUG; /* actual function */

typedef ADDUG_FUNC_TYP * ADDUG_FUNC_PTR;  /* pointer to func */

/****************************************************
 * Procedure Name : CTSDelUG
 * Description    : Delete a user group
 * Input          : ug, addinfo, admin
 * Output         : err
 * Input/Output   :
 * Return Value   : ESA_RC
 ***************************************************/

typedef ESA_RC DELUG_FUNC_TYP (UG_PARAMS_rec_typ    * ug_params,
                               ADDINFO_rec_typ      * addinfo,
                               ADMIN_PARAMS_rec_typ * admin_params,
                               ERR_STRUCT_rec_typ   * err);

extern  DELUG_FUNC_TYP   CTSDelUG; /* actual function */

typedef DELUG_FUNC_TYP * DELUG_FUNC_PTR;  /* pointer to func */

/****************************************************
 * Procedure Name : CTSUpdUG
 * Description    : Update user group details
 * Input          : ug, addinfo, admin
 * Output         : err
 * Input/Output   :
 * Return Value   : ESA_RC
 ***************************************************/

typedef ESA_RC UPDUG_FUNC_TYP (UG_PARAMS_rec_typ    * ug_params,
                               ADDINFO_rec_typ      * addinfo,
                               ADMIN_PARAMS_rec_typ * admin_params,
                               ERR_STRUCT_rec_typ   * err);

extern  UPDUG_FUNC_TYP   CTSUpdUG; /* actual function */

typedef UPDUG_FUNC_TYP * UPDUG_FUNC_PTR;     /* pointer to func */

/****************************************************
 * Procedure Name : CTSAddUserToUG
 * Description    : Connect user to user group
 * Input          : u2ug_params, addinfo, admin
 * Output         : err
 * Input/Output   :
 * Return Value   : ESA_RC
 ***************************************************/

typedef ESA_RC ADDU2UG_FUNC_TYP (U2UG_PARAMS_rec_typ  * u2ug_data,
                                 ADDINFO_rec_typ      * addinfo,
                                 ADMIN_PARAMS_rec_typ * admin_params,
                                 ERR_STRUCT_rec_typ   * err);

extern  ADDU2UG_FUNC_TYP   CTSAddUserToUG;/* actual function */

typedef ADDU2UG_FUNC_TYP * ADDU2UG_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name : CTSDelUserFromUG
 * Description    : Disconnect user from user group
 * Input          : u2ug_params, addinfo, admin
 * Output         : err
 * Input/Output   :
 * Return Value   : ESA_RC
 ***************************************************/

typedef ESA_RC DELU2UG_FUNC_TYP (U2UG_PARAMS_rec_typ  * u2ug_data,
                                 ADDINFO_rec_typ      * addinfo,
                                 ADMIN_PARAMS_rec_typ * admin_params,
                                 ERR_STRUCT_rec_typ   * err);

extern  DELU2UG_FUNC_TYP   CTSDelUserFromUG;  /* actual */

typedef DELU2UG_FUNC_TYP * DELU2UG_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name : CTSUpdUserToUG
 * Description    : Update user to user group connection details
 * Input          : u2ug_params, addinfo, admin
 * Output         : err
 * Input/Output   :
 * Return Value   : ESA_RC
 ***************************************************/

typedef ESA_RC UPDU2UG_FUNC_TYP (U2UG_PARAMS_rec_typ  * u2ug_data,
                                 ADDINFO_rec_typ      * addinfo,
                                 ADMIN_PARAMS_rec_typ * admin_params,
                                 ERR_STRUCT_rec_typ   * err);

extern  UPDU2UG_FUNC_TYP   CTSUpdUserToUG;   /* actual function */

typedef UPDU2UG_FUNC_TYP * UPDU2UG_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name : CTSAddACE
 * Description    : Connect user/ug to a resource
 * Input          : Resource, New ACE,
 *                  new ACE addinfo,
 *                  place of new ace, relative ACE,
 *                  relative ACE addinfo, admin
 * Output         : err
 * Input/Output   :
 * Return Value   : ESA_RC
 * Comments       : 1. rel_ace and rel_addinfo are meaningful only
 *                     if ace_place is used.
 *                  2. addinfo contains the permissions.
 ***************************************************/

typedef ESA_RC ADDACE_FUNC_TYP (RES_PARAMS_rec_typ   * res_params,
                                ACE_rec_typ          * new_ace,
                                ADDINFO_rec_typ      * new_addinfo,
                                ACE_POS_typ            ace_pos,
                                ACE_rec_typ          * rel_ace,
                                ADDINFO_rec_typ      * rel_addinfo,
                                ADMIN_PARAMS_rec_typ * admin_params,
                                ERR_STRUCT_rec_typ   * err);

extern  ADDACE_FUNC_TYP   CTSAddACE;       /* actual function */

typedef ADDACE_FUNC_TYP * ADDACE_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name : CTSDelACE
 * Description    : Disconnect user/group from resource
 * Input          : resource, ACE, ACE addinfo, admin
 * Output         : err
 * Input/Output   :
 * Return Value   : ESA_RC
 * Comments       : 1. addinfo contains the current permissions.
 ***************************************************/

typedef ESA_RC DELACE_FUNC_TYP (RES_PARAMS_rec_typ   * res_params,
                                ACE_rec_typ          * ace,
                                ADDINFO_rec_typ      * addinfo,
                                ADMIN_PARAMS_rec_typ * admin_params,
                                ERR_STRUCT_rec_typ   * err);

extern  DELACE_FUNC_TYP   CTSDelACE;       /* actual function */

typedef DELACE_FUNC_TYP * DELACE_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name : CTSUpdACE
 * Description    : Update user/group to resource connection
 * Input          : resource, new ace, new ACE addinfo,
 *                  old ace, old ACE addinfo
 * Output         : err
 * Input/Output   :
 * Return Value   : ESA_RC
 * Comments       : 1. addinfo structs contain the permissions.
 ***************************************************/

typedef ESA_RC UPDACE_FUNC_TYP (RES_PARAMS_rec_typ   * res_params,
                                ACE_rec_typ          * new_ace,
                                ADDINFO_rec_typ      * new_addinfo,
                                ACE_rec_typ          * old_ace,
                                ADDINFO_rec_typ      * old_addinfo,
                                ADMIN_PARAMS_rec_typ * admin_params,
                                ERR_STRUCT_rec_typ   * err);

extern  UPDACE_FUNC_TYP   CTSUpdACE;       /* actual function */

typedef UPDACE_FUNC_TYP * UPDACE_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSAddRes
 * Description   : Creadts a resource with non-ACL info
 * Input         : resource, addinfo_data
 * Output        : None
 * Input/Output  : None
 * Return Value  : ESA_RC
 ***************************************************/

typedef ESA_RC ADDRES_FUNC_TYP (RES_PARAMS_rec_typ   * res_params,
                                ADDINFO_rec_typ      * addinfo_data,
                                ADMIN_PARAMS_rec_typ * admin_params,
                                ERR_STRUCT_rec_typ   * err);

extern  ADDRES_FUNC_TYP   CTSAddRes;       /* actual function */

typedef ADDRES_FUNC_TYP * ADDRES_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSDelRes
 * Description   : Deletes a resource with it's ACL info
 * Input         : resource, addinfo_data.
 * Output        : None
 * Input/Output  : None
 * Return Value  : ESA_RC
 ***************************************************/

typedef ESA_RC DELRES_FUNC_TYP (RES_PARAMS_rec_typ   * res_params,
                                ADDINFO_rec_typ      * addinfo_data,
                                ADMIN_PARAMS_rec_typ * admin_params,
                                ERR_STRUCT_rec_typ   * err);

extern  DELRES_FUNC_TYP   CTSDelRes;       /* actual function */

typedef DELRES_FUNC_TYP * DELRES_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSUpdRes
 * Description   : Update resource with non-ACL info
 * Input         : resource
 *                 addinfo_data (data to update)
 * Output        : None
 * Input/Output  : None
 * Return Value  : ESA_RC
 ***************************************************/

typedef ESA_RC UPDRES_FUNC_TYP (RES_PARAMS_rec_typ   * res_params,
                                ADDINFO_rec_typ      * addinfo_data,
                                ADMIN_PARAMS_rec_typ * admin_params,
                                ERR_STRUCT_rec_typ   * err);

extern  UPDRES_FUNC_TYP   CTSUpdRes;       /* actual function */

typedef UPDRES_FUNC_TYP * UPDRES_FUNC_PTR; /* pointer to func */

/***************************************************************
 *
 * Services that enable ESA to notify the USAAPI about
 * transaction (initiated by the ESS) completion for the sake of
 * synchronising the offline database or any other reason.
 *
 **************************************************************/

/****************************************************
 * Procedure Name: CTSTransactionEvent
 * Description   : Notify USAAPI of ESS transaction completion
 * Input         : Object type , container , user , group
 * Output        : None
 * Input/Output  : None
 * Return Value  : ESA_RC
 ***************************************************/

typedef ESA_RC TRNSEVNT_FUNC_TYP (INTERCEPT_obj_typ       object_type ,
                                  OE_typ                  oe ,
                                  USER_typ                user,
                                  UG_typ                  ug ,
                                  TRNSEVNT_UPCON_FLAG_typ connflag ,
                                  ADMIN_PARAMS_rec_typ  * admin_params,
                                  ERR_STRUCT_rec_typ    * err);

extern  TRNSEVNT_FUNC_TYP   CTSTransactionEvent;/* actual function */

typedef TRNSEVNT_FUNC_TYP * TRNSEVNT_FUNC_PTR; /* pointer to func */

/***************************************************************
 *
 * Services that enable ESA to request information from the RSS
 *
 **************************************************************/

/****************************************************
 * Procedure Name : CTSGetRSSParams
 * Description    : Get RSS parameters
 * Input          : addinfo, admin
 * Output         : rss_params, err
 * Input/Output   :
 * Return Value   : ESA_RC
 ***************************************************/

typedef ESA_RC GTRSPRM_FUNC_TYP (RSS_PARAMS_rec_typ   * rss_params,
                                 ADDINFO_rec_typ      * addinfo,
                                 ADMIN_PARAMS_rec_typ * admin_params,
                                 ERR_STRUCT_rec_typ   * err);

extern  GTRSPRM_FUNC_TYP   CTSGetRSSParams;  /* actual function */

typedef GTRSPRM_FUNC_TYP * GTRSPRM_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSGetUsers
 * Description   : Get users
 * Input         : mode          - GET_ALL,
 *                                 GET_MANY (one or many),
 *                                 GET_WILD (wildcards)
 *                                 GET_SUBTREE (containers)
 *                                 GET_FREE_HANDLE (see below)
 *                 oe              container (if mode - GET_SUBTREE)
 *                 max_users     - # of elements in user_params,
 *                                 objs_exist and addinfo arrays
 *                 num_users_in  - # of elements in user_params_in
 *                 user_params_in- array of num_users_in, filled with
 *                                 users requested.
 *                 admin_params   -
 *                 get_conn       -  get connection - 'Y'/'N'  //CIQ#6//
 * Output        : actual_num   - # of users returned
 *                 have_more    - HAVE_MORE if more users, else NO_MORE
 *                 err          - error indication, message, etc.
 *                 objs_exist   - array of max_users:
 *                                OBJ_EXIST if user exists, else
 *                                OBJ_NOT_EXIST.
 *                 user_params  - array of max_users:
 *                                callee fills with users returned
 *  Input/Output : addinfo      - array of max_users pointers:
 *                                add.info per user, Caller puts
 *                                requested keywords, callee returns
 *                                actual add.info.
 *                 handle       - NULL on first call, filled by callee,
 *                                used by callee to keep track.
 * Return Value  : ESA_RC
 * Side Effects  : The function may allocate memory for internal usage
 *                 and return pointer to it in *handle.
 *                 Memory will be freed when function returns
 *                 have_more==NO_MORE.
 *                 If caller stop calling the function before NO_MORE,
 *                 he MUST call the function with mode=GET_FREE_HANDLE
 *                 to free the memory.
 * Comments      : Caller must reset I/O params to their initial values
 *                 when using subsequent calls (if HAVE_MORE).
 ****************************************************/

typedef ESA_RC GTUSERS_FUNC_TYP (GET_USER_MODE       mode,
                              OE_typ                 oe,
                              short                  max_users,
                              short                * actual_num,
                              HAVE_MORE_typ        * have_more,
                              void                ** handle,
                              short                  num_users_in,
                              USER_PARAMS_rec_typ  * user_params_in,
                              USER_PARAMS_rec_typ  * user_params,
                              ADDINFO_rec_typ     ** addinfo,
                              OBJ_EXISTS_typ       * objs_exist,
                              ADMIN_PARAMS_rec_typ * admin_params,
                              ERR_STRUCT_rec_typ   * err,
                              char                   get_conn);/*CIQ#6*/

extern  GTUSERS_FUNC_TYP   CTSGetUsers;      /* actual function */

typedef GTUSERS_FUNC_TYP * GTUSERS_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSGetUGs
 * Description   : Get user groups
 * Input         : mode         - GET_ALL,
 *                                GET_MANY,
 *                                GET_WILD (wildcard - not implemented),
 *                                GET_SUBTREE (containers)
                                  GET_FREE_HANDLE (see below)
 *                 oe             container (if mode - GET_SUBTREE)
 *                 max_ugs      - # of elements in ug_params & addinfo
 *                                arrays.
 *                 num_ugs_in   - # of elements in ug_params_in.
 *                 ug_params_in - array of num_ugs_in, filled with
 *                                ugs requested.
 *                 admin_params -
 * Output        : actual_num   - # of ugs returned.
 *                 have_more    - HAVE_MORE if more ugs, else NO_MORE.
 *                 err          - error indication, message, etc.
 *                 objs_exist   - array of max_ugs:
 *                                OBJ_EXIST if ug exists, else
 *                                OBJ_NOT_EXIST.
 *                 ug_params    - array of max_ugs:
 *                                callee fills with groups returned.
 * Input/Output  : addinfo      - array of max_users pointers:
 *                                add.info per group, Caller puts
 *                                requested keywords, callee returns
 *                                actual add.info.
 *                 handle       - NULL on first call, filled by callee,
 *                                used by callee to keep track.
 * Return Value  : ESA_RC
 * Side Effects  : The function may allocate memory for internal usage
 *                 and return pointer to it in *handle.
 *                 Memory will be freed when function returns
 *                 have_more==NO_MORE.
 *                 If caller stop calling the function before NO_MORE,
 *                 he MUST call the function with mode=GET_FREE_HANDLE
 *                 to free the memory.
 ****************************************************/

typedef ESA_RC GETUGS_FUNC_TYP (GET_GROUP_MODE         mode,
                                OE_typ                 oe,
                                short                  max_ugs,
                                short                * actual_num,
                                HAVE_MORE_typ        * have_more,
                                void                ** handle,
                                short                  num_ugs_in,
                                UG_PARAMS_rec_typ    * ug_params_in,
                                UG_PARAMS_rec_typ    * ug_params,
                                ADDINFO_rec_typ     ** addinfo,
                                OBJ_EXISTS_typ       * objs_exist,
                                ADMIN_PARAMS_rec_typ * admin_params,
                                ERR_STRUCT_rec_typ   * err);

extern  GETUGS_FUNC_TYP   CTSGetUGs;       /* actual function */

typedef GETUGS_FUNC_TYP * GETUGS_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSGetConns
 * Description   : Get user-group to user connections
 * Input         : mode         - GET_ALL    - get all connections
 *                                     (all users of all groups)
 *                                GET_MANY_UGS - get connections of
 *                                               supplied ugs
 *                                GET_MANY_USERS - get connections of
 *                                                 supplied users
 *                                GET_MANY_CONNS - get connections for
 *                                                 supplied pairs.
 *                                GET_FREE_HANDLE (see below)
 *                 max_conns    - # of elements in ugs,
 *                                users, obj_exist & addinfo
 *                                arrays
 *                 admin_params -
 *                 num_ugs_in   - # of input ugs
 *                 num_users_in - # of input users
 *                 ugs_in       - array of num_ugs_in.
 *                                Caller fills with ugs requested
 *                                (if not GET_ALL);
 *                 users_in     - array of num_users_in.
 *                                Caller fills with users requested.
 * Output        : actual_num   - # of connections returned
 *                 have_more    - HAVE_MORE if more conns, else NO_MORE
 *                 u2ug_params  - details of each connection
 *                 objs_exist   - array of max_conns:
 *                                OBJ_EXIST if connection exists, else
 *                                OBJ_NOT_EXIST.
 *                 addinfo      - array of max_conns pointers,
 *                                one add.info per connection
 *                 err          - error indication, message, etc.
 * Input/Output  : handle       - NULL on first call, filled by callee,
 *                                used by callee to keep track.
 * Return Value  : ESA_RC
 * Side Effects  : The function may allocate memory for internal usage
 *                 and return pointer to it in *handle.
 *                 Memory will be freed when function returns
 *                 have_more==NO_MORE.
 *                 If caller stop calling the function before NO_MORE,
 *                 he MUST call the function with mode=GET_FREE_HANDLE
 *                 to free the memory.
 * Comments      : 1. Data is returned as triplets -
 *                    u2ug_params, add.info, obj_exist
 ****************************************************/

typedef ESA_RC GTUG2UC_FUNC_TYP (GET_CONN_MODE       mode,
                              short                  max_conns,
                              short                * actual_num,
                              HAVE_MORE_typ        * have_more,
                              void                ** handle,
                              short                  num_ugs_in,
                              short                  num_users_in,
                              UG_typ               * ugs_in,
                              USER_typ             * users_in,
                              U2UG_PARAMS_rec_typ  * u2ug_params,
                              ADDINFO_rec_typ     ** addinfo,
                              OBJ_EXISTS_typ       * objs_exist,
                              ADMIN_PARAMS_rec_typ * admin_params,
                              ERR_STRUCT_rec_typ   * err);

extern  GTUG2UC_FUNC_TYP   CTSGetConns;      /* actual function */

typedef GTUG2UC_FUNC_TYP * GTUG2UC_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSGetRes
 * Description   : Get resource RSS info
 * Input         : mode          - GET_FREE_HANDLE, otherwise ignored
 *                 max_ress      - # of elements in res_params &
 *                                 addinfo_out arrays
 *                 admin_params  -
 * Output        : actual_num    - # of resources returned
 *                 have_more     - HAVE_MORE if more resources
 *                 res_params    - Returned resources
 *                 err           - error indication, message, etc.
 * Input/Output  : addinfo       - array of max_ress pointers:
 *                                 add.info per resource, caller puts
 *                                 requested keywords, callee returns
 *                                 actual add.info, per resource.
 *                 handle        - NULL on first call, filled by callee,
 *                                 used by callee to keep track.
 * Return Value  : ESA_RC
 * Side Effects  : The function may allocate memory for internal usage
 *                 and return pointer to it in *handle.
 *                 Memory will be freed when function returns
 *                 have_more==NO_MORE.
 *                 If caller stop calling the function before NO_MORE,
 *                 he MUST call the function with mode=GET_FREE_HANDLE
 *                 to free the memory.
 * Comments      : 1. Data is returned as triplets -
 *                    resource, add.info, objs_exist
 ****************************************************/

typedef ESA_RC GETRES_FUNC_TYP (GET_RESOURCE_MODE      mode,
                                OE_typ                 oe,
                                short                  max_ress,
                                short                * actual_num,
                                HAVE_MORE_typ        * have_more,
                                void                ** handle,
                                RES_PARAMS_rec_typ   * res_params_in,
                                ADDINFO_rec_typ      * addinfo_in,
                                RES_PARAMS_rec_typ   * res_params,
                                ADDINFO_rec_typ     ** addinfo_out,
                                ADMIN_PARAMS_rec_typ * admin_params,
                                ERR_STRUCT_rec_typ   * err);

extern  GETRES_FUNC_TYP   CTSGetRes;       /* actual function */

typedef GETRES_FUNC_TYP * GETRES_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSGetResACL
 * Description   : Get one resource's ACL
 * Input         : mode         - GET_FREE_HANDLE, other values ignored
 *                 max_aces     - # of ACEs
 *                 admin_params -
 * Output        : actual_num   - # of ACEs returned
 *                 have_more    - HAVE_MORE if more conns, else NO_MORE
 *                 ace_params   - contains: user, group, attributes
 *                 err          - error indication, message, etc.
 * Input/Output  : addinfo      - array of max_aces pointers
 *                                add.info per ACE, caller puts
 *                                requested keywords,
 *                                callee returns actual add.info, per
 *                                ACE.
 *                 handle       - NULL on first call, filled by callee,
 *                                used by callee to keep track.
 * Return Value  : ESA_RC
 * Side Effects  : The function may allocate memory for internal usage
 *                 and return pointer to it in *handle.
 *                 Memory will be freed when function returns
 *                 have_more==NO_MORE.
 *                 If caller stop calling the function before NO_MORE,
 *                 he MUST call the function with mode=GET_FREE_HANDLE
 *                 to free the memory.
 * Comments      : 1. Data is returned as pairs -
 *                    ACE, addinfo (=permissions)
 ****************************************************/

typedef ESA_RC GTRSACL_FUNC_TYP (GET_ACL_MODE            mode,
                                 short                   max_aces,
                                 short                 * actual_num,
                                 HAVE_MORE_typ         * have_more,
                                 void                 ** handle,
                                 RES_PARAMS_rec_typ    * res_params,
                                 ACE_rec_typ           * ace_params,
                                 ADDINFO_rec_typ      ** addinfo,
                                 ADMIN_PARAMS_rec_typ  * admin_params,
                                 ERR_STRUCT_rec_typ    * err);

extern  GTRSACL_FUNC_TYP   CTSGetResACL;     /* actual function */

typedef GTRSACL_FUNC_TYP * GTRSACL_FUNC_PTR; /* pointer to func */

/***************************************************************
 *
 * Services that enable the RSS to send information to ESA
 *
 **************************************************************/

/****************************************************
 * Procedure Name : CTSInterceptorInit
 * Description    : RSS functions initialization for the offline
 *                  interceptor.
 * Input          : rss_name - RSS name when available.
 *                             NULL if not available
 *                  rss_type - Mandatory information.
 *                  handle   - NULL on first call, filled by callee,
 *                             used by callee to store all the
 *                             initialization information.
 *                  intercept_typ - OFLI / ONLI
 * Output        : Time Range:
 *                  start_date
 *                  start_time The date and time of the
 *                             first entry that the interceptor
 *                             should start with.
 *                  end_date
 *                  end_time   The date and time of the last entry.
 *                             If fields are empty, then the last entry
 *                             is the last in the log or file.
 *
 *                 CTSAMSG stuff
 * Return Value  : ESA_RC / ESA_FATAL
 * Comments      : RSS dependent operations to be performed
 *                 prior to RSS function call:
 *                 Open the queue.
 *                 ESA_DIAG initialization.
 *                 CTSAMSG initialization.
 *                 Get the start date and time
 *                     off line interceptor should start
 *                     with.
 *                 rslogevnt Off Line Intercept started.
 *                 OS_CS_lock on the handled rss
 **********************************************************/

typedef ESA_RC RSINIT_FUNC_TYP (RSS_typ                  rss_typ,
                                RSS_typ                  rss_name,
                                void                  ** handle,
                                void                  ** EncrHndl,
                                INTERCEPTOR_typ          intercept_typ,
                                TIME_RANGE_rec_typ     * time_range,
                                ADMIN_PARAMS_rec_typ   * admin_params,
                                int                      argc_prm,
                                char                  ** argv_prm);

extern  RSINIT_FUNC_TYP   CTSInterceptorInit; /* actual function */

typedef RSINIT_FUNC_TYP * RSINIT_FUNC_PTR;    /* pointer to func */


/****************************************************
 * Procedure Name:CTSApiProcInit
 * Description   :PROC functions initialization for the Api utility
 * Input
 *                 CTSAMSG stuff
 * Return Value  : ESA_RC / ESA_FATAL
 *                 ESA_DIAG initialization.
 *                 CTSAMSG initialization.
 **********************************************************/
typedef ESA_RC PROCINIT_FUNC_TYP (char                  * ProgramName,
                                  char                  * ProgramMain,
                                  int                     argc_prm,
                                  char                 ** argv_prm,
                                  void                 ** EncrHndl,
                                  void                 ** ProcHndl,
                                  ADMIN_PARAMS_rec_typ  * admin_prm);

extern  PROCINIT_FUNC_TYP CTSApiProcInit; /* actual function */

typedef PROCINIT_FUNC_TYP * PROCINIT_FUNC_PTR;    /* pointer to func */

/****************************************************
 * Procedure Name : CTSInterceptorTerm
 * Description    : RSS functions termination for the offline
 *                  interceptor.
 *
 * Input          : handle   - Free by callee,
 *                  intercept- OFLI / ONLI
 *                  exit_status - The interceptor's exit status.
 *                  Time Range:
 *                    start_date
 *                    start_time The date and time of the
 *                               first entry that the interceptor
 *                               should start with.
 *                    end_date
 *                    end_time   The date and time of the last entry.
 *                               If fields are empty, then the last
 *                               entry is the last in the log or file.
 * Output         :
 * Return Value   : ESA_RC / ESA_FATAL
 * Comments       : RSS function cleanup operations.
 *                  Close the Queue.
 *                  CTSAMSG termination.
 *                  rslogevnt Off Line Intercept end
 *                  OS_CS_unlock
 ***************************************************/

typedef ESA_RC RSTERM_FUNC_TYP (void                  ** handle,
                                INTERCEPTOR_typ          intercept_typ,
                                ESA_RC                   exit_status,
                                TIME_RANGE_rec_typ     * time_range,
                                ADMIN_PARAMS_rec_typ   * admin_params);

extern  RSTERM_FUNC_TYP   CTSInterceptorTerm; /* actual function */

typedef RSTERM_FUNC_TYP * RSTERM_FUNC_PTR;    /* pointer to func */

/****************************************************
 * Procedure Name : CTSApiProcTerm
 * Description    : RSS functions termination for the Api utility
 *                  exit_status - The process's exit status.
 * Output         :
 * Return Value   : ESA_RC / ESA_FATAL
 * Comments       : RSS function cleanup operations.
 *                  CTSAMSG termination.
 ***************************************************/

typedef ESA_RC PROCTERM_FUNC_TYP (ESA_RC    exit_status,
                                  void   ** EncrHndl,
                                  void   ** ProcHndl);

extern  PROCTERM_FUNC_TYP CTSApiProcTerm; /* actual function */

typedef PROCTERM_FUNC_TYP * PROCTERM_FUNC_PTR;    /* pointer to func */

/****************************************************
 * Procedure Name: CTSParamsModEvent
 * Description   : Notify that RSS parameters have changed
 * Input         : rss_type - Mandatory information.
 *                 rss_name - RSS name when available.
 *                            NULL if not available
 *                 handle   - initialization information
 *                            (e.g. queue file handle)
 * Output        :
 * Input/Output  : CTSAMSG params
 * Return Value  : ESA_RC
 ***************************************************/

typedef ESA_RC RSPRMMOD_FUNC_TYP (RSS_typ                  rss_type,
                                  RSS_typ                  rss_name,
                                  void                   * handle,
                                  ADMIN_PARAMS_rec_typ   * admin_prm);

extern  RSPRMMOD_FUNC_TYP   CTSParamsModEvent;   /* actual function */

typedef RSPRMMOD_FUNC_TYP * RSPRMMOD_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSUserRevokedEvent
 * Description   : User was disabled (revoked)
 * Input         : rss_type - Mandatory information.
 *                 rss_name - RSS name when available.
 *                            NULL if not available
 *                 handle   - initialization information
 *                            (e.g. queue file handle)
 *                 user name -
 * Input/Output  : CTSAMSG_params
 * Return Value  : ESA_RC
 ***************************************************/

typedef ESA_RC RSUSDIS_FUNC_TYP (RSS_typ                  rss_type,
                                 RSS_typ                  rss_name,
                                 void                   * handle,
                                 USER_typ                 user,
                                 ADMIN_PARAMS_rec_typ * admin_prm);

extern  RSUSDIS_FUNC_TYP   CTSUserRevokedEvent; /* actual function */

typedef RSUSDIS_FUNC_TYP * RSUSDIS_FUNC_PTR;    /* pointer to func */

/****************************************************
 * Procedure Name: CTSPassModEvent
 * Description   : User's password was modified
 * Input         : rss_type - Mandatory information.
 *                 rss_name - RSS name when available.
 *                            NULL if not available
 *                 user     - user name
 *                 password - new password
 *                 additional info
 * Input/Output  : CTSAMSG params
 *                 handle   - initialization information
 *                            (e.g. queue file handle)
 * Return Value  : ESA_RC
 ***************************************************/

typedef ESA_RC RSPWDMOD_FUNC_TYP (RSS_typ                  rss_type,
                                  RSS_typ                  rss_name,
                                  void                   * handle,
                                  USER_typ                 user,
                                  PASSWD_typ               passwd,
                                  ADDINFO_rec_typ        * addinfo,
                                  ADMIN_PARAMS_rec_typ   * admin_prm);

extern  RSPWDMOD_FUNC_TYP   CTSPassModEvent;   /* actual function */

typedef RSPWDMOD_FUNC_TYP * RSPWDMOD_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSUserEvent
 * Description   : User state changed - user was added, deleted
 *                 or updated.
 * Input         : rss_type - Mandatory information.
 *                 rss_name - RSS name when available.
 *                            NULL if not available
 *                 handle   - initialization information
 *                            (e.g. queue file handle)
 *                 user name   -
 *                 action type - add/del/update
 * Output        :
 * Input/Output  : CTSAMSG params
 * Return Value  : ESA_RC
 ***************************************************/

typedef ESA_RC RSUSER_FUNC_TYP (RSS_typ                  rss_type,
                                RSS_typ                  rss_name,
                                void                   * handle,
                                USER_typ                 user,
                                ACTION_typ               action,
                                ADMIN_PARAMS_rec_typ   * admin_prm);

extern  RSUSER_FUNC_TYP   CTSUserEvent;    /* actual function */

typedef RSUSER_FUNC_TYP * RSUSER_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSUGEvent
 * Description   : User group state changed - user group was added,
 *                 deleted or updated.
 * Input         : rss_type - Mandatory information.
 *                 rss_name - RSS name when available.
 *                            NULL if not available
 *                 handle   - initialization information
 *                            (e.g. queue file handle)
 *                 user group -
 *                 action type - add/del/update
 * Output        :
 * Input/Output  : CTSAMSG params
 * Return Value  : ESA_RC
 ***************************************************/

typedef ESA_RC RSUG_FUNC_TYP (RSS_typ                  rss_type,
                              RSS_typ                  rss_name,
                              void                   * handle,
                              UG_typ                   ug,
                              ACTION_typ               action,
                              ADMIN_PARAMS_rec_typ   * admin_prm);

extern  RSUG_FUNC_TYP   CTSUGEvent;    /* actual function */

typedef RSUG_FUNC_TYP * RSUG_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSConnEvent
 * Description   : User to User-Group connection state changed -
 *                 connection was added, deleted or updated.
 * Input         : rss_type - Mandatory information.
 *                 rss_name - RSS name when available.
 *                            NULL if not available
 *                 handle   - initialization information
 *                            (e.g. queue file handle)
 *                 user group  -
 *                 user name   -
 *                 action type - (connect/disconnect/update)
 * Input/Output  : CTSAMSG params
 * Return Value  : ESA_RC
 ***************************************************/

typedef ESA_RC RSU2UG_FUNC_TYP (RSS_typ                  rss_type,
                                RSS_typ                  rss_name,
                                void                   * handle,
                                UG_typ                   ug,
                                USER_typ                 user,
                                ACTION_typ               action,
                                ADMIN_PARAMS_rec_typ   * admin_prm);

extern  RSU2UG_FUNC_TYP   CTSConnEvent;    /* actual function */

typedef RSU2UG_FUNC_TYP * RSU2UG_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSOEEvent
 * Description   : OE was added, deleted
 *                 or updated.
 * Input         : rss_type - Mandatory information.
 *                 rss_name - RSS name when available.
 *                            NULL if not available
 *                 handle   - initialization information
 *                            (e.g. queue file handle)
 *                 OE name   -
 *                 action type - add/del/update
 * Output        :
 * Input/Output  : CTSAMSG params
 * Return Value  : ESA_RC
 ***************************************************/

typedef ESA_RC RSOE_FUNC_TYP   (RSS_typ                  rss_type,
                                RSS_typ                  rss_name,
                                void                   * handle,
                                OE_typ                   oe,
                                ACTION_typ               action,
                                ADMIN_PARAMS_rec_typ   * admin_prm);

extern  RSOE_FUNC_TYP   CTSOEEvent;    /* actual function */

typedef RSOE_FUNC_TYP * RSOE_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSRssStatusEvent
 * Description   : RSS status was changed.
 * Input         : rss_type - Mandatory information.
 *                 rss_name - RSS name when available.
 *                            NULL if not available
 *                 handle   - initialization information
 *                            (e.g. queue file handle)
 *                 rss_status RSS status
 * Output        :
 * Input/Output  : CTSAMSG params
 * Return Value  : ESA_RC
 * Side Effects  :
 ***************************************************/

typedef ESA_RC RSSSTATUS_FUNC_TYP(RSS_typ                  rss_type,
                                  RSS_typ                  rss_name,
                                  void                   * handle,
                                  RSS_STATUS_typ         * rss_status,
                                  ADMIN_PARAMS_rec_typ   * admin_prm);

extern  RSSSTATUS_FUNC_TYP CTSRssStatusEvent;    /* actual function */

typedef RSSSTATUS_FUNC_TYP * RSSSTATUS_FUNC__PTR;/* pointer to func */

/****************************************************
 * Procedure Name: CTSRSSLogin
 * Description   : log in under the permissions and
 *                 limitations of the requsted administrator.
 * Input         : RSS name
 *                 administrator name, group AND password
 * Output        : CTSAMSG error structure
 * Input/Output  : admin, err
 *                 handle - NULL on first call, filled by callee.
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 ****************************************************/

typedef ESA_RC RSS_LOGIN_FUNC_TYP (RSS_typ                rss_name,
                                   USER_typ               admin,
                                   UG_typ                 admin_group,
                                   PASSWD_typ             admin_passwd,
                                   LOGIN_MODE_typ         login_mode,
                                   void                ** handle,
                                   ADMIN_PARAMS_rec_typ * admin_params,
                                   ERR_STRUCT_rec_typ   * err);

extern  RSS_LOGIN_FUNC_TYP   CTSRSSLogin;        /* actual function */

typedef RSS_LOGIN_FUNC_TYP * RSS_LOGIN_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSRSSLogout
 * Description   : logout from the last OS_CS_login
 * Input         : RSS name
 *                 administrator name and group
 *                 CTSAMSG stuff
 * Output        : CTSAMSG error structure
 * Input/Output  : handle.
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 * Comments      :
 ****************************************************/

typedef ESA_RC RSS_LOGOUT_FUNC_TYP (RSS_typ                rss_name,
                                    USER_typ               admin,
                                    UG_typ                 admin_group,
                                    LOGIN_MODE_typ         login_mode,
                                    void                ** handle,
                                    ADMIN_PARAMS_rec_typ * admin_params,
                                    ERR_STRUCT_rec_typ   * err);

extern  RSS_LOGOUT_FUNC_TYP   CTSRSSLogout;        /* actual function */

typedef RSS_LOGOUT_FUNC_TYP * RSS_LOGOUT_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSRSSCheck
 * Description   : checks if RSS is alive
 * Input         : RSS name
 *                 CTSAMSG stuff
 * Output        : status RSS_UP if rss is alive
 *                        RSS_DOWN if rss is down
 *                 CTSAMSG error structure
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 ****************************************************/

typedef ESA_RC RSS_CHECK_FUNC_TYP (RSS_typ                rss_name,
                                   RSS_STATUS_typ       * status,
                                   ADMIN_PARAMS_rec_typ * admin_params,
                                   ERR_STRUCT_rec_typ   * err);

extern  RSS_CHECK_FUNC_TYP   CTSRSSCheck;        /* actual function */

typedef RSS_CHECK_FUNC_TYP * RSS_CHECK_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSInterceptorStart
 * Description   : Start the offline interceptor.
 * Input         : RSS name, host name
 * Output        : None
 * Input/Output  : admin, err
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 ****************************************************/

typedef ESA_RC RSS_START_INTERCEPT_FUNC_TYP (
        RSS_typ                rss_name,
        char                 * host_name,
        ADMIN_PARAMS_rec_typ * admin_params,
        ERR_STRUCT_rec_typ   * err);

extern  RSS_START_INTERCEPT_FUNC_TYP   CTSInterceptorStart;

typedef RSS_START_INTERCEPT_FUNC_TYP * RSS_START_INTERCEPT_FUNC_PTR;

/********************************************/
/*  Container-related functions             */
/********************************************/

/****************************************************
 * Procedure Name: CTSAddOE
 * Description   : Create new container
 * Input         : container, addinfo_data, admin_params.
 * Output        : None
 * Input/Output  : None
 * Return Value  : ESA_RC
 ***************************************************/

typedef ESA_RC ADDOE_FUNC_TYP (OE_PARAMS_rec_typ    * oe_params,
                               ADDINFO_rec_typ      * addinfo_data,
                               ADMIN_PARAMS_rec_typ * admin_params,
                               ERR_STRUCT_rec_typ   * err);

extern  ADDOE_FUNC_TYP   CTSAddOE;       /* actual function */

typedef ADDOE_FUNC_TYP * ADDOE_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSDelOE
 * Description   : Delete container
 * Input         : container, addinfo_data, admin_params.
 * Output        : None
 * Input/Output  : None
 * Return Value  : ESA_RC
 ***************************************************/

typedef ESA_RC DELOE_FUNC_TYP (OE_PARAMS_rec_typ    * oe_params,
                               ADDINFO_rec_typ      * addinfo_data,
                               ADMIN_PARAMS_rec_typ * admin_params,
                               ERR_STRUCT_rec_typ   * err);

extern  DELOE_FUNC_TYP   CTSDelOE;       /* actual function */

typedef DELOE_FUNC_TYP * DELOE_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSUpdOE
 * Description   : Update container
 * Input         : container, addinfo_data, admin_params.
 * Output        : None
 * Input/Output  : None
 * Return Value  : ESA_RC
 ***************************************************/

typedef ESA_RC UPDOE_FUNC_TYP (OE_PARAMS_rec_typ    * oe_params,
                               ADDINFO_rec_typ      * addinfo_data,
                               ADMIN_PARAMS_rec_typ * admin_params,
                               ERR_STRUCT_rec_typ   * err);

extern  UPDOE_FUNC_TYP   CTSUpdOE;       /* actual function */

typedef UPDOE_FUNC_TYP * UPDOE_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSGetOEs
 * Description   : Get containers
 * Input         : mode          - GET_ALL,
 *                                 GET_MANY (one or many),
 *                                 GET_WILD (wildcards)
 *                                 GET_FREE_HANDLE (see below)
 *                 max_oe        - # of elements in oe_params,
 *                                 objs_exist and addinfo arrays
 *                 num_oe_in     - # of elements in oe_params_in
 *                 oe_params_in  - array of num_oe_in, filled with
 *                                 OEs requested.
 *                 admin_params   -
 * Output        : actual_num   - # of OEs returned
 *                 have_more    - HAVE_MORE if more OEs, else NO_MORE
 *                 err          - error indication, message, etc.
 *                 objs_exist   - array of max_oe:
 *                                OBJ_EXIST if OE exists, else
 *                                OBJ_NOT_EXIST.
 *                 oe_params    - array of max_oe:
 *                                callee fills with OES returned
 *  Input/Output : addinfo      - array of max_OE pointers:
 *                                add.info per OE, Caller puts
 *                                requested keywords, callee returns
 *                                actual add.info.
 *                 handle       - NULL on first call, filled by callee,
 *                                used by callee to keep track.
 * Return Value  : ESA_RC
 * Side Effects  : The function may allocate memory for internal usage
 *                 and return pointer to it in *handle.
 *                 Memory will be freed when function returns
 *                 have_more==NO_MORE.
 *                 If caller stop calling the function before NO_MORE,
 *                 he MUST call the function with mode=GET_FREE_HANDLE
 *                 to free the memory.
 * Comments      : Caller must reset I/O params to their initial values
 *                 when using subsequent calls (if HAVE_MORE).
 ****************************************************/

typedef ESA_RC GETOES_FUNC_TYP (GET_OE_MODE            mode,
                                OE_typ                 oe,
                                short                  max_oe,
                                short                * actual_num,
                                HAVE_MORE_typ        * have_more,
                                void                ** handle,
                                short                  num_oe_in,
                                OE_PARAMS_rec_typ    * oe_params_in,
                                OE_PARAMS_rec_typ    * oe_params,
                                ADDINFO_rec_typ     ** addinfo,
                                OBJ_EXISTS_typ       * objs_exist,
                                ADMIN_PARAMS_rec_typ * admin_params,
                                ERR_STRUCT_rec_typ   * err);

extern  GETOES_FUNC_TYP   CTSGetOEs;       /* actual function */

typedef GETOES_FUNC_TYP * GETOES_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSIsUserInOE
 * Description   : User belong to the OE
 * Input         : user_type    - User name.
 *                 oe_mask      - OE mask.
 *                 admin_params -
 * Output        :
 * Return Value  : ESA_OK     User in OE
 *                 ESA_EOF    User not in OE
 *                 ESA_ERR    on any other situation
 ***************************************************/

typedef ESA_RC ISUSERINOE_FUNC_TYP (USER_typ               user,
                                    OE_typ                 oe_mask,
                                    ADMIN_PARAMS_rec_typ * admin_params,
                                    ERR_STRUCT_rec_typ   * err);

extern  ISUSERINOE_FUNC_TYP   CTSIsUserInOE;       /* actual function */

typedef ISUSERINOE_FUNC_TYP * ISUSERINOE_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSIsUGInOE
 * Description   : Group belong to the OE
 * Input         : ug_type      - Group name.
 *                 oe_mask      - OE mask.
 *                 admin_params -
 * Output        :
 * Return Value  : ESA_OK     Group in OE
 *                 ESA_EOF    Group not in OE
 *                 ESA_ERR    on any other situation
 ***************************************************/

typedef ESA_RC ISUGINOE_FUNC_TYP   (UG_typ                 ug,
                                    OE_typ                 oe_mask,
                                    ADMIN_PARAMS_rec_typ * admin_params,
                                    ERR_STRUCT_rec_typ   * err);

extern  ISUGINOE_FUNC_TYP   CTSIsUGInOE;       /* actual function */

typedef ISUGINOE_FUNC_TYP * ISUGINOE_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSIsOEInOE
 * Description   : OE belong to the OE
 * Input         : oe_name      - OE name.
 *                 oe_mask      - OE mask.
 *                 admin_params -
 * Output        :
 * Return Value  : ESA_OK     OE in OE
 *                 ESA_EOF    OE not in OE
 *                 ESA_ERR    on any other situation
 ***************************************************/

typedef ESA_RC ISOEINOE_FUNC_TYP   (OE_typ                 oe_name,
                                    OE_typ                 oe,
                                    ADMIN_PARAMS_rec_typ * admin_params,
                                    ERR_STRUCT_rec_typ   * err);

extern  ISOEINOE_FUNC_TYP   CTSIsOEInOE;       /* actual function */

typedef ISOEINOE_FUNC_TYP * ISOEINOE_FUNC_PTR; /* pointer to func */

/****************************************************
 * Procedure Name: CTSIsMaskMatch
 * Description   : Object is matches a Mask
 * Input         : object.
 *                 .
 *                 admin_params -
 * Output        :
 * Return Value  : ESA_OK     Mask is Match
 *                 ESA_EOF    Mask is not Match
 *                 ESA_ERR    on any other situation
 ***************************************************/

typedef ESA_RC ISMASKMATCH_FUNC_TYP (
        char                 * object,
        char                 * mask,
        OBJECT_TYPE_typ        object_type,
        MASK_TYPE_typ          mask_type,
        ADMIN_PARAMS_rec_typ * admin_params,
        ERR_STRUCT_rec_typ   * err);

extern  ISMASKMATCH_FUNC_TYP   CTSIsMaskMatch;      /* actual function*/

typedef ISMASKMATCH_FUNC_TYP * ISMASKMATCH_FUNC_PTR;/*pointer to func*/

/* BS10100 - Start */
/****************************************************
 * Procedure Name: Init_Allowed_Admins
 * Description   : Prepare the environment for handling
 *                 allowed admins:
 *                 1. Return the value of ALLOW_ADMIN_WITHOUT_PSWD
 *                    from RSSPARM.
 *                 2. Get the value of APPL_NAME from RSSPARM. and
 *                    verify it is defined in the security product.
 *
 * Parameters    : operation:
 *               : allow_prot (O) - 1 char Y/N
 *                   ALLOW_ADMIN_WITHOUT_PSWD value from RSSPARM.
 *                             Default: Y
 *                             If not required, address is NULL
 *               : appl_name - 9 chars
 *                   APPL_NAME value from RSSPARM.
 *                   If not required, address is NULL
 *
 * Return Value  : ESA_OK
 *               : ESA_FATAL
 *
 * Considerations: This function should be called when:
 *                 - COMMON_PARAMS is created.
 *                 - Login_first should be done but COMMON_PARAMS
 *                   does not exist.
 *
 ****************************************************/

/* IS10184 typedef ESA_RC  INIT_ALLOWED_ADMINS_FUNC (   */
extern  ESA_RC  INIT_ALLOWED_ADMINS_FUNC (
                               char                    * allow_prot,
                               char                    * appl_name,
                               char                    * appl_OK,
                               ESA_DIAG_COMP_typ         diag_comp,
                               ADMIN_PARAMS_rec_typ    * admin_params);
/* Is10184 - this is not neede dbecause no one uses it
/@ Actual function @/
extern  INIT_ALLOWED_ADMINS_FUNC Init_Allowed_Admins;
*/
/* BS10100 - End */

/********************************************/
/*  API function pointers structure         */
/********************************************/

typedef  struct  S_FUNC_PTR {

  APIINIT_FUNC_PTR              apiinit_ptr;
  APITERM_FUNC_PTR              apiterm_ptr;
  STRSPRM_FUNC_PTR              strsprm_ptr;
  ADDUSER_FUNC_PTR              adduser_ptr;
  UPDUSER_FUNC_PTR              upduser_ptr;
  DELUSER_FUNC_PTR              deluser_ptr;
  REVUSER_FUNC_PTR              revuser_ptr;
  UPDPASS_FUNC_PTR              updpass_ptr;
  ADDUG_FUNC_PTR                addug_ptr;
  UPDUG_FUNC_PTR                updug_ptr;
  DELUG_FUNC_PTR                delug_ptr;
  ADDU2UG_FUNC_PTR              addu2ug_ptr;
  UPDU2UG_FUNC_PTR              updu2ug_ptr;
  DELU2UG_FUNC_PTR              delu2ug_ptr;
  ADDACE_FUNC_PTR               addace_ptr;
  DELACE_FUNC_PTR               delace_ptr;
  UPDACE_FUNC_PTR               updace_ptr;
  ADDRES_FUNC_PTR               addres_ptr;
  DELRES_FUNC_PTR               delres_ptr;
  UPDRES_FUNC_PTR               updres_ptr;
  GTRSPRM_FUNC_PTR              gtrsprm_ptr;
  GTUSERS_FUNC_PTR              gtusers_ptr;
  GETUGS_FUNC_PTR               getugs_ptr;
  GTUG2UC_FUNC_PTR              gtug2uc_ptr;
  GETRES_FUNC_PTR               getres_ptr;
  GTRSACL_FUNC_PTR              gtrsacl_ptr;
  RSS_LOGIN_FUNC_PTR            rss_login_ptr;
  RSS_LOGOUT_FUNC_PTR           rss_logout_ptr;
  RSS_CHECK_FUNC_PTR            rss_check_ptr;
  RSS_START_INTERCEPT_FUNC_PTR  rss_start_intercept_ptr;
  ADDOE_FUNC_PTR                addoe_ptr;
  UPDOE_FUNC_PTR                updoe_ptr;
  DELOE_FUNC_PTR                deloe_ptr;
  GETOES_FUNC_PTR               getoes_ptr;
  ISUSERINOE_FUNC_PTR           isuserinoe_ptr;
  ISUGINOE_FUNC_PTR             isuginoe_ptr;
  ISOEINOE_FUNC_PTR             isoeinoe_ptr;
  ISMASKMATCH_FUNC_PTR          ismaskmatch_ptr;
  TRNSEVNT_FUNC_PTR             trnsevnt_ptr ;
  APIVERSION_FUNC_PTR           apiversion_ptr;

  void                         *Reserved10 ;
  void                         *Reserved9 ;
  void                         *Reserved8 ;
  void                         *Reserved7 ;
  void                         *Reserved6 ;
  void                         *Reserved5 ;
  void                         *Reserved4 ;
  void                         *Reserved3 ;
  void                         *Reserved2 ;
  void                         *Reserved1 ;

} FUNC_PTR_rec_typ,  * FUNC_PTR_rec_ptr;

#define FUNC_PTR_ARRAY_SIZE \
    (sizeof (FUNC_PTR_rec_typ) / sizeof (APIINIT_FUNC_PTR))

/* RSS Limits */
typedef  struct  S_RSS_LIMITS {
  unsigned int           max_pwd_len;
  unsigned int           max_restype_len;
  unsigned int           max_user_len;
  unsigned int           max_ace_user_len;
  unsigned int           max_oe_len;
  unsigned int           max_ace_oe_len;
  unsigned int           max_ug_len;
  unsigned int           max_ace_ug_len;
  unsigned int           max_resource_len;
  unsigned int           max_addinfo_kwd_len;
  unsigned int           max_addinfo_val_len;

} RSS_LIMITS_rec_typ, * RSS_LIMITS_rec_ptr;

/****************************************************
 * Procedure Name: CTSAPILoad
 * Description   : Load api functions
 * Input         : RSS name and type
 *                 CTSAMSG stuff
 * Output        : func ptr structure
 *                 CTSAMSG error structure
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 ****************************************************/

typedef ESA_RC API_LOAD_FUNC_TYP (
        RSS_typ                rss_name,
        FUNC_PTR_rec_typ     * func_ptr,
        RSS_LIMITS_rec_typ   * rss_limits_ptr,
        ADMIN_PARAMS_rec_typ * admin_params,
        ERR_STRUCT_rec_typ   * err);

extern  API_LOAD_FUNC_TYP   CTSAPILoad;        /* actual function */

typedef API_LOAD_FUNC_TYP * API_LOAD_FUNC_PTR; /* pointer to func */

#endif   /* ifndef ESAAPI_H_INCLUDED */
