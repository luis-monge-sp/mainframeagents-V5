/****************************************************
* Title            : Mailbox operations
* File Name        : esambx.h
* Author           : Amir
* Original Author  : Alex (DCL)
* Creation Date    :
* Description      :
* Assumptions and
*   Considerations :
* $Author:   leonid_s  $
* $Workfile:   ESAMBX.H  $
* $Revision:   1.6  $
* $Log:   //EAGLE1/versions/300/os/inc/ESAMBX.H_v  $
 *
 *    Rev 1.6   Nov 10 1998 14:25:40   leonid_s
 *
 *    Rev 1.5   Nov 10 1998 10:54:56   leonid_s
 * Lines of the files < 73
 *
 *    Rev 1.4   Oct 01 1998 14:39:16   shraga
 * Add prototypes.
 *
 *    Rev 1.3   Jan 21 1998 19:00:38   leonid_s
 * 300-Beta with AS400 & VMS changes
 *
 *    Rev 1.2   Jul 24 1997 08:42:02   leonid_s
 *     SCCSID("%Z%%M% \
 *
 *
 *    Rev 1.1   Jul 08 1997 11:50:26   avi_w
 * SAS2IBMT SeligT 15/02/2017 SAS/C to IBM C Conversion Project
*****************************************************/

#ifndef ESA_MBX_H_INCLUDED
#define ESA_MBX_H_INCLUDED

#include "globs.h"

#define ESA_MBX_WAIT    1
#define ESA_MBX_NOWAIT  2

#define ESA_MBX_NEW     1
#define ESA_MBX_EXIST   2

/* for MVS only */
#define ESA_MBX_read                 mbxcrd
#define ESA_MBX_write                mbxcwrt
#define ESA_MBX_attach               mbxcatt
#define ESA_MBX_detach               mbxcdet
#define ESA_MBX_delete               mbxcdel
#define ESA_MBX_create               mbxccre
#define ESA_MBX_get_status           mbxcgts
#define ESA_MBX_act_msg_size         mbxacts
/* SAS2IBMT #define esa_mbx_check_name_mailbox   mbxname             */
/* SAS2IBMT #define esa_mbx_check_mailbox_exist  mbxexst             */
 /* MVS */

/**********************************************************
 PROCEDURE NAME : ESA_MBX_attach
 DESCRIPTION    : This function assigns to the exist
                  mailbox specified by mailbox name.
 INPUT          : mail_name
 OUTPUT         : handle
 RETURN VALUE   : ( ESA_OK, ESA_ERR, ESA_MBX_NOT_EXIST )
************************************************************/

ESA_RC ESA_MBX_attach (MBX_QUE_NAME_D_typ   mail_name,
                       MBX_QUE_HDL_D_typ  * handle);

/***********************************************************
 PROCEDURE NAME : ESA_MBX_detach
 DESCRIPTION    : This function dassigns the mailbox spec. by
                  mailbox handle .
 INPUT          : handle
 OUTPUT         : none
 RETURN VALUE   : ( ESA_OK, ESA_ERR )
**************************************************************/

ESA_RC ESA_MBX_detach (MBX_QUE_HDL_D_typ  handle);

/***********************************************************
 PROCEDURE NAME : ESA_MBX_create
 DESCRIPTION    : This function creates a read/write mailbox messages.
                  The mailbox can be create as unique mailbox in the
                  system (parameter CONF_FLG = ESA_MBX_NEW). In this
                  case checks if the mailbox is exist. If it exist
                  forces a name generator to search unique mailbox name.
                  (in this case parameter REALLY_NAME returns new maibox
                  name).
                  If parametr CONF_FLG is ESA_MBX_EXIST no check of the
                  existence name perform.
 INPUT          : mail_name, mail_key, mail_size, mess_size, conf_flg
 OUTPUT         : really_name, handle
 RETURN VALUE   : ( ESA_OK, ESA_ERR, ESA_MBX_NAMENOGEN )
************************************************************/

ESA_RC ESA_MBX_create (MBX_QUE_NAME_D_typ   mail_name,
                       MBX_QUE_KEY_D_typ    mail_key,
                       MBX_QUE_SIZE_D_typ   mail_size,
                       MBX_QUE_SIZE_D_typ   mess_size,
                       MBX_QUE_CONF_D_typ   conf_flg,
                       MBX_QUE_NAME_D_typ   really_name,
                       MBX_QUE_HDL_D_typ  * handle);

/***********************************************************
 PROCEDURE NAME : ESA_MBX_delete
 DESCRIPTION    : This function deletes a mailbox spec. by the
                  handle ( channel ).
 INPUT          : handle
 OUTPUT         : none
 RETURN VALUE   : (ESA_OK, ESA_MBX_NOT_EXIST, ESA_ERR )
************************************************************/

ESA_RC ESA_MBX_delete (MBX_QUE_HDL_D_typ handle);

/**********************************************************
 PROCEDURE NAME : ESA_MBX_get_status
 DESCRIPTION    : This function gets status of the mailbox
                  specified by the handle ( channel )
 INPUT          : handle
 OUTPUT         : none
 RETURN VALUE   : (ESA_OK, ESA_MBX_EMPTY, ESA_MBX_NOT_EXIST,
                  ESA_ERR )
************************************************************/

ESA_RC ESA_MBX_get_status (MBX_QUE_HDL_D_typ handle);

/********************************************************
 PROCEDURE NAME : ESA_MBX_read
 DESCRIPTION    : This function reads message from the
                  Mailbox specified by the handle ( channel )
 INPUT          : handle, str, size, p_wait
 OUTPUT         : str, size
 RETURN VALUE   : ( ESA_SUCCES, ESA_ERR, ESA_MBX_NOT_EXIST,
                    ESA_MBX_EMPTY )
*************************************************************/

ESA_RC ESA_MBX_read (MBX_QUE_HDL_D_typ   handle,
                     char              * str,
                     int               * size,
                     int                 p_wait);

/**********************************************************
 PROCEDURE NAME : ESA_MBX_write
 DESCRIPTION    : This function writes message to the mailbox
                  specified by the handle (channel ).
 INPUT          : handle, str, size, p_wait
 OUTPUT         : none
 RETURN VALUE   : ESA_RC ( ESA_OK, ESA_ERR, ESA_MBX_FULL,
                  ESA_MBX_NOT_EXIST )
*************************************************************/

ESA_RC ESA_MBX_write (MBX_QUE_HDL_D_typ   handle,
                      char              * str,
                      int                 size,
                      int                 p_wait);

/**********************************************************
 PROCEDURE NAME : ESA_MBX_act_msg_size
 DESCRIPTION    : This function retrieves a specific mailbox's
                  message size.
 INPUT          : handle
 OUTPUT         : msg_size - the mailbox's defined message size
 RETURN VALUE   : ESA_RC ( ESA_OK, ESA_ERR, ESA_MBX_NOT_EXIST )
*************************************************************/

ESA_RC ESA_MBX_act_msg_size (MBX_QUE_HDL_D_typ   handle,
                             int               * msg_size);




/**********************************************************************
* SAS2IBMT Routine does not exist!!
*
* PROCEDURE NAME : esa_mbx_check_name_mailbox
* DESCRIPTION    : This subroutine checks mailbox name. If this name is
*                  exist then forces a name generator for unique
*                  mailbox name .
* INPUT   	: mail_name
* OUTPUT	: new_name
* RETURN VALUE	: ( ESA_RC: ESA_OK, ESA_ERR, CM_MBX_NAMENOGEN )
***********************************************************************

typedef ESA_RC MBX_CHECK_NAME_MAILBOX_FUNC_TYP (
                                   MBX_QUE_NAME_D_typ mail_name,
                                   MBX_QUE_NAME_D_typ new_name );

extern  MBX_CHECK_NAME_MAILBOX_FUNC_TYP  esa_mbx_check_name_mailbox;

typedef MBX_CHECK_NAME_MAILBOX_FUNC_TYP
                                   *MBX_CHECK_NAME_MAILBOX_FUNC_PTR; */

/**********************************************************************
* SAS2IBMT Routine does not exist!!
*
* PROCEDURE NAME : esa_mbx_check_mailbox_exist
* DESCRIPTION    : This subroutine checks if mailbox specified by the
*                  mailbox name is exist .
* INPUT   	: mail_name
* OUTPUT		: none
* RETURN VALUE	: ESA_RC ( ESA_OK, ESA_MBX_NOT_EXIST, ESA_ERR )
***********************************************************************

typedef ESA_RC MBX_CHECK_MAILBOX_EXIST_FUNC_TYP ( char *mail_name );
extern  MBX_CHECK_MAILBOX_EXIST_FUNC_TYP   esa_mbx_check_mailbox_exist;
typedef MBX_CHECK_MAILBOX_EXIST_FUNC_TYP
                                     *MBX_CHECK_MAILBOX_EXIST_FUNC_PTR; */


#endif /* ESA_MBX_H_INCLUDED */
