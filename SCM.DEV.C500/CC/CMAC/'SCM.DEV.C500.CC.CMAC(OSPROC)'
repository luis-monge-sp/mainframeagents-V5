/****************************************************
* Title           : ESA-OS-PROC interface
* File Name       : osproc.h
* Author          : Amir
* Creation Date   : 16-Oct-94
* Description     : Special OS functions for process-related calls
* Assumptions and
*   Considerations: Very platform-dependent
* $Author:   leonid_s  $
* $Workfile:   osproc.h  $
* $Revision:   1.16  $
* $Log:   //netapp-nt1/versions/300/os/inc/osproc.h_v  $
*
*    Rev 1.16   Nov 18 1999 10:47:40   leonid_s
*
*    Rev 1.15   15 Nov 1999 18:33:16   amir
* added (void) to new funtion
*
*    Rev 1.14   Nov 14 1999 18:49:54   avi_w
* Add exceptioin handling to Online Interceptor
*
*    Rev 1.13   Nov 10 1998 12:29:12   leonid_s
* For MVS: Defined for new long functions.
*
*    Rev 1.12   Nov 09 1998 09:45:42   leonid_s
* Release 3.0.1
*
*    Rev 1.11   Apr 20 1998 15:02:16   ajk
* Removed TABs
*
*    Rev 1.10   Apr 20 1998 14:21:36   leonid_s
*
*
*    Rev 1.9   Apr 19 1998 15:13:04   ajk
* removed TABs
*
*    Rev 1.8   Apr 19 1998 10:52:40   leonid_s
*
*    Rev 1.7   Apr 05 1998 13:12:40   leonid_s
*
*
*    Rev 1.6   Mar 15 1998 16:33:00   leonid_s
* CTSalert
*
*    Rev 1.5   Jan 21 1998 19:00:42   leonid_s
* 300-Beta with AS400 & VMS changes
*
*    Rev 1.4   Aug 12 1997 14:43:14   david_s
* OS_PROC_file_mode removed
*
*    Rev 1.3   Aug 12 1997 10:55:42   Avi_w
* Activation of offline process.
*
*    Rev 1.2   Jul 24 1997 08:42:10   leonid_s
*     SCCSID("%Z%%M% \
*
*
*    Rev 1.1   Jul 08 1997 11:50:48   avi_w
*
* SAS2IBMN NuritY 01/01/2017 SAS/C to IBM C Conversion:
*                            Remove signal processing because
*                            it depends on the HANDLE_ABENDS
*                            RSSPARM ALL_RSS parameter which
*                            is always N. If/when recovery is
*                            needed, the appropriate recovery
*                            services will have to be used.
* BS10074  NuritY 16/11/17   Enable calling OS_MVS_ddinfo
*                            from CC.
* IS10174  NuritY   15/01/18 Dynamic EXECOUT support.
*****************************************************************/

#ifndef ESAOS_PROC_H_INCLUDED
#define ESAOS_PROC_H_INCLUDED

/* for MVS only */
#define OS_PROC_get_pid             OSPR001
#define OS_PROC_fmt_name            OSPR002
#define OS_DIAG_file_mod            OSPR003
#define OS_PROC_get_host_name       OSPR004
/* SAS2IBMN #define OS_PROC_trslt_signal        OSPR005  */
/* SAS2IBMN #define OS_PROC_set_signal          OSPR006   */
#define OS_PROC_init                OSPR007
#define OS_PROC_term                OSPR008
#define OS_PROC_exit                OSPR009
#define OS_PROC_run                 OSPR010
#define OS_PROC_get_process_name    OSPR011
#define OS_PROC_check               OSPR012
#define OS_PROC_kill                OSPR013
#define OS_PROC_save_exception      OSPR014
#define OS_PROC_get_exception       OSPR015
#define OS_PROC_ddinfo              OSPR016
 /*MVS*/

#define OS_SIGSTR_MAX_LEN           30

typedef char OS_host_name_typ [ HOST_NAME_LENGTH + 1 ];
typedef char OS_pid_str_typ   [ PID_MAX_LEN + 1      ];
typedef char OS_sigstr_typ    [ OS_SIGSTR_MAX_LEN + 1];

/****************************************************
 * Procedure Name: OS_PROC_get_pid
 * Description   : Get caller's PID (process id), or some other
 *                 entity that uniquely identifies the process
 *                 in the OS.
 * Input         : None
 * Output        : Pid string. NULL is legal
 *                 if a meaningful value can not be returned.
 * Input/Output  :
 * Return Value  : ESA_RC
 ***************************************************/

extern ESA_RC OS_PROC_get_pid (OS_pid_str_typ   pid,
                               void           * os_proc_handle);

/****************************************************
 * Procedure Name: OS_PROC_get_host_name
 * Description   : Get caller's host name.
 * Input         : None
 * Output        : Host string. NULL is illegal
 * Input/Output  :
 * Return Value  : ESA_RC
 ***************************************************/

extern ESA_RC OS_PROC_get_host_name (OS_host_name_typ   host_name,
                                     void             * os_proc_handle);

/****************************************************
 * Procedure Name: OS_PROC_fmt_name
 * Description   : Given a format string with a single %s in it,
 *                 replace the %s with a unique string for the
 *                 calling process/task.
 * Input         : const char *, buffer max length
 * Output        :
 * Input/Output  : Buffer
 * Return Value  : ESA_ERR if input buffer is too short
 *                 ESA_OK  if OK
 * Comments      : It's not an error to pass a format without
 *                 an '%s' in it. In this case, the output will
 *                 be an exact copy of the format.
 ***************************************************/

extern ESA_RC OS_PROC_fmt_name (const char * format,
                                int          buflen,
                                char       * fname,
                                void       * os_proc_handle);

/* SAS2IBMN - start  */
/*****************************************************************
*                                                                *
* SAS2IBMN - Remove signal processing                            *
*                                                                *
* Signal processing is removed because it depends on the         *
* HANDLE_ABENDS RSSPARM ALL_RSS parameter which is always N.     *
* If/when recovery is needed, these routines will have to be     *
* written using the appropriate IBM C or LE services.            *
*                                                                *
******************************************************************
 ****************************************************
 * Procedure Name: OS_PROC_trslt_signal
 * Description   : Translates signal number to signal
 *                 name.
 * Input         : Signal number.
 * Output        : Signal string.
 * Input/Output  :
 * Return Value  : none.
 * Comments      : When the signal is unknown/illegal -
 *                 the function should return a string
 *                 of the signal number.
 *                 The returned string must be terminated
 *                 by NULL character.
 ***************************************************

extern void OS_PROC_trslt_signal (int             signum,
                                  OS_sigstr_typ   sigstr,
                                  void          * os_proc_handle);

 ****************************************************
 * Procedure Name: OS_PROC_set_signal
 * Description   : Activate platform's interesting signals
 * Input         : Exit handler's function address.
 *                 Main process type.
 * Output        :
 * Input/Output  :
 * Return Value  : ESA_FATAL if failed to activate signal
 * Side Effects  :
 * Comments      :
 ***************************************************

extern ESA_RC OS_PROC_set_signal (void             (* func)(int),
                                  ESA_MAIN_NAME_typ   main_type,
                                  void              * os_proc_handle);
*/
/* SAS2IBMN - end    */

/****************************************************
 * Procedure Name: OS_PROC_save_exception
 * Description   : Save last exception code
 * Input         : Exception code
 *
 * Output        :
 * Input/Output  :
 * Return Value  : ESA_SUCCESS always
 * Side Effects  :
 * Comments      :
 ***************************************************/

extern ESA_RC OS_PROC_save_exception (int signum);

/****************************************************
 * Procedure Name: OS_PROC_get_exception
 * Description   : Retrieve last exception id save by
 *                 OS_PROC_save_exception
 * Input         :
 * Output        :
 * Input/Output  :
 * Return Value  : Last exception code
 * Side Effects  :
 * Comments      :
 ***************************************************/

extern int OS_PROC_get_exception (void);

/****************************************************
 * Procedure Name: OS_PROC_init
 * Description   : Perform OS-related initialization steps
 *                 upon process initialization.
 * Input         : Main_type - the main process type.
 * Output        :
 * Input/Output  : handle.
 * Return Value  : ESA_FATAL if failed.
 * Side Effects  :
 * Comments      :
 ***************************************************/

extern ESA_RC OS_PROC_init (ESA_MAIN_NAME_typ    main_type,
                            void              ** os_proc_handle,
                            int                  argc_prm,
                            char              ** argv_prm);

 /* BS10074 - start */
/****************************************************
 * Procedure Name: OS_PROC_ddinfo
 * Description   : Retrieve dsname and member name
 *                 of a re-allocated DD.
 * Input         : OS-MVS-ddinfo parameters
 * Output        :
 * Input/Output  :
 * Return Value  : ESA_FATAL if failed.
 * Side Effects  :
 * Comments      :
 ***************************************************/

ESA_RC OS_PROC_ddinfo ( char                        * ddn,
                        char                        * file_name,
                        int                           issue_err_msg,
                        CTSAMSG_DEST_TABLE_rec_typ  * dest,
                        CTSAMSG_HANDLE_rec_typ      * msgs,
        /* IS10174 */   int                           parm_num,
        /* IS10174 */   ... );
 /* BS10074 - end   */

/****************************************************
 * Procedure Name: OS_PROC_term
 * Description   : Perform OS-related termination steps
 *                 upon process termination.
 * Input         : Main_type - the main process type.
 * Output        :
 * Input/Output  : handle
 * Return Value  : ESA_FATAL if failed.
 * Side Effects  :
 * Comments      :
 ***************************************************/

extern ESA_RC OS_PROC_term (ESA_MAIN_NAME_typ    main_type,
                            void              ** os_proc_handle);

/****************************************************
 * Procedure Name: OS_PROC_exit
 * Description   : Invoke OS' exit activities.
 * Input         : signum - the signal that caused the activation
 *                          of exit handler.
 *                 Main_type - Main process type.
 * Output        :
 * Input/Output  :
 * Return Value  : None
 * Side Effects  :
 * Comments      :
 ***************************************************/

extern void OS_PROC_exit (int                 signum,
                          ESA_MAIN_NAME_typ   main_type,
                          void              * os_proc_handle);

/****************************************************
 * Procedure Name: OS_PROC_run
 * Description   : This function runs a detached process
 *                 and transfers parameters to the new
 *                 process using the logical names in
 *                 the logical names group table .
 * Input         : proc_path - In case the value of proc_path is
 *                             NULL - the path is <CTSA>\EXE
 *                 proc_name - Including extention
 *                 param_list - A null terminated list of
 *                              parameters separated by space
 * Output        : procid
 * Input/Output  :
 * Return Value  : ESA_RC
 * Side Effects  :
 * Comments      :
 ***************************************************/

extern ESA_RC OS_PROC_run (char           * application,
                           char           * proc_path,
                           char           * param_list,
                           OS_pid_str_typ   pid,
                           void           * os_proc_handle);

/****************************************************
  * Procedure Name: OS_PROC_get_process_name
  * Description   : Get caller's process name
  * Input         : None
  * Output        : Process name string
  * Input/Output  :
  * Return Value  : ESA_RC
  * Side Effects  :
  ***************************************************/

extern ESA_RC OS_PROC_get_process_name (char  * proc_name,
                                        short   max_len,
                                        void  * os_proc_handle);

/****************************************************
  * Procedure Name: OS_PROC_check
  * Description   : Check if proc is on
  * Input         : procid
  * Output        :
  * Input/Output  :
  * Return Value  : ESA_RC
  * Side Effects  :
  ***************************************************/

extern ESA_RC OS_PROC_check (OS_pid_str_typ procid);

/****************************************************
  * Procedure Name: OS_PROC_kill
  * Description   : Kill proc
  * Input         : procid
  * Output        :
  * Input/Output  :
  * Return Value  : ESA_RC
  * Side Effects  :
  ***************************************************/

extern ESA_RC OS_PROC_kill (OS_pid_str_typ procid);

#endif /* ESAOS_PROC_H_INCLUDED */
