/****************************************************
* Title:            ESA-OS-CS interface
* File Name:        esaoscs.h
* Author:           Yaniv Yassour
* Creation Date:    18-Apr-94
* Description:      Special OS functions for CS
* Assumptions and
*   Considerations:
*****************************************************/

/*
 * Version Information:
 * ====================
 * File name       : esaoscs.h
 * Created by      : leonid_s
 * Created on      : Fri May 09 18:25:50 2003
 * Last Modified by: leonid_s
 * Last Modified on: Fri May 09 18:25:51 2003
 *
 */

/**************************************************************
* Mod.Id   Who      When     Description                      *
* -------- -------- -------  -------------------------------- *
* WS10054  SeligT   04/08/16 Add ENQ/DEQ SYSTEMS RNL Parameter*
* IS10139  SeligT   28/08/16 Just added WS10054 note above    *
* BS10076  SeligT   11/12/17 Organize Connector Locking       *
*                            Functions and Structures         *
* BS10100  KailasP  15/04/19 Read Application admin           *
*                            credentials.                     *
* IS10184  NuritY   31/08/21 Improve scripts performance      *
**************************************************************/

#ifndef ESAOSCS_H_INCLUDED
#define ESAOSCS_H_INCLUDED

#include STDIO

#define OS_CS_init             CSEF902
#define OS_CS_term             CSEF903
#define OS_CS_script           CSEF904
#define OS_CS_attach_rss       CSEF906
#define OS_CS_wait             CSEF907
#define OS_CS_lock             CSEF908
#define OS_CS_unlock           CSEF909
#define OS_CS_lock_init        CSEF910
#define OS_CS_lock_term        CSEF911
#define OS_CS_detach_rss       CSEF912
#define OS_CS_get_passwd       CSEF913
#define OS_LocalTime           CSEF915
#define OS_CS_DO_LOCK          CSEF916                    /* WS10054 */
#define OS_CS_init_cmnprms     CSEF917
#define OS_CS_term_cmnprms     CSEF918

/********************************************/
/*  Function numbers                        */
/********************************************/

#define FUNC_OS_CS_init        121
#define FUNC_OS_CS_term        122
#define FUNC_OS_CS_script      123
#define FUNC_OS_CS_attach_rss  124
#define FUNC_OS_CS_wait        125
#define FUNC_OS_CS_lock        126
#define FUNC_OS_CS_unlock      127
#define FUNC_OS_CS_lock_init   128
#define FUNC_OS_CS_lock_term   129
#define FUNC_OS_CS_detach_rss  130
#define FUNC_OS_CS_get_passwd  131

/********************************************/
/*  typedef length                          */
/********************************************/

/* Note: MAX_FILENAME_LEN is defined in platform.h */

#define SCRIPT_NAME_LEN    MAX_FILENAME_LEN

/********************************************/
/*  Variables definitions                   */
/********************************************/

typedef char SCRIPT_NAME_typ [SCRIPT_NAME_LEN + 1];

/********************************************/
/* Resource type def.                       */
/********************************************/

typedef enum res_lock {
    LOCK_RES_UNKNOWN, LOCK_RES_FILE
} LOCK_RES_TYP_typ;

/********************************************/
/* Lock scope                               */
/********************************************/

typedef enum lock_scope {
    SCOPE_LOCAL, SCOPE_REMOTE
} LOCK_SCOPE_typ;

/********************************************/
/*  Typedefs for action                     */
/********************************************/

typedef enum pre_post_act {
    SCRIPT_PRE, SCRIPT_POST
} SCRIPT_ACTION_typ;

/***************************************************/
/* Defintions for entity information names         */
/***************************************************/

/* admin structure */

#define C_ADM_ID           "ADM_ID"  /* admin name     */
#define C_ADM_G            "ADM_G"   /* admin group    */
#define C_ADM_VER          "ADM_VER" /* RSS version    */
#define C_ADM_MOD          "ADM_MOD" /* mode of action */
/* BS10100 - Start */
#define C_APP_ADM_ID       "APP_ADM_ID" /* App admin*/
#define C_APP_ADM_PASSWD   "APP_ADM_PASSWD" /* App admin pwd*/
/* BS10100 - Ends */

/* user structure  */

#define C_ADM_PASSWD       "ADM_PASSWD"
#define C_ADM_PASSWD_LEN   "ADM_PASSWD_LEN"
#define C_ADM_AUTO_CHANGE  "ADMIN. AUTO-CHANGE"
#define C_ADM_INTERVAL     "ADMIN. INTERVAL"
#define C_ADM_DATE         "ADM_DATE"
#define C_ADM_TIME         "ADM_TIME"
#define C_ADM_NAME         "ADM_NAME"

#define C_MEMBER_TYPE      "MEMBER_TYPE"/* user type      */
#define C_USER_ID          "USER_ID"    /* user id        */
#define C_USER_OE_PARENT   "USER_OE_PR" /* parent group   */
#define C_USER_GROUP_DEF   "UG_DEF"     /* default group  */
#define C_USER_PASSWD      "USER_PWD"   /* password       */
#define C_USER_PASSWD_LIFE "PWD_LIFE"   /* password life  */
#define C_USER_REV_STATUS  "USER_STA"   /* status revoke  */
#define C_USER_ADMIN       "USER_ADMIN" /* user types     */
#define C_DEF_UG_ACTION    "DEF_UG_ACT" /* def.group act.changed*/

/* user group structure */

#define C_GROUP_ID        "GROUP_ID"    /* group id        */
#define C_GROUP_OE_PARENT "GROUP_OE_PR" /* group parent oe */
#define C_GROUP_PARENT    "GROUP_PR"    /* parent group    */

/* container structure  */

#define C_OE_ID           "OE_ID"       /* container id     */
#define C_OE_PARENT       "OE_PR"       /* parent container */
#define C_OE_ATTR         "OE_ATTR"     /* container's attr */

/* user to group connection structure */

#define C_U2UG_MISC       "U2UG_MSC"    /* misc             */
#define C_U2UG_ATTRS      "U2UG_ATR"    /* attribute        */
#define C_U2UG_DEF_GROUP  "U2UG_DEFUG"  /* user's def group */

/* resource structure */

#define C_RES_ID          "RES_ID"      /* resource id    */
#define C_RES_TYP         "RES_TYP"     /* resource type  */
#define C_RES_OE_PARENT   "RES_OE_PR"   /* res.parent oe  */

/* ACE structure  */

#define C_ACE_USER        "ACE_USR"     /* user           */
#define C_ACE_GROUP       "ACE_UG"      /* group          */
#define C_ACE_CONTAINER   "ACE_OE"      /* Container      */
#define C_ACE_TYPE        "ACE_TYPE"    /* ace type       */
#define C_ACE_ATTRIBS     "ACE_ATTR"    /* ace attribute  */
#define C_ACE_PLACE       "ACE_PLCE"    /* ace place      */

/* others  */

#define C_RSS_NAME        "RSS_NAME"     /* RSS name        */
#define C_RSS_TYPE        "RSS_TYPE"     /* RSS type        */
#define C_RSS_STATUS      "RSS_STATUS"   /* RSS status      */
#define C_FUNC_NAME       "FUNC_NAME"    /* api func name   */
#define C_ACTION          "ACTION"       /* action pre/post */
#define C_ACT_RC          "ACT_RC"       /* return code     */
#define C_PRE_RC          "PRE_RC"       /* return code     */
#define C_MIN_PASS_LEN    "MIN_PASS_LEN" /* from rss params */
#define C_MAX_EXPIRE      "MAX_EXPIRE"   /* from rss params */
#define C_MAX_LOGINS      "MAX_LOGINS"   /* from rss params */

#define C_CTSA1_KWRD_HDR "CTSA1_"    /* CTSA1 script keyword header  */
#define C_SCRIPT_RC      "CTSA1_RC"  /* script return code keyword   */
#define C_SCRIPT_MSG     "CTSA1_MSG" /* Message from script (CTSAMSG)*/

#define C_INTERCEPT_NUM        "CTSA3_NUM_INTERCEPTS"
#define C_INTERCEPT_TYPE       "CTSA3_INTERCEPT_TYPE_"
#define C_INTERCEPT_OBJ_TYPE   "CTSA3_OBJECT_TYPE_"
#define C_INTERCEPT_CONTAINER  "CTSA3_CONTAINER_"
#define C_INTERCEPT_USER       "CTSA3_USER_"
#define C_INTERCEPT_GROUP      "CTSA3_GROUP_"
#define C_INTERCEPT_RSS        "CTSA3_RSS_"

#define C_CTSA3_KWRD_HDR       "CTSA3_"   /* Danko */

/* More others that are used by CS... */

#define C_NUM_MSGS        "NUM_MSGS"    /* Number of messages    */
#define C_MSG_LEN         "MSG_LEN"     /* Single message length */
#define C_PRE_NAME        "PRE_SCRIPT_NAME"  /* PRE script name  */
#define C_POST_NAME       "POST_SCRIPT_NAME" /* POST script name */
#define C_FROM_DATE       "FROM_DATE"   /* Starting date */
#define C_FROM_TIME       "FROM_TIME"   /* Starting time */
#define C_TO_DATE         "END_DATE"    /* End date */
#define C_TO_TIME         "END_TIME"    /* End time */
#define C_CHEKSUM         "CHECKSUM"    /* Checksum */
#define C_OPERATION       "OPERATION"   /* ADD/DEL/UPD entity */
#define C_DWNLD_SYNC_METHOD "DWNLD_SYNC_METHOD"/* ALL/MANY/CONTAINER */
#define C_SYNC_TYPE       "SYNC_TYPE"   /* FULL/PARTIAL */
#define C_DWNLD_TYPE      "DWNLD_TYPE"  /* INITIAL/INCREMENT */
#define C_DWNLD_FROM      "DWNLD_FROM"  /* LIST/USER/GROUP/CONNECT/OE*/
#define C_DWNLD_LIST      "DWNLD_LIST"  /* NOT/ALL/YES...*/
#define C_LOGEVT          "LOG_EVENT"   /* Log event text */
#define C_SEVERITY        "SEVERITY"    /* Severity of a alert/event*/
#define C_HOTPATH         "HOT_PATH"    /* Hot path */
#define C_NUM_KWDS        "NUM_KWDS"    /* Number of keywords */
#define C_ADDINFO_CHKSUM  "ADDINFO_CHK" /* Checksumable addinfo */
#define C_KWD_LEN         "KWD_LEN"     /* Keyword length */
#define C_KWD_VAL_LEN     "KWD_VAL_LEN"      /* Keyword VALUE length */
#define C_RSS_TYP_VAL_LEN "RSS_TYPE_VAL_LEN" /* RSS type VALUE length*/
#define C_KEYWORD         "KEYWORD"     /* Keyword string */
#define C_GET_MODE        "GET_MODE"    /* Get mode of ALL,MANY,etc.*/
#define C_OBJ_EXIST       "OBJ_EXIST"
#define C_TIME            "TIME"
#define C_DATE            "DATE"
#define C_ADDINFO_PAIRS   "ADDINFO_PAIRS"
#define C_ADDINFO_KWD     "ADDINFO_KWD"
#define C_ADDINFO_VAL     "ADDINFO_VAL"
#define C_ADDINFO_TYP     "ADDINFO_TYP"
#define C_SNGL_MSG        "SNGL_MSG"
#define C_STRUCTURE       "STRUCTURE"
#define C_ENUM            "ENUM"
#define C_API             "API"
#define C_MODE            "MODE"
#define C_SW_LOGIN        "SW_LOGIN"
#define C_LOGINOUT        "LOGINOUT"
#define C_VERSION         "VERSION"
#define C_MAX_MSG_SIZE    "MAX_MSG_SIZE"
#define C_KWD_CHKSUM_TYPE "KWD_CHEKSUM_TYPE"
#define C_KWD_ADDTYPE     "KWD_ADDINFO_TYPE"
#define C_PRM_NAME        "PARAMETER_NAME"
#define C_PRM_VALUE       "PARAMETER_VALUE"

#define C_LOGIN_FIRST     "First login"
#define C_LOGIN           "Login"
#define C_LOGOUT_LAST     "Last logout"
#define C_LOGOUT          "Logout"

/*********************************************
 *    RSSAPI components                      *
 ********************************************/

#define C_PRESCRIPT_ACTV  "PRESCRIPT_ACT"
#define C_ACTUAL_ACTV     "ACTUAL_ACT"
#define C_POSTSCRIPT_ACTV "POSTSCRIPT_ACT"

/********************************************
 *          Function Definitions            *
 *******************************************/

/****************************************************
 * Procedure Name: OS_CS_init
 *
 * Description   : CONTROL/SA init
 *
 * Input         : main name
 *
 * Input/output  : handle
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 *
 ***************************************************/

extern ESA_RC OS_CS_init (const char              * main_name,
                          CTSAMSG_PARAMS_rec_typ  * cts_handle,
                          void                   ** handle);

/* IS10184 - start */
/****************************************************
 * Procedure Name: OS_CS_init_cmnprms
 *
 * Description   : CONTROL/SA init
 *
 * Input         : common_params owner
 *               : admin_params
 *
 * Input/output  : handle
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 *
 ***************************************************/

extern ESA_RC OS_CS_init_cmnprms(
                          char                      owner,
                          ADMIN_PARAMS_rec_typ    * admin_params);
/* IS10184 - end */

/****************************************************
 *
 * Procedure Name: OS_CS_term
 *
 * Description   : CONTROL/SA term
 *
 * Input         : main name
 *
 * Input/output  : handle
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 *
 ****************************************************/

extern ESA_RC OS_CS_term (const char              * main_name,
                          CTSAMSG_PARAMS_rec_typ  * cts_handle,
                          void                   ** handle);

/* IS10184 - start */
/****************************************************
 * Procedure Name: OS_CS_term_cmnprms
 *
 * Description   : CONTROL/SA term
 *
 * Input         : common_params owner
 *               : admin_params
 *
 * Input/output  : handle
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 *
 ***************************************************/

extern ESA_RC OS_CS_term_cmnprms(
                          char                      owner,
                          ADMIN_PARAMS_rec_typ    * admin_params);
/* IS10184 - end */

/****************************************************
 *
 * Procedure Name: OS_CS_script
 *
 * Description   : Execute the platform native language script
 *
 * Input         : RSS name and type
 *                 script directory
 *                 script name
 *                 func_id     - the function number as defined in
 *                               esaapi.h.
 *                 action      - SCRIPT_PRE SCRIPT_POST [enum]
 *                 entity_info - contains all the non-addinfo
 *                                information including admin, function
 *                                name, action name pre post, and
 *                                structure fields.
 *                 addinfo     - The action addinfo as it came from
 *                               the ESS.
 *                 cur_info    - For PRE scripts on UPDATE & DELETE
 *                               requests.
 *                               Contains both the entity info &
 *                               addinfo of the current details of the
 *                               object (before any change was done).
 *                               In addition, the info contains the
 *                               "relative position" ACE details (where
 *                               applicable) in ADD ACE request.
 * Input/Output  : admin structure
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any failure situation
 *
 ****************************************************/

extern ESA_RC OS_CS_script (RSS_typ                rss_name,
                            RSS_typ                rss_type,
                            SCRIPT_NAME_typ        script_dir,
                            char                 * script_name,
                            int                    func_id,
                            SCRIPT_ACTION_typ      action,
                            ADDINFO_rec_typ      * entity_info,
                            ADDINFO_rec_typ      * addinfo,
                            ADDINFO_rec_typ      * cur_info,
                            ADDINFO_rec_typ      * RssPrmInfo,
                            ADMIN_PARAMS_rec_typ * admin_params);

/****************************************************
 *
 * Procedure Name: OS_CS_attach_rss
 *
 * Description   : load API functions
 *
 * Input         : RSS_name and type
 *                 CTSAMSG stuff
 *                 Admin params
 *
 * Output        : func ptr structure
 *                 CTSAMSG error structure
 *                 Handle
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 *
 ****************************************************/

extern ESA_RC OS_CS_attach_rss (RSS_typ                 rss_name,
                                RSS_typ                 rss_type,
                                FUNC_PTR_rec_typ      * func_ptr,
                                RSS_LIMITS_rec_typ    * rss_limits_ptr,
                                ADMIN_PARAMS_rec_typ  * admin_params,
                                ERR_STRUCT_rec_typ    * err,
                                void                 ** handle);

/****************************************************
 *
 * Procedure Name: OS_CS_detach_rss
 *
 * Description   : unload API functions
 *
 * Input         : Handle
 *                 CTSAMSG stuff
 *                 Admin params
 *
 * Output        : func ptr structure
 *                 CTSAMSG error structure
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 *
 ****************************************************/

extern ESA_RC OS_CS_detach_rss (ADMIN_PARAMS_rec_typ  * admin_params,
                                ERR_STRUCT_rec_typ    * err,
                                void                 ** handle);

/****************************************************
 *
 * Procedure Name: OS_CS_wait
 *
 * Description   : suspend caller for a while
 *
 * Input         : milliseconds
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 *
 * Comments      : Implemented as a macro on UNIX, since sleep(3) is
 *                 available on all UNIXen.
 *
 ****************************************************/

extern ESA_RC OS_CS_wait (int millis);

/****************************************************
 *
 * Procedure Name: OS_CS_lock_init
 *
 * Description   : lock resource init function
 *
 * Input         : Resource name
 *                 Resource type (LOCK_FILE or die!)
 *
 *                 File handle - reserved for future use
 *                 CTSAMSG stuff
 *
 * output        : Pointer to handle (as in ESAAPI handles)
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_LOCKED if the file is locked by other
 *                            process
 *                 ESA_FATAL  on any other fail situation
 *
 ****************************************************/

extern ESA_RC OS_CS_lock_init (RESOURCE_typ              res_name,
                               /* BS10076 LOCK_RES_TYP_typ res_typ, */
                               void                  ** handle,
                               /* BS10076 FILE        * file_handle, */
                               int                      total,   /* BS10076 */
                               int                      interval,/* BS10076 */
                               LOCK_SCOPE_typ            lock_scope,
                               CTSAMSG_PARAMS_rec_typ  * msg_params);

/****************************************************
 *
 * Procedure Name: OS_CS_lock_term
 *
 * Description   : cleanup after last lock
 *
 * Input         : CTSAMSG stuff
 *
 * Input/output  : Handle for the unlock function
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any other fail situation
 *
 ****************************************************/

extern ESA_RC OS_CS_lock_term (void                   ** handle,
                               CTSAMSG_PARAMS_rec_typ  * msg_params);

/****************************************************
 *
 * Procedure Name: OS_CS_lock
 *
 * Description   : lock files
 *
 * Input         : - handle from lock_init
 *                 - wait time  How long (seconds) to try before
 *                   giving up.
 *                   Polling interval is platform-dependent
 *                   defined by OS_LOCK_INTERVAL (seconds)
 *                 - CTSAMSG stuff
 *
 * output        : None
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_LOCKED if the file is locked by other
 *                            process
 *                 ESA_FATAL  on any other fail situation
 *
 ****************************************************/

extern ESA_RC OS_CS_lock (void                   * handle,
                          /* BS10076 int           wait_sec,         */
                          CTSAMSG_PARAMS_rec_typ * msg_params);

/* * * * * * * * * * Start of WS10054 * * * * * * * * * */
/****************************************************
 *
 * Procedure Name: OS_CS_DO_LOCK
 *
 * Description   : lock files
 *
 * Input         : - handle from lock_init
 *                 - wait time  How long (seconds) to try before
 *                   giving up.
 *                   Polling interval is platform-dependent
 *                   defined by OS_LOCK_INTERVAL (seconds)
 *                 - CTSAMSG stuff
 *
 * output        : None
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_LOCKED if the file is locked by other
 *                            process
 *                 ESA_FATAL  on any other fail situation
 *
 ****************************************************/

extern ESA_RC OS_CS_DO_LOCK (void                   * handle,
                             /* BS10076 int            wait_sec,     */
                             CTSAMSG_PARAMS_rec_typ * msg_params,
                             char                   * exc_shr);
/* * * * * * * * * *  End of WS10054  * * * * * * * * * */

/****************************************************
 *
 * Procedure Name: OS_CS_unlock
 *
 * Description   : unlock resource
 *
 * Input         : handle
 *                 CTSAMSG stuff
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any other fail situation
 *
 ****************************************************/

extern ESA_RC OS_CS_unlock (void                   * handle,
                            CTSAMSG_PARAMS_rec_typ * msg_params);

/****************************************************
 *
 * Procedure Name: OS_CS_get_passwd
 *
 * Description   : Request by prompt_str to enter password
 *
 * Input         : prompt_str
 * Output        : passwd_str. See comments below
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any other fail situation
 *
 * Comments      : Max length of passwd_str is MAX_RSS_PASSWD_LEN
 *                 as defined in platform.h
 *
 ****************************************************/

extern ESA_RC OS_CS_get_passwd (char * prompt_str,
                                char * passwd_str);

extern ESA_RC OS_LocalTime  (unsigned short * Year,
                             unsigned short * Month, /*Jan=1, Feb=2, etc. */
                             unsigned short * Day,
                             unsigned short * Hour,
                             unsigned short * Minute,
                             unsigned short * Second,
                             unsigned short * Milliseconds);

#endif   /* ESAOSCS_H_INCLUDED */
