/**********************************************************************
*
*	H Source:  esalist.h
*	Description:	Linked list management functions
*	%created_by:	leonid_s %
*	%date_created:	Mon May 12 08:06:57 2003 %
*   %full_filespec: esalist.h#4:incl:1 %
*
**********************************************************************/

#ifndef ESALIST_H_included
#define ESALIST_H_included

/* for MVS only */
#define ESALIST_init               LIST101
#define ESALIST_append             LIST102
#define ESALIST_insert             LIST103
#define ESALIST_delete             LIST104
#define ESALIST_clear              LIST105
#define ESALIST_reset              LIST106
#define ESALIST_next_ptr           LIST107
#define ESALIST_next               LIST108
#define ESALIST_search             LIST109
#define ESALIST_search_exact_match LIST110
 /*MVS*/

typedef struct entry {
    void           * ptr;
    int              size;
    struct entry   * prev;
    struct entry   * next;
} ESALIST_entry_typ;

typedef struct {
    int                   count;
    ESALIST_entry_typ   * first;
    ESALIST_entry_typ   * curr;
} ESALIST_handle_typ;

/***************************************************************
 * Procedure Name: ESALIST_init
 * Description   : Initialises the list.
 *                 must be called before any append or insert
 *                 (initializes list's handle)
 * Input         : list    -    list's handle
 *
 * Output        : NONE
 * Return Value  : ESA_OK       -    upon success
 *                 ESA_FATAL    -    if list pointer is NULL
 **************************************************************/

ESA_RC ESALIST_init (ESALIST_handle_typ * list);

/***************************************************************
 * Procedure Name: ESALIST_append
 * Description   : Appends new list item to the list's bottom
 *                 the user's data is copied to malloced memory.
 * Input         : list   -    list's handle
 *                 ptr    -    pointer to the user's data
 *                 size   -    size of user's data
 * Output        : NONE
 * Return Value  : ESA_OK       -    upon success
 *                 ESA_FATAL    -    on any fail situation
 **************************************************************/

ESA_RC ESALIST_append (ESALIST_handle_typ * list,
                       void               * ptr,
                       int                  size);

/***************************************************************
 * Procedure Name: ESALIST_insert
 * Description   : Inserts new list item after current one
 *                 memory allocation considerations are the
 *                 same as for append
 * Input         : list   -    list's handle
 *                 ptr    -    pointer to the user's data
 *                 size   -    size of user's data
 * Output        : NONE
 * Return Value  : ESA_OK       -    upon success
 *                 ESA_FATAL    -    on any fail situation
 **************************************************************/

ESA_RC ESALIST_insert (ESALIST_handle_typ * list,
                       void               * ptr,
                       int                  size);

/***************************************************************
 * Procedure Name: ESALIST_delete
 * Description   : Deletes current list item, the previouse
 *                 item becomes current, if no previouse
 *                 item exists (the first), current pointer is
 *                 set to NULL (before the first)
 *                 Frees the memory allocated by, append or insert.
 * Input         : list    -    list's handle
 * Output        : NONE
 * Return Value  : ESA_OK       -    upon success
 *                 ESA_EOF      -    the current is NULL
 *                 ESA_FATAL    -    on any fail situation
 **************************************************************/

ESA_RC ESALIST_delete (ESALIST_handle_typ * list);

/***************************************************************
 * Procedure Name: ESALIST_clear
 * Description   : Deletes all items from the list
 *                 call subsequently to delete
 * Input         : list    -    list's handle
 * Output        : NONE
 * Return Value  : ESA_OK       -    upon success
 *                 ESA_FATAL    -    on any fail situation
 **************************************************************/

ESA_RC ESALIST_clear (ESALIST_handle_typ * list);

/***************************************************************
 * Procedure Name: ESALIST_reset
 * Description   : Sets the current pointer to NULL (before the first)
 * Input         : list    -    list's handle
 * Output        : NONE
 * Return Value  : ESA_OK       -    upon success
 *                 ESA_FATAL    -    on any fail situation
 **************************************************************/

ESA_RC ESALIST_reset (ESALIST_handle_typ * list);

/***************************************************************
 * Procedure Name: ESALIST_next_ptr
 * Description   : Moves current pointer to the next item and
 *                 returns the pointer to the memory wich holds
 *                 current item's user data
 *                 (can be used for updates of the user data )
 * Input         : list    -    list's handle
 * Output        : *ptr    -    pointer to the user's data
 *                 size    -    size of user's data
 * Return Value  : ESA_OK       -    upon success
 *                 ESA_EOF      -    no next item exist (the last one)
 *                 ESA_FATAL    -    on any fail situation
 **************************************************************/

ESA_RC ESALIST_next_ptr (ESALIST_handle_typ  * list,
                         void               ** ptr,
                         int                 * size);

/***************************************************************
 * Procedure Name: ESALIST_next
 * Description   : Moves current pointer to the next item and
 *                 copies current item's user data to the caller memory
 *                 (can be used for read only of the user data )
 * Input         : list    -    list's handle
 *                 ptr     -    pointer to the caller memory
 *                 in_size -    size of caller memory area
 * Output        : *ptr     -    user's data
 *                 out_size -    size of user's data
 * Return Value  : ESA_OK     - upon success
 *                 ESA_EOF    - no next item exist (the last one)
 *                 ESA_FATAL  - on any fail situation
 *                              (including the in_size < out_size )
 **************************************************************/

ESA_RC ESALIST_next (ESALIST_handle_typ * list,
                     void               * ptr,
                     int                  in_size,
                     int                * out_size);

void * ESALIST_search_exact_match (ESALIST_handle_typ *list,
                                   void               *ptr,
                                   int                 size);

void * ESALIST_search (ESALIST_handle_typ *list,
                       void               *ptr,
                       int                 size );


#endif /* ESALIST_H_included */
