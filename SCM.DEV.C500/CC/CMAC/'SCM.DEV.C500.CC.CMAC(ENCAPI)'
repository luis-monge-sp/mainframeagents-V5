/*********************************************************************
* Title:            ENC-API interface
* File Name:        encapi.h
* Author:           Aviw
* Creation Date:    08-Nov-94
* Description:      API for encryption services.
* Assumptions and
*   Considerations:
*********************************************************************/

/*
 * Version Information:
 * ====================
 * File name       : %name%
 * Created by      : %created_by%
 * Created on      : %date_created%
 * Last Modified by: %derived_by%
 * Last Modified on: %date_modified%
 */
/*********************************************************************
 * SAS2IBMN NuritY  07/11/16  Compile with IBM XL C/C++:
 *                            1. Remove #if for __STDC__ and leave
 *                               the code for the defined part.
 *                               The code generated when not defined
 *                               will be needed if we change the
 *                               LANGLVL compiler option to be
 *                               COMMONC. If this happens, we will
 *                               look in the SAS/C source for needed
 *                               code.
*********************************************************************/

#include "globs.h"

#include AR_DES

#ifndef ENCAPI_H_INCLUDED
#define ENCAPI_H_INCLUDED

/* for MVS only */
#define ENC_intrn_key_gen   encikgn
#define ENC_init_intrn_key  enciign
#define ENC_encr            encencr
#define ENC_decr            encdecr
#define ENC_crypt_direct    encdrct
#define ENC_init_fixed_key  encifxk
#define ENC_term            encterm
#define ENC_gtrnd           encgrnd
#define ENC_init_key        enckey
#define ENC_init_keys       enckeys
#define ENC_term_keys       enckeyt
#define ENC_outbuf_len      encbufl
#define ENC_smallbuf_enc    encsmle
#define ENC_smallbuf_decr   encsmld
#define ENC_des_encr        encsmer
#define ENC_des_decr        encsmed
 /* MVS */

/********************************************/
/*  Length values for entity names          */
/********************************************/

#define   ENC_KEY_DATA_LEN          512
#define   ENC_SYNC_MSG_LEN          300
#define   ENC_ERR_TXT_LEN           500
#define   ENC_ADD_MSG_LEN             4
#define   ENC_STRNG_RNDBUF_SIZE      16
#define   ENC_MIN_RAND_BUF_LEN     1000
#define   ENC_MAX_RAND_BUF_LEN     3000

#define   ENC_DES_MAX_KEYS         9999
#define   ENC_DES_MIN_KEYS            1

#define   ENC_HEX_DES_KEY_LEN        16
#define   ENC_NUM_KEYS_STR_LEN        4
#define   ENC_DES_KEY_LEN             8

#define   ENC_BUFLEN_SIZE             8

typedef enum {ENC_FALSE, ENC_TRUE} ENC_BOOLEAN;
typedef enum {ENC_LOCAL, ENC_REMOTE} ENC_LOCAL_REMOTE;
typedef enum {ENC_DES, ENC_SMALLBUFF, ENC_TDES} ENC_ENCR_ALGRTM;

/**************************************/
/*  typedefs for entities             */
/**************************************/

typedef unsigned char  ENC_SM_typ           [ENC_SYNC_MSG_LEN];
typedef unsigned char  ENC_STRNG_RNDBUF_typ [ENC_STRNG_RNDBUF_SIZE];
typedef unsigned char  ENC_RAND_BUF_typ     [ENC_MAX_RAND_BUF_LEN];
typedef UNSBYTE        ENC_DESK_typ         [ENC_DES_KEY_LEN];

typedef enum {
    ENC_ENCRYPT,
    ENC_DECRYPT
} ENC_CRYPT_ACTION_typ;

typedef enum {
    ENC_NO_SEND_BUFF,
    ENC_SEND_BUFF
} ENC_SYNC_SND_typ;

typedef enum {
    ENC_NOT_SYNCED,
    ENC_SYNCED
} ENC_SYNC_STT_typ;

typedef char ENC_KD_typ [ENC_KEY_DATA_LEN];

typedef enum{
    ENC_OK,  /* NO MESSAGE - ERROR BUFFER IGNORED */
    ENC_FUNC_FAIL,
      /*%s location %d: Call to %s failed with %d code */
    ENC_IO_OPEN_ERR,
      /* %s location %d: IO OPEN error file %s code %d */
    ENC_IO_READ_ERR,
      /* %s location %d: IO READ error file %s code %d, items %d */
    ENC_IO_WRITE_ERR,
      /* %s location %d: IO WRITE error file %s code %d, items %d */
    ENC_DECR_AUTH_FAIL,
     /* %s location %d: Decryption authentication faile, code %d */
    ENC_DECR_INVL_KEY,
     /* %s location %d: Decryption failed - requested key id %d */
    ENC_IN_SYNC,
 /* %s location %d: Request denied session key synchronization now */
    ENC_MALLOC_FAIL,
     /* %s location %d: Malloc to %s size %d failed with code %d */
    ENC_INITKX_FAIL,
     /* %s location %d: AR_init_kx  for %s key failed with code %d */
    ENC_MSGTYP_MSMTCH,
     /* %s location %d: Expected msg type %d - received type %d */
    ENC_ACTIVE_MSMTCH,
     /* %s location %d: %s ESS vs. %s Host encryption */
    ENC_KEYTYP_MSMTCH,
     /* %s location %d: %s key on ESS vs. %s key on Host */
    ENC_SYNC_ABORT,
     /* %s location %d: Sync msg %d aborted. Keyid %d received %d */
    ENC_PRTCL_RSTRT,
   /* %s location %d: Restart. Curr # %d Prv # %d - Expected %d msg */
    ENC_KEYSET,
     /* %s location %d: Sync start session key# %d, prv key is %d */
    ENC_FILE_CORRUPT ,
     /* %s location %d: Key file %s is corrupt */
    ENC_OUTBUF_SMALL,
     /* %s output buffer size (%d) too small. Required size is %d*/
    ENC_DECR_NOSMALLBUF,
     /* %s small decrypt for buffer of size %d not divided by 16 */
    ENC_DECR_ORIGLEN
     /* %s small decrypt - original buffer length %d is corrupted(%d)*/
} ENC_ERR_CODE_typ;

typedef struct {
    ENC_ERR_CODE_typ   err_code;
    char               err_buff [ENC_ERR_TXT_LEN];
} ENC_ERR_rec_typ, *ENC_ERR_rec_ptr;

/*********************************************************************
 * Procedure Name   : ENC_int_key_gen (ikgn)
 * Description      : Host internal key generator.
 * Input            : hik_file - The host internal des key table
 *                    filename.
 * Output           : Err - The error returned.
 * Input/Output     :
 * Input assumptions: The hik_file should be created by the calling
 *                    process.
 * Output assertions:
 * Return Value     : ESA_RC
 * Side Effects     :
 *
 * Function description
 * ====================
 * See encdes.c.
 ********************************************************************/

extern ESA_RC ENC_intrn_key_gen (
         char            *hik_file,  /*in*/
         ENC_ERR_rec_ptr  err         /*out*/
                                );

/*********************************************************************
 * Procedure Name   : ENC_init_intrn_key (iint)
 * Description      : Host Internal key encryption initialization
 * Input            : hik_file - The HIK filename.
 *                    active - Indicator if real encryption is active
 *                             or not.
 * Output           : err - Error string.
 * Input/Output     : enc_handle - A pointer to encryption handle.
 * Input assumptions:The current process has read access permission to
 *                    the HIK file.
 * Output assertions: The enc_handle segment will be delivered upon
 *                    internal encryption/decryption of data.
 * Return Value     : ESA_RC
 * Side Effects     :
 *
 * Function description
 * ====================
 * See encdes.c.
 ********************************************************************/

extern ESA_RC ENC_init_intrn_key (
         char             *hik_file,       /*in*/
         ENC_BOOLEAN       active,         /*in*/
         void            **enc_handle,     /*InOut*/
         ENC_ERR_rec_ptr   err             /*out*/
                                 );

/*********************************************************************
 * Procedure Name   : ENC_encr
 * Description      : Message encryption.
 * Input            : enc_handle - Pointer to DES key information.
 *                    enc_algorithm - ENC_DES - String DES
 *                       ENC_SMALLBUFF - Direct DES for small buffer
 *                       ENC_TDES - 3DES encryption
 *                    buf_in - buffer for encryption.
 *                    in_len - input buffer length
 * Output           : buf_out - encrypted buffer.
 * InOut              out_len - In- out buffer allocation size
 *                              Out - output buffer actual length.
 *                    err - an error string.
 * Input/Output     :
 * Input assumptions: The enc_handle - is the output enc_handle of
 *                    either ENC_sync or ENC_iint functions.
 * Output assertions: The output buffer should be pre allocated by
 *                    the calling process with the
 *                    length returned by ENC_outbuf_len FUNCTION!!!
 *                    The out len will be equal to or higher than
 *                    the in_len.
 * Return Value     : ESA_RC
 * Side Effects     :
 *
 * Function description
 * ====================
 * See encdes.c.
 ********************************************************************/

extern ESA_RC ENC_encr  (
         void            *enc_handle,  /*in*/
         void            *buf_in,      /*in*/
         int              in_len,      /*in*/
         ENC_ENCR_ALGRTM  enc_algorithm, /*in*/
         void            *buf_out,     /*out*/
         int             *out_len,     /*in-out*/
         ENC_ERR_rec_ptr  err          /*out*/
                        );

/*********************************************************************
 * Procedure Name   : ENC_decr
 * Description      : Message decryption.
 * Input            : enc_handle - Pointer to DES key information.
 *                    enc_algorithm - ENC_DES - String DES
 *                       ENC_SMALLBUFF - Direct DES for small buffer
 *                       ENC_TDES - 3DES decryption
 *                    buf_in - buffer for decryption.
 *                    in_len - input buffer length
 * Output           : buf_out - decrypted buffer.
 * InOut              out_len - In- out buffer allocation size
 *                              Out - output buffer actual length.
 *                    err - an error string.
 * Input/Output     :
 * Input assumptions: The enc_handle - is the output enc_handle of
 *                    either ENC_sync or ENC_int functions.
 * Output assertions: The output buffer should be pre allocated by
 *                    the calling process.
 *                    The out len will be equal to or higher than
 *                    the in_len.
 * Return Value     : ESA_RC
 * Side Effects     :
 *
 * Function description
 * ====================
 * See encdes.c.
 ********************************************************************/

extern ESA_RC ENC_decr (
         void               *enc_handle,  /*in*/
         void               *buf_in,      /*in*/
         int                 in_len,      /*in*/
         ENC_ENCR_ALGRTM     enc_algorithm, /*in*/
         void               *buf_out,     /*out*/
         int                *out_len,     /*out*/
         ENC_ERR_rec_ptr     err          /*out*/
                        );

/*********************************************************************
 * Procedure Name   : ENC_crypt_direct
 * Description      : Message encryption/decryption useing des key.
 * Input            : des_key - The des key (8 bytes)
 *                    buf_in  - buffer for encryption/decryption.
 *                    in_len - input buffer length
 *                    action - requirec action encryption or decryption.
 *                    mac_req - boolean indicating if MAC verification
 *                             is required.
 * Output           : buf_out - encrypted/decrypted buffer.
 *                    out_len - output buffer actual length.
 * Input/Output     :
 * Input assumptions:
 * Output assertions: The output buffer should be pre allocated by the
 *                    calling process with the in_len +
 *                    ENC_ADD_MSG_LEN length (if MAC required)!!!
 *                    The out len will be equal to or higher than the
 *                    in_len.
 * Return Value   : ESA_OK - Encryption o.k
 *                  ESA_WARN - Action failed - key synchronization
 *                         encryption/decryption should be halted.
 * Side Effects   :
 ********************************************************************/

extern ESA_RC ENC_crypt_direct (
         ENC_DESK_typ           des_key[],   /*in*/
         void                  *buf_in,      /*in*/
         int                    in_len,      /*in*/
         ENC_CRYPT_ACTION_typ   action,      /*in*/
         ENC_BOOLEAN            mac_req,     /*in*/
         ENC_ENCR_ALGRTM        enc_algorithm, /*in*/
         ENC_LOCAL_REMOTE       l_r,         /*in*/
         void                  *buf_out,     /*out*/
         int                   *out_len,     /*out*/
         ENC_ERR_rec_ptr        err          /*inout*/
      );
/**********************************************************************
 * Procedure Name   : ENC_init_fixed_key (1key)
 * Description      : Prepare a DES session key information for known
 *                    des key.
 * Input            : active - A boolean indicating if the encryption
 *                             is active (TRUE) or not (FALSE).
 *                    key_file - The DES key filename.
 * Output           : enc_handle - pointer to the des_key details.
 *                    err - error string.
 * Input/Output     :
 * Input assumptions: The input key file should contain a buffer of 8
 *                    characters that are used as DES key. The process
 *                    must have read access to that file.
 * Output assertions:
 * Return Value   : ESA_RC
 * Side Effects   :
 *
 * Function description
 * ====================
 * See encdes.c.
 *********************************************************************/

extern ESA_RC ENC_init_fixed_key (
         char             *key_file,   /*in*/
         ENC_BOOLEAN       active,     /*in*/
         void            **enc_handle, /*out*/
         ENC_ERR_rec_ptr   err         /*out*/
                                 );

/**********************************************************************
 * Procedure Name   : ENC_term (beta)
 * Description      : Free all prealocated memory.
 * Input            :
 * Output           :
 * Input/Output     : enc_handle - pointer to allocated memory
 * Input assumptions: The pointer points to memory prealocated
 *                    by the encryption package.
 * Output assertions:
 * Return Value     : void
 * Side Effects     :
 *
 * Function description
 * ====================
 * This function is used to free all memory that was pre allocated
 * by the encryption package - as part of process rundown.
 *********************************************************************/

extern void  ENC_term (
         void  **enc_handle /*inout*/
                      );

/**********************************************************************
 * Procedure Name   : ENC_gtrnd
 * Description      : Generate a weak random buffer.
 * Input            : min_len - minimum output buffer length
 *                    max_len - maximum output buffer length
 *                    in_loop - Boolean indicating if this function
 *                              is used in loop (TRUE) or
 *                              first time(FALSE).
 * Output           : weak - output "weak random" buffer.
 *                    len  - output buffer's length.
 * Input/Output     :
 * Input assumptions: min_len - will never be less than 4.
 * Output assertions: The output buffer is pre-allocated by the caller
 *                    with at least max_len length.
 * Return Value     : void
 * Side Effects     :
 *
 * Function description
 * ====================
 * This function is used to generate weak random buffer.
  *********************************************************************/

extern void  ENC_gtrnd (
         int          min_len,  /*in*/
         int          max_len,  /*in*/
         UNSBYTE     *weak,     /*out*/
         int         *len,      /*out*/
         ENC_BOOLEAN  in_loop   /*in*/
                       );

/**********************************************************************
 * Procedure Name   : ENC_init_keys
 * Description      : Loads the DES keys file to memory.
 * Input            : key_file - The DES key filename.
 * Output           : keys_hndl - The pointer to memory allocated.
 * Input/Output     :
 * Input assumptions: The input key file first includes the number of
 *                    used keys and then the above mentioned DES keys
 *                    formatted in 16 characters hexadecimal strings.
 * Output assertions: The keys_hndl should be given as input to the
 *                    ENCR_init_fixed_key and ENCR_term_keys functions.
 * Return Value   : ESA_RC
 * Side Effects   :
 *
 * Function description
 * ====================
 * This function is used to load the DES keys file to memory.
 *********************************************************************/

extern ESA_RC ENC_init_keys (
         char             *key_file,    /*in*/
         void            **keys_handle, /*out*/
         ENC_ERR_rec_ptr   err          /*inout*/
                            );

/**********************************************************************
 * Procedure Name   : ENC_term_keys
 * Description      : Release DES keys array from memory.
 * Input            : keys_hndl - pointer to the array.
 * Output           :
 * Input/Output     :
 * Input assumptions:
 * Output assertions: The keys_hndl should have been allocated by
 *                    ENC_init_keys function.
 * Return Value   : ESA_RC
 * Side Effects   :
 *
 * Function description
 * ====================
 * This function is used to deallocate the DES keys array from memory.
 *********************************************************************/

extern ESA_RC ENC_term_keys (
         void            **keys_handle,  /*out*/
         ENC_ERR_rec_ptr   err           /*inout*/
                            );

/**********************************************************************
 * Procedure Name   : ENC_init_key (beta)
 * Description      : Prepare a DES TABLE record for specific des key.
 * Input            : key id - a buffer that will be used to create
 *                             key index - in order to select DES key.
 *                             This buffer usually should contained
 *                             string of SIID chained with the SHORT
 *                             CODE of RSS.
 *                    key_id_len - length (in bytes) of key_id.
 *                    active - A boolean indicating if the encryption
 *                             is active (TRUE) or not (FALSE).
 *                    keys_hndl - The handle returned from ENC_init_keys
 *                                function.
 * Output           : enc_handle - Pointer to the des key table + some
 *                                 more information required by the
 *                                 encrypt/decrypt functions.
 * Input/Output     :
 * Input assumptions:
 * Output assertions: The enc_handle will be freed by calling ENC_term
 * Return Value   : ESA_RC
 * Side Effects   :
 *
 * Function description
 * ====================
 * This function is used to create a DES KEY table for specific des
 * key. The output buffer will always contain a FALSE "internal"
 * indicator.
 * PLEASE NOTE !!!! This function is in use INSTEAD of
 * ENC_init_fixed_key function - as long as the encryption will work
 * with keys according to service's siid.
 *********************************************************************/

extern ESA_RC ENC_init_key (
         char             *key_id,     /*in*/
         int               key_id_len, /*in*/
         ENC_BOOLEAN       active,     /*in*/
         void             *keys_hndl,  /*in*/
         void            **enc_handle, /*out*/
         ENC_ERR_rec_ptr   err         /*inout*/
                           );
/**********************************************************************
 * Procedure Name : ENC_outbuf_len
 * Description    : Calculates the required output buffer length of
 *                  encryption function.
 * Input          : in_len - input buffer length for strings-it should
 *                           contain the trailing zero.
 *                  mac_req - indication if MAC is required (for none
 *                            TDES/small buffer encryption only).
 *                  enc_algorithm - ENC_DES - DES string encyption.
 *                            ENC_SMALLBUFF - DES of smallbuf
 *                            ENC_TDES      - 3DES.
 * Output           :
 * Input/Output     :
 * Input assumptions:
 * Output assertions:
 * Return Value   : The required buffer length
 * Side Effects   :
 ********************************************************************/

extern int ENC_outbuf_len (
         int               in_len,      /*in*/
         ENC_BOOLEAN       mac_req,     /*in*/
         ENC_ENCR_ALGRTM   enc_algorithm /*in*/
                           );

#endif   /* ifndef ENCAPI_H_INCLUDED */
