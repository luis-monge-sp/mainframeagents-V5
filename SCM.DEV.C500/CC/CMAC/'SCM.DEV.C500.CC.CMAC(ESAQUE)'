/*
 * Version Information:
 * ====================
 * File name       : %name: esaque.h %
 * Instance        : %instance: 1 %
 * Created by      : %created_by: leonid_s %
 * Created on      : %date_created: Fri May 09 18:12:54 2003 %
 * Current Version : %version: 3 %
 * Last Modified by: %derived_by: leonid_s %
 * Last Modified on: %date_modified: Fri May 09 18:12:55 2003 %
 */

/***********************************************
 * Mod.ID    Who      When         Description
 * =============================================
 * SAS2IBMN  NuritY   26/02/17  SAS/C to iBM C conversion.
 * BS10076   SeligT   11/12/17  Organize Connector Locking
 *                              Functions and Structures.
 **********************************************/

#include   "globs.h"

#ifndef ESAQUE_H_INCLUDED
#define ESAQUE_H_INCLUDED

/**************************************************************
*                                                             *
*   Define's                                                  *
*                                                             *
**************************************************************/

#define Q_DONT_WAIT     0
#define Q_WAIT_FOREVER -1
/* The following values are the default values for QUEUE     BS10076
   file-related locking.  The WAIT_QUEUE_TOTAL/C fields      BS10076
   are in seconds and represent the total amount of time     BS10076
   we will wait for a lock to be released before we give     BS10076
   up.  The WAIT_QUEUE_INTERVAL_DFLT/C fields are in         BS10076
   milliseconds and represent how often we attempt to        BS10076
   acquire the lock (if it was held on a previous attempt).  BS10076 */
#define WAIT_QUEUE_INTERVAL_DFLT   1000      /* milliseconds BS10076 */
#define WAIT_QUEUE_INTERVAL_DFLTC "1000"     /* milliseconds BS10076 */
#define WAIT_QUEUE_TOTAL             60      /* seconds      BS10076 */
#define WAIT_QUEUE_TOTALC           "60"     /* seconds      BS10076 */

/**************************************************************
*                                                             *
*   type def's                                                *
*                                                             *
**************************************************************/

/***** queue handle *****/

typedef struct {
   void                       * file;
   void                       * lock;
   char                         qname[MAX_FILENAME_LEN];
   CTSAMSG_PARAMS_rec_typ     * msg_params;
   CTSAMSG_HANDLE_rec_typ     * ctsamsg_handle;
   CTSAMSG_DEST_TABLE_rec_typ * ctsamsg_dest;
} Q_HANDLE;

/***** Record 0 *****/

typedef struct {
   char  eye_catcher[4];
   long  int get_pos;
   long  int put_pos;
   long  int last_pos;
   long  int end_pos;
   short int wrap;
} Q_REC0;

/***** queue block *****/

typedef struct {
   int   len;
   char  data[1];
} Q_BLK;

/**************************************************************
*                                                             *
*   Macros                                                    *
*                                                             *
**************************************************************/

#define  QUEUE_ERR(FUNC,QNAME)                    \
         CTSAMSG_print(ERR_QUEUE,                 \
                     __MSG_PARAMS.ctsamsg_handle, \
                     NULL,                        \
                     __MSG_PARAMS.ctsamsg_dest,   \
                     FUNC, QNAME );

/**************************************************************
*                                                             *
*   Function Headers                                          *
*                                                             *
**************************************************************/

/* for MVS only */
#define OS_Q_create                    osqucre
#define OS_Q_open                      osquopn
#define OS_Q_close                     osqucls
#define OS_Q_get                       osquget
#define OS_Q_put                       osquput
#define OS_Q_read                      osqured
#define OS_Q_rename                    osquren
 /* MVS */


/****************************************************
 * Procedure Name: OS_Q_rename
 *
 * Description   : Delete RenameTo if exist and
 *                 Rename RenameFrom into RenameTo
 *
 * Input         : Queue file RenameFrom
 *                 Queue file RenameTo
 *                 CTSAMSG params
 *
 * Output        : None (the queue file is rename)
 *
 * Return Value  : ESA_OK     upon success
 *
 ****************************************************/
ESA_RC OS_Q_rename (char * RenameFrom ,
					char * RenameTo,
                    CTSAMSG_PARAMS_rec_typ * msg_params);

/****************************************************
 * Procedure Name: OS_Q_create
 *
 * Description   : Create/initialize the queue file
 *
 * Input         : Queue file name
 *                 Queue file maximumu size
 *                 CTSAMSG params
 *
 * Output        : None (the queue file is created)
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 *
 ****************************************************/

ESA_RC OS_Q_create (char                   * qname,
                    long                     qsize,
                    CTSAMSG_PARAMS_rec_typ * msg_params);

/****************************************************
 * Procedure Name: OS_Q_open
 *
 * Description   : Open the queue file
 *
 * Input         : Queue file name
 *                 Queue handle (pointer)
 *                 CTSAMSG params
 *
 * Output        : Handle fields are initialized.
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 *
 ****************************************************/

ESA_RC OS_Q_open (char                   * qname,
                  Q_HANDLE               * q_handle,
                  CTSAMSG_PARAMS_rec_typ * msg_params);

/****************************************************
 * Procedure Name: OS_Q_close
 *
 * Description   : Close the queue file
 *
 * Input         : Queue handle (pointer)
 *
 * Output        : Handle fields are cleared.
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_FATAL  on any fail situation
 *
 ****************************************************/

ESA_RC OS_Q_close (Q_HANDLE * q_handle);

/****************************************************
 * Procedure Name: OS_Q_put
 *
 * Description   : put an item into the queue file
 *
 * Input         : item to put
 *                 length of item
 *                 wait time (if locked or full)
 *                 queue handle
 *
 * Output        : none
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_ERR    queue locked/full
 *                 ESA_FATAL  on any fail situation
 *
 ****************************************************/

ESA_RC OS_Q_put (void     * buf,
                 int        len,
                 int        wait,
                 Q_HANDLE * q_handle);

/****************************************************
 * Procedure Name: OS_Q_get
 *
 * Description   : get an item from the queue file
 *
 * Input         : wait time (if locked or empty)
 *                 maximum length of data to be read
 *                 queue handle
 *
 * Output        : item data
 *                 item length
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_WARN   queue empty
 *                 ESA_ERR    queue locked
 *                 ESA_FATAL  on any fail situation
 *
 * Logic         : call do_get to read item
 *                 retry operation if queue empty
 *                 give messages if error
 *
 ****************************************************/

ESA_RC OS_Q_get (void     * buf,
                 int      * len_ptr,
                 int        maxlen,
                 int        wait,
                 Q_HANDLE * q_handle);

/****************************************************
 * Procedure Name: OS_Q_read
 *
 * Description   : get an item from the queue file
 *                 without changes in record 0
 *
 * Input         : rec0
 *                 queue handle
 *
 * Output        : item data
 *                 item length
 *                 rec0 (updated)
 *                 is_seq (TRUE / FALSE) - see Usage notes below.
 *
 * Return Value  : ESA_OK     upon success
 *                 ESA_EOF    end of queue file
 *                 ESA_FATAL  unexpected error
 *
 * Logic         : if first call ( len=0 )
 *                   read record0 only
 *                 read next record from queue
 *
 * Usage notes   : If record 0 is read only once and all
 *                 other records are called according to its
 *                 contents (sequential read), set is_seq=TRUE
 *                 Otherwise (if record 0 is read more than
 *                 once), set is_seq=FALSE.
 *                 When is_seq is FALSE, the function will
 *                 flush the buffers after each call to force
 *                 reading the blocks from the file om each
 *                 call.
 *
 ****************************************************/

ESA_RC OS_Q_read (void     * buf,
                  int      * len,
                  int        maxlen,
                  Q_HANDLE * q_handle,
                  Q_REC0   * q_rec0,
                  int        is_seq) ;     /* SAS2IBMN */

#endif /* ESAQUE_H_INCLUDED */
