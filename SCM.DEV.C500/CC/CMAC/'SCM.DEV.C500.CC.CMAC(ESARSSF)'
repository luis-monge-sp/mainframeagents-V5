/***********************************************
* Title:              RSS functions
* File Name:          esarssf.h
* Author:
* Creation Date:      04/08/94
* Description:
* Assumptions and
*   Considerations:
* $Author:   avi_w  $
* $Workfile:   esarssf.h  $
* $Revision:   1.0  $
* $Log:   //EAGLE1/VERSIONS/300/COMMON/INC/esarssf.h_v  $
 *
 *    Rev 1.0   Aug 31 1998 19:02:08   avi_w
 *
 *
 *    Rev 1.11   Apr 12 1998 17:18:56   leonid_s
 *
 *    Rev 1.10   Apr 12 1998 14:01:54   leonid_s
 *
 *    Rev 1.9   Apr 09 1998 11:03:58   ajk
 * removed TABs
 *
 *    Rev 1.8   Apr 09 1998 10:20:30   leonid_s
 *
 *
 *    Rev 1.7   Apr 05 1998 13:10:52   leonid_s
 *
 *    Rev 1.6   Apr 01 1998 14:23:36   leonid_s
 * 300-Beta release of SA-Agent
 *
 *    Rev 1.5   Mar 15 1998 16:02:12   leonid_s
 * CSTalert
 *
 *    Rev 1.4   Jan 21 1998 18:53:50   leonid_s
 * 300-Beta with AS400 & VMS changes
 *
 *    Rev 1.3   Jul 27 1997 10:32:42   Danko
 * converting_from_sccs
 *
 *    Rev 1.2   Jul 24 1997 08:30:08   leonid_s
 *     SCCSID("%Z%%M% \
 *
 *
 *    Rev 1.1   Jul 08 1997 10:09:06   avi_w
 *
*****************************************************/
/* SCCSID %Z%%M% */

#ifndef ESARSSF_H_INCLUDED
#define ESARSSF_H_INCLUDED

#include "globs.h"

#include ESA_INIT
#include ENC_API

/* for MVS only */
#define CS_set_last_msg             RSSF002
#define CS_set_fld                  RSSF003
#define CS_set_sngl_msg_len         RSSF004
#define CS_api_to_capi_id           RSSF006
#define CS_queue_put                RSSF007
#define CS_api_to_msg_code          RSSF008
#define CS_func_nmbr_to_func_name   RSSF010
#define rss_msg_headr               RSSF011
#define rss_queue_put               RSSF012
#define CS_act_nmbr_to_act_name     RSSF013
#define CS_addinfo_typ_to_enum      RSSF014
#define CS_addinfo_enum_to_prt      RSSF015
#define CS_check_nmb                RSSF016
#define CS_act_to_actname           RSSF017
#define CS_os_file_name             RSSF018
#define CS_actname_to_act           RSSF019
#define CS_encr_msg                 RSSF020
#define ebc2asc                     RSSF021
#define RSLogAlert                  RSSF022
#define CS_set_rss_status           RSSF023
#define CS_set_logevt               RSSF024
#define CS_action_string            RSSF027
#define ActionString                RSSF028
 /*MVS*/

typedef struct S_LOGEVT_PARAMS {
    LOGENT_typ    logevt;
    SEVERITY_typ  severity;
} LOGEVT_PARAMS_rec_typ, *LOGEVT_PARAMS_rec_ptr;

#define M_RSS_INACTIVE                "0"
#define M_RSS_ACTIVE                  "1"

/****************************************************
 * Procedure Name: ebc2asc
 * Description   : ebcdic to ascii conversion
 * Input         :
 * Output        :
 * Input/Output  :
 * Return Value  :
 * Side Effects  :
 * Scope         :
 ***************************************************/

void ebc2asc (char * ebcdic,
              char * ascii,
              int    length);

/****************************************************
 * Procedure Name: CS_set_fld
 * Description   : set field to
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/

extern MSG_typ * CS_set_fld (const char   * field,
                             MSG_typ      * msg_ptr,
                             NUM_MSGS_typ * msg_len,
                             int            max_len,
                             const char   * fld_name);

/****************************************************
 * Procedure Name: CS_api_to_capi_id
 * Description   : convert api to comm api id
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/

ESA_RC  CS_api_to_capi_id (short     api,
                           MSG_typ * msg_ptr);

/****************************************************
 * Procedure Name: CS_api_to_msg_code
 * Description   : Change Api code to Msg code
 * Input         : api     - Func code as a number
 * Output        : msgcode - Msg code as a string
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/

ESA_RC CS_api_to_msg_code (short   api,
                           char  * msgcode);

/****************************************************
 * Procedure Name: CS_set_last_msg
 * Description   : copy last message indication to message
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/

extern void CS_set_last_msg (MSG_typ * msg_ptr);

/****************************************************
 * Procedure Name: CS_set_sngl_msg_len
 * Description   : set message length
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/

extern ESA_RC CS_set_sngl_msg_len (MSG_typ      * buffer_tmp,
                                   NUM_MSGS_typ   sngl_msg_len);

/****************************************************
 * Procedure Name: CS_queue_put
 * Description   : queue put
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/

ESA_RC CS_queue_put (MSG_typ        * msg_ptr,
                     unsigned short   msg_len);

/****************************************************
 * Procedure Name: CS_func_nmbr_to_func_name
 * Description   : convert  api to string
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/

const char * CS_func_nmbr_to_func_name (short api);

/****************************************************
 * Procedure Name: CS_act_nmbr_to_act_name
 * Description   : convert  api to string
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/

const char * CS_act_nmbr_to_act_name (short * act);

/****************************************************
 * Procedure Name: rss_msg_headr
 * Description   : creat rss msg header
 * Input         :
 * Output        :
 * Input/Output  :
 * Return Value  : ESA_RC
 * Side Effects  :
 * Scope         :
 ***************************************************/

MSG_typ * rss_msg_headr (RSS_typ        rss_type,
                         RSS_typ        rss_name,
                         MSG_typ      * msg,
                         int            func_name,
                         NUM_MSGS_typ * msg_len);

/****************************************************
 * Procedure Name: rss_queue_put
 * Description   : send the message to the queue
 * Input         :
 * Output        :
 * Input/Output  :
 * Return Value  : ESA_RC
 * Side Effects  :
 * Scope         :
 ***************************************************/

ESA_RC rss_queue_put (void         * handle,
                      MSG_typ      * msg,
                      NUM_MSGS_typ   msg_len);

/****************************************************
 * Procedure Name: CS_addinfo_typ_to_enum
 * Description   : convert addinfo type to enum
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/

extern ADDINFO_typ CS_addinfo_typ_to_enum (MSG_typ * msg_ptr);

/****************************************************
 * Procedure Name: CS_addinfo_typ_to_prt
 * Description   : convert addinfo type print format
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/

extern const char * CS_addinfo_enum_to_prt (ADDINFO_typ add_typ);

/****************************************************
 * Procedure Name: CS_check_nmb
 * Description   : Check if string in the message is valid x-number
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/

extern ESA_RC CS_check_nmb (MSG_typ           * str,
                            MSG_typ           * msg_ptr,
                            unsigned long int   max_nmb,
                            const char        * fld_name);

/****************************************************
 * Procedure Name: CS_act_to_actname
 * Description   : convert action to action name
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/

const char * CS_act_to_actname (int act);

/****************************************************
 * Procedure Name: CS_actname_to_act
 * Description   : convert action name to action
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/

int CS_actname_to_act (char * actname);

/****************************************************
 * Procedure Name: CS_os_file_name
 * Description   :
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/

ESA_RC CS_os_file_name (RESOURCE_typ  name_in,
                        RESOURCE_typ  name_out);

/****************************************************
 * Procedure Name: CS_encr_msg
 * Description   : send encription CTSAMSG
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/

void CS_encr_msg (ENC_ERR_rec_typ * encr_err);

/****************************************************
 * Procedure Name: RsLogAlert
 * Description   : RSS log event OR alert has occured
 * Input         : date_buffer,
 *                 time_buffer,
 *                 host_name,
 *                 pid,
 *                 process,
 *                 severity,
 *                 quiet - without messages to log,
 *                 msgid,
 * Output        : Log entry
 * Input/Output  :
 * Return Value  : ESA_RC
 * Side Effects  :
 * Scope         :
 ***************************************************/

ESA_RC RSLogAlert (RSS_typ                  rss_type,
                   RSS_typ                  rss_name,
                   void                   * handle,
                   CTSAMSG_PARAMS_rec_typ * msg_param,
                   char                   * date_buffer,
                   char                   * time_buffer,
                   OS_host_name_typ         host_name,
                   OS_pid_str_typ           pid,
                   const char             * process,
                   SEVERITY_typ             severity,
                   OPTION_typ               quiet,
                   char                   * message);

/****************************************************
 * Procedure Name: CS_set_rss_status
 * Description   : Copy status indication to message
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ******************************************************************/

MSG_typ * CS_set_rss_status (MSG_typ        * buffer,
                             RSS_STATUS_typ * rss_status,
                             NUM_MSGS_typ   * msg_len);

/****************************************************
 * Procedure Name: CS_set_logevt
 * Description   : build logevt/alert message
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 *********************************************************************/

MSG_typ * CS_set_logevt (MSG_typ               * buffer,
                         LOGEVT_PARAMS_rec_typ * logevt_prm,
                         NUM_MSGS_typ          * msg_len);

#endif   /* ifndef ESARSSF_H_INCLUDED */
