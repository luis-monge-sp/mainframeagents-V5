/**************************************************************
* Title            : RSS Administrators management            *
* File Name        : acspwd.h                                 *
* Author           : Leonid Soikis                            *
* Creation Date    : 10/07/96                                 *
* Description      :                                          *
* Assumptions and                                             *
*   Considerations :                                          *
* $Author:   avi_w  $
* $Workfile:   acsadm.h  $
* $Revision:   1.0  $
* $Log:   //EAGLE1/VERSIONS/300/COMMON/INC/acsadm.h_v  $
 *
 *    Rev 1.0   Aug 31 1998 19:02:04   avi_w
 *
 *
 *    Rev 1.8   Jul 26 1998 14:01:44   leonid_s
 * Added ADM_admin_pwd_sync and
 *            ADM_admin_data_sync functions
 *
 *    Rev 1.7   Apr 01 1998 14:23:22   leonid_s
 * 300-Beta release of SA-Agent
 *
 *    Rev 1.6   Jan 21 1998 18:52:18   leonid_s
 * 300-Beta with AS400 & VMS changes
 *
 *    Rev 1.5   Oct 07 1997 13:00:34   leonid_s
 * INSURE++ changes
 *
 *    Rev 1.4   Sep 29 1997 10:52:38   leonid_s
 *
 *    Rev 1.3   Jul 27 1997 10:32:28   Danko
 * converting_from_sccs
 *
 *    Rev 1.2   Jul 24 1997 08:29:20   leonid_s
 *     SCCSID("%Z%%M% \
 *
 *    Rev 1.1   Jul 08 1997 10:08:34   avi_w
 *
 * IS10184  NuritY   01/09/21 Improve scripts performance
 *                            (add short names to routines).
 * WS10082A AvnerL   17/10/23 Drop unused ADD_xxxx routines
**************************************************************/
/* SCCSID %Z%%M% */

#ifndef ACSADM_H_included
#define ACSADM_H_included


#include ESA_API
#include ESA_INIT
#include ESA_MSG

#define TMP_ADMIN_NUM     10
#define RAND_MIN_BUF      256
#define RAND_MAX_BUF      512

/* Following are for MVS */
#define ADM_login_password_generate  ADM001
#define ADM_login_password_encrypt   ADM002
#define ADM_login_password_decrypt   ADM003
/*WS10082A RSSADM is not used in MF
#define ADM_find                     ADM004
#define ADM_add                      ADM005
#define ADM_load_without_rss         ADM006
#define ADM_load                     ADM007
#define ADM_free                     ADM008
#define ADM_record_maintenance       ADM009
#define ADM_time_to_str              ADM010
#define ADM_from_char_to_hexa        ADM011
#define ADM_from_hexa_to_char        ADM012
#define ADM_get_passwd               ADM013
end of WS10082A ***************************/
#define ADM_admin_name_for_cmp       ADM014
#define ADM_loginout                 ADM015
/*WS10082A RSSADM file is not used in MF
#define ADM_attempt_loginout         ADM016
#define ADM_fill_admin_changes       ADM017
#define ADM_admin_is_def_admin       ADM018
#define ADM_admin_data_sync          ADM019
#define ADM_admin_pwd_sync           ADM020
/* The lines below added by AvnerL for MVS  29apr2003 task 7941 *@
#define ADM_next_apc                 ADM021
#define ADM_upd                      ADM022                * IS10184 *@
#define ADM_del                      ADM023                * IS10184 *@
end of WS10082A ***************************/

typedef enum {
    ADM_RECORD_ADD = 1,
    ADM_RECORD_UPD,
    ADM_RECORD_DEL,
    ADM_RECORD_LIST,
    ADM_RECORD_SYNC
} ADM_ACTION_typ;

/********************************************/
/*  Typedef for type of administrator       */
/********************************************/

typedef enum {LOGIN_ESS_ADMIN     = 1,
              LOGIN_DEFAULT_ADMIN,
              LOGIN_UNDEFINED_ADMIN
} LOGIN_ADMIN_TYPE_typ;
/*WS10082A RSSADM file is not used in MF
/*********************************************************************
*                                                                    *
* Procedure Name   : ADM_find                                        *
*                                                                    *
* Description      : determine if the administrator already exists   *
* Input            : administrator                                   *
*                  : rss_name                                        *
* Output           : find_adm_rec                                    *
* Return Value     : ESA_RC : ESA_OK  if administrator already exists*
*                             ESA_EOF if administrator didn't find   *
*                             ESA_ERR in any other situation         *
*********************************************************************@

EXT ESA_RC ADM_find (RSS_typ              rss_name,
                     USER_typ             admin,
                     MEMBER_ADM_rec_typ * find_adm_rec);

/****************************************************
 * Procedure Name: ADM_free
 * Description   : free memory from list of administrators
 ****************************************************@

void ADM_free (void);

/****************************************************
 * Procedure Name: ADM_record_maintenance
 * Description   : Add, Update, Delete OR list administrators
 *                      from the file of administrators
 * Input         : adm_rec - record of the administrator
 *               : action (add, update, delete OR list)
 * Return Value  : rc
 ****************************************************@

ESA_RC ADM_record_maintenance (ADMINISTRATOR_rec_typ * adm_rec,
                               ADM_ACTION_typ          action);

/**************************************************************
*                                                             *
* Procedure Name   : ADM_load                                 *
*                                                             *
* Description      : Load from file to memory                 *
*                    list of administrators                   *
* Return Value     : rc                                       *
*                                                             *
***************************************************************
*
* DETAILED DESCRIPTION
* ====================
*
* This function loads the list of administrators from
* the "administrator's file" to the memory. The administrators are
* loaded to the envir.intrsrt static data - that is an array with an
* entry per possible RSS on current platform. In each entry (= RSS) -
* there are two data items (among others):
* pre_num_adms - The number of administrators in list.
* pre_adms_ptr - A pointer to an array of administrators names
*               (each name in full length of administrators string).
* The function first clears all details of administrators (for
* ALL RSS types) - then reads the administrators into a single
* allocated buffer - than according to the amount of administrators
* for each RSS (that was determinded wile first load) - the
* function allocates a memory segment for the administrators
* of each RSS and fills in the administrators.
**********************************************************************@

ESA_RC ADM_load (void);

/**************************************************************
*                                                             *
* Procedure Name   : ADM_load_without_rss                     *
*                                                             *
* Description      : Load data from the file to the memory    *
*                         without rss records                 *
***************************************************************
*
* DETAILED DESCRIPTION
* ====================
*
* The function is activated in order to scan the Administrators
* - and to load it to a global memory segment.
* In addition - the function fills in all RSS entries, in
* the RSS array of the envir external data, with the number of
* administrators that resides, in the segment, for them.
* The function scans all records from the file, checks the RSS
* existance the Administrator validity and inserts it to a temporary
* array (that contains fixed number of entries). Whenever the
* temporary array is filled - the memory segment allocated for users
* is expanded by it's size - it's content is copied to the memory
* allocated, the number of output administrators is updated and the
* temporary array is cleared - and so on.
**********************************************************************@

ESA_RC ADM_load_without_rss (long int               * all_num_adms,
                             ADMINISTRATOR_rec_typ ** all_adms_ptr);

/**************************************************************
*                                                             *
* Procedure Name   : ADM_time_to_str                          *
*                                                             *
* Description      : Get date & time in string                *
*                                                             *
* input            : time_int                                 *
* Output           : date_field                               *
*                  : time_field                               *
* Return Value     :                                          *
**************************************************************@

void ADM_time_to_str (time_t   * time_int,
                      DATE_typ   date_field,
                      TIME_typ   time_field);
end of WS10082A ***********/
/****************************************************
 * Procedure Name: ADM_login_password_generate
 * Description   : Generate a random password (32 characters)
 * Output        : password
 * Return Value  : ESA_OK     upon success
 *               : ESA_FATAL  on any fail situation
 ****************************************************/

ESA_RC ADM_login_password_generate (char * passwd);

/********************************************************************
 * Procedure Name   : ADM_login_password_encrypt
 * Description      : Encrypt password using a des key
 * Input            : passwd    - string to encrypt
 * Output           : enc_passwd- Encrypted password
 *                  : enc_passwd_len - Length of the encryption password
 * Input assumptions:
 * Return Value     : ESA_RC
 * Side Effects     :
 *
 * Function description
 * ====================
 * The function is used to encrypt a password before it is written
 * to the password file
 *******************************************************************/
ESA_RC ADM_login_password_encrypt (char * passwd,
                                   char * enc_passwd,
                                   int  * enc_passwd_len);

/********************************************************************
 * Procedure Name   : ADM_login_password_decrypt
 * Description      : Decrypt password using a des key
 * Input            : enc_passwd     - Buffer to decrypt
 *                  : enc_passwd_len - length of buffer to decrypt
 * Output           : passwd         - Decrypted buffer
 * Input assumptions:
 * Return Value     : ESA_RC
 * Side Effects     :
 *
 * Function description
 * ====================
 * The function is used to decrypt a password after it is read
 * from the password file
 *******************************************************************/

ESA_RC ADM_login_password_decrypt (char * enc_passwd,
                                   int    enc_passwd_len,
                                   char * passwd);
/*WS10082A
/********************************************************************
 * Procedure Name   : ADM_from_char_to_hexa
 * Description      : Convert char. string to hexa. string
 * Input            : char_str
 *                  : char_str_len
 * Output           : hexa_str
 *******************************************************************@

void ADM_from_char_to_hexa (char * char_str,
                            int    char_str_len,
                            char * hexa_str);

/********************************************************************
 * Procedure Name   : ADM_from_hexa_to_char
 * Description      : Convert hexa. string to char. string
 * Input            : hexa_str
 *                  : hexa_str_len
 * Output           : char_str
 *******************************************************************@

void ADM_from_hexa_to_char (char * hexa_str,
                            int    hexa_str_len,
                            char * char_str);

/********************************************************************
 * Procedure Name   : ADM_add
 * Description      : Add administrator to file of administrators
 *                       (update if exists)
 * Input            : rss_name
 *                  : admin_name
 *                  : auto_pwd_change
 *                  : admin_passwd
 * Return Value     : ESA_RC
 *******************************************************************@

ESA_RC ADM_add (RSS_typ              rss_name,
                USER_typ             admin_name,
                char                 auto_pwd_change,
                TIME_typ             change_interval,
                char               * admin_passwd);

/********************************************************************
 * Procedure Name   : ADM_upd
 * Description      : Update administrator in file of administrators
 * Input            : rss_name
 *                  : admin_name
 *                  : auto_pwd_change
 *                  : admin_passwd
 * Return Value     : ESA_RC
 *******************************************************************@

ESA_RC ADM_upd (RSS_typ              rss_name,
                USER_typ             admin_name,
                char                 auto_pwd_change,
                TIME_typ             change_interval,
                char               * admin_passwd);

/********************************************************************
 * Procedure Name   : ADM_del
 * Description      : Delete administrator from file of administrators
 * Input            : rss_name
 *                  : admin_name
 * Return Value     : ESA_RC
 *******************************************************************@

ESA_RC ADM_del (RSS_typ              rss_name,
                USER_typ             admin_name);

/********************************************************************
 * Procedure Name   : ADM_get_passwd
 * Description      : Get password for administrator
 * Input            : rss_name
 * Input/Output     : admin_name
 * Output           : admin_passwd
 *                  : adm_mem
 * Return Value     : ESA_RC
 *******************************************************************@

ESA_RC ADM_get_passwd (RSS_typ              rss_name,
                       USER_typ             admin_name,
                       PASSWD_typ           admin_passwd,
                       MEMBER_ADM_rec_typ * adm_mem);
end of WS10082A ***********/
/**********************************************************************
*                                                                     *
* Procedure Name : ADM_admin_name_for_cmp                             *
*                                                                     *
* Description    : Convert name of the admininistrator to Upercase    *
*                  if ADMIN_CASE_SENC is not sencetive for the RSS    *
* Input          : rss_name                                           *
*                : admin_name                                         *
* Input/Output   : admin_name_for_cmp                                 *
* Return Value   : ESA_RC : ESA_ERR if parameter ADMIN_CASE_SENC is   *
*                      found for RSS rss_name                         *
**********************************************************************/

EXT ESA_RC ADM_admin_name_for_cmp (RSS_typ  rss_name,
                                   USER_typ admin_name_for_cmp,
                                   USER_typ admin_name);

/****************************************************
 * Procedure Name: ADM_loginout
 * Description   : login/logout to/from the RSS security system
 *                 before/after api func
 * Input         :
 * Input/Output  :
 * Return Value  :
 * Comments      :
 * Scope         :
 ****************************************************/

extern ESA_RC ADM_loginout (LOGIN_MODE_typ         login_mode,
                            LOGIN_ADMIN_TYPE_typ   admin_type,
                            char                 * func_name);
/*WS10082A
/**********************************************************************
*                                                                     *
* Procedure Name : ADM_attempt_loginout                               *
*                                                                     *
* Description    : Attempt login to the administrator                 *
* Input          : rss_name                                           *
*                : rss_type                                           *
*                : admin_name                                         *
*                : admin_group                                        *
*                : admin_passwd                                       *
* Input/Output   :                                                    *
* Return Value   : ESA_RC : ESA_ERR if failed login attemption        *
**********************************************************************@

ESA_RC ADM_attempt_loginout  (RSS_typ    rss_name,
                              RSS_typ    rss_type,
                              USER_typ   admin_name,
                              UG_typ     admin_group,
                              PASSWD_typ admin_passwd);


/**************************************************************
*                                                             *
* Procedure Name   : ADM_fill_admin_changes                   *
*                                                             *
* Description      : Fill fields:                             *
*                   admin_passwd, def_admin, def_admin_passwd *
*   			    in env.msg_admin_params structure         *
* Input              fill def_admin & def_admin_passwd  0/1   *
*                    fill admin_passwd                  0/1   *
* Return Value     : ESA_RC                                   *
*                                                             *
**************************************************************@

ESA_RC ADM_fill_admin_changes (OPTION_typ    fill_def_admin,
							   OPTION_typ    fill_admin);


/***************************************************************
*                                                              *
* Procedure Name : ADM_admin_is_def_admin                      *
*                                                              *
* Description    : If administrator is is an administrator     *
*   			                                               *
* Input          rss_name                                      *
*                admin                                         *
*   			                                               *
* Return Value  : ESA_RC == ESA_OK  if admin is a def_admin    *
*               :        == ESA_EOF if admin is not a def_admin*
*                        == ESA_ERR in other case              *
***************************************************************@

ESA_RC ADM_admin_is_def_admin (RSS_typ     rss_name,
							   USER_typ    admin);


/***************************************************************
*                                                              *
* Procedure Name : ADM_admin_pwd_sync                          *
*                                                              *
* Description    : Administrator password syncronization       *
*   			                                               *
* Input            admin_name                                  *
*   			                                               *
* Return Value   :                                             *
***************************************************************@
ESA_RC ADM_admin_pwd_sync (USER_typ  admin_name);


/***************************************************************
*                                                              *
* Procedure Name : ADM_admin_data_sync                         *
*                                                              *
* Description    : Sync. file of administrators &              *
*                        relevant data in CD/CS                *
*   			                                               *
* Input          : admin_user                                  *
*                  admin_passwd                                *
*   			                                               *
* Return Value   : ESA_RC                                      *
***************************************************************@

ESA_RC ADM_admin_data_sync (USER_typ    admin_user,
                            PASSWD_typ  admin_passwd);

ESA_RC ADM_next_apc (int                * from_rss_num,
					 int                * from_adm_num,
                     MEMBER_ADM_rec_typ * apc_adm_rec);
end of WS10082A ***************/

#endif  /* ACSADM_H_included */
