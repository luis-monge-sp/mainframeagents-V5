/****************************************************
 * Title            : Definitions for the API test program.
 * File Name        : batutls.h
 * Author           : Amir J. Katz
 * Creation Date    : 11-May-94
 *****************************************************/
/* IS10156  SeligT  13/09/17 Allocate ADDINFO Size Correctly         */
/* IS10157  SeligT  17/09/17 Allocate Several Arrays Correctly       */

#ifndef ESA_BATUTLS_H_INCLUDED
#define ESA_BATUTLS_H_INCLUDED

#include ESA_INIT

#ifdef  THIS_IS_MAIN
#define BAT_EXT
#else
#define BAT_EXT extern
#endif

/* File name for communication messages */

#define FILE_MESSAGES  "msgout"

#define TEST_ADDINFO_LIST_ENTRY        '#'   /* ALX004 */
#define TEST_ADDINFO_LIST_SUBFIELD     '@'

#define MAX_KWDS       500

/* How many groups to read in one call of gtugs()  */
/* BS10062 #define MAX_GROUPS      20 */
#define MAX_GROUPS      10

/* How many u-ug connections to read in one call of gtug2uc */
/* BS10062 #define MAX_CONNS       20 */
#define MAX_CONNS       10

/**************************************/
/*          Global Variables          */
/**************************************/

/* Note: All global variable names can't be longer than 7 chars on
 * MVS, so we #define them to shorter names.
 */

/* for MVS only */

#define  NATIVE_RSS   "MVS"

#define  admin_group         admgrp
#define  admin_name          admnam
#define  admin_pass          admpass
#define  admin_lg_req        admlreq
#define  admin_pw_req        admpreq
#define  admin_ptr           admnptr
#define  cs_handle           cshandl
#define  err_ptr             errptr
#define  file_msgs           flemsg
#define  func_struct         funcst
#define  hot_pass            hotpass
#define  mhsiid_cnt          mhsicn
#define  msg_header          msghdr
#define  msg_paramst         msgprmt
#define  nmbr_inc_rss        nmirss
#define  xrss_type           rsstyp
#define  seq_number          seqnmb
#define  serv_type           srvtyp
#define  serv_type_id        srvtid
#define  start_serv          strserv
#define  ENC_activate        encact
#define  adm_load_done       admldn
#define  need_login          ndlgn1
#define  first_login_done    frlgn1
#define  GetPasswordFromFile gtpwff
#define  SYSIN_buffer        ssinbfr
#define  rssname_passed      rssnpsd
#define  rsstype_passed      rsstpsd
#define  admnunm_passed      admupsd
#define  filter_userid_groupid_encountered filtugen
#define  addinfo_keyword_encountered       aikwdenc
#define  filter_conn_encountered           filtcnen
#define  filter_group_encountered          filtgren
#define  filter_user_encountered           filtusen
#define  have_request        hvrqst
#define  reached_EOF         rchdeof
#define  retvalue            rtvlu
#define  retvalueL           rtvlul
#define  retvalueR           rtvlur

/**************************************/
/*           Typedefs                 */
/**************************************/
typedef char KEYWORD_typ [MAX_RSS_ADDINFO_KWD_LEN + 1];
/* BS10062 typedef char VALUE_typ   [160 + 1];                       */
typedef char VALUE_typ   [MAX_RSS_ADDINFO_VAL_LEN + 1];   /* BS10062 */
/* The above definition should be   [MAX_RSS_ADDINFO_VAL_LEN + 1];
   but this is a very large number (4096 or 4400)                    */

typedef enum {undefined,
              LISTACL,
              LISTCONN,
              LISTGROUP,
              LISTRES,
              LISTUSER,
              ADDUSER,
              CHGPWD,
              DELUSER,
              DISABLEUSER,
              ENABLEUSER,
              UNLOCKUSER,
              UPDUSER,
              ADDGROUP,
              DELGROUP,
              UPDGROUP,
              ADDCONN,
              DELCONN,
              UPDCONN
} REQUEST_typ;

typedef struct S_REQUEST_rec_typ {
   REQUEST_typ req_typ;                     /* :request name itself  */
   char        request [30];                /* :request name itself  */
   int         request_type;                /* request type: 1 - 4   */
   char        userid  [9];                 /* from :request line    */
   char        groupid [25];                /* from :request line    */
   char        dflt_grpname [25];           /* from USER.DFLTGRP     */
   char        drop_keepold [8];            /* from DROPOLD/KEEPOLD  */
   PASSWD_typ  password;                    /* from USER.PASSWORD    */
   char        get_conn [2];                /* from USER.GETCONN     */
   PASSWD_LIFE_typ passwd_life;             /* from USER.PASSWORD    */
   USER_STATUS_typ rev_status_dis;          /* from USER.DISABLE     */
   USER_ADMIN_typ  user_admin;              /* from USER.AUTH        */
   OE_typ      par_oe;                      /* from USER.
                                                    PARENT_CONTAINER */
   USER_STATUS_typ rev_status_ena;          /* from USER.ENABLE      */
   USER_STATUS_typ rev_status_unl;          /* from USER.UNLOCK      */
   UG_typ      par_grp;                     /* from GROUP.PARENT     */
   OE_typ      grp_par_oe;                  /* from GROUP.
                                                    PARENT_CONTAINER */
   U2UG_ADMIN_typ  u2ug_admin;              /* from CONN.AUTH        */
   UG_typ      groups_in [MAX_GROUPS];      /* from FILTER.GROUP     */
                                            /* and  FILTER.GROUPID   */
   short       num_groups_in;               /* from FILTER.GROUP
                                               and  FILTER.GROUPID   */
   USER_typ    users_in [MAX_CONNS];        /* from FILTER.USER      */
                                            /* and  FILTER.USERID    */
   short       num_users_in;                /* from FILTER.USER
                                               and  FILTER.USERID    */
   /* If FILTER.CONN=*, then num_groups_in and num_users_in = 0. ??? */
   /* If FILTER.CONN=(userid,groupid), then users_in gets the userid,
      groups_in gets the groupid, and num_users_in/num_groups_in = 1 */
   RESOURCE_typ    resource;                /* from FILTER.RESNAME   */
   RESTYPE_typ     restype;                 /* from FILTER.RESTYPE   */
} REQUEST_rec_typ, * REQUEST_rec_ptr;
  /* MVS */

/* #ifdef THIS_IS_MAIN */

BAT_EXT int        int88       = 0;

BAT_EXT int        init_done   = 0;
BAT_EXT int        is_batch    = 0;
BAT_EXT int        do_menus    = 1;
BAT_EXT int        do_msgs     = 0;
BAT_EXT int        api_lvl     = 0;
BAT_EXT int        tst_lvl     = 0;
BAT_EXT int        seq_number  = 0;
BAT_EXT int        mhsiid_cnt  = 0;

BAT_EXT char       tst_in  [50] = "";
BAT_EXT char       tst_out [50] = "";

BAT_EXT RSS_typ    rssname;
BAT_EXT RSS_typ    xrss_type;      /* = NATIVE_RSS_TYPE;  */

BAT_EXT USER_typ   admin_name       = "Mr.ADMIN";
BAT_EXT USER_typ   admin_uname      = "Mr.ADMIN";
BAT_EXT UG_typ     admin_group      = "ADMINGRP";
BAT_EXT PASSWD_typ admin_pass       = "";
BAT_EXT int        ENC_activate     = 0;
BAT_EXT int        adm_load_done    = 0;
BAT_EXT int        need_login       = 0;
BAT_EXT int        first_login_done = 0;

BAT_EXT char       admin_lg_req[5]  = "Y";
BAT_EXT char       admin_pw_req[5]  = "Y";

BAT_EXT void      *cs_handle        = NULL;

/* ------------------------------------ */

BAT_EXT MH_dcid    mhcid            = {'2', '2'}; /* "XX" is wrong (len=3) */
BAT_EXT MH_aid     mhaid            = 'S';
BAT_EXT MH_wslid   mhwslid          = {'0', '1'}; /* ditto */
BAT_EXT MH_ltl     mhltl            = 'T';
BAT_EXT MH_cmrs    mhcmrs           = '0';
BAT_EXT char       hot_pass         = '1';
BAT_EXT char       serv_type [3]    = "A";
BAT_EXT char       trnid [8]        = "TRID";
BAT_EXT char       actid [8]        = "ACID";
BAT_EXT char       nmbr_inc_rss [4] = "01";

BAT_EXT char       SYSIN_buffer [81];
BAT_EXT char       entries [2500];
BAT_EXT int        reached_EOF;
BAT_EXT int        have_request;
BAT_EXT int        rssname_passed;
BAT_EXT int        rsstype_passed;
BAT_EXT int        admnunm_passed;
BAT_EXT int        filter_userid_groupid_encountered;
BAT_EXT int        addinfo_keyword_encountered;
BAT_EXT int        filter_conn_encountered;
BAT_EXT int        filter_group_encountered;
BAT_EXT int        filter_user_encountered;
BAT_EXT int        ctr;
BAT_EXT int        max_rc;
BAT_EXT char       retvalue  [MAX_RSS_ADDINFO_VAL_LEN+1];
BAT_EXT char       retvalueL [MAX_RSS_ADDINFO_KWD_LEN+1];
BAT_EXT char       retvalueR [MAX_RSS_ADDINFO_VAL_LEN+1];
/* IS10157 BAT_EXT KEYWORD_typ filt_kwd[MAX_KWDS];                   */
BAT_EXT KEYWORD_typ * filt_kwd;                           /* IS10157 */
/* IS10157 BAT_EXT VALUE_typ   filt_val[MAX_KWDS];                   */
BAT_EXT VALUE_typ   * filt_val;                           /* IS10157 */
BAT_EXT int         filt_i;
/* IS10157 BAT_EXT KEYWORD_typ in_kwd  [MAX_KWDS];                   */
BAT_EXT KEYWORD_typ * in_kwd;                             /* IS10157 */
/* IS10157 BAT_EXT VALUE_typ   in_val  [MAX_KWDS];                   */
BAT_EXT VALUE_typ   * in_val;                             /* IS10157 */
BAT_EXT int         in_i;
/* IS10157 BAT_EXT KEYWORD_typ out_kwd [MAX_KWDS];                   */
BAT_EXT KEYWORD_typ * out_kwd;                            /* IS10157 */
BAT_EXT int         out_i;

BAT_EXT REQUEST_rec_typ    * req;

/* #else */

/* extern MH_mtyp              mhmtyp;  */
/* extern MH_rtyp              mhrtyp;  */

/* extern char               * retvalue;                             */
/* extern char               * retvalueL;                            */
/* extern char               * retvalueR;                            */
/* extern char                 filt_kwd[MAX_RSS_ADDINFO_KWD_LEN*MAX_KWDS]; */
/* extern char                 filt_val[160*MAX_KWDS];               */
/* The above definition should be   [MAX_RSS_ADDINFO_VAL_LEN*MAX_KWDS];
   but this is a very large number (4096 or 4400 * 200)              */
/* extern char                 in_kwd  [MAX_RSS_ADDINFO_KWD_LEN*MAX_KWDS]; */
/* extern char                 in_val  [160*MAX_KWDS];               */
/* The above definition should be   [MAX_RSS_ADDINFO_VAL_LEN*MAX_KWDS];
   but this is a very large number (4096 or 4400 * 200)              */
/* extern char                 out_kwd [MAX_RSS_ADDINFO_KWD_LEN*MAX_KWDS]; */

/* #endif // THIS_IS_MAIN */

BAT_EXT  FILE                   *file_msgs;
BAT_EXT  ERR_STRUCT_rec_typ     *err_ptr;
BAT_EXT  ADMIN_PARAMS_rec_typ   *admin_ptr;
BAT_EXT  CTSAMSG_PARAMS_rec_typ  msg_paramst;
BAT_EXT  FUNC_PTR_rec_typ        func_struct;

BAT_EXT  RSS_MSG_HDR_rec_typ     msg_header;
BAT_EXT  char                    serv_type_id [2];

/* File descriptors for all terminal I/O */

BAT_EXT  FILE * fdin;
BAT_EXT  FILE * fdout;
BAT_EXT  FILE * fderr;

/**************************************/
/*          Definitions               */
/**************************************/

/* These platforms need resource type in getres/gtrsacl calls */

#if 1                 /* everybody needs resource type */
#define NEED_RES_TYPE
#endif

/* These RSS types need additional info to locate a resource in updres,
 * or need resource addinfo in gtrsacl and add/upd/delace calls.
 */

/* for MVS only */
#define NEED_RES_ADDINFO
 /* MVS */

/* These RSS types need ACE position in addace() call */

#if (defined (VAXVMS) || defined (MVS) ) && !defined(NEED_ACE_POSITION)
#define NEED_ACE_POSITION
#endif

/* These RSS types always need addinfo on user operations */

/* for MVS only */
#define USER_OPS_NEED_ADDINFO
 /* MVS */

/* These RSS types always need addinfo on group operations */

/* for MVS only */
#define UG_OPS_NEED_ADDINFO
 /* MVS */

/* These RSS types always need parent group in group operations */

#define UG_OPS_NEED_PARENT_UG

/* These RSS types always need addinfo on user-to-group operations */

/* for MVS only */
#define CONN_OPS_NEED_ADDINFO

/* These RSS types need revoke_status when updating a user */

/* for MVS only */
#define UPDUSER_NEEDS_REVSTAT
 /* MVS */

/* These RSS types need a new password when restoring a user.
 * Note: Most Unixen do, AIX does not
 */

/* These RSS types need password lifespan (permanent/reset) */
/* Most Unixen do */

#undef UX_NEEDS_PASSWD_LIFE


/* for MVS only */
#define VMSMVSWINNT
 /* MVS */

#if defined (VMSMVSWINNT) || defined (UX_NEEDS_PASSWD_LIFE)
#define NEED_PASSWD_LIFE
#endif

/* These RSS types and/or platforms need
 OS_CS_init/term (in batloc.c) */

/* for MVS only */
#define NEED_OS_CS_INIT
 /* MVS */

/* Default resource type for getres/gtrsacl API calls */

#ifdef NEED_RES_TYPE

/* for MVS only */
#define  DEFAULT_RES_TYPE  "DATASET"
 /* MVS */

#endif /* NEED_RES_TYPE */

/* Binary file from which diag levels are read */

#define DIAG_LEVELS_FILE  "diaglvl"

/**************************************/
/*          Constants                 */
/**************************************/

/* Max # of ADDINFO keywords */

/* for MVS only */

/* How many users or groups we can read from stdin */
#define MAX_MANY        50

/* How many OEs to read in one call of gtoes() */
#define MAX_OES         20

/* How many users to read in one call of gtusers() */
/* BS10062 #define MAX_USERS       20 */
#define MAX_USERS       10


/* How many ACEs can we expect in gtrscal() calls. Depends on the OS.
 * - On poor SunOS - No ACLs, just your basic 3 ACEs;
 * - On HP-UX      - Up to 16 ACEs;
 * - On AIX        - Can't really tell, but lots of.
 */

#define MAX_ACES        32



/**************************************/
/*           Macros                   */
/**************************************/

#define PR_MSG(retch)                  \
   printf("\nAPI msg(s):\n");          \
   utl_error_print (err_ptr);

#define CLEAN_ERR                         \
   err_ptr->err_msg_text [0] = NULL_CHAR; \
   err_ptr->length           = 0;

#define CK_RC(retch, msg)                                          \
   if ((retch) NE ESA_OK) {                                        \
      fprintf (fderr, "\nAPI call %s failed, return code = %ld\n", \
              (msg), (retch));                                     \
       printf        ("\nAPI call %s failed, return code = %ld\n", \
              (msg), (retch));                                     \
   }                                                               \
   else {                                                          \
      fprintf (fderr, "\nAPI call %s OK\n", (msg));                \
       printf        ("\nAPI call %s OK\n", (msg));                \
   }

#define my_printf(msg)   fputs (msg, fdout)

#define menu_printf(msg) if (do_menus) fputs (msg, fdout)

#define ALLOC_DUMMY_ADDINFO(PTR)                                \
   (PTR) = (ADDINFO_rec_typ *)malloc (sizeof (ADDINFO_rec_typ));\
   (PTR)->num_pairs = 0;

/* API prologue & epilogue */

#define API_PROLOG                                         \
   if (admin_lg_req[0] EQ 'Y')                             \
     rc1 = (*func_struct.rss_login_ptr) (rssname,          \
                      admin_name, admin_group, admin_pass, \
                      LOGIN_MODE,                          \
                      &cs_handle, admin_ptr, err_ptr);     \
   else                                                    \
     rc1 = ESA_OK;                                         \
   admin_ptr->login_handle = cs_handle;                    \
   fflush (fdout)

#define API_EPILOG                                             \
   if (admin_lg_req[0] EQ 'Y')                                 \
     rc1 = (*func_struct.rss_logout_ptr) (rssname, admin_name, \
                                          admin_group,         \
                                          LOGOUT_MODE,         \
                                          &cs_handle,          \
                                          admin_ptr, err_ptr); \
     admin_ptr->login_handle = cs_handle

#define LOGOUT_LAST                                         \
     if (first_login_done) {                                \
        (*func_struct.rss_logout_ptr) (rssname, admin_name, \
                       admin_group, LOGOUT_MODE_LAST,       \
                       &cs_handle,  admin_ptr, err_ptr);    \
        admin_ptr->login_handle = cs_handle;                \
     }                                                      \
     first_login_done = 0;                                  \
     admin_lg_req[0] = 'Y';

/**************************************/
/*       External Functions           */
/**************************************/

/* for MVS only */

/* Define 7-character names for external functions */

#define localinit                lclinit
#define localterm                lclterm
#define nuke_addinfo_values      nukeaiv
#define nuke_res_params          nukersp
#define nuke_u2ug_details        nukeu2d
#define nuke_ug_details          nukeugd
#define nuke_oe_details          nukeoed
#define nuke_user_details        nukeusd
#define pr_u2ug_details          prtu2ug
#define dump_ace_type            datype
#define dump_ace_attrs           daattrs
#define prompt_for_num           prmptnm
#define prompt_for_string        prmptst
#define pwd_stat_2_str           pws2str
#define tst_do_group             tdug
#define tst_do_rsprms            tdsrsp
#define tst_do_list_groups       tdlug
#define tst_do_list_resacl       tdlrs
#define tst_do_list_u2ug         tdlu2ug
#define tst_do_list_users        tdlu
#define tst_do_list_oes          tdloe
#define tst_do_list_rsprms       tdlrsp
#define tst_do_pass              tdpass
#define tst_do_res               tdres
#define tst_do_script            tdscrpt
#define tst_do_os_ofli           tdosofli
#define tst_do_u2ug              tdu2
#define tst_do_oe                tdoe
#define tst_do_user              tdus
#define user_auth_2_str          ua2str
#define utl_dump_addinfo         udumpad
#define utl_error_print          uterrpr
#define utl_get_addinfo          ugetad
#define utl_insert_addinfo       utinsai
#define utl_obtain_addinfo_pairs uoap
#define utl_obtain_addinfo_kwds  uoak
#define utl_prompt_addinfo_pairs upap
#define utl_prompt_addinfo_kwds  upak

#define build_msg_header         bldmhdr
#define msgs_ace                 mgace
#define msgs_getres              mggtres
#define msgs_getugs              mggtgrp
#define msgs_group               mggrp
#define msgs_gtrsacl             mggtacl
#define msgs_gtug2uc             mggtcnn
#define msgs_gtusers             mggtusr
#define msgs_u2ug                mgconn
#define msgs_updres              mgupres
#define msgs_user                mguser
#define msgs_pmp                 mgpump

#define pmp_get_grp              mgggrp
#define pmp_get_usr              mggusr
#define pmp_get_u2ug             mggu2g
#define get_keywords             getkwds
#define tst_pmp                  mgtpmp
#define tst_gls                  mgtgls
#define tst_kwd                  mgtkwd

#define kwd_prompt_keywords          pkwd1
#define msgs_kwd                     msgkwd1

#define gls_prompt_user_check_sum    gls1
#define gls_prompt_group_check_sum   gls2
#define gls_prompt_u2ug_check_sum    gls3
#define msgs_gls                     msggls

#define write_end_service        wrtesrv
#define write_start_service      wrtssrv

 /* MVS */
/* IS10156 remove the first parameter of the following routine
extern ESA_RC utl_obtain_addinfo_pairs (int                max_pairs, */
extern ESA_RC utl_obtain_addinfo_pairs (ADDINFO_rec_typ ** aip,
                                        int              * n_pairs,
                                        KEYWORD_typ      * kwd_arr,
                                        VALUE_typ        * val_arr,
                                        int                num_pairs);

/* IS10156 remove the first parameter of the following routine
extern ESA_RC utl_obtain_addinfo_kwds (int                max_pairs, */
extern ESA_RC utl_obtain_addinfo_kwds (ADDINFO_rec_typ ** aip,
                                       int              * n_pairs,
                                       KEYWORD_typ      * kwd_arr,
                                       int                num_pairs);

extern void   utl_dump_addinfo (ADDINFO_rec_typ * bp);

extern ESA_RC utl_get_addinfo (int                n_users,
                               ADDINFO_rec_ptr ** addinfo_ptr_array);

extern const char * type2asc (ADDINFO_typ the_type);

extern ESA_RC get_addinfo_type (RSSAPI_KWD_rec_ptr envir_keywrds,
                                int                envir_kwd_num,
                                char             * keyword,
                                char             * addtyp,
                                ADDINFO_typ      * the_type);

extern void parse_kwd_line (char    * kwd_line,
                            RSS_typ   rss,
                            char    * api_code,
                            char    * chksum_flg,
                            char    * addinfo_typ,
                            char    * kwd_name);

extern ESA_RC get_keywords  (void);

extern ESA_RC save_keywords (int  * kwds_cnt,
                             char * rss,
                             char * api_code,
                             char * kwd_type,
                             char * addinfo_type,
                             char * kwd_name);

static void get_rss_keywords (int apicode);

extern void   trim_blanks  (char * const str);

extern char * trim_leading (char * s);

extern void dump_ace_type (ACE_TYPE_typ at);

extern void dump_ace_attrs (ACE_ATTR_typ ace_attrs);

extern int    read_line (void);

extern ESA_RC env_rtn   (void);

extern ESA_RC req_rtn   (void);

extern void nuke_req_details (void);

extern ESA_RC parse_process_request_line (void);

extern ESA_RC rpl_addinfo_loop           (void);

extern ESA_RC process_rpl_addinfo_line   (void);

extern ESA_RC parse_rpl_addinfo_line     (int call_type);

extern void utl_error_print (ERR_STRUCT_rec_typ * errx);

extern void utl_request_details (void);

extern void utl_insert_addinfo (const char        * kwd,
                                const char        * val,
                                ADDINFO_typ         the_type,
                                ONE_FIELD_rec_ptr * f_ptr,
                                short             * num_pairs);

extern void UpdListVal         (char * val);

extern char * ConvertList       (char * value, ADDINFO_typ add_typ);

extern void nuke_addinfo_values (ADDINFO_rec_ptr * addinfo_ptr_array,
                                 int               num_structs);

extern void nuke_oe_details     (OE_PARAMS_rec_typ * oe_params,
                                 int                 num_elems);

extern void nuke_user_details   (USER_PARAMS_rec_typ * user_params,
                                 int                   num_elems);

extern void nuke_ug_details     (UG_PARAMS_rec_typ * ug_params,
                                 int                 num_elems);

extern void nuke_u2ug_details   (U2UG_PARAMS_rec_typ * u2ug_params,
                                 int                   num_elems);

extern void nuke_res_params     (RES_PARAMS_rec_typ * res_params,
                                 int                  num_elems);

extern void pr_u2ug_details     (U2UG_PARAMS_rec_typ * u2ug_data);

extern const char * user_auth_2_str (USER_ADMIN_typ ai);

extern const char * pwd_stat_2_str (PASSWD_LIFE_typ ai);

extern const char * user_stat_2_string (USER_STATUS_typ statx);

extern ESA_RC localinit (int argc_prm, char ** argv_prm);

extern ESA_RC localterm (int max_rc); /* added the parameter BS10062 */

extern void pr_logo     (void);

/* Top-level functions for API calls */

extern ESA_RC adduser_rtn      (void);
extern ESA_RC upduser_rtn      (void);
extern ESA_RC deluser_rtn      (void);
extern ESA_RC disableuser_rtn  (void);
extern ESA_RC enableuser_rtn   (void);
extern ESA_RC unlockuser_rtn   (void);
extern ESA_RC addgroup_rtn     (void);
extern ESA_RC delgroup_rtn     (void);
extern ESA_RC updgroup_rtn     (void);
extern ESA_RC addconn_rtn      (void);
extern ESA_RC delconn_rtn      (void);
extern ESA_RC updconn_rtn      (void);
extern ESA_RC listacl_rtn      (void);
extern ESA_RC listconn_rtn     (void);
extern ESA_RC listgroup_rtn    (void);
extern ESA_RC listres_rtn      (void);
extern ESA_RC listuser_rtn     (void);
extern ESA_RC chgpwd_rtn       (void);


/* Message building functions */

extern void build_msg_header    (void);
extern void write_start_service (void);
extern void write_end_service   (void);

extern void msgs_gtusers (GET_USER_MODE       mode,
                          short               n_users_in,
                          USER_PARAMS_rec_typ user_params_in[1]);

extern void msgs_getugs (GET_GROUP_MODE    mode,
                         short             n_groups,
                         UG_PARAMS_rec_typ ug_params_in[1]);

extern void msgs_gtug2uc (GET_CONN_MODE   mode,
                          short           num_ugs_in,
                          short           num_users_in,
                          UG_typ          group[1],
                          USER_typ        user[1]);

extern void msgs_getres (RES_PARAMS_rec_typ * res_params_in,
                         ADDINFO_rec_typ    * addinfo_in);

extern void msgs_gtrsacl (RES_PARAMS_rec_ptr   res_params);

extern void msgs_user (char                  type,
                       USER_PARAMS_rec_typ * user_params,
                       ADDINFO_rec_typ     * addinfo);

extern void msgs_u2ug (char                  type,
                       UG_typ                group,
                       USER_typ              user,
                       U2UG_PARAMS_rec_typ * u2ug_data,
                       ADDINFO_rec_ptr       addinfo);

extern void msgs_group (char                type,
                        UG_PARAMS_rec_typ * ug_params_in,
                        ADDINFO_rec_ptr     addinfo);

extern void msgs_updres (RES_PARAMS_rec_typ * res_params,
                         ADDINFO_rec_typ    * addinfo);

extern void msgs_ace (char                 type,
                      ACE_POS_typ          pos,
                      RES_PARAMS_rec_typ * res_params,
                      ACE_rec_typ        * new_ace,
                      ADDINFO_rec_typ    * new_addinfo,
                      ACE_rec_typ        * old_ace,
                      ADDINFO_rec_typ    * old_addinfo);


void kwd_prompt_keywords (void);

void  msgs_kwd (int   cnt,
                char  type[1][3],
                char  kwd[1][50],
                char  M_T,
                char  R_T);

#endif /* ESA_BATUTLS_H_INCLUDED */
